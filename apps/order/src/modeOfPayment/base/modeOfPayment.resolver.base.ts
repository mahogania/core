/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ModeOfPayment } from "./ModeOfPayment";
import { ModeOfPaymentCountArgs } from "./ModeOfPaymentCountArgs";
import { ModeOfPaymentFindManyArgs } from "./ModeOfPaymentFindManyArgs";
import { ModeOfPaymentFindUniqueArgs } from "./ModeOfPaymentFindUniqueArgs";
import { CreateModeOfPaymentArgs } from "./CreateModeOfPaymentArgs";
import { UpdateModeOfPaymentArgs } from "./UpdateModeOfPaymentArgs";
import { DeleteModeOfPaymentArgs } from "./DeleteModeOfPaymentArgs";
import { ModeOfPaymentService } from "../modeOfPayment.service";
@graphql.Resolver(() => ModeOfPayment)
export class ModeOfPaymentResolverBase {
  constructor(protected readonly service: ModeOfPaymentService) {}

  async _modeOfPaymentsMeta(
    @graphql.Args() args: ModeOfPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ModeOfPayment])
  async modeOfPayments(
    @graphql.Args() args: ModeOfPaymentFindManyArgs
  ): Promise<ModeOfPayment[]> {
    return this.service.modeOfPayments(args);
  }

  @graphql.Query(() => ModeOfPayment, { nullable: true })
  async modeOfPayment(
    @graphql.Args() args: ModeOfPaymentFindUniqueArgs
  ): Promise<ModeOfPayment | null> {
    const result = await this.service.modeOfPayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ModeOfPayment)
  async createModeOfPayment(
    @graphql.Args() args: CreateModeOfPaymentArgs
  ): Promise<ModeOfPayment> {
    return await this.service.createModeOfPayment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ModeOfPayment)
  async updateModeOfPayment(
    @graphql.Args() args: UpdateModeOfPaymentArgs
  ): Promise<ModeOfPayment | null> {
    try {
      return await this.service.updateModeOfPayment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ModeOfPayment)
  async deleteModeOfPayment(
    @graphql.Args() args: DeleteModeOfPaymentArgs
  ): Promise<ModeOfPayment | null> {
    try {
      return await this.service.deleteModeOfPayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
