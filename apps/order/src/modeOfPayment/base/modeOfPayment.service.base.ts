/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ModeOfPayment as PrismaModeOfPayment } from "@prisma/client";

export class ModeOfPaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModeOfPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.modeOfPayment.count(args);
  }

  async modeOfPayments(
    args: Prisma.ModeOfPaymentFindManyArgs
  ): Promise<PrismaModeOfPayment[]> {
    return this.prisma.modeOfPayment.findMany(args);
  }
  async modeOfPayment(
    args: Prisma.ModeOfPaymentFindUniqueArgs
  ): Promise<PrismaModeOfPayment | null> {
    return this.prisma.modeOfPayment.findUnique(args);
  }
  async createModeOfPayment(
    args: Prisma.ModeOfPaymentCreateArgs
  ): Promise<PrismaModeOfPayment> {
    return this.prisma.modeOfPayment.create(args);
  }
  async updateModeOfPayment(
    args: Prisma.ModeOfPaymentUpdateArgs
  ): Promise<PrismaModeOfPayment> {
    return this.prisma.modeOfPayment.update(args);
  }
  async deleteModeOfPayment(
    args: Prisma.ModeOfPaymentDeleteArgs
  ): Promise<PrismaModeOfPayment> {
    return this.prisma.modeOfPayment.delete(args);
  }
}
