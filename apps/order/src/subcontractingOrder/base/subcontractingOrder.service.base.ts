/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SubcontractingOrder as PrismaSubcontractingOrder,
} from "@prisma/client";

export class SubcontractingOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubcontractingOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subcontractingOrder.count(args);
  }

  async subcontractingOrders(
    args: Prisma.SubcontractingOrderFindManyArgs
  ): Promise<PrismaSubcontractingOrder[]> {
    return this.prisma.subcontractingOrder.findMany(args);
  }
  async subcontractingOrder(
    args: Prisma.SubcontractingOrderFindUniqueArgs
  ): Promise<PrismaSubcontractingOrder | null> {
    return this.prisma.subcontractingOrder.findUnique(args);
  }
  async createSubcontractingOrder(
    args: Prisma.SubcontractingOrderCreateArgs
  ): Promise<PrismaSubcontractingOrder> {
    return this.prisma.subcontractingOrder.create(args);
  }
  async updateSubcontractingOrder(
    args: Prisma.SubcontractingOrderUpdateArgs
  ): Promise<PrismaSubcontractingOrder> {
    return this.prisma.subcontractingOrder.update(args);
  }
  async deleteSubcontractingOrder(
    args: Prisma.SubcontractingOrderDeleteArgs
  ): Promise<PrismaSubcontractingOrder> {
    return this.prisma.subcontractingOrder.delete(args);
  }
}
