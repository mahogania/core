/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubcontractingOrderService } from "../subcontractingOrder.service";
import { SubcontractingOrderCreateInput } from "./SubcontractingOrderCreateInput";
import { SubcontractingOrder } from "./SubcontractingOrder";
import { SubcontractingOrderFindManyArgs } from "./SubcontractingOrderFindManyArgs";
import { SubcontractingOrderWhereUniqueInput } from "./SubcontractingOrderWhereUniqueInput";
import { SubcontractingOrderUpdateInput } from "./SubcontractingOrderUpdateInput";

export class SubcontractingOrderControllerBase {
  constructor(protected readonly service: SubcontractingOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubcontractingOrder })
  async createSubcontractingOrder(
    @common.Body() data: SubcontractingOrderCreateInput
  ): Promise<SubcontractingOrder> {
    return await this.service.createSubcontractingOrder({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubcontractingOrder] })
  @ApiNestedQuery(SubcontractingOrderFindManyArgs)
  async subcontractingOrders(
    @common.Req() request: Request
  ): Promise<SubcontractingOrder[]> {
    const args = plainToClass(SubcontractingOrderFindManyArgs, request.query);
    return this.service.subcontractingOrders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subcontractingOrder(
    @common.Param() params: SubcontractingOrderWhereUniqueInput
  ): Promise<SubcontractingOrder | null> {
    const result = await this.service.subcontractingOrder({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubcontractingOrder(
    @common.Param() params: SubcontractingOrderWhereUniqueInput,
    @common.Body() data: SubcontractingOrderUpdateInput
  ): Promise<SubcontractingOrder | null> {
    try {
      return await this.service.updateSubcontractingOrder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubcontractingOrder(
    @common.Param() params: SubcontractingOrderWhereUniqueInput
  ): Promise<SubcontractingOrder | null> {
    try {
      return await this.service.deleteSubcontractingOrder({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
