/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesPartnerService } from "../salesPartner.service";
import { SalesPartnerCreateInput } from "./SalesPartnerCreateInput";
import { SalesPartner } from "./SalesPartner";
import { SalesPartnerFindManyArgs } from "./SalesPartnerFindManyArgs";
import { SalesPartnerWhereUniqueInput } from "./SalesPartnerWhereUniqueInput";
import { SalesPartnerUpdateInput } from "./SalesPartnerUpdateInput";

export class SalesPartnerControllerBase {
  constructor(protected readonly service: SalesPartnerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesPartner })
  async createSalesPartner(
    @common.Body() data: SalesPartnerCreateInput
  ): Promise<SalesPartner> {
    return await this.service.createSalesPartner({
      data: data,
      select: {
        commissionRate: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        introduction: true,
        logo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        partnerName: true,
        partnerType: true,
        partnerWebsite: true,
        referralCode: true,
        route: true,
        showInWebsite: true,
        territory: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesPartner] })
  @ApiNestedQuery(SalesPartnerFindManyArgs)
  async salesPartners(@common.Req() request: Request): Promise<SalesPartner[]> {
    const args = plainToClass(SalesPartnerFindManyArgs, request.query);
    return this.service.salesPartners({
      ...args,
      select: {
        commissionRate: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        introduction: true,
        logo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        partnerName: true,
        partnerType: true,
        partnerWebsite: true,
        referralCode: true,
        route: true,
        showInWebsite: true,
        territory: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesPartner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesPartner(
    @common.Param() params: SalesPartnerWhereUniqueInput
  ): Promise<SalesPartner | null> {
    const result = await this.service.salesPartner({
      where: params,
      select: {
        commissionRate: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        introduction: true,
        logo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        partnerName: true,
        partnerType: true,
        partnerWebsite: true,
        referralCode: true,
        route: true,
        showInWebsite: true,
        territory: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesPartner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesPartner(
    @common.Param() params: SalesPartnerWhereUniqueInput,
    @common.Body() data: SalesPartnerUpdateInput
  ): Promise<SalesPartner | null> {
    try {
      return await this.service.updateSalesPartner({
        where: params,
        data: data,
        select: {
          commissionRate: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          introduction: true,
          logo: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          partnerName: true,
          partnerType: true,
          partnerWebsite: true,
          referralCode: true,
          route: true,
          showInWebsite: true,
          territory: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesPartner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesPartner(
    @common.Param() params: SalesPartnerWhereUniqueInput
  ): Promise<SalesPartner | null> {
    try {
      return await this.service.deleteSalesPartner({
        where: params,
        select: {
          commissionRate: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          introduction: true,
          logo: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          partnerName: true,
          partnerType: true,
          partnerWebsite: true,
          referralCode: true,
          route: true,
          showInWebsite: true,
          territory: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
