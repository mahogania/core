/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesPartner } from "./SalesPartner";
import { SalesPartnerCountArgs } from "./SalesPartnerCountArgs";
import { SalesPartnerFindManyArgs } from "./SalesPartnerFindManyArgs";
import { SalesPartnerFindUniqueArgs } from "./SalesPartnerFindUniqueArgs";
import { CreateSalesPartnerArgs } from "./CreateSalesPartnerArgs";
import { UpdateSalesPartnerArgs } from "./UpdateSalesPartnerArgs";
import { DeleteSalesPartnerArgs } from "./DeleteSalesPartnerArgs";
import { SalesPartnerService } from "../salesPartner.service";
@graphql.Resolver(() => SalesPartner)
export class SalesPartnerResolverBase {
  constructor(protected readonly service: SalesPartnerService) {}

  async _salesPartnersMeta(
    @graphql.Args() args: SalesPartnerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesPartner])
  async salesPartners(
    @graphql.Args() args: SalesPartnerFindManyArgs
  ): Promise<SalesPartner[]> {
    return this.service.salesPartners(args);
  }

  @graphql.Query(() => SalesPartner, { nullable: true })
  async salesPartner(
    @graphql.Args() args: SalesPartnerFindUniqueArgs
  ): Promise<SalesPartner | null> {
    const result = await this.service.salesPartner(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesPartner)
  async createSalesPartner(
    @graphql.Args() args: CreateSalesPartnerArgs
  ): Promise<SalesPartner> {
    return await this.service.createSalesPartner({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesPartner)
  async updateSalesPartner(
    @graphql.Args() args: UpdateSalesPartnerArgs
  ): Promise<SalesPartner | null> {
    try {
      return await this.service.updateSalesPartner({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesPartner)
  async deleteSalesPartner(
    @graphql.Args() args: DeleteSalesPartnerArgs
  ): Promise<SalesPartner | null> {
    try {
      return await this.service.deleteSalesPartner(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
