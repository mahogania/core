/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InvoiceDiscountingService } from "../invoiceDiscounting.service";
import { InvoiceDiscountingCreateInput } from "./InvoiceDiscountingCreateInput";
import { InvoiceDiscounting } from "./InvoiceDiscounting";
import { InvoiceDiscountingFindManyArgs } from "./InvoiceDiscountingFindManyArgs";
import { InvoiceDiscountingWhereUniqueInput } from "./InvoiceDiscountingWhereUniqueInput";
import { InvoiceDiscountingUpdateInput } from "./InvoiceDiscountingUpdateInput";

export class InvoiceDiscountingControllerBase {
  constructor(protected readonly service: InvoiceDiscountingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InvoiceDiscounting })
  async createInvoiceDiscounting(
    @common.Body() data: InvoiceDiscountingCreateInput
  ): Promise<InvoiceDiscounting> {
    return await this.service.createInvoiceDiscounting({
      data: data,
      select: {
        accountsReceivableCredit: true,
        accountsReceivableDiscounted: true,
        accountsReceivableUnpaid: true,
        amendedFrom: true,
        bankAccount: true,
        bankCharges: true,
        bankChargesAccount: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        loanEndDate: true,
        loanPeriod: true,
        loanStartDate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        postingDate: true,
        shortTermLoan: true,
        status: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InvoiceDiscounting] })
  @ApiNestedQuery(InvoiceDiscountingFindManyArgs)
  async invoiceDiscountings(
    @common.Req() request: Request
  ): Promise<InvoiceDiscounting[]> {
    const args = plainToClass(InvoiceDiscountingFindManyArgs, request.query);
    return this.service.invoiceDiscountings({
      ...args,
      select: {
        accountsReceivableCredit: true,
        accountsReceivableDiscounted: true,
        accountsReceivableUnpaid: true,
        amendedFrom: true,
        bankAccount: true,
        bankCharges: true,
        bankChargesAccount: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        loanEndDate: true,
        loanPeriod: true,
        loanStartDate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        postingDate: true,
        shortTermLoan: true,
        status: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InvoiceDiscounting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async invoiceDiscounting(
    @common.Param() params: InvoiceDiscountingWhereUniqueInput
  ): Promise<InvoiceDiscounting | null> {
    const result = await this.service.invoiceDiscounting({
      where: params,
      select: {
        accountsReceivableCredit: true,
        accountsReceivableDiscounted: true,
        accountsReceivableUnpaid: true,
        amendedFrom: true,
        bankAccount: true,
        bankCharges: true,
        bankChargesAccount: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        loanEndDate: true,
        loanPeriod: true,
        loanStartDate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        postingDate: true,
        shortTermLoan: true,
        status: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InvoiceDiscounting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInvoiceDiscounting(
    @common.Param() params: InvoiceDiscountingWhereUniqueInput,
    @common.Body() data: InvoiceDiscountingUpdateInput
  ): Promise<InvoiceDiscounting | null> {
    try {
      return await this.service.updateInvoiceDiscounting({
        where: params,
        data: data,
        select: {
          accountsReceivableCredit: true,
          accountsReceivableDiscounted: true,
          accountsReceivableUnpaid: true,
          amendedFrom: true,
          bankAccount: true,
          bankCharges: true,
          bankChargesAccount: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          loanEndDate: true,
          loanPeriod: true,
          loanStartDate: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          postingDate: true,
          shortTermLoan: true,
          status: true,
          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InvoiceDiscounting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInvoiceDiscounting(
    @common.Param() params: InvoiceDiscountingWhereUniqueInput
  ): Promise<InvoiceDiscounting | null> {
    try {
      return await this.service.deleteInvoiceDiscounting({
        where: params,
        select: {
          accountsReceivableCredit: true,
          accountsReceivableDiscounted: true,
          accountsReceivableUnpaid: true,
          amendedFrom: true,
          bankAccount: true,
          bankCharges: true,
          bankChargesAccount: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          loanEndDate: true,
          loanPeriod: true,
          loanStartDate: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          postingDate: true,
          shortTermLoan: true,
          status: true,
          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
