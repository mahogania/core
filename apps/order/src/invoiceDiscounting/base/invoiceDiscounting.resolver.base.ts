/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InvoiceDiscounting } from "./InvoiceDiscounting";
import { InvoiceDiscountingCountArgs } from "./InvoiceDiscountingCountArgs";
import { InvoiceDiscountingFindManyArgs } from "./InvoiceDiscountingFindManyArgs";
import { InvoiceDiscountingFindUniqueArgs } from "./InvoiceDiscountingFindUniqueArgs";
import { CreateInvoiceDiscountingArgs } from "./CreateInvoiceDiscountingArgs";
import { UpdateInvoiceDiscountingArgs } from "./UpdateInvoiceDiscountingArgs";
import { DeleteInvoiceDiscountingArgs } from "./DeleteInvoiceDiscountingArgs";
import { InvoiceDiscountingService } from "../invoiceDiscounting.service";
@graphql.Resolver(() => InvoiceDiscounting)
export class InvoiceDiscountingResolverBase {
  constructor(protected readonly service: InvoiceDiscountingService) {}

  async _invoiceDiscountingsMeta(
    @graphql.Args() args: InvoiceDiscountingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InvoiceDiscounting])
  async invoiceDiscountings(
    @graphql.Args() args: InvoiceDiscountingFindManyArgs
  ): Promise<InvoiceDiscounting[]> {
    return this.service.invoiceDiscountings(args);
  }

  @graphql.Query(() => InvoiceDiscounting, { nullable: true })
  async invoiceDiscounting(
    @graphql.Args() args: InvoiceDiscountingFindUniqueArgs
  ): Promise<InvoiceDiscounting | null> {
    const result = await this.service.invoiceDiscounting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InvoiceDiscounting)
  async createInvoiceDiscounting(
    @graphql.Args() args: CreateInvoiceDiscountingArgs
  ): Promise<InvoiceDiscounting> {
    return await this.service.createInvoiceDiscounting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InvoiceDiscounting)
  async updateInvoiceDiscounting(
    @graphql.Args() args: UpdateInvoiceDiscountingArgs
  ): Promise<InvoiceDiscounting | null> {
    try {
      return await this.service.updateInvoiceDiscounting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvoiceDiscounting)
  async deleteInvoiceDiscounting(
    @graphql.Args() args: DeleteInvoiceDiscountingArgs
  ): Promise<InvoiceDiscounting | null> {
    try {
      return await this.service.deleteInvoiceDiscounting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
