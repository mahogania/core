/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseReceiptItem } from "./PurchaseReceiptItem";
import { PurchaseReceiptItemCountArgs } from "./PurchaseReceiptItemCountArgs";
import { PurchaseReceiptItemFindManyArgs } from "./PurchaseReceiptItemFindManyArgs";
import { PurchaseReceiptItemFindUniqueArgs } from "./PurchaseReceiptItemFindUniqueArgs";
import { CreatePurchaseReceiptItemArgs } from "./CreatePurchaseReceiptItemArgs";
import { UpdatePurchaseReceiptItemArgs } from "./UpdatePurchaseReceiptItemArgs";
import { DeletePurchaseReceiptItemArgs } from "./DeletePurchaseReceiptItemArgs";
import { PurchaseReceiptItemService } from "../purchaseReceiptItem.service";
@graphql.Resolver(() => PurchaseReceiptItem)
export class PurchaseReceiptItemResolverBase {
  constructor(protected readonly service: PurchaseReceiptItemService) {}

  async _purchaseReceiptItemsMeta(
    @graphql.Args() args: PurchaseReceiptItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseReceiptItem])
  async purchaseReceiptItems(
    @graphql.Args() args: PurchaseReceiptItemFindManyArgs
  ): Promise<PurchaseReceiptItem[]> {
    return this.service.purchaseReceiptItems(args);
  }

  @graphql.Query(() => PurchaseReceiptItem, { nullable: true })
  async purchaseReceiptItem(
    @graphql.Args() args: PurchaseReceiptItemFindUniqueArgs
  ): Promise<PurchaseReceiptItem | null> {
    const result = await this.service.purchaseReceiptItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseReceiptItem)
  async createPurchaseReceiptItem(
    @graphql.Args() args: CreatePurchaseReceiptItemArgs
  ): Promise<PurchaseReceiptItem> {
    return await this.service.createPurchaseReceiptItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseReceiptItem)
  async updatePurchaseReceiptItem(
    @graphql.Args() args: UpdatePurchaseReceiptItemArgs
  ): Promise<PurchaseReceiptItem | null> {
    try {
      return await this.service.updatePurchaseReceiptItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseReceiptItem)
  async deletePurchaseReceiptItem(
    @graphql.Args() args: DeletePurchaseReceiptItemArgs
  ): Promise<PurchaseReceiptItem | null> {
    try {
      return await this.service.deletePurchaseReceiptItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
