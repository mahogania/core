/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosPaymentMethodService } from "../posPaymentMethod.service";
import { PosPaymentMethodCreateInput } from "./PosPaymentMethodCreateInput";
import { PosPaymentMethod } from "./PosPaymentMethod";
import { PosPaymentMethodFindManyArgs } from "./PosPaymentMethodFindManyArgs";
import { PosPaymentMethodWhereUniqueInput } from "./PosPaymentMethodWhereUniqueInput";
import { PosPaymentMethodUpdateInput } from "./PosPaymentMethodUpdateInput";

export class PosPaymentMethodControllerBase {
  constructor(protected readonly service: PosPaymentMethodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosPaymentMethod })
  async createPosPaymentMethod(
    @common.Body() data: PosPaymentMethodCreateInput
  ): Promise<PosPaymentMethod> {
    return await this.service.createPosPaymentMethod({
      data: data,
      select: {
        allowInReturns: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        docStatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosPaymentMethod] })
  @ApiNestedQuery(PosPaymentMethodFindManyArgs)
  async posPaymentMethods(
    @common.Req() request: Request
  ): Promise<PosPaymentMethod[]> {
    const args = plainToClass(PosPaymentMethodFindManyArgs, request.query);
    return this.service.posPaymentMethods({
      ...args,
      select: {
        allowInReturns: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        docStatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosPaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posPaymentMethod(
    @common.Param() params: PosPaymentMethodWhereUniqueInput
  ): Promise<PosPaymentMethod | null> {
    const result = await this.service.posPaymentMethod({
      where: params,
      select: {
        allowInReturns: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        docStatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosPaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosPaymentMethod(
    @common.Param() params: PosPaymentMethodWhereUniqueInput,
    @common.Body() data: PosPaymentMethodUpdateInput
  ): Promise<PosPaymentMethod | null> {
    try {
      return await this.service.updatePosPaymentMethod({
        where: params,
        data: data,
        select: {
          allowInReturns: true,
          createdAt: true,
          creation: true,
          defaultField: true,
          docStatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosPaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosPaymentMethod(
    @common.Param() params: PosPaymentMethodWhereUniqueInput
  ): Promise<PosPaymentMethod | null> {
    try {
      return await this.service.deletePosPaymentMethod({
        where: params,
        select: {
          allowInReturns: true,
          createdAt: true,
          creation: true,
          defaultField: true,
          docStatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
