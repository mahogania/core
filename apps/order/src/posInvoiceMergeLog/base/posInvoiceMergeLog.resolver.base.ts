/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosInvoiceMergeLog } from "./PosInvoiceMergeLog";
import { PosInvoiceMergeLogCountArgs } from "./PosInvoiceMergeLogCountArgs";
import { PosInvoiceMergeLogFindManyArgs } from "./PosInvoiceMergeLogFindManyArgs";
import { PosInvoiceMergeLogFindUniqueArgs } from "./PosInvoiceMergeLogFindUniqueArgs";
import { CreatePosInvoiceMergeLogArgs } from "./CreatePosInvoiceMergeLogArgs";
import { UpdatePosInvoiceMergeLogArgs } from "./UpdatePosInvoiceMergeLogArgs";
import { DeletePosInvoiceMergeLogArgs } from "./DeletePosInvoiceMergeLogArgs";
import { PosInvoiceMergeLogService } from "../posInvoiceMergeLog.service";
@graphql.Resolver(() => PosInvoiceMergeLog)
export class PosInvoiceMergeLogResolverBase {
  constructor(protected readonly service: PosInvoiceMergeLogService) {}

  async _posInvoiceMergeLogsMeta(
    @graphql.Args() args: PosInvoiceMergeLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosInvoiceMergeLog])
  async posInvoiceMergeLogs(
    @graphql.Args() args: PosInvoiceMergeLogFindManyArgs
  ): Promise<PosInvoiceMergeLog[]> {
    return this.service.posInvoiceMergeLogs(args);
  }

  @graphql.Query(() => PosInvoiceMergeLog, { nullable: true })
  async posInvoiceMergeLog(
    @graphql.Args() args: PosInvoiceMergeLogFindUniqueArgs
  ): Promise<PosInvoiceMergeLog | null> {
    const result = await this.service.posInvoiceMergeLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosInvoiceMergeLog)
  async createPosInvoiceMergeLog(
    @graphql.Args() args: CreatePosInvoiceMergeLogArgs
  ): Promise<PosInvoiceMergeLog> {
    return await this.service.createPosInvoiceMergeLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosInvoiceMergeLog)
  async updatePosInvoiceMergeLog(
    @graphql.Args() args: UpdatePosInvoiceMergeLogArgs
  ): Promise<PosInvoiceMergeLog | null> {
    try {
      return await this.service.updatePosInvoiceMergeLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosInvoiceMergeLog)
  async deletePosInvoiceMergeLog(
    @graphql.Args() args: DeletePosInvoiceMergeLogArgs
  ): Promise<PosInvoiceMergeLog | null> {
    try {
      return await this.service.deletePosInvoiceMergeLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
