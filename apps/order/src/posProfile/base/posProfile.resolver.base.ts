/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosProfile } from "./PosProfile";
import { PosProfileCountArgs } from "./PosProfileCountArgs";
import { PosProfileFindManyArgs } from "./PosProfileFindManyArgs";
import { PosProfileFindUniqueArgs } from "./PosProfileFindUniqueArgs";
import { CreatePosProfileArgs } from "./CreatePosProfileArgs";
import { UpdatePosProfileArgs } from "./UpdatePosProfileArgs";
import { DeletePosProfileArgs } from "./DeletePosProfileArgs";
import { PosProfileService } from "../posProfile.service";
@graphql.Resolver(() => PosProfile)
export class PosProfileResolverBase {
  constructor(protected readonly service: PosProfileService) {}

  async _posProfilesMeta(
    @graphql.Args() args: PosProfileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosProfile])
  async posProfiles(
    @graphql.Args() args: PosProfileFindManyArgs
  ): Promise<PosProfile[]> {
    return this.service.posProfiles(args);
  }

  @graphql.Query(() => PosProfile, { nullable: true })
  async posProfile(
    @graphql.Args() args: PosProfileFindUniqueArgs
  ): Promise<PosProfile | null> {
    const result = await this.service.posProfile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosProfile)
  async createPosProfile(
    @graphql.Args() args: CreatePosProfileArgs
  ): Promise<PosProfile> {
    return await this.service.createPosProfile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosProfile)
  async updatePosProfile(
    @graphql.Args() args: UpdatePosProfileArgs
  ): Promise<PosProfile | null> {
    try {
      return await this.service.updatePosProfile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosProfile)
  async deletePosProfile(
    @graphql.Args() args: DeletePosProfileArgs
  ): Promise<PosProfile | null> {
    try {
      return await this.service.deletePosProfile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
