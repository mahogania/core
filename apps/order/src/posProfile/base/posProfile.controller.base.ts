/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosProfileService } from "../posProfile.service";
import { PosProfileCreateInput } from "./PosProfileCreateInput";
import { PosProfile } from "./PosProfile";
import { PosProfileFindManyArgs } from "./PosProfileFindManyArgs";
import { PosProfileWhereUniqueInput } from "./PosProfileWhereUniqueInput";
import { PosProfileUpdateInput } from "./PosProfileUpdateInput";

export class PosProfileControllerBase {
  constructor(protected readonly service: PosProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosProfile })
  async createPosProfile(
    @common.Body() data: PosProfileCreateInput
  ): Promise<PosProfile> {
    return await this.service.createPosProfile({
      data: data,
      select: {
        accountForChangeAmount: true,
        allowDiscountChange: true,
        allowRateChange: true,
        applyDiscountOn: true,
        autoAddItemToCart: true,
        campaign: true,
        company: true,
        companyAddress: true,
        costCenter: true,
        country: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        disableRoundedTotal: true,
        disabled: true,
        docStatus: true,
        expenseAccount: true,
        hideImages: true,
        hideUnavailableItems: true,
        id: true,
        idx: true,
        ignorePricingRule: true,
        incomeAccount: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        printFormat: true,
        selectPrintHeading: true,
        sellingPriceList: true,
        taxCategory: true,
        taxesAndCharges: true,
        tcName: true,
        updateStock: true,
        updatedAt: true,
        validateStockOnSave: true,
        warehouse: true,
        writeOffAccount: true,
        writeOffCostCenter: true,
        writeOffLimit: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosProfile] })
  @ApiNestedQuery(PosProfileFindManyArgs)
  async posProfiles(@common.Req() request: Request): Promise<PosProfile[]> {
    const args = plainToClass(PosProfileFindManyArgs, request.query);
    return this.service.posProfiles({
      ...args,
      select: {
        accountForChangeAmount: true,
        allowDiscountChange: true,
        allowRateChange: true,
        applyDiscountOn: true,
        autoAddItemToCart: true,
        campaign: true,
        company: true,
        companyAddress: true,
        costCenter: true,
        country: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        disableRoundedTotal: true,
        disabled: true,
        docStatus: true,
        expenseAccount: true,
        hideImages: true,
        hideUnavailableItems: true,
        id: true,
        idx: true,
        ignorePricingRule: true,
        incomeAccount: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        printFormat: true,
        selectPrintHeading: true,
        sellingPriceList: true,
        taxCategory: true,
        taxesAndCharges: true,
        tcName: true,
        updateStock: true,
        updatedAt: true,
        validateStockOnSave: true,
        warehouse: true,
        writeOffAccount: true,
        writeOffCostCenter: true,
        writeOffLimit: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posProfile(
    @common.Param() params: PosProfileWhereUniqueInput
  ): Promise<PosProfile | null> {
    const result = await this.service.posProfile({
      where: params,
      select: {
        accountForChangeAmount: true,
        allowDiscountChange: true,
        allowRateChange: true,
        applyDiscountOn: true,
        autoAddItemToCart: true,
        campaign: true,
        company: true,
        companyAddress: true,
        costCenter: true,
        country: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        disableRoundedTotal: true,
        disabled: true,
        docStatus: true,
        expenseAccount: true,
        hideImages: true,
        hideUnavailableItems: true,
        id: true,
        idx: true,
        ignorePricingRule: true,
        incomeAccount: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        printFormat: true,
        selectPrintHeading: true,
        sellingPriceList: true,
        taxCategory: true,
        taxesAndCharges: true,
        tcName: true,
        updateStock: true,
        updatedAt: true,
        validateStockOnSave: true,
        warehouse: true,
        writeOffAccount: true,
        writeOffCostCenter: true,
        writeOffLimit: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosProfile(
    @common.Param() params: PosProfileWhereUniqueInput,
    @common.Body() data: PosProfileUpdateInput
  ): Promise<PosProfile | null> {
    try {
      return await this.service.updatePosProfile({
        where: params,
        data: data,
        select: {
          accountForChangeAmount: true,
          allowDiscountChange: true,
          allowRateChange: true,
          applyDiscountOn: true,
          autoAddItemToCart: true,
          campaign: true,
          company: true,
          companyAddress: true,
          costCenter: true,
          country: true,
          createdAt: true,
          creation: true,
          currency: true,
          customer: true,
          disableRoundedTotal: true,
          disabled: true,
          docStatus: true,
          expenseAccount: true,
          hideImages: true,
          hideUnavailableItems: true,
          id: true,
          idx: true,
          ignorePricingRule: true,
          incomeAccount: true,
          letterHead: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          printFormat: true,
          selectPrintHeading: true,
          sellingPriceList: true,
          taxCategory: true,
          taxesAndCharges: true,
          tcName: true,
          updateStock: true,
          updatedAt: true,
          validateStockOnSave: true,
          warehouse: true,
          writeOffAccount: true,
          writeOffCostCenter: true,
          writeOffLimit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosProfile(
    @common.Param() params: PosProfileWhereUniqueInput
  ): Promise<PosProfile | null> {
    try {
      return await this.service.deletePosProfile({
        where: params,
        select: {
          accountForChangeAmount: true,
          allowDiscountChange: true,
          allowRateChange: true,
          applyDiscountOn: true,
          autoAddItemToCart: true,
          campaign: true,
          company: true,
          companyAddress: true,
          costCenter: true,
          country: true,
          createdAt: true,
          creation: true,
          currency: true,
          customer: true,
          disableRoundedTotal: true,
          disabled: true,
          docStatus: true,
          expenseAccount: true,
          hideImages: true,
          hideUnavailableItems: true,
          id: true,
          idx: true,
          ignorePricingRule: true,
          incomeAccount: true,
          letterHead: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          printFormat: true,
          selectPrintHeading: true,
          sellingPriceList: true,
          taxCategory: true,
          taxesAndCharges: true,
          tcName: true,
          updateStock: true,
          updatedAt: true,
          validateStockOnSave: true,
          warehouse: true,
          writeOffAccount: true,
          writeOffCostCenter: true,
          writeOffLimit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
