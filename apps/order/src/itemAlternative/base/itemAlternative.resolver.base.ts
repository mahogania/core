/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemAlternative } from "./ItemAlternative";
import { ItemAlternativeCountArgs } from "./ItemAlternativeCountArgs";
import { ItemAlternativeFindManyArgs } from "./ItemAlternativeFindManyArgs";
import { ItemAlternativeFindUniqueArgs } from "./ItemAlternativeFindUniqueArgs";
import { CreateItemAlternativeArgs } from "./CreateItemAlternativeArgs";
import { UpdateItemAlternativeArgs } from "./UpdateItemAlternativeArgs";
import { DeleteItemAlternativeArgs } from "./DeleteItemAlternativeArgs";
import { ItemAlternativeService } from "../itemAlternative.service";
@graphql.Resolver(() => ItemAlternative)
export class ItemAlternativeResolverBase {
  constructor(protected readonly service: ItemAlternativeService) {}

  async _itemAlternativesMeta(
    @graphql.Args() args: ItemAlternativeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemAlternative])
  async itemAlternatives(
    @graphql.Args() args: ItemAlternativeFindManyArgs
  ): Promise<ItemAlternative[]> {
    return this.service.itemAlternatives(args);
  }

  @graphql.Query(() => ItemAlternative, { nullable: true })
  async itemAlternative(
    @graphql.Args() args: ItemAlternativeFindUniqueArgs
  ): Promise<ItemAlternative | null> {
    const result = await this.service.itemAlternative(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemAlternative)
  async createItemAlternative(
    @graphql.Args() args: CreateItemAlternativeArgs
  ): Promise<ItemAlternative> {
    return await this.service.createItemAlternative({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemAlternative)
  async updateItemAlternative(
    @graphql.Args() args: UpdateItemAlternativeArgs
  ): Promise<ItemAlternative | null> {
    try {
      return await this.service.updateItemAlternative({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemAlternative)
  async deleteItemAlternative(
    @graphql.Args() args: DeleteItemAlternativeArgs
  ): Promise<ItemAlternative | null> {
    try {
      return await this.service.deleteItemAlternative(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
