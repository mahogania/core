/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemAlternative as PrismaItemAlternative,
} from "@prisma/client";

export class ItemAlternativeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemAlternativeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemAlternative.count(args);
  }

  async itemAlternatives(
    args: Prisma.ItemAlternativeFindManyArgs
  ): Promise<PrismaItemAlternative[]> {
    return this.prisma.itemAlternative.findMany(args);
  }
  async itemAlternative(
    args: Prisma.ItemAlternativeFindUniqueArgs
  ): Promise<PrismaItemAlternative | null> {
    return this.prisma.itemAlternative.findUnique(args);
  }
  async createItemAlternative(
    args: Prisma.ItemAlternativeCreateArgs
  ): Promise<PrismaItemAlternative> {
    return this.prisma.itemAlternative.create(args);
  }
  async updateItemAlternative(
    args: Prisma.ItemAlternativeUpdateArgs
  ): Promise<PrismaItemAlternative> {
    return this.prisma.itemAlternative.update(args);
  }
  async deleteItemAlternative(
    args: Prisma.ItemAlternativeDeleteArgs
  ): Promise<PrismaItemAlternative> {
    return this.prisma.itemAlternative.delete(args);
  }
}
