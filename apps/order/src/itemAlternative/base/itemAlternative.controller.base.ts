/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemAlternativeService } from "../itemAlternative.service";
import { ItemAlternativeCreateInput } from "./ItemAlternativeCreateInput";
import { ItemAlternative } from "./ItemAlternative";
import { ItemAlternativeFindManyArgs } from "./ItemAlternativeFindManyArgs";
import { ItemAlternativeWhereUniqueInput } from "./ItemAlternativeWhereUniqueInput";
import { ItemAlternativeUpdateInput } from "./ItemAlternativeUpdateInput";

export class ItemAlternativeControllerBase {
  constructor(protected readonly service: ItemAlternativeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemAlternative })
  async createItemAlternative(
    @common.Body() data: ItemAlternativeCreateInput
  ): Promise<ItemAlternative> {
    return await this.service.createItemAlternative({
      data: data,
      select: {
        alternativeItemCode: true,
        alternativeItemName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        twoWay: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemAlternative] })
  @ApiNestedQuery(ItemAlternativeFindManyArgs)
  async itemAlternatives(
    @common.Req() request: Request
  ): Promise<ItemAlternative[]> {
    const args = plainToClass(ItemAlternativeFindManyArgs, request.query);
    return this.service.itemAlternatives({
      ...args,
      select: {
        alternativeItemCode: true,
        alternativeItemName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        twoWay: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemAlternative })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemAlternative(
    @common.Param() params: ItemAlternativeWhereUniqueInput
  ): Promise<ItemAlternative | null> {
    const result = await this.service.itemAlternative({
      where: params,
      select: {
        alternativeItemCode: true,
        alternativeItemName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        twoWay: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemAlternative })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemAlternative(
    @common.Param() params: ItemAlternativeWhereUniqueInput,
    @common.Body() data: ItemAlternativeUpdateInput
  ): Promise<ItemAlternative | null> {
    try {
      return await this.service.updateItemAlternative({
        where: params,
        data: data,
        select: {
          alternativeItemCode: true,
          alternativeItemName: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          twoWay: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemAlternative })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemAlternative(
    @common.Param() params: ItemAlternativeWhereUniqueInput
  ): Promise<ItemAlternative | null> {
    try {
      return await this.service.deleteItemAlternative({
        where: params,
        select: {
          alternativeItemCode: true,
          alternativeItemName: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          twoWay: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
