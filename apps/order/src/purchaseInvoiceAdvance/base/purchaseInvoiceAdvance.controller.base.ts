/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseInvoiceAdvanceService } from "../purchaseInvoiceAdvance.service";
import { PurchaseInvoiceAdvanceCreateInput } from "./PurchaseInvoiceAdvanceCreateInput";
import { PurchaseInvoiceAdvance } from "./PurchaseInvoiceAdvance";
import { PurchaseInvoiceAdvanceFindManyArgs } from "./PurchaseInvoiceAdvanceFindManyArgs";
import { PurchaseInvoiceAdvanceWhereUniqueInput } from "./PurchaseInvoiceAdvanceWhereUniqueInput";
import { PurchaseInvoiceAdvanceUpdateInput } from "./PurchaseInvoiceAdvanceUpdateInput";

export class PurchaseInvoiceAdvanceControllerBase {
  constructor(protected readonly service: PurchaseInvoiceAdvanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseInvoiceAdvance })
  async createPurchaseInvoiceAdvance(
    @common.Body() data: PurchaseInvoiceAdvanceCreateInput
  ): Promise<PurchaseInvoiceAdvance> {
    return await this.service.createPurchaseInvoiceAdvance({
      data: data,
      select: {
        advanceAmount: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        exchangeGainLoss: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        refExchangeRate: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        remarks: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseInvoiceAdvance] })
  @ApiNestedQuery(PurchaseInvoiceAdvanceFindManyArgs)
  async purchaseInvoiceAdvances(
    @common.Req() request: Request
  ): Promise<PurchaseInvoiceAdvance[]> {
    const args = plainToClass(
      PurchaseInvoiceAdvanceFindManyArgs,
      request.query
    );
    return this.service.purchaseInvoiceAdvances({
      ...args,
      select: {
        advanceAmount: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        exchangeGainLoss: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        refExchangeRate: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        remarks: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseInvoiceAdvance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseInvoiceAdvance(
    @common.Param() params: PurchaseInvoiceAdvanceWhereUniqueInput
  ): Promise<PurchaseInvoiceAdvance | null> {
    const result = await this.service.purchaseInvoiceAdvance({
      where: params,
      select: {
        advanceAmount: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        exchangeGainLoss: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        refExchangeRate: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        remarks: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseInvoiceAdvance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseInvoiceAdvance(
    @common.Param() params: PurchaseInvoiceAdvanceWhereUniqueInput,
    @common.Body() data: PurchaseInvoiceAdvanceUpdateInput
  ): Promise<PurchaseInvoiceAdvance | null> {
    try {
      return await this.service.updatePurchaseInvoiceAdvance({
        where: params,
        data: data,
        select: {
          advanceAmount: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          exchangeGainLoss: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          refExchangeRate: true,
          referenceName: true,
          referenceRow: true,
          referenceType: true,
          remarks: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseInvoiceAdvance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseInvoiceAdvance(
    @common.Param() params: PurchaseInvoiceAdvanceWhereUniqueInput
  ): Promise<PurchaseInvoiceAdvance | null> {
    try {
      return await this.service.deletePurchaseInvoiceAdvance({
        where: params,
        select: {
          advanceAmount: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          exchangeGainLoss: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          refExchangeRate: true,
          referenceName: true,
          referenceRow: true,
          referenceType: true,
          remarks: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
