/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosProfileUserService } from "../posProfileUser.service";
import { PosProfileUserCreateInput } from "./PosProfileUserCreateInput";
import { PosProfileUser } from "./PosProfileUser";
import { PosProfileUserFindManyArgs } from "./PosProfileUserFindManyArgs";
import { PosProfileUserWhereUniqueInput } from "./PosProfileUserWhereUniqueInput";
import { PosProfileUserUpdateInput } from "./PosProfileUserUpdateInput";

export class PosProfileUserControllerBase {
  constructor(protected readonly service: PosProfileUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosProfileUser })
  async createPosProfileUser(
    @common.Body() data: PosProfileUserCreateInput
  ): Promise<PosProfileUser> {
    return await this.service.createPosProfileUser({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        defaultField: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosProfileUser] })
  @ApiNestedQuery(PosProfileUserFindManyArgs)
  async posProfileUsers(
    @common.Req() request: Request
  ): Promise<PosProfileUser[]> {
    const args = plainToClass(PosProfileUserFindManyArgs, request.query);
    return this.service.posProfileUsers({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        defaultField: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosProfileUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posProfileUser(
    @common.Param() params: PosProfileUserWhereUniqueInput
  ): Promise<PosProfileUser | null> {
    const result = await this.service.posProfileUser({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        defaultField: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosProfileUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosProfileUser(
    @common.Param() params: PosProfileUserWhereUniqueInput,
    @common.Body() data: PosProfileUserUpdateInput
  ): Promise<PosProfileUser | null> {
    try {
      return await this.service.updatePosProfileUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          defaultField: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosProfileUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosProfileUser(
    @common.Param() params: PosProfileUserWhereUniqueInput
  ): Promise<PosProfileUser | null> {
    try {
      return await this.service.deletePosProfileUser({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          defaultField: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
