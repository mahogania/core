/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosProfileUser } from "./PosProfileUser";
import { PosProfileUserCountArgs } from "./PosProfileUserCountArgs";
import { PosProfileUserFindManyArgs } from "./PosProfileUserFindManyArgs";
import { PosProfileUserFindUniqueArgs } from "./PosProfileUserFindUniqueArgs";
import { CreatePosProfileUserArgs } from "./CreatePosProfileUserArgs";
import { UpdatePosProfileUserArgs } from "./UpdatePosProfileUserArgs";
import { DeletePosProfileUserArgs } from "./DeletePosProfileUserArgs";
import { PosProfileUserService } from "../posProfileUser.service";
@graphql.Resolver(() => PosProfileUser)
export class PosProfileUserResolverBase {
  constructor(protected readonly service: PosProfileUserService) {}

  async _posProfileUsersMeta(
    @graphql.Args() args: PosProfileUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosProfileUser])
  async posProfileUsers(
    @graphql.Args() args: PosProfileUserFindManyArgs
  ): Promise<PosProfileUser[]> {
    return this.service.posProfileUsers(args);
  }

  @graphql.Query(() => PosProfileUser, { nullable: true })
  async posProfileUser(
    @graphql.Args() args: PosProfileUserFindUniqueArgs
  ): Promise<PosProfileUser | null> {
    const result = await this.service.posProfileUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosProfileUser)
  async createPosProfileUser(
    @graphql.Args() args: CreatePosProfileUserArgs
  ): Promise<PosProfileUser> {
    return await this.service.createPosProfileUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosProfileUser)
  async updatePosProfileUser(
    @graphql.Args() args: UpdatePosProfileUserArgs
  ): Promise<PosProfileUser | null> {
    try {
      return await this.service.updatePosProfileUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosProfileUser)
  async deletePosProfileUser(
    @graphql.Args() args: DeletePosProfileUserArgs
  ): Promise<PosProfileUser | null> {
    try {
      return await this.service.deletePosProfileUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
