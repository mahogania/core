/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseTaxesAndChargesTemplateService } from "../purchaseTaxesAndChargesTemplate.service";
import { PurchaseTaxesAndChargesTemplateCreateInput } from "./PurchaseTaxesAndChargesTemplateCreateInput";
import { PurchaseTaxesAndChargesTemplate } from "./PurchaseTaxesAndChargesTemplate";
import { PurchaseTaxesAndChargesTemplateFindManyArgs } from "./PurchaseTaxesAndChargesTemplateFindManyArgs";
import { PurchaseTaxesAndChargesTemplateWhereUniqueInput } from "./PurchaseTaxesAndChargesTemplateWhereUniqueInput";
import { PurchaseTaxesAndChargesTemplateUpdateInput } from "./PurchaseTaxesAndChargesTemplateUpdateInput";

export class PurchaseTaxesAndChargesTemplateControllerBase {
  constructor(
    protected readonly service: PurchaseTaxesAndChargesTemplateService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseTaxesAndChargesTemplate })
  async createPurchaseTaxesAndChargesTemplate(
    @common.Body() data: PurchaseTaxesAndChargesTemplateCreateInput
  ): Promise<PurchaseTaxesAndChargesTemplate> {
    return await this.service.createPurchaseTaxesAndChargesTemplate({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        taxCategory: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseTaxesAndChargesTemplate] })
  @ApiNestedQuery(PurchaseTaxesAndChargesTemplateFindManyArgs)
  async purchaseTaxesAndChargesTemplates(
    @common.Req() request: Request
  ): Promise<PurchaseTaxesAndChargesTemplate[]> {
    const args = plainToClass(
      PurchaseTaxesAndChargesTemplateFindManyArgs,
      request.query
    );
    return this.service.purchaseTaxesAndChargesTemplates({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        taxCategory: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseTaxesAndChargesTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseTaxesAndChargesTemplate(
    @common.Param() params: PurchaseTaxesAndChargesTemplateWhereUniqueInput
  ): Promise<PurchaseTaxesAndChargesTemplate | null> {
    const result = await this.service.purchaseTaxesAndChargesTemplate({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        taxCategory: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseTaxesAndChargesTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseTaxesAndChargesTemplate(
    @common.Param() params: PurchaseTaxesAndChargesTemplateWhereUniqueInput,
    @common.Body() data: PurchaseTaxesAndChargesTemplateUpdateInput
  ): Promise<PurchaseTaxesAndChargesTemplate | null> {
    try {
      return await this.service.updatePurchaseTaxesAndChargesTemplate({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          taxCategory: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseTaxesAndChargesTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseTaxesAndChargesTemplate(
    @common.Param() params: PurchaseTaxesAndChargesTemplateWhereUniqueInput
  ): Promise<PurchaseTaxesAndChargesTemplate | null> {
    try {
      return await this.service.deletePurchaseTaxesAndChargesTemplate({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          taxCategory: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
