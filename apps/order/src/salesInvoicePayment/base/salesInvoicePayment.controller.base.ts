/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesInvoicePaymentService } from "../salesInvoicePayment.service";
import { SalesInvoicePaymentCreateInput } from "./SalesInvoicePaymentCreateInput";
import { SalesInvoicePayment } from "./SalesInvoicePayment";
import { SalesInvoicePaymentFindManyArgs } from "./SalesInvoicePaymentFindManyArgs";
import { SalesInvoicePaymentWhereUniqueInput } from "./SalesInvoicePaymentWhereUniqueInput";
import { SalesInvoicePaymentUpdateInput } from "./SalesInvoicePaymentUpdateInput";

export class SalesInvoicePaymentControllerBase {
  constructor(protected readonly service: SalesInvoicePaymentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesInvoicePayment })
  async createSalesInvoicePayment(
    @common.Body() data: SalesInvoicePaymentCreateInput
  ): Promise<SalesInvoicePayment> {
    return await this.service.createSalesInvoicePayment({
      data: data,
      select: {
        account: true,
        amount: true,
        baseAmount: true,
        clearanceDate: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        referenceNo: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesInvoicePayment] })
  @ApiNestedQuery(SalesInvoicePaymentFindManyArgs)
  async salesInvoicePayments(
    @common.Req() request: Request
  ): Promise<SalesInvoicePayment[]> {
    const args = plainToClass(SalesInvoicePaymentFindManyArgs, request.query);
    return this.service.salesInvoicePayments({
      ...args,
      select: {
        account: true,
        amount: true,
        baseAmount: true,
        clearanceDate: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        referenceNo: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoicePayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesInvoicePayment(
    @common.Param() params: SalesInvoicePaymentWhereUniqueInput
  ): Promise<SalesInvoicePayment | null> {
    const result = await this.service.salesInvoicePayment({
      where: params,
      select: {
        account: true,
        amount: true,
        baseAmount: true,
        clearanceDate: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        referenceNo: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoicePayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesInvoicePayment(
    @common.Param() params: SalesInvoicePaymentWhereUniqueInput,
    @common.Body() data: SalesInvoicePaymentUpdateInput
  ): Promise<SalesInvoicePayment | null> {
    try {
      return await this.service.updateSalesInvoicePayment({
        where: params,
        data: data,
        select: {
          account: true,
          amount: true,
          baseAmount: true,
          clearanceDate: true,
          createdAt: true,
          creation: true,
          defaultField: true,
          docstatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          referenceNo: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoicePayment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesInvoicePayment(
    @common.Param() params: SalesInvoicePaymentWhereUniqueInput
  ): Promise<SalesInvoicePayment | null> {
    try {
      return await this.service.deleteSalesInvoicePayment({
        where: params,
        select: {
          account: true,
          amount: true,
          baseAmount: true,
          clearanceDate: true,
          createdAt: true,
          creation: true,
          defaultField: true,
          docstatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          referenceNo: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
