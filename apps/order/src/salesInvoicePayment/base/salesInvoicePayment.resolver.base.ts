/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesInvoicePayment } from "./SalesInvoicePayment";
import { SalesInvoicePaymentCountArgs } from "./SalesInvoicePaymentCountArgs";
import { SalesInvoicePaymentFindManyArgs } from "./SalesInvoicePaymentFindManyArgs";
import { SalesInvoicePaymentFindUniqueArgs } from "./SalesInvoicePaymentFindUniqueArgs";
import { CreateSalesInvoicePaymentArgs } from "./CreateSalesInvoicePaymentArgs";
import { UpdateSalesInvoicePaymentArgs } from "./UpdateSalesInvoicePaymentArgs";
import { DeleteSalesInvoicePaymentArgs } from "./DeleteSalesInvoicePaymentArgs";
import { SalesInvoicePaymentService } from "../salesInvoicePayment.service";
@graphql.Resolver(() => SalesInvoicePayment)
export class SalesInvoicePaymentResolverBase {
  constructor(protected readonly service: SalesInvoicePaymentService) {}

  async _salesInvoicePaymentsMeta(
    @graphql.Args() args: SalesInvoicePaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesInvoicePayment])
  async salesInvoicePayments(
    @graphql.Args() args: SalesInvoicePaymentFindManyArgs
  ): Promise<SalesInvoicePayment[]> {
    return this.service.salesInvoicePayments(args);
  }

  @graphql.Query(() => SalesInvoicePayment, { nullable: true })
  async salesInvoicePayment(
    @graphql.Args() args: SalesInvoicePaymentFindUniqueArgs
  ): Promise<SalesInvoicePayment | null> {
    const result = await this.service.salesInvoicePayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesInvoicePayment)
  async createSalesInvoicePayment(
    @graphql.Args() args: CreateSalesInvoicePaymentArgs
  ): Promise<SalesInvoicePayment> {
    return await this.service.createSalesInvoicePayment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesInvoicePayment)
  async updateSalesInvoicePayment(
    @graphql.Args() args: UpdateSalesInvoicePaymentArgs
  ): Promise<SalesInvoicePayment | null> {
    try {
      return await this.service.updateSalesInvoicePayment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesInvoicePayment)
  async deleteSalesInvoicePayment(
    @graphql.Args() args: DeleteSalesInvoicePaymentArgs
  ): Promise<SalesInvoicePayment | null> {
    try {
      return await this.service.deleteSalesInvoicePayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
