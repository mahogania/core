/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemDefaultService } from "../itemDefault.service";
import { ItemDefaultCreateInput } from "./ItemDefaultCreateInput";
import { ItemDefault } from "./ItemDefault";
import { ItemDefaultFindManyArgs } from "./ItemDefaultFindManyArgs";
import { ItemDefaultWhereUniqueInput } from "./ItemDefaultWhereUniqueInput";
import { ItemDefaultUpdateInput } from "./ItemDefaultUpdateInput";

export class ItemDefaultControllerBase {
  constructor(protected readonly service: ItemDefaultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemDefault })
  async createItemDefault(
    @common.Body() data: ItemDefaultCreateInput
  ): Promise<ItemDefault> {
    return await this.service.createItemDefault({
      data: data,
      select: {
        buyingCostCenter: true,
        company: true,
        createdAt: true,
        defaultDiscountAccount: true,
        defaultPriceList: true,
        defaultProvisionalAccount: true,
        defaultSupplier: true,
        defaultWarehouse: true,
        deferredExpenseAccount: true,
        deferredRevenueAccount: true,
        docstatus: true,
        expenseAccount: true,
        id: true,
        idx: true,
        incomeAccount: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sellingCostCenter: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemDefault] })
  @ApiNestedQuery(ItemDefaultFindManyArgs)
  async itemDefaults(@common.Req() request: Request): Promise<ItemDefault[]> {
    const args = plainToClass(ItemDefaultFindManyArgs, request.query);
    return this.service.itemDefaults({
      ...args,
      select: {
        buyingCostCenter: true,
        company: true,
        createdAt: true,
        defaultDiscountAccount: true,
        defaultPriceList: true,
        defaultProvisionalAccount: true,
        defaultSupplier: true,
        defaultWarehouse: true,
        deferredExpenseAccount: true,
        deferredRevenueAccount: true,
        docstatus: true,
        expenseAccount: true,
        id: true,
        idx: true,
        incomeAccount: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sellingCostCenter: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemDefault })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemDefault(
    @common.Param() params: ItemDefaultWhereUniqueInput
  ): Promise<ItemDefault | null> {
    const result = await this.service.itemDefault({
      where: params,
      select: {
        buyingCostCenter: true,
        company: true,
        createdAt: true,
        defaultDiscountAccount: true,
        defaultPriceList: true,
        defaultProvisionalAccount: true,
        defaultSupplier: true,
        defaultWarehouse: true,
        deferredExpenseAccount: true,
        deferredRevenueAccount: true,
        docstatus: true,
        expenseAccount: true,
        id: true,
        idx: true,
        incomeAccount: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sellingCostCenter: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemDefault })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemDefault(
    @common.Param() params: ItemDefaultWhereUniqueInput,
    @common.Body() data: ItemDefaultUpdateInput
  ): Promise<ItemDefault | null> {
    try {
      return await this.service.updateItemDefault({
        where: params,
        data: data,
        select: {
          buyingCostCenter: true,
          company: true,
          createdAt: true,
          defaultDiscountAccount: true,
          defaultPriceList: true,
          defaultProvisionalAccount: true,
          defaultSupplier: true,
          defaultWarehouse: true,
          deferredExpenseAccount: true,
          deferredRevenueAccount: true,
          docstatus: true,
          expenseAccount: true,
          id: true,
          idx: true,
          incomeAccount: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          sellingCostCenter: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemDefault })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemDefault(
    @common.Param() params: ItemDefaultWhereUniqueInput
  ): Promise<ItemDefault | null> {
    try {
      return await this.service.deleteItemDefault({
        where: params,
        select: {
          buyingCostCenter: true,
          company: true,
          createdAt: true,
          defaultDiscountAccount: true,
          defaultPriceList: true,
          defaultProvisionalAccount: true,
          defaultSupplier: true,
          defaultWarehouse: true,
          deferredExpenseAccount: true,
          deferredRevenueAccount: true,
          docstatus: true,
          expenseAccount: true,
          id: true,
          idx: true,
          incomeAccount: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          sellingCostCenter: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
