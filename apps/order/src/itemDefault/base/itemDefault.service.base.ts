/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemDefault as PrismaItemDefault } from "@prisma/client";

export class ItemDefaultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemDefaultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemDefault.count(args);
  }

  async itemDefaults(
    args: Prisma.ItemDefaultFindManyArgs
  ): Promise<PrismaItemDefault[]> {
    return this.prisma.itemDefault.findMany(args);
  }
  async itemDefault(
    args: Prisma.ItemDefaultFindUniqueArgs
  ): Promise<PrismaItemDefault | null> {
    return this.prisma.itemDefault.findUnique(args);
  }
  async createItemDefault(
    args: Prisma.ItemDefaultCreateArgs
  ): Promise<PrismaItemDefault> {
    return this.prisma.itemDefault.create(args);
  }
  async updateItemDefault(
    args: Prisma.ItemDefaultUpdateArgs
  ): Promise<PrismaItemDefault> {
    return this.prisma.itemDefault.update(args);
  }
  async deleteItemDefault(
    args: Prisma.ItemDefaultDeleteArgs
  ): Promise<PrismaItemDefault> {
    return this.prisma.itemDefault.delete(args);
  }
}
