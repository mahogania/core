/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubcontractingReceiptService } from "../subcontractingReceipt.service";
import { SubcontractingReceiptCreateInput } from "./SubcontractingReceiptCreateInput";
import { SubcontractingReceipt } from "./SubcontractingReceipt";
import { SubcontractingReceiptFindManyArgs } from "./SubcontractingReceiptFindManyArgs";
import { SubcontractingReceiptWhereUniqueInput } from "./SubcontractingReceiptWhereUniqueInput";
import { SubcontractingReceiptUpdateInput } from "./SubcontractingReceiptUpdateInput";

export class SubcontractingReceiptControllerBase {
  constructor(protected readonly service: SubcontractingReceiptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubcontractingReceipt })
  async createSubcontractingReceipt(
    @common.Body() data: SubcontractingReceiptCreateInput
  ): Promise<SubcontractingReceipt> {
    return await this.service.createSubcontractingReceipt({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubcontractingReceipt] })
  @ApiNestedQuery(SubcontractingReceiptFindManyArgs)
  async subcontractingReceipts(
    @common.Req() request: Request
  ): Promise<SubcontractingReceipt[]> {
    const args = plainToClass(SubcontractingReceiptFindManyArgs, request.query);
    return this.service.subcontractingReceipts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingReceipt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subcontractingReceipt(
    @common.Param() params: SubcontractingReceiptWhereUniqueInput
  ): Promise<SubcontractingReceipt | null> {
    const result = await this.service.subcontractingReceipt({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingReceipt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubcontractingReceipt(
    @common.Param() params: SubcontractingReceiptWhereUniqueInput,
    @common.Body() data: SubcontractingReceiptUpdateInput
  ): Promise<SubcontractingReceipt | null> {
    try {
      return await this.service.updateSubcontractingReceipt({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingReceipt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubcontractingReceipt(
    @common.Param() params: SubcontractingReceiptWhereUniqueInput
  ): Promise<SubcontractingReceipt | null> {
    try {
      return await this.service.deleteSubcontractingReceipt({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
