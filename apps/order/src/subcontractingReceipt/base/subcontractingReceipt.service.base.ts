/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SubcontractingReceipt as PrismaSubcontractingReceipt,
} from "@prisma/client";

export class SubcontractingReceiptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubcontractingReceiptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subcontractingReceipt.count(args);
  }

  async subcontractingReceipts(
    args: Prisma.SubcontractingReceiptFindManyArgs
  ): Promise<PrismaSubcontractingReceipt[]> {
    return this.prisma.subcontractingReceipt.findMany(args);
  }
  async subcontractingReceipt(
    args: Prisma.SubcontractingReceiptFindUniqueArgs
  ): Promise<PrismaSubcontractingReceipt | null> {
    return this.prisma.subcontractingReceipt.findUnique(args);
  }
  async createSubcontractingReceipt(
    args: Prisma.SubcontractingReceiptCreateArgs
  ): Promise<PrismaSubcontractingReceipt> {
    return this.prisma.subcontractingReceipt.create(args);
  }
  async updateSubcontractingReceipt(
    args: Prisma.SubcontractingReceiptUpdateArgs
  ): Promise<PrismaSubcontractingReceipt> {
    return this.prisma.subcontractingReceipt.update(args);
  }
  async deleteSubcontractingReceipt(
    args: Prisma.SubcontractingReceiptDeleteArgs
  ): Promise<PrismaSubcontractingReceipt> {
    return this.prisma.subcontractingReceipt.delete(args);
  }
}
