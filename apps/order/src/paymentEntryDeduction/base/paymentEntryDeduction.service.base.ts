/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PaymentEntryDeduction as PrismaPaymentEntryDeduction,
} from "@prisma/client";

export class PaymentEntryDeductionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentEntryDeductionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentEntryDeduction.count(args);
  }

  async paymentEntryDeductions(
    args: Prisma.PaymentEntryDeductionFindManyArgs
  ): Promise<PrismaPaymentEntryDeduction[]> {
    return this.prisma.paymentEntryDeduction.findMany(args);
  }
  async paymentEntryDeduction(
    args: Prisma.PaymentEntryDeductionFindUniqueArgs
  ): Promise<PrismaPaymentEntryDeduction | null> {
    return this.prisma.paymentEntryDeduction.findUnique(args);
  }
  async createPaymentEntryDeduction(
    args: Prisma.PaymentEntryDeductionCreateArgs
  ): Promise<PrismaPaymentEntryDeduction> {
    return this.prisma.paymentEntryDeduction.create(args);
  }
  async updatePaymentEntryDeduction(
    args: Prisma.PaymentEntryDeductionUpdateArgs
  ): Promise<PrismaPaymentEntryDeduction> {
    return this.prisma.paymentEntryDeduction.update(args);
  }
  async deletePaymentEntryDeduction(
    args: Prisma.PaymentEntryDeductionDeleteArgs
  ): Promise<PrismaPaymentEntryDeduction> {
    return this.prisma.paymentEntryDeduction.delete(args);
  }
}
