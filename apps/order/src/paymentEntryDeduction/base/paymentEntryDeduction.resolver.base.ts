/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentEntryDeduction } from "./PaymentEntryDeduction";
import { PaymentEntryDeductionCountArgs } from "./PaymentEntryDeductionCountArgs";
import { PaymentEntryDeductionFindManyArgs } from "./PaymentEntryDeductionFindManyArgs";
import { PaymentEntryDeductionFindUniqueArgs } from "./PaymentEntryDeductionFindUniqueArgs";
import { CreatePaymentEntryDeductionArgs } from "./CreatePaymentEntryDeductionArgs";
import { UpdatePaymentEntryDeductionArgs } from "./UpdatePaymentEntryDeductionArgs";
import { DeletePaymentEntryDeductionArgs } from "./DeletePaymentEntryDeductionArgs";
import { PaymentEntryDeductionService } from "../paymentEntryDeduction.service";
@graphql.Resolver(() => PaymentEntryDeduction)
export class PaymentEntryDeductionResolverBase {
  constructor(protected readonly service: PaymentEntryDeductionService) {}

  async _paymentEntryDeductionsMeta(
    @graphql.Args() args: PaymentEntryDeductionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentEntryDeduction])
  async paymentEntryDeductions(
    @graphql.Args() args: PaymentEntryDeductionFindManyArgs
  ): Promise<PaymentEntryDeduction[]> {
    return this.service.paymentEntryDeductions(args);
  }

  @graphql.Query(() => PaymentEntryDeduction, { nullable: true })
  async paymentEntryDeduction(
    @graphql.Args() args: PaymentEntryDeductionFindUniqueArgs
  ): Promise<PaymentEntryDeduction | null> {
    const result = await this.service.paymentEntryDeduction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentEntryDeduction)
  async createPaymentEntryDeduction(
    @graphql.Args() args: CreatePaymentEntryDeductionArgs
  ): Promise<PaymentEntryDeduction> {
    return await this.service.createPaymentEntryDeduction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentEntryDeduction)
  async updatePaymentEntryDeduction(
    @graphql.Args() args: UpdatePaymentEntryDeductionArgs
  ): Promise<PaymentEntryDeduction | null> {
    try {
      return await this.service.updatePaymentEntryDeduction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentEntryDeduction)
  async deletePaymentEntryDeduction(
    @graphql.Args() args: DeletePaymentEntryDeductionArgs
  ): Promise<PaymentEntryDeduction | null> {
    try {
      return await this.service.deletePaymentEntryDeduction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
