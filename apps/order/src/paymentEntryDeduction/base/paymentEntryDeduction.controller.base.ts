/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentEntryDeductionService } from "../paymentEntryDeduction.service";
import { PaymentEntryDeductionCreateInput } from "./PaymentEntryDeductionCreateInput";
import { PaymentEntryDeduction } from "./PaymentEntryDeduction";
import { PaymentEntryDeductionFindManyArgs } from "./PaymentEntryDeductionFindManyArgs";
import { PaymentEntryDeductionWhereUniqueInput } from "./PaymentEntryDeductionWhereUniqueInput";
import { PaymentEntryDeductionUpdateInput } from "./PaymentEntryDeductionUpdateInput";

export class PaymentEntryDeductionControllerBase {
  constructor(protected readonly service: PaymentEntryDeductionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentEntryDeduction })
  async createPaymentEntryDeduction(
    @common.Body() data: PaymentEntryDeductionCreateInput
  ): Promise<PaymentEntryDeduction> {
    return await this.service.createPaymentEntryDeduction({
      data: data,
      select: {
        account: true,
        amount: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentEntryDeduction] })
  @ApiNestedQuery(PaymentEntryDeductionFindManyArgs)
  async paymentEntryDeductions(
    @common.Req() request: Request
  ): Promise<PaymentEntryDeduction[]> {
    const args = plainToClass(PaymentEntryDeductionFindManyArgs, request.query);
    return this.service.paymentEntryDeductions({
      ...args,
      select: {
        account: true,
        amount: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentEntryDeduction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentEntryDeduction(
    @common.Param() params: PaymentEntryDeductionWhereUniqueInput
  ): Promise<PaymentEntryDeduction | null> {
    const result = await this.service.paymentEntryDeduction({
      where: params,
      select: {
        account: true,
        amount: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentEntryDeduction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentEntryDeduction(
    @common.Param() params: PaymentEntryDeductionWhereUniqueInput,
    @common.Body() data: PaymentEntryDeductionUpdateInput
  ): Promise<PaymentEntryDeduction | null> {
    try {
      return await this.service.updatePaymentEntryDeduction({
        where: params,
        data: data,
        select: {
          account: true,
          amount: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentEntryDeduction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentEntryDeduction(
    @common.Param() params: PaymentEntryDeductionWhereUniqueInput
  ): Promise<PaymentEntryDeduction | null> {
    try {
      return await this.service.deletePaymentEntryDeduction({
        where: params,
        select: {
          account: true,
          amount: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
