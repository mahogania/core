/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosClosingEntryTaxes } from "./PosClosingEntryTaxes";
import { PosClosingEntryTaxesCountArgs } from "./PosClosingEntryTaxesCountArgs";
import { PosClosingEntryTaxesFindManyArgs } from "./PosClosingEntryTaxesFindManyArgs";
import { PosClosingEntryTaxesFindUniqueArgs } from "./PosClosingEntryTaxesFindUniqueArgs";
import { CreatePosClosingEntryTaxesArgs } from "./CreatePosClosingEntryTaxesArgs";
import { UpdatePosClosingEntryTaxesArgs } from "./UpdatePosClosingEntryTaxesArgs";
import { DeletePosClosingEntryTaxesArgs } from "./DeletePosClosingEntryTaxesArgs";
import { PosClosingEntryTaxesService } from "../posClosingEntryTaxes.service";
@graphql.Resolver(() => PosClosingEntryTaxes)
export class PosClosingEntryTaxesResolverBase {
  constructor(protected readonly service: PosClosingEntryTaxesService) {}

  async _posClosingEntryTaxesItemsMeta(
    @graphql.Args() args: PosClosingEntryTaxesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosClosingEntryTaxes])
  async posClosingEntryTaxesItems(
    @graphql.Args() args: PosClosingEntryTaxesFindManyArgs
  ): Promise<PosClosingEntryTaxes[]> {
    return this.service.posClosingEntryTaxesItems(args);
  }

  @graphql.Query(() => PosClosingEntryTaxes, { nullable: true })
  async posClosingEntryTaxes(
    @graphql.Args() args: PosClosingEntryTaxesFindUniqueArgs
  ): Promise<PosClosingEntryTaxes | null> {
    const result = await this.service.posClosingEntryTaxes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosClosingEntryTaxes)
  async createPosClosingEntryTaxes(
    @graphql.Args() args: CreatePosClosingEntryTaxesArgs
  ): Promise<PosClosingEntryTaxes> {
    return await this.service.createPosClosingEntryTaxes({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosClosingEntryTaxes)
  async updatePosClosingEntryTaxes(
    @graphql.Args() args: UpdatePosClosingEntryTaxesArgs
  ): Promise<PosClosingEntryTaxes | null> {
    try {
      return await this.service.updatePosClosingEntryTaxes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosClosingEntryTaxes)
  async deletePosClosingEntryTaxes(
    @graphql.Args() args: DeletePosClosingEntryTaxesArgs
  ): Promise<PosClosingEntryTaxes | null> {
    try {
      return await this.service.deletePosClosingEntryTaxes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
