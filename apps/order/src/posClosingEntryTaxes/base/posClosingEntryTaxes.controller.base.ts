/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosClosingEntryTaxesService } from "../posClosingEntryTaxes.service";
import { PosClosingEntryTaxesCreateInput } from "./PosClosingEntryTaxesCreateInput";
import { PosClosingEntryTaxes } from "./PosClosingEntryTaxes";
import { PosClosingEntryTaxesFindManyArgs } from "./PosClosingEntryTaxesFindManyArgs";
import { PosClosingEntryTaxesWhereUniqueInput } from "./PosClosingEntryTaxesWhereUniqueInput";
import { PosClosingEntryTaxesUpdateInput } from "./PosClosingEntryTaxesUpdateInput";

export class PosClosingEntryTaxesControllerBase {
  constructor(protected readonly service: PosClosingEntryTaxesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosClosingEntryTaxes })
  async createPosClosingEntryTaxes(
    @common.Body() data: PosClosingEntryTaxesCreateInput
  ): Promise<PosClosingEntryTaxes> {
    return await this.service.createPosClosingEntryTaxes({
      data: data,
      select: {
        accountHead: true,
        amount: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        rate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosClosingEntryTaxes] })
  @ApiNestedQuery(PosClosingEntryTaxesFindManyArgs)
  async posClosingEntryTaxesItems(
    @common.Req() request: Request
  ): Promise<PosClosingEntryTaxes[]> {
    const args = plainToClass(PosClosingEntryTaxesFindManyArgs, request.query);
    return this.service.posClosingEntryTaxesItems({
      ...args,
      select: {
        accountHead: true,
        amount: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        rate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntryTaxes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posClosingEntryTaxes(
    @common.Param() params: PosClosingEntryTaxesWhereUniqueInput
  ): Promise<PosClosingEntryTaxes | null> {
    const result = await this.service.posClosingEntryTaxes({
      where: params,
      select: {
        accountHead: true,
        amount: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        rate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntryTaxes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosClosingEntryTaxes(
    @common.Param() params: PosClosingEntryTaxesWhereUniqueInput,
    @common.Body() data: PosClosingEntryTaxesUpdateInput
  ): Promise<PosClosingEntryTaxes | null> {
    try {
      return await this.service.updatePosClosingEntryTaxes({
        where: params,
        data: data,
        select: {
          accountHead: true,
          amount: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          rate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntryTaxes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosClosingEntryTaxes(
    @common.Param() params: PosClosingEntryTaxesWhereUniqueInput
  ): Promise<PosClosingEntryTaxes | null> {
    try {
      return await this.service.deletePosClosingEntryTaxes({
        where: params,
        select: {
          accountHead: true,
          amount: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          rate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
