/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubcontractingReceiptItemService } from "../subcontractingReceiptItem.service";
import { SubcontractingReceiptItemCreateInput } from "./SubcontractingReceiptItemCreateInput";
import { SubcontractingReceiptItem } from "./SubcontractingReceiptItem";
import { SubcontractingReceiptItemFindManyArgs } from "./SubcontractingReceiptItemFindManyArgs";
import { SubcontractingReceiptItemWhereUniqueInput } from "./SubcontractingReceiptItemWhereUniqueInput";
import { SubcontractingReceiptItemUpdateInput } from "./SubcontractingReceiptItemUpdateInput";

export class SubcontractingReceiptItemControllerBase {
  constructor(protected readonly service: SubcontractingReceiptItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubcontractingReceiptItem })
  async createSubcontractingReceiptItem(
    @common.Body() data: SubcontractingReceiptItemCreateInput
  ): Promise<SubcontractingReceiptItem> {
    return await this.service.createSubcontractingReceiptItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubcontractingReceiptItem] })
  @ApiNestedQuery(SubcontractingReceiptItemFindManyArgs)
  async subcontractingReceiptItems(
    @common.Req() request: Request
  ): Promise<SubcontractingReceiptItem[]> {
    const args = plainToClass(
      SubcontractingReceiptItemFindManyArgs,
      request.query
    );
    return this.service.subcontractingReceiptItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingReceiptItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subcontractingReceiptItem(
    @common.Param() params: SubcontractingReceiptItemWhereUniqueInput
  ): Promise<SubcontractingReceiptItem | null> {
    const result = await this.service.subcontractingReceiptItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingReceiptItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubcontractingReceiptItem(
    @common.Param() params: SubcontractingReceiptItemWhereUniqueInput,
    @common.Body() data: SubcontractingReceiptItemUpdateInput
  ): Promise<SubcontractingReceiptItem | null> {
    try {
      return await this.service.updateSubcontractingReceiptItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingReceiptItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubcontractingReceiptItem(
    @common.Param() params: SubcontractingReceiptItemWhereUniqueInput
  ): Promise<SubcontractingReceiptItem | null> {
    try {
      return await this.service.deleteSubcontractingReceiptItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
