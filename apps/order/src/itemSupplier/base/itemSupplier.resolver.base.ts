/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemSupplier } from "./ItemSupplier";
import { ItemSupplierCountArgs } from "./ItemSupplierCountArgs";
import { ItemSupplierFindManyArgs } from "./ItemSupplierFindManyArgs";
import { ItemSupplierFindUniqueArgs } from "./ItemSupplierFindUniqueArgs";
import { CreateItemSupplierArgs } from "./CreateItemSupplierArgs";
import { UpdateItemSupplierArgs } from "./UpdateItemSupplierArgs";
import { DeleteItemSupplierArgs } from "./DeleteItemSupplierArgs";
import { ItemSupplierService } from "../itemSupplier.service";
@graphql.Resolver(() => ItemSupplier)
export class ItemSupplierResolverBase {
  constructor(protected readonly service: ItemSupplierService) {}

  async _itemSuppliersMeta(
    @graphql.Args() args: ItemSupplierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemSupplier])
  async itemSuppliers(
    @graphql.Args() args: ItemSupplierFindManyArgs
  ): Promise<ItemSupplier[]> {
    return this.service.itemSuppliers(args);
  }

  @graphql.Query(() => ItemSupplier, { nullable: true })
  async itemSupplier(
    @graphql.Args() args: ItemSupplierFindUniqueArgs
  ): Promise<ItemSupplier | null> {
    const result = await this.service.itemSupplier(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemSupplier)
  async createItemSupplier(
    @graphql.Args() args: CreateItemSupplierArgs
  ): Promise<ItemSupplier> {
    return await this.service.createItemSupplier({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemSupplier)
  async updateItemSupplier(
    @graphql.Args() args: UpdateItemSupplierArgs
  ): Promise<ItemSupplier | null> {
    try {
      return await this.service.updateItemSupplier({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemSupplier)
  async deleteItemSupplier(
    @graphql.Args() args: DeleteItemSupplierArgs
  ): Promise<ItemSupplier | null> {
    try {
      return await this.service.deleteItemSupplier(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
