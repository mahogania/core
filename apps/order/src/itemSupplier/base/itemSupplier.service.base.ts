/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemSupplier as PrismaItemSupplier } from "@prisma/client";

export class ItemSupplierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemSupplierCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemSupplier.count(args);
  }

  async itemSuppliers(
    args: Prisma.ItemSupplierFindManyArgs
  ): Promise<PrismaItemSupplier[]> {
    return this.prisma.itemSupplier.findMany(args);
  }
  async itemSupplier(
    args: Prisma.ItemSupplierFindUniqueArgs
  ): Promise<PrismaItemSupplier | null> {
    return this.prisma.itemSupplier.findUnique(args);
  }
  async createItemSupplier(
    args: Prisma.ItemSupplierCreateArgs
  ): Promise<PrismaItemSupplier> {
    return this.prisma.itemSupplier.create(args);
  }
  async updateItemSupplier(
    args: Prisma.ItemSupplierUpdateArgs
  ): Promise<PrismaItemSupplier> {
    return this.prisma.itemSupplier.update(args);
  }
  async deleteItemSupplier(
    args: Prisma.ItemSupplierDeleteArgs
  ): Promise<PrismaItemSupplier> {
    return this.prisma.itemSupplier.delete(args);
  }
}
