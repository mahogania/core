/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentEntryReferenceService } from "../paymentEntryReference.service";
import { PaymentEntryReferenceCreateInput } from "./PaymentEntryReferenceCreateInput";
import { PaymentEntryReference } from "./PaymentEntryReference";
import { PaymentEntryReferenceFindManyArgs } from "./PaymentEntryReferenceFindManyArgs";
import { PaymentEntryReferenceWhereUniqueInput } from "./PaymentEntryReferenceWhereUniqueInput";
import { PaymentEntryReferenceUpdateInput } from "./PaymentEntryReferenceUpdateInput";

export class PaymentEntryReferenceControllerBase {
  constructor(protected readonly service: PaymentEntryReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentEntryReference })
  async createPaymentEntryReference(
    @common.Body() data: PaymentEntryReferenceCreateInput
  ): Promise<PaymentEntryReference> {
    return await this.service.createPaymentEntryReference({
      data: data,
      select: {
        account: true,
        accountType: true,
        allocatedAmount: true,
        billNo: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        dueDate: true,
        exchangeGainLoss: true,
        exchangeRate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outstandingAmount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentTerm: true,
        paymentType: true,
        referenceDoctype: true,
        referenceName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentEntryReference] })
  @ApiNestedQuery(PaymentEntryReferenceFindManyArgs)
  async paymentEntryReferences(
    @common.Req() request: Request
  ): Promise<PaymentEntryReference[]> {
    const args = plainToClass(PaymentEntryReferenceFindManyArgs, request.query);
    return this.service.paymentEntryReferences({
      ...args,
      select: {
        account: true,
        accountType: true,
        allocatedAmount: true,
        billNo: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        dueDate: true,
        exchangeGainLoss: true,
        exchangeRate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outstandingAmount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentTerm: true,
        paymentType: true,
        referenceDoctype: true,
        referenceName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentEntryReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentEntryReference(
    @common.Param() params: PaymentEntryReferenceWhereUniqueInput
  ): Promise<PaymentEntryReference | null> {
    const result = await this.service.paymentEntryReference({
      where: params,
      select: {
        account: true,
        accountType: true,
        allocatedAmount: true,
        billNo: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        dueDate: true,
        exchangeGainLoss: true,
        exchangeRate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outstandingAmount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentTerm: true,
        paymentType: true,
        referenceDoctype: true,
        referenceName: true,
        totalAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentEntryReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentEntryReference(
    @common.Param() params: PaymentEntryReferenceWhereUniqueInput,
    @common.Body() data: PaymentEntryReferenceUpdateInput
  ): Promise<PaymentEntryReference | null> {
    try {
      return await this.service.updatePaymentEntryReference({
        where: params,
        data: data,
        select: {
          account: true,
          accountType: true,
          allocatedAmount: true,
          billNo: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          dueDate: true,
          exchangeGainLoss: true,
          exchangeRate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          outstandingAmount: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          paymentTerm: true,
          paymentType: true,
          referenceDoctype: true,
          referenceName: true,
          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentEntryReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentEntryReference(
    @common.Param() params: PaymentEntryReferenceWhereUniqueInput
  ): Promise<PaymentEntryReference | null> {
    try {
      return await this.service.deletePaymentEntryReference({
        where: params,
        select: {
          account: true,
          accountType: true,
          allocatedAmount: true,
          billNo: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          dueDate: true,
          exchangeGainLoss: true,
          exchangeRate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          outstandingAmount: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          paymentTerm: true,
          paymentType: true,
          referenceDoctype: true,
          referenceName: true,
          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
