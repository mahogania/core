/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentEntryReference } from "./PaymentEntryReference";
import { PaymentEntryReferenceCountArgs } from "./PaymentEntryReferenceCountArgs";
import { PaymentEntryReferenceFindManyArgs } from "./PaymentEntryReferenceFindManyArgs";
import { PaymentEntryReferenceFindUniqueArgs } from "./PaymentEntryReferenceFindUniqueArgs";
import { CreatePaymentEntryReferenceArgs } from "./CreatePaymentEntryReferenceArgs";
import { UpdatePaymentEntryReferenceArgs } from "./UpdatePaymentEntryReferenceArgs";
import { DeletePaymentEntryReferenceArgs } from "./DeletePaymentEntryReferenceArgs";
import { PaymentEntryReferenceService } from "../paymentEntryReference.service";
@graphql.Resolver(() => PaymentEntryReference)
export class PaymentEntryReferenceResolverBase {
  constructor(protected readonly service: PaymentEntryReferenceService) {}

  async _paymentEntryReferencesMeta(
    @graphql.Args() args: PaymentEntryReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentEntryReference])
  async paymentEntryReferences(
    @graphql.Args() args: PaymentEntryReferenceFindManyArgs
  ): Promise<PaymentEntryReference[]> {
    return this.service.paymentEntryReferences(args);
  }

  @graphql.Query(() => PaymentEntryReference, { nullable: true })
  async paymentEntryReference(
    @graphql.Args() args: PaymentEntryReferenceFindUniqueArgs
  ): Promise<PaymentEntryReference | null> {
    const result = await this.service.paymentEntryReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentEntryReference)
  async createPaymentEntryReference(
    @graphql.Args() args: CreatePaymentEntryReferenceArgs
  ): Promise<PaymentEntryReference> {
    return await this.service.createPaymentEntryReference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentEntryReference)
  async updatePaymentEntryReference(
    @graphql.Args() args: UpdatePaymentEntryReferenceArgs
  ): Promise<PaymentEntryReference | null> {
    try {
      return await this.service.updatePaymentEntryReference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentEntryReference)
  async deletePaymentEntryReference(
    @graphql.Args() args: DeletePaymentEntryReferenceArgs
  ): Promise<PaymentEntryReference | null> {
    try {
      return await this.service.deletePaymentEntryReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
