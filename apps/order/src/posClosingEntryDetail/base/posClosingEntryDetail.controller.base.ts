/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosClosingEntryDetailService } from "../posClosingEntryDetail.service";
import { PosClosingEntryDetailCreateInput } from "./PosClosingEntryDetailCreateInput";
import { PosClosingEntryDetail } from "./PosClosingEntryDetail";
import { PosClosingEntryDetailFindManyArgs } from "./PosClosingEntryDetailFindManyArgs";
import { PosClosingEntryDetailWhereUniqueInput } from "./PosClosingEntryDetailWhereUniqueInput";
import { PosClosingEntryDetailUpdateInput } from "./PosClosingEntryDetailUpdateInput";

export class PosClosingEntryDetailControllerBase {
  constructor(protected readonly service: PosClosingEntryDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosClosingEntryDetail })
  async createPosClosingEntryDetail(
    @common.Body() data: PosClosingEntryDetailCreateInput
  ): Promise<PosClosingEntryDetail> {
    return await this.service.createPosClosingEntryDetail({
      data: data,
      select: {
        closingAmount: true,
        createdAt: true,
        creation: true,
        difference: true,
        docStatus: true,
        expectedAmount: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        openingAmount: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosClosingEntryDetail] })
  @ApiNestedQuery(PosClosingEntryDetailFindManyArgs)
  async posClosingEntryDetails(
    @common.Req() request: Request
  ): Promise<PosClosingEntryDetail[]> {
    const args = plainToClass(PosClosingEntryDetailFindManyArgs, request.query);
    return this.service.posClosingEntryDetails({
      ...args,
      select: {
        closingAmount: true,
        createdAt: true,
        creation: true,
        difference: true,
        docStatus: true,
        expectedAmount: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        openingAmount: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posClosingEntryDetail(
    @common.Param() params: PosClosingEntryDetailWhereUniqueInput
  ): Promise<PosClosingEntryDetail | null> {
    const result = await this.service.posClosingEntryDetail({
      where: params,
      select: {
        closingAmount: true,
        createdAt: true,
        creation: true,
        difference: true,
        docStatus: true,
        expectedAmount: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        openingAmount: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosClosingEntryDetail(
    @common.Param() params: PosClosingEntryDetailWhereUniqueInput,
    @common.Body() data: PosClosingEntryDetailUpdateInput
  ): Promise<PosClosingEntryDetail | null> {
    try {
      return await this.service.updatePosClosingEntryDetail({
        where: params,
        data: data,
        select: {
          closingAmount: true,
          createdAt: true,
          creation: true,
          difference: true,
          docStatus: true,
          expectedAmount: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          openingAmount: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosClosingEntryDetail(
    @common.Param() params: PosClosingEntryDetailWhereUniqueInput
  ): Promise<PosClosingEntryDetail | null> {
    try {
      return await this.service.deletePosClosingEntryDetail({
        where: params,
        select: {
          closingAmount: true,
          createdAt: true,
          creation: true,
          difference: true,
          docStatus: true,
          expectedAmount: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          openingAmount: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
