/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosClosingEntryDetail } from "./PosClosingEntryDetail";
import { PosClosingEntryDetailCountArgs } from "./PosClosingEntryDetailCountArgs";
import { PosClosingEntryDetailFindManyArgs } from "./PosClosingEntryDetailFindManyArgs";
import { PosClosingEntryDetailFindUniqueArgs } from "./PosClosingEntryDetailFindUniqueArgs";
import { CreatePosClosingEntryDetailArgs } from "./CreatePosClosingEntryDetailArgs";
import { UpdatePosClosingEntryDetailArgs } from "./UpdatePosClosingEntryDetailArgs";
import { DeletePosClosingEntryDetailArgs } from "./DeletePosClosingEntryDetailArgs";
import { PosClosingEntryDetailService } from "../posClosingEntryDetail.service";
@graphql.Resolver(() => PosClosingEntryDetail)
export class PosClosingEntryDetailResolverBase {
  constructor(protected readonly service: PosClosingEntryDetailService) {}

  async _posClosingEntryDetailsMeta(
    @graphql.Args() args: PosClosingEntryDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosClosingEntryDetail])
  async posClosingEntryDetails(
    @graphql.Args() args: PosClosingEntryDetailFindManyArgs
  ): Promise<PosClosingEntryDetail[]> {
    return this.service.posClosingEntryDetails(args);
  }

  @graphql.Query(() => PosClosingEntryDetail, { nullable: true })
  async posClosingEntryDetail(
    @graphql.Args() args: PosClosingEntryDetailFindUniqueArgs
  ): Promise<PosClosingEntryDetail | null> {
    const result = await this.service.posClosingEntryDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosClosingEntryDetail)
  async createPosClosingEntryDetail(
    @graphql.Args() args: CreatePosClosingEntryDetailArgs
  ): Promise<PosClosingEntryDetail> {
    return await this.service.createPosClosingEntryDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosClosingEntryDetail)
  async updatePosClosingEntryDetail(
    @graphql.Args() args: UpdatePosClosingEntryDetailArgs
  ): Promise<PosClosingEntryDetail | null> {
    try {
      return await this.service.updatePosClosingEntryDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosClosingEntryDetail)
  async deletePosClosingEntryDetail(
    @graphql.Args() args: DeletePosClosingEntryDetailArgs
  ): Promise<PosClosingEntryDetail | null> {
    try {
      return await this.service.deletePosClosingEntryDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
