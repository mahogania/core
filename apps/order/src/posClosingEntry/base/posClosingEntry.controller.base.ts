/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosClosingEntryService } from "../posClosingEntry.service";
import { PosClosingEntryCreateInput } from "./PosClosingEntryCreateInput";
import { PosClosingEntry } from "./PosClosingEntry";
import { PosClosingEntryFindManyArgs } from "./PosClosingEntryFindManyArgs";
import { PosClosingEntryWhereUniqueInput } from "./PosClosingEntryWhereUniqueInput";
import { PosClosingEntryUpdateInput } from "./PosClosingEntryUpdateInput";

export class PosClosingEntryControllerBase {
  constructor(protected readonly service: PosClosingEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosClosingEntry })
  async createPosClosingEntry(
    @common.Body() data: PosClosingEntryCreateInput
  ): Promise<PosClosingEntry> {
    return await this.service.createPosClosingEntry({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        errorMessage: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        netTotal: true,
        owner: true,
        periodEndDate: true,
        periodStartDate: true,
        posOpeningEntry: true,
        posProfile: true,
        postingDate: true,
        postingTime: true,
        status: true,
        totalQuantity: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosClosingEntry] })
  @ApiNestedQuery(PosClosingEntryFindManyArgs)
  async posClosingEntries(
    @common.Req() request: Request
  ): Promise<PosClosingEntry[]> {
    const args = plainToClass(PosClosingEntryFindManyArgs, request.query);
    return this.service.posClosingEntries({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        errorMessage: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        netTotal: true,
        owner: true,
        periodEndDate: true,
        periodStartDate: true,
        posOpeningEntry: true,
        posProfile: true,
        postingDate: true,
        postingTime: true,
        status: true,
        totalQuantity: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posClosingEntry(
    @common.Param() params: PosClosingEntryWhereUniqueInput
  ): Promise<PosClosingEntry | null> {
    const result = await this.service.posClosingEntry({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        errorMessage: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        netTotal: true,
        owner: true,
        periodEndDate: true,
        periodStartDate: true,
        posOpeningEntry: true,
        posProfile: true,
        postingDate: true,
        postingTime: true,
        status: true,
        totalQuantity: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosClosingEntry(
    @common.Param() params: PosClosingEntryWhereUniqueInput,
    @common.Body() data: PosClosingEntryUpdateInput
  ): Promise<PosClosingEntry | null> {
    try {
      return await this.service.updatePosClosingEntry({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          errorMessage: true,
          grandTotal: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          netTotal: true,
          owner: true,
          periodEndDate: true,
          periodStartDate: true,
          posOpeningEntry: true,
          posProfile: true,
          postingDate: true,
          postingTime: true,
          status: true,
          totalQuantity: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosClosingEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosClosingEntry(
    @common.Param() params: PosClosingEntryWhereUniqueInput
  ): Promise<PosClosingEntry | null> {
    try {
      return await this.service.deletePosClosingEntry({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          errorMessage: true,
          grandTotal: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          netTotal: true,
          owner: true,
          periodEndDate: true,
          periodStartDate: true,
          posOpeningEntry: true,
          posProfile: true,
          postingDate: true,
          postingTime: true,
          status: true,
          totalQuantity: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
