/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosClosingEntry } from "./PosClosingEntry";
import { PosClosingEntryCountArgs } from "./PosClosingEntryCountArgs";
import { PosClosingEntryFindManyArgs } from "./PosClosingEntryFindManyArgs";
import { PosClosingEntryFindUniqueArgs } from "./PosClosingEntryFindUniqueArgs";
import { CreatePosClosingEntryArgs } from "./CreatePosClosingEntryArgs";
import { UpdatePosClosingEntryArgs } from "./UpdatePosClosingEntryArgs";
import { DeletePosClosingEntryArgs } from "./DeletePosClosingEntryArgs";
import { PosClosingEntryService } from "../posClosingEntry.service";
@graphql.Resolver(() => PosClosingEntry)
export class PosClosingEntryResolverBase {
  constructor(protected readonly service: PosClosingEntryService) {}

  async _posClosingEntriesMeta(
    @graphql.Args() args: PosClosingEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosClosingEntry])
  async posClosingEntries(
    @graphql.Args() args: PosClosingEntryFindManyArgs
  ): Promise<PosClosingEntry[]> {
    return this.service.posClosingEntries(args);
  }

  @graphql.Query(() => PosClosingEntry, { nullable: true })
  async posClosingEntry(
    @graphql.Args() args: PosClosingEntryFindUniqueArgs
  ): Promise<PosClosingEntry | null> {
    const result = await this.service.posClosingEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosClosingEntry)
  async createPosClosingEntry(
    @graphql.Args() args: CreatePosClosingEntryArgs
  ): Promise<PosClosingEntry> {
    return await this.service.createPosClosingEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosClosingEntry)
  async updatePosClosingEntry(
    @graphql.Args() args: UpdatePosClosingEntryArgs
  ): Promise<PosClosingEntry | null> {
    try {
      return await this.service.updatePosClosingEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosClosingEntry)
  async deletePosClosingEntry(
    @graphql.Args() args: DeletePosClosingEntryArgs
  ): Promise<PosClosingEntry | null> {
    try {
      return await this.service.deletePosClosingEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
