/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseOrderItem } from "./PurchaseOrderItem";
import { PurchaseOrderItemCountArgs } from "./PurchaseOrderItemCountArgs";
import { PurchaseOrderItemFindManyArgs } from "./PurchaseOrderItemFindManyArgs";
import { PurchaseOrderItemFindUniqueArgs } from "./PurchaseOrderItemFindUniqueArgs";
import { CreatePurchaseOrderItemArgs } from "./CreatePurchaseOrderItemArgs";
import { UpdatePurchaseOrderItemArgs } from "./UpdatePurchaseOrderItemArgs";
import { DeletePurchaseOrderItemArgs } from "./DeletePurchaseOrderItemArgs";
import { PurchaseOrderItemService } from "../purchaseOrderItem.service";
@graphql.Resolver(() => PurchaseOrderItem)
export class PurchaseOrderItemResolverBase {
  constructor(protected readonly service: PurchaseOrderItemService) {}

  async _purchaseOrderItemsMeta(
    @graphql.Args() args: PurchaseOrderItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseOrderItem])
  async purchaseOrderItems(
    @graphql.Args() args: PurchaseOrderItemFindManyArgs
  ): Promise<PurchaseOrderItem[]> {
    return this.service.purchaseOrderItems(args);
  }

  @graphql.Query(() => PurchaseOrderItem, { nullable: true })
  async purchaseOrderItem(
    @graphql.Args() args: PurchaseOrderItemFindUniqueArgs
  ): Promise<PurchaseOrderItem | null> {
    const result = await this.service.purchaseOrderItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseOrderItem)
  async createPurchaseOrderItem(
    @graphql.Args() args: CreatePurchaseOrderItemArgs
  ): Promise<PurchaseOrderItem> {
    return await this.service.createPurchaseOrderItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseOrderItem)
  async updatePurchaseOrderItem(
    @graphql.Args() args: UpdatePurchaseOrderItemArgs
  ): Promise<PurchaseOrderItem | null> {
    try {
      return await this.service.updatePurchaseOrderItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseOrderItem)
  async deletePurchaseOrderItem(
    @graphql.Args() args: DeletePurchaseOrderItemArgs
  ): Promise<PurchaseOrderItem | null> {
    try {
      return await this.service.deletePurchaseOrderItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
