/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UnreconcilePayment } from "./UnreconcilePayment";
import { UnreconcilePaymentCountArgs } from "./UnreconcilePaymentCountArgs";
import { UnreconcilePaymentFindManyArgs } from "./UnreconcilePaymentFindManyArgs";
import { UnreconcilePaymentFindUniqueArgs } from "./UnreconcilePaymentFindUniqueArgs";
import { CreateUnreconcilePaymentArgs } from "./CreateUnreconcilePaymentArgs";
import { UpdateUnreconcilePaymentArgs } from "./UpdateUnreconcilePaymentArgs";
import { DeleteUnreconcilePaymentArgs } from "./DeleteUnreconcilePaymentArgs";
import { UnreconcilePaymentService } from "../unreconcilePayment.service";
@graphql.Resolver(() => UnreconcilePayment)
export class UnreconcilePaymentResolverBase {
  constructor(protected readonly service: UnreconcilePaymentService) {}

  async _unreconcilePaymentsMeta(
    @graphql.Args() args: UnreconcilePaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UnreconcilePayment])
  async unreconcilePayments(
    @graphql.Args() args: UnreconcilePaymentFindManyArgs
  ): Promise<UnreconcilePayment[]> {
    return this.service.unreconcilePayments(args);
  }

  @graphql.Query(() => UnreconcilePayment, { nullable: true })
  async unreconcilePayment(
    @graphql.Args() args: UnreconcilePaymentFindUniqueArgs
  ): Promise<UnreconcilePayment | null> {
    const result = await this.service.unreconcilePayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UnreconcilePayment)
  async createUnreconcilePayment(
    @graphql.Args() args: CreateUnreconcilePaymentArgs
  ): Promise<UnreconcilePayment> {
    return await this.service.createUnreconcilePayment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UnreconcilePayment)
  async updateUnreconcilePayment(
    @graphql.Args() args: UpdateUnreconcilePaymentArgs
  ): Promise<UnreconcilePayment | null> {
    try {
      return await this.service.updateUnreconcilePayment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UnreconcilePayment)
  async deleteUnreconcilePayment(
    @graphql.Args() args: DeleteUnreconcilePaymentArgs
  ): Promise<UnreconcilePayment | null> {
    try {
      return await this.service.deleteUnreconcilePayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
