/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UnreconcilePaymentEntries } from "./UnreconcilePaymentEntries";
import { UnreconcilePaymentEntriesCountArgs } from "./UnreconcilePaymentEntriesCountArgs";
import { UnreconcilePaymentEntriesFindManyArgs } from "./UnreconcilePaymentEntriesFindManyArgs";
import { UnreconcilePaymentEntriesFindUniqueArgs } from "./UnreconcilePaymentEntriesFindUniqueArgs";
import { CreateUnreconcilePaymentEntriesArgs } from "./CreateUnreconcilePaymentEntriesArgs";
import { UpdateUnreconcilePaymentEntriesArgs } from "./UpdateUnreconcilePaymentEntriesArgs";
import { DeleteUnreconcilePaymentEntriesArgs } from "./DeleteUnreconcilePaymentEntriesArgs";
import { UnreconcilePaymentEntriesService } from "../unreconcilePaymentEntries.service";
@graphql.Resolver(() => UnreconcilePaymentEntries)
export class UnreconcilePaymentEntriesResolverBase {
  constructor(protected readonly service: UnreconcilePaymentEntriesService) {}

  async _unreconcilePaymentEntriesItemsMeta(
    @graphql.Args() args: UnreconcilePaymentEntriesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UnreconcilePaymentEntries])
  async unreconcilePaymentEntriesItems(
    @graphql.Args() args: UnreconcilePaymentEntriesFindManyArgs
  ): Promise<UnreconcilePaymentEntries[]> {
    return this.service.unreconcilePaymentEntriesItems(args);
  }

  @graphql.Query(() => UnreconcilePaymentEntries, { nullable: true })
  async unreconcilePaymentEntries(
    @graphql.Args() args: UnreconcilePaymentEntriesFindUniqueArgs
  ): Promise<UnreconcilePaymentEntries | null> {
    const result = await this.service.unreconcilePaymentEntries(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UnreconcilePaymentEntries)
  async createUnreconcilePaymentEntries(
    @graphql.Args() args: CreateUnreconcilePaymentEntriesArgs
  ): Promise<UnreconcilePaymentEntries> {
    return await this.service.createUnreconcilePaymentEntries({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UnreconcilePaymentEntries)
  async updateUnreconcilePaymentEntries(
    @graphql.Args() args: UpdateUnreconcilePaymentEntriesArgs
  ): Promise<UnreconcilePaymentEntries | null> {
    try {
      return await this.service.updateUnreconcilePaymentEntries({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UnreconcilePaymentEntries)
  async deleteUnreconcilePaymentEntries(
    @graphql.Args() args: DeleteUnreconcilePaymentEntriesArgs
  ): Promise<UnreconcilePaymentEntries | null> {
    try {
      return await this.service.deleteUnreconcilePaymentEntries(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
