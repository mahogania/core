/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UnreconcilePaymentEntriesService } from "../unreconcilePaymentEntries.service";
import { UnreconcilePaymentEntriesCreateInput } from "./UnreconcilePaymentEntriesCreateInput";
import { UnreconcilePaymentEntries } from "./UnreconcilePaymentEntries";
import { UnreconcilePaymentEntriesFindManyArgs } from "./UnreconcilePaymentEntriesFindManyArgs";
import { UnreconcilePaymentEntriesWhereUniqueInput } from "./UnreconcilePaymentEntriesWhereUniqueInput";
import { UnreconcilePaymentEntriesUpdateInput } from "./UnreconcilePaymentEntriesUpdateInput";

export class UnreconcilePaymentEntriesControllerBase {
  constructor(protected readonly service: UnreconcilePaymentEntriesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UnreconcilePaymentEntries })
  async createUnreconcilePaymentEntries(
    @common.Body() data: UnreconcilePaymentEntriesCreateInput
  ): Promise<UnreconcilePaymentEntries> {
    return await this.service.createUnreconcilePaymentEntries({
      data: data,
      select: {
        account: true,
        accountCurrency: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        party: true,
        partyType: true,
        referenceDoctype: true,
        referenceName: true,
        unlinked: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UnreconcilePaymentEntries] })
  @ApiNestedQuery(UnreconcilePaymentEntriesFindManyArgs)
  async unreconcilePaymentEntriesItems(
    @common.Req() request: Request
  ): Promise<UnreconcilePaymentEntries[]> {
    const args = plainToClass(
      UnreconcilePaymentEntriesFindManyArgs,
      request.query
    );
    return this.service.unreconcilePaymentEntriesItems({
      ...args,
      select: {
        account: true,
        accountCurrency: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        party: true,
        partyType: true,
        referenceDoctype: true,
        referenceName: true,
        unlinked: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UnreconcilePaymentEntries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async unreconcilePaymentEntries(
    @common.Param() params: UnreconcilePaymentEntriesWhereUniqueInput
  ): Promise<UnreconcilePaymentEntries | null> {
    const result = await this.service.unreconcilePaymentEntries({
      where: params,
      select: {
        account: true,
        accountCurrency: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        party: true,
        partyType: true,
        referenceDoctype: true,
        referenceName: true,
        unlinked: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UnreconcilePaymentEntries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUnreconcilePaymentEntries(
    @common.Param() params: UnreconcilePaymentEntriesWhereUniqueInput,
    @common.Body() data: UnreconcilePaymentEntriesUpdateInput
  ): Promise<UnreconcilePaymentEntries | null> {
    try {
      return await this.service.updateUnreconcilePaymentEntries({
        where: params,
        data: data,
        select: {
          account: true,
          accountCurrency: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          party: true,
          partyType: true,
          referenceDoctype: true,
          referenceName: true,
          unlinked: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UnreconcilePaymentEntries })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUnreconcilePaymentEntries(
    @common.Param() params: UnreconcilePaymentEntriesWhereUniqueInput
  ): Promise<UnreconcilePaymentEntries | null> {
    try {
      return await this.service.deleteUnreconcilePaymentEntries({
        where: params,
        select: {
          account: true,
          accountCurrency: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          party: true,
          partyType: true,
          referenceDoctype: true,
          referenceName: true,
          unlinked: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
