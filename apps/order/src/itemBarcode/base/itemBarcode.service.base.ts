/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemBarcode as PrismaItemBarcode } from "@prisma/client";

export class ItemBarcodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemBarcodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemBarcode.count(args);
  }

  async itemBarcodes(
    args: Prisma.ItemBarcodeFindManyArgs
  ): Promise<PrismaItemBarcode[]> {
    return this.prisma.itemBarcode.findMany(args);
  }
  async itemBarcode(
    args: Prisma.ItemBarcodeFindUniqueArgs
  ): Promise<PrismaItemBarcode | null> {
    return this.prisma.itemBarcode.findUnique(args);
  }
  async createItemBarcode(
    args: Prisma.ItemBarcodeCreateArgs
  ): Promise<PrismaItemBarcode> {
    return this.prisma.itemBarcode.create(args);
  }
  async updateItemBarcode(
    args: Prisma.ItemBarcodeUpdateArgs
  ): Promise<PrismaItemBarcode> {
    return this.prisma.itemBarcode.update(args);
  }
  async deleteItemBarcode(
    args: Prisma.ItemBarcodeDeleteArgs
  ): Promise<PrismaItemBarcode> {
    return this.prisma.itemBarcode.delete(args);
  }
}
