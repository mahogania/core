/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemBarcode } from "./ItemBarcode";
import { ItemBarcodeCountArgs } from "./ItemBarcodeCountArgs";
import { ItemBarcodeFindManyArgs } from "./ItemBarcodeFindManyArgs";
import { ItemBarcodeFindUniqueArgs } from "./ItemBarcodeFindUniqueArgs";
import { CreateItemBarcodeArgs } from "./CreateItemBarcodeArgs";
import { UpdateItemBarcodeArgs } from "./UpdateItemBarcodeArgs";
import { DeleteItemBarcodeArgs } from "./DeleteItemBarcodeArgs";
import { ItemBarcodeService } from "../itemBarcode.service";
@graphql.Resolver(() => ItemBarcode)
export class ItemBarcodeResolverBase {
  constructor(protected readonly service: ItemBarcodeService) {}

  async _itemBarcodesMeta(
    @graphql.Args() args: ItemBarcodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemBarcode])
  async itemBarcodes(
    @graphql.Args() args: ItemBarcodeFindManyArgs
  ): Promise<ItemBarcode[]> {
    return this.service.itemBarcodes(args);
  }

  @graphql.Query(() => ItemBarcode, { nullable: true })
  async itemBarcode(
    @graphql.Args() args: ItemBarcodeFindUniqueArgs
  ): Promise<ItemBarcode | null> {
    const result = await this.service.itemBarcode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemBarcode)
  async createItemBarcode(
    @graphql.Args() args: CreateItemBarcodeArgs
  ): Promise<ItemBarcode> {
    return await this.service.createItemBarcode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemBarcode)
  async updateItemBarcode(
    @graphql.Args() args: UpdateItemBarcodeArgs
  ): Promise<ItemBarcode | null> {
    try {
      return await this.service.updateItemBarcode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemBarcode)
  async deleteItemBarcode(
    @graphql.Args() args: DeleteItemBarcodeArgs
  ): Promise<ItemBarcode | null> {
    try {
      return await this.service.deleteItemBarcode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
