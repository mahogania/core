/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentLedgerEntry } from "./PaymentLedgerEntry";
import { PaymentLedgerEntryCountArgs } from "./PaymentLedgerEntryCountArgs";
import { PaymentLedgerEntryFindManyArgs } from "./PaymentLedgerEntryFindManyArgs";
import { PaymentLedgerEntryFindUniqueArgs } from "./PaymentLedgerEntryFindUniqueArgs";
import { CreatePaymentLedgerEntryArgs } from "./CreatePaymentLedgerEntryArgs";
import { UpdatePaymentLedgerEntryArgs } from "./UpdatePaymentLedgerEntryArgs";
import { DeletePaymentLedgerEntryArgs } from "./DeletePaymentLedgerEntryArgs";
import { PaymentLedgerEntryService } from "../paymentLedgerEntry.service";
@graphql.Resolver(() => PaymentLedgerEntry)
export class PaymentLedgerEntryResolverBase {
  constructor(protected readonly service: PaymentLedgerEntryService) {}

  async _paymentLedgerEntriesMeta(
    @graphql.Args() args: PaymentLedgerEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentLedgerEntry])
  async paymentLedgerEntries(
    @graphql.Args() args: PaymentLedgerEntryFindManyArgs
  ): Promise<PaymentLedgerEntry[]> {
    return this.service.paymentLedgerEntries(args);
  }

  @graphql.Query(() => PaymentLedgerEntry, { nullable: true })
  async paymentLedgerEntry(
    @graphql.Args() args: PaymentLedgerEntryFindUniqueArgs
  ): Promise<PaymentLedgerEntry | null> {
    const result = await this.service.paymentLedgerEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentLedgerEntry)
  async createPaymentLedgerEntry(
    @graphql.Args() args: CreatePaymentLedgerEntryArgs
  ): Promise<PaymentLedgerEntry> {
    return await this.service.createPaymentLedgerEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentLedgerEntry)
  async updatePaymentLedgerEntry(
    @graphql.Args() args: UpdatePaymentLedgerEntryArgs
  ): Promise<PaymentLedgerEntry | null> {
    try {
      return await this.service.updatePaymentLedgerEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentLedgerEntry)
  async deletePaymentLedgerEntry(
    @graphql.Args() args: DeletePaymentLedgerEntryArgs
  ): Promise<PaymentLedgerEntry | null> {
    try {
      return await this.service.deletePaymentLedgerEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
