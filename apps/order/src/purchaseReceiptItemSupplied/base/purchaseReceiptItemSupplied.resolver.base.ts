/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseReceiptItemSupplied } from "./PurchaseReceiptItemSupplied";
import { PurchaseReceiptItemSuppliedCountArgs } from "./PurchaseReceiptItemSuppliedCountArgs";
import { PurchaseReceiptItemSuppliedFindManyArgs } from "./PurchaseReceiptItemSuppliedFindManyArgs";
import { PurchaseReceiptItemSuppliedFindUniqueArgs } from "./PurchaseReceiptItemSuppliedFindUniqueArgs";
import { CreatePurchaseReceiptItemSuppliedArgs } from "./CreatePurchaseReceiptItemSuppliedArgs";
import { UpdatePurchaseReceiptItemSuppliedArgs } from "./UpdatePurchaseReceiptItemSuppliedArgs";
import { DeletePurchaseReceiptItemSuppliedArgs } from "./DeletePurchaseReceiptItemSuppliedArgs";
import { PurchaseReceiptItemSuppliedService } from "../purchaseReceiptItemSupplied.service";
@graphql.Resolver(() => PurchaseReceiptItemSupplied)
export class PurchaseReceiptItemSuppliedResolverBase {
  constructor(protected readonly service: PurchaseReceiptItemSuppliedService) {}

  async _purchaseReceiptItemSuppliedsMeta(
    @graphql.Args() args: PurchaseReceiptItemSuppliedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseReceiptItemSupplied])
  async purchaseReceiptItemSupplieds(
    @graphql.Args() args: PurchaseReceiptItemSuppliedFindManyArgs
  ): Promise<PurchaseReceiptItemSupplied[]> {
    return this.service.purchaseReceiptItemSupplieds(args);
  }

  @graphql.Query(() => PurchaseReceiptItemSupplied, { nullable: true })
  async purchaseReceiptItemSupplied(
    @graphql.Args() args: PurchaseReceiptItemSuppliedFindUniqueArgs
  ): Promise<PurchaseReceiptItemSupplied | null> {
    const result = await this.service.purchaseReceiptItemSupplied(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseReceiptItemSupplied)
  async createPurchaseReceiptItemSupplied(
    @graphql.Args() args: CreatePurchaseReceiptItemSuppliedArgs
  ): Promise<PurchaseReceiptItemSupplied> {
    return await this.service.createPurchaseReceiptItemSupplied({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseReceiptItemSupplied)
  async updatePurchaseReceiptItemSupplied(
    @graphql.Args() args: UpdatePurchaseReceiptItemSuppliedArgs
  ): Promise<PurchaseReceiptItemSupplied | null> {
    try {
      return await this.service.updatePurchaseReceiptItemSupplied({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseReceiptItemSupplied)
  async deletePurchaseReceiptItemSupplied(
    @graphql.Args() args: DeletePurchaseReceiptItemSuppliedArgs
  ): Promise<PurchaseReceiptItemSupplied | null> {
    try {
      return await this.service.deletePurchaseReceiptItemSupplied(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
