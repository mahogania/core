/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesInvoiceTimesheetService } from "../salesInvoiceTimesheet.service";
import { SalesInvoiceTimesheetCreateInput } from "./SalesInvoiceTimesheetCreateInput";
import { SalesInvoiceTimesheet } from "./SalesInvoiceTimesheet";
import { SalesInvoiceTimesheetFindManyArgs } from "./SalesInvoiceTimesheetFindManyArgs";
import { SalesInvoiceTimesheetWhereUniqueInput } from "./SalesInvoiceTimesheetWhereUniqueInput";
import { SalesInvoiceTimesheetUpdateInput } from "./SalesInvoiceTimesheetUpdateInput";

export class SalesInvoiceTimesheetControllerBase {
  constructor(protected readonly service: SalesInvoiceTimesheetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesInvoiceTimesheet })
  async createSalesInvoiceTimesheet(
    @common.Body() data: SalesInvoiceTimesheetCreateInput
  ): Promise<SalesInvoiceTimesheet> {
    return await this.service.createSalesInvoiceTimesheet({
      data: data,
      select: {
        activityType: true,
        billingAmount: true,
        billingHours: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        projectName: true,
        timeSheet: true,
        timesheetDetail: true,
        toTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesInvoiceTimesheet] })
  @ApiNestedQuery(SalesInvoiceTimesheetFindManyArgs)
  async salesInvoiceTimesheets(
    @common.Req() request: Request
  ): Promise<SalesInvoiceTimesheet[]> {
    const args = plainToClass(SalesInvoiceTimesheetFindManyArgs, request.query);
    return this.service.salesInvoiceTimesheets({
      ...args,
      select: {
        activityType: true,
        billingAmount: true,
        billingHours: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        projectName: true,
        timeSheet: true,
        timesheetDetail: true,
        toTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoiceTimesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesInvoiceTimesheet(
    @common.Param() params: SalesInvoiceTimesheetWhereUniqueInput
  ): Promise<SalesInvoiceTimesheet | null> {
    const result = await this.service.salesInvoiceTimesheet({
      where: params,
      select: {
        activityType: true,
        billingAmount: true,
        billingHours: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        projectName: true,
        timeSheet: true,
        timesheetDetail: true,
        toTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoiceTimesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesInvoiceTimesheet(
    @common.Param() params: SalesInvoiceTimesheetWhereUniqueInput,
    @common.Body() data: SalesInvoiceTimesheetUpdateInput
  ): Promise<SalesInvoiceTimesheet | null> {
    try {
      return await this.service.updateSalesInvoiceTimesheet({
        where: params,
        data: data,
        select: {
          activityType: true,
          billingAmount: true,
          billingHours: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          fromTime: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          projectName: true,
          timeSheet: true,
          timesheetDetail: true,
          toTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoiceTimesheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesInvoiceTimesheet(
    @common.Param() params: SalesInvoiceTimesheetWhereUniqueInput
  ): Promise<SalesInvoiceTimesheet | null> {
    try {
      return await this.service.deleteSalesInvoiceTimesheet({
        where: params,
        select: {
          activityType: true,
          billingAmount: true,
          billingHours: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          fromTime: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          projectName: true,
          timeSheet: true,
          timesheetDetail: true,
          toTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
