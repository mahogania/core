/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubcontractingOrderSuppliedItemService } from "../subcontractingOrderSuppliedItem.service";
import { SubcontractingOrderSuppliedItemCreateInput } from "./SubcontractingOrderSuppliedItemCreateInput";
import { SubcontractingOrderSuppliedItem } from "./SubcontractingOrderSuppliedItem";
import { SubcontractingOrderSuppliedItemFindManyArgs } from "./SubcontractingOrderSuppliedItemFindManyArgs";
import { SubcontractingOrderSuppliedItemWhereUniqueInput } from "./SubcontractingOrderSuppliedItemWhereUniqueInput";
import { SubcontractingOrderSuppliedItemUpdateInput } from "./SubcontractingOrderSuppliedItemUpdateInput";

export class SubcontractingOrderSuppliedItemControllerBase {
  constructor(
    protected readonly service: SubcontractingOrderSuppliedItemService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubcontractingOrderSuppliedItem })
  async createSubcontractingOrderSuppliedItem(
    @common.Body() data: SubcontractingOrderSuppliedItemCreateInput
  ): Promise<SubcontractingOrderSuppliedItem> {
    return await this.service.createSubcontractingOrderSuppliedItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubcontractingOrderSuppliedItem] })
  @ApiNestedQuery(SubcontractingOrderSuppliedItemFindManyArgs)
  async subcontractingOrderSuppliedItems(
    @common.Req() request: Request
  ): Promise<SubcontractingOrderSuppliedItem[]> {
    const args = plainToClass(
      SubcontractingOrderSuppliedItemFindManyArgs,
      request.query
    );
    return this.service.subcontractingOrderSuppliedItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrderSuppliedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subcontractingOrderSuppliedItem(
    @common.Param() params: SubcontractingOrderSuppliedItemWhereUniqueInput
  ): Promise<SubcontractingOrderSuppliedItem | null> {
    const result = await this.service.subcontractingOrderSuppliedItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrderSuppliedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubcontractingOrderSuppliedItem(
    @common.Param() params: SubcontractingOrderSuppliedItemWhereUniqueInput,
    @common.Body() data: SubcontractingOrderSuppliedItemUpdateInput
  ): Promise<SubcontractingOrderSuppliedItem | null> {
    try {
      return await this.service.updateSubcontractingOrderSuppliedItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrderSuppliedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubcontractingOrderSuppliedItem(
    @common.Param() params: SubcontractingOrderSuppliedItemWhereUniqueInput
  ): Promise<SubcontractingOrderSuppliedItem | null> {
    try {
      return await this.service.deleteSubcontractingOrderSuppliedItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
