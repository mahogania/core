/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosInvoiceReference } from "./PosInvoiceReference";
import { PosInvoiceReferenceCountArgs } from "./PosInvoiceReferenceCountArgs";
import { PosInvoiceReferenceFindManyArgs } from "./PosInvoiceReferenceFindManyArgs";
import { PosInvoiceReferenceFindUniqueArgs } from "./PosInvoiceReferenceFindUniqueArgs";
import { CreatePosInvoiceReferenceArgs } from "./CreatePosInvoiceReferenceArgs";
import { UpdatePosInvoiceReferenceArgs } from "./UpdatePosInvoiceReferenceArgs";
import { DeletePosInvoiceReferenceArgs } from "./DeletePosInvoiceReferenceArgs";
import { PosInvoiceReferenceService } from "../posInvoiceReference.service";
@graphql.Resolver(() => PosInvoiceReference)
export class PosInvoiceReferenceResolverBase {
  constructor(protected readonly service: PosInvoiceReferenceService) {}

  async _posInvoiceReferencesMeta(
    @graphql.Args() args: PosInvoiceReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosInvoiceReference])
  async posInvoiceReferences(
    @graphql.Args() args: PosInvoiceReferenceFindManyArgs
  ): Promise<PosInvoiceReference[]> {
    return this.service.posInvoiceReferences(args);
  }

  @graphql.Query(() => PosInvoiceReference, { nullable: true })
  async posInvoiceReference(
    @graphql.Args() args: PosInvoiceReferenceFindUniqueArgs
  ): Promise<PosInvoiceReference | null> {
    const result = await this.service.posInvoiceReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosInvoiceReference)
  async createPosInvoiceReference(
    @graphql.Args() args: CreatePosInvoiceReferenceArgs
  ): Promise<PosInvoiceReference> {
    return await this.service.createPosInvoiceReference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosInvoiceReference)
  async updatePosInvoiceReference(
    @graphql.Args() args: UpdatePosInvoiceReferenceArgs
  ): Promise<PosInvoiceReference | null> {
    try {
      return await this.service.updatePosInvoiceReference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosInvoiceReference)
  async deletePosInvoiceReference(
    @graphql.Args() args: DeletePosInvoiceReferenceArgs
  ): Promise<PosInvoiceReference | null> {
    try {
      return await this.service.deletePosInvoiceReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
