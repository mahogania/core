/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosInvoiceReferenceService } from "../posInvoiceReference.service";
import { PosInvoiceReferenceCreateInput } from "./PosInvoiceReferenceCreateInput";
import { PosInvoiceReference } from "./PosInvoiceReference";
import { PosInvoiceReferenceFindManyArgs } from "./PosInvoiceReferenceFindManyArgs";
import { PosInvoiceReferenceWhereUniqueInput } from "./PosInvoiceReferenceWhereUniqueInput";
import { PosInvoiceReferenceUpdateInput } from "./PosInvoiceReferenceUpdateInput";

export class PosInvoiceReferenceControllerBase {
  constructor(protected readonly service: PosInvoiceReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosInvoiceReference })
  async createPosInvoiceReference(
    @common.Body() data: PosInvoiceReferenceCreateInput
  ): Promise<PosInvoiceReference> {
    return await this.service.createPosInvoiceReference({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docStatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        isReturn: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        posInvoice: true,
        postingDate: true,
        returnAgainst: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosInvoiceReference] })
  @ApiNestedQuery(PosInvoiceReferenceFindManyArgs)
  async posInvoiceReferences(
    @common.Req() request: Request
  ): Promise<PosInvoiceReference[]> {
    const args = plainToClass(PosInvoiceReferenceFindManyArgs, request.query);
    return this.service.posInvoiceReferences({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docStatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        isReturn: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        posInvoice: true,
        postingDate: true,
        returnAgainst: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosInvoiceReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posInvoiceReference(
    @common.Param() params: PosInvoiceReferenceWhereUniqueInput
  ): Promise<PosInvoiceReference | null> {
    const result = await this.service.posInvoiceReference({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docStatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        isReturn: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        posInvoice: true,
        postingDate: true,
        returnAgainst: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosInvoiceReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosInvoiceReference(
    @common.Param() params: PosInvoiceReferenceWhereUniqueInput,
    @common.Body() data: PosInvoiceReferenceUpdateInput
  ): Promise<PosInvoiceReference | null> {
    try {
      return await this.service.updatePosInvoiceReference({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          docStatus: true,
          grandTotal: true,
          id: true,
          idx: true,
          isReturn: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          posInvoice: true,
          postingDate: true,
          returnAgainst: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosInvoiceReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosInvoiceReference(
    @common.Param() params: PosInvoiceReferenceWhereUniqueInput
  ): Promise<PosInvoiceReference | null> {
    try {
      return await this.service.deletePosInvoiceReference({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          docStatus: true,
          grandTotal: true,
          id: true,
          idx: true,
          isReturn: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          posInvoice: true,
          postingDate: true,
          returnAgainst: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
