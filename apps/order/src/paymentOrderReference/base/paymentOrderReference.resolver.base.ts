/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentOrderReference } from "./PaymentOrderReference";
import { PaymentOrderReferenceCountArgs } from "./PaymentOrderReferenceCountArgs";
import { PaymentOrderReferenceFindManyArgs } from "./PaymentOrderReferenceFindManyArgs";
import { PaymentOrderReferenceFindUniqueArgs } from "./PaymentOrderReferenceFindUniqueArgs";
import { CreatePaymentOrderReferenceArgs } from "./CreatePaymentOrderReferenceArgs";
import { UpdatePaymentOrderReferenceArgs } from "./UpdatePaymentOrderReferenceArgs";
import { DeletePaymentOrderReferenceArgs } from "./DeletePaymentOrderReferenceArgs";
import { PaymentOrderReferenceService } from "../paymentOrderReference.service";
@graphql.Resolver(() => PaymentOrderReference)
export class PaymentOrderReferenceResolverBase {
  constructor(protected readonly service: PaymentOrderReferenceService) {}

  async _paymentOrderReferencesMeta(
    @graphql.Args() args: PaymentOrderReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentOrderReference])
  async paymentOrderReferences(
    @graphql.Args() args: PaymentOrderReferenceFindManyArgs
  ): Promise<PaymentOrderReference[]> {
    return this.service.paymentOrderReferences(args);
  }

  @graphql.Query(() => PaymentOrderReference, { nullable: true })
  async paymentOrderReference(
    @graphql.Args() args: PaymentOrderReferenceFindUniqueArgs
  ): Promise<PaymentOrderReference | null> {
    const result = await this.service.paymentOrderReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentOrderReference)
  async createPaymentOrderReference(
    @graphql.Args() args: CreatePaymentOrderReferenceArgs
  ): Promise<PaymentOrderReference> {
    return await this.service.createPaymentOrderReference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentOrderReference)
  async updatePaymentOrderReference(
    @graphql.Args() args: UpdatePaymentOrderReferenceArgs
  ): Promise<PaymentOrderReference | null> {
    try {
      return await this.service.updatePaymentOrderReference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentOrderReference)
  async deletePaymentOrderReference(
    @graphql.Args() args: DeletePaymentOrderReferenceArgs
  ): Promise<PaymentOrderReference | null> {
    try {
      return await this.service.deletePaymentOrderReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
