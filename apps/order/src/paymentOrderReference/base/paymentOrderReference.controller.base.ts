/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentOrderReferenceService } from "../paymentOrderReference.service";
import { PaymentOrderReferenceCreateInput } from "./PaymentOrderReferenceCreateInput";
import { PaymentOrderReference } from "./PaymentOrderReference";
import { PaymentOrderReferenceFindManyArgs } from "./PaymentOrderReferenceFindManyArgs";
import { PaymentOrderReferenceWhereUniqueInput } from "./PaymentOrderReferenceWhereUniqueInput";
import { PaymentOrderReferenceUpdateInput } from "./PaymentOrderReferenceUpdateInput";

export class PaymentOrderReferenceControllerBase {
  constructor(protected readonly service: PaymentOrderReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentOrderReference })
  async createPaymentOrderReference(
    @common.Body() data: PaymentOrderReferenceCreateInput
  ): Promise<PaymentOrderReference> {
    return await this.service.createPaymentOrderReference({
      data: data,
      select: {
        account: true,
        amount: true,
        bankAccount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentReference: true,
        paymentRequest: true,
        referenceDoctype: true,
        referenceName: true,
        supplier: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentOrderReference] })
  @ApiNestedQuery(PaymentOrderReferenceFindManyArgs)
  async paymentOrderReferences(
    @common.Req() request: Request
  ): Promise<PaymentOrderReference[]> {
    const args = plainToClass(PaymentOrderReferenceFindManyArgs, request.query);
    return this.service.paymentOrderReferences({
      ...args,
      select: {
        account: true,
        amount: true,
        bankAccount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentReference: true,
        paymentRequest: true,
        referenceDoctype: true,
        referenceName: true,
        supplier: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentOrderReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentOrderReference(
    @common.Param() params: PaymentOrderReferenceWhereUniqueInput
  ): Promise<PaymentOrderReference | null> {
    const result = await this.service.paymentOrderReference({
      where: params,
      select: {
        account: true,
        amount: true,
        bankAccount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentReference: true,
        paymentRequest: true,
        referenceDoctype: true,
        referenceName: true,
        supplier: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentOrderReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentOrderReference(
    @common.Param() params: PaymentOrderReferenceWhereUniqueInput,
    @common.Body() data: PaymentOrderReferenceUpdateInput
  ): Promise<PaymentOrderReference | null> {
    try {
      return await this.service.updatePaymentOrderReference({
        where: params,
        data: data,
        select: {
          account: true,
          amount: true,
          bankAccount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          paymentReference: true,
          paymentRequest: true,
          referenceDoctype: true,
          referenceName: true,
          supplier: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentOrderReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentOrderReference(
    @common.Param() params: PaymentOrderReferenceWhereUniqueInput
  ): Promise<PaymentOrderReference | null> {
    try {
      return await this.service.deletePaymentOrderReference({
        where: params,
        select: {
          account: true,
          amount: true,
          bankAccount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          paymentReference: true,
          paymentRequest: true,
          referenceDoctype: true,
          referenceName: true,
          supplier: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
