/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseOrderItemSupplied } from "./PurchaseOrderItemSupplied";
import { PurchaseOrderItemSuppliedCountArgs } from "./PurchaseOrderItemSuppliedCountArgs";
import { PurchaseOrderItemSuppliedFindManyArgs } from "./PurchaseOrderItemSuppliedFindManyArgs";
import { PurchaseOrderItemSuppliedFindUniqueArgs } from "./PurchaseOrderItemSuppliedFindUniqueArgs";
import { CreatePurchaseOrderItemSuppliedArgs } from "./CreatePurchaseOrderItemSuppliedArgs";
import { UpdatePurchaseOrderItemSuppliedArgs } from "./UpdatePurchaseOrderItemSuppliedArgs";
import { DeletePurchaseOrderItemSuppliedArgs } from "./DeletePurchaseOrderItemSuppliedArgs";
import { PurchaseOrderItemSuppliedService } from "../purchaseOrderItemSupplied.service";
@graphql.Resolver(() => PurchaseOrderItemSupplied)
export class PurchaseOrderItemSuppliedResolverBase {
  constructor(protected readonly service: PurchaseOrderItemSuppliedService) {}

  async _purchaseOrderItemSuppliedsMeta(
    @graphql.Args() args: PurchaseOrderItemSuppliedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseOrderItemSupplied])
  async purchaseOrderItemSupplieds(
    @graphql.Args() args: PurchaseOrderItemSuppliedFindManyArgs
  ): Promise<PurchaseOrderItemSupplied[]> {
    return this.service.purchaseOrderItemSupplieds(args);
  }

  @graphql.Query(() => PurchaseOrderItemSupplied, { nullable: true })
  async purchaseOrderItemSupplied(
    @graphql.Args() args: PurchaseOrderItemSuppliedFindUniqueArgs
  ): Promise<PurchaseOrderItemSupplied | null> {
    const result = await this.service.purchaseOrderItemSupplied(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseOrderItemSupplied)
  async createPurchaseOrderItemSupplied(
    @graphql.Args() args: CreatePurchaseOrderItemSuppliedArgs
  ): Promise<PurchaseOrderItemSupplied> {
    return await this.service.createPurchaseOrderItemSupplied({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseOrderItemSupplied)
  async updatePurchaseOrderItemSupplied(
    @graphql.Args() args: UpdatePurchaseOrderItemSuppliedArgs
  ): Promise<PurchaseOrderItemSupplied | null> {
    try {
      return await this.service.updatePurchaseOrderItemSupplied({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseOrderItemSupplied)
  async deletePurchaseOrderItemSupplied(
    @graphql.Args() args: DeletePurchaseOrderItemSuppliedArgs
  ): Promise<PurchaseOrderItemSupplied | null> {
    try {
      return await this.service.deletePurchaseOrderItemSupplied(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
