/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosOpeningEntryDetail } from "./PosOpeningEntryDetail";
import { PosOpeningEntryDetailCountArgs } from "./PosOpeningEntryDetailCountArgs";
import { PosOpeningEntryDetailFindManyArgs } from "./PosOpeningEntryDetailFindManyArgs";
import { PosOpeningEntryDetailFindUniqueArgs } from "./PosOpeningEntryDetailFindUniqueArgs";
import { CreatePosOpeningEntryDetailArgs } from "./CreatePosOpeningEntryDetailArgs";
import { UpdatePosOpeningEntryDetailArgs } from "./UpdatePosOpeningEntryDetailArgs";
import { DeletePosOpeningEntryDetailArgs } from "./DeletePosOpeningEntryDetailArgs";
import { PosOpeningEntryDetailService } from "../posOpeningEntryDetail.service";
@graphql.Resolver(() => PosOpeningEntryDetail)
export class PosOpeningEntryDetailResolverBase {
  constructor(protected readonly service: PosOpeningEntryDetailService) {}

  async _posOpeningEntryDetailsMeta(
    @graphql.Args() args: PosOpeningEntryDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosOpeningEntryDetail])
  async posOpeningEntryDetails(
    @graphql.Args() args: PosOpeningEntryDetailFindManyArgs
  ): Promise<PosOpeningEntryDetail[]> {
    return this.service.posOpeningEntryDetails(args);
  }

  @graphql.Query(() => PosOpeningEntryDetail, { nullable: true })
  async posOpeningEntryDetail(
    @graphql.Args() args: PosOpeningEntryDetailFindUniqueArgs
  ): Promise<PosOpeningEntryDetail | null> {
    const result = await this.service.posOpeningEntryDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosOpeningEntryDetail)
  async createPosOpeningEntryDetail(
    @graphql.Args() args: CreatePosOpeningEntryDetailArgs
  ): Promise<PosOpeningEntryDetail> {
    return await this.service.createPosOpeningEntryDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosOpeningEntryDetail)
  async updatePosOpeningEntryDetail(
    @graphql.Args() args: UpdatePosOpeningEntryDetailArgs
  ): Promise<PosOpeningEntryDetail | null> {
    try {
      return await this.service.updatePosOpeningEntryDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosOpeningEntryDetail)
  async deletePosOpeningEntryDetail(
    @graphql.Args() args: DeletePosOpeningEntryDetailArgs
  ): Promise<PosOpeningEntryDetail | null> {
    try {
      return await this.service.deletePosOpeningEntryDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
