/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosOpeningEntryDetailService } from "../posOpeningEntryDetail.service";
import { PosOpeningEntryDetailCreateInput } from "./PosOpeningEntryDetailCreateInput";
import { PosOpeningEntryDetail } from "./PosOpeningEntryDetail";
import { PosOpeningEntryDetailFindManyArgs } from "./PosOpeningEntryDetailFindManyArgs";
import { PosOpeningEntryDetailWhereUniqueInput } from "./PosOpeningEntryDetailWhereUniqueInput";
import { PosOpeningEntryDetailUpdateInput } from "./PosOpeningEntryDetailUpdateInput";

export class PosOpeningEntryDetailControllerBase {
  constructor(protected readonly service: PosOpeningEntryDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosOpeningEntryDetail })
  async createPosOpeningEntryDetail(
    @common.Body() data: PosOpeningEntryDetailCreateInput
  ): Promise<PosOpeningEntryDetail> {
    return await this.service.createPosOpeningEntryDetail({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        openingAmount: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosOpeningEntryDetail] })
  @ApiNestedQuery(PosOpeningEntryDetailFindManyArgs)
  async posOpeningEntryDetails(
    @common.Req() request: Request
  ): Promise<PosOpeningEntryDetail[]> {
    const args = plainToClass(PosOpeningEntryDetailFindManyArgs, request.query);
    return this.service.posOpeningEntryDetails({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        openingAmount: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosOpeningEntryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posOpeningEntryDetail(
    @common.Param() params: PosOpeningEntryDetailWhereUniqueInput
  ): Promise<PosOpeningEntryDetail | null> {
    const result = await this.service.posOpeningEntryDetail({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        name: true,
        openingAmount: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosOpeningEntryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosOpeningEntryDetail(
    @common.Param() params: PosOpeningEntryDetailWhereUniqueInput,
    @common.Body() data: PosOpeningEntryDetailUpdateInput
  ): Promise<PosOpeningEntryDetail | null> {
    try {
      return await this.service.updatePosOpeningEntryDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          openingAmount: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosOpeningEntryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosOpeningEntryDetail(
    @common.Param() params: PosOpeningEntryDetailWhereUniqueInput
  ): Promise<PosOpeningEntryDetail | null> {
    try {
      return await this.service.deletePosOpeningEntryDetail({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          name: true,
          openingAmount: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
