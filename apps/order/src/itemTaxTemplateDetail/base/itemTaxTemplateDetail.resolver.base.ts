/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemTaxTemplateDetail } from "./ItemTaxTemplateDetail";
import { ItemTaxTemplateDetailCountArgs } from "./ItemTaxTemplateDetailCountArgs";
import { ItemTaxTemplateDetailFindManyArgs } from "./ItemTaxTemplateDetailFindManyArgs";
import { ItemTaxTemplateDetailFindUniqueArgs } from "./ItemTaxTemplateDetailFindUniqueArgs";
import { CreateItemTaxTemplateDetailArgs } from "./CreateItemTaxTemplateDetailArgs";
import { UpdateItemTaxTemplateDetailArgs } from "./UpdateItemTaxTemplateDetailArgs";
import { DeleteItemTaxTemplateDetailArgs } from "./DeleteItemTaxTemplateDetailArgs";
import { ItemTaxTemplateDetailService } from "../itemTaxTemplateDetail.service";
@graphql.Resolver(() => ItemTaxTemplateDetail)
export class ItemTaxTemplateDetailResolverBase {
  constructor(protected readonly service: ItemTaxTemplateDetailService) {}

  async _itemTaxTemplateDetailsMeta(
    @graphql.Args() args: ItemTaxTemplateDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemTaxTemplateDetail])
  async itemTaxTemplateDetails(
    @graphql.Args() args: ItemTaxTemplateDetailFindManyArgs
  ): Promise<ItemTaxTemplateDetail[]> {
    return this.service.itemTaxTemplateDetails(args);
  }

  @graphql.Query(() => ItemTaxTemplateDetail, { nullable: true })
  async itemTaxTemplateDetail(
    @graphql.Args() args: ItemTaxTemplateDetailFindUniqueArgs
  ): Promise<ItemTaxTemplateDetail | null> {
    const result = await this.service.itemTaxTemplateDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemTaxTemplateDetail)
  async createItemTaxTemplateDetail(
    @graphql.Args() args: CreateItemTaxTemplateDetailArgs
  ): Promise<ItemTaxTemplateDetail> {
    return await this.service.createItemTaxTemplateDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemTaxTemplateDetail)
  async updateItemTaxTemplateDetail(
    @graphql.Args() args: UpdateItemTaxTemplateDetailArgs
  ): Promise<ItemTaxTemplateDetail | null> {
    try {
      return await this.service.updateItemTaxTemplateDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemTaxTemplateDetail)
  async deleteItemTaxTemplateDetail(
    @graphql.Args() args: DeleteItemTaxTemplateDetailArgs
  ): Promise<ItemTaxTemplateDetail | null> {
    try {
      return await this.service.deleteItemTaxTemplateDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
