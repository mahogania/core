/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemTaxTemplateDetailService } from "../itemTaxTemplateDetail.service";
import { ItemTaxTemplateDetailCreateInput } from "./ItemTaxTemplateDetailCreateInput";
import { ItemTaxTemplateDetail } from "./ItemTaxTemplateDetail";
import { ItemTaxTemplateDetailFindManyArgs } from "./ItemTaxTemplateDetailFindManyArgs";
import { ItemTaxTemplateDetailWhereUniqueInput } from "./ItemTaxTemplateDetailWhereUniqueInput";
import { ItemTaxTemplateDetailUpdateInput } from "./ItemTaxTemplateDetailUpdateInput";

export class ItemTaxTemplateDetailControllerBase {
  constructor(protected readonly service: ItemTaxTemplateDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemTaxTemplateDetail })
  async createItemTaxTemplateDetail(
    @common.Body() data: ItemTaxTemplateDetailCreateInput
  ): Promise<ItemTaxTemplateDetail> {
    return await this.service.createItemTaxTemplateDetail({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        taxRate: true,
        taxType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemTaxTemplateDetail] })
  @ApiNestedQuery(ItemTaxTemplateDetailFindManyArgs)
  async itemTaxTemplateDetails(
    @common.Req() request: Request
  ): Promise<ItemTaxTemplateDetail[]> {
    const args = plainToClass(ItemTaxTemplateDetailFindManyArgs, request.query);
    return this.service.itemTaxTemplateDetails({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        taxRate: true,
        taxType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemTaxTemplateDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemTaxTemplateDetail(
    @common.Param() params: ItemTaxTemplateDetailWhereUniqueInput
  ): Promise<ItemTaxTemplateDetail | null> {
    const result = await this.service.itemTaxTemplateDetail({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        taxRate: true,
        taxType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemTaxTemplateDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemTaxTemplateDetail(
    @common.Param() params: ItemTaxTemplateDetailWhereUniqueInput,
    @common.Body() data: ItemTaxTemplateDetailUpdateInput
  ): Promise<ItemTaxTemplateDetail | null> {
    try {
      return await this.service.updateItemTaxTemplateDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          taxRate: true,
          taxType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemTaxTemplateDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemTaxTemplateDetail(
    @common.Param() params: ItemTaxTemplateDetailWhereUniqueInput
  ): Promise<ItemTaxTemplateDetail | null> {
    try {
      return await this.service.deleteItemTaxTemplateDetail({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          taxRate: true,
          taxType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
