/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemGroup as PrismaItemGroup } from "@prisma/client";

export class ItemGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemGroup.count(args);
  }

  async itemGroups(
    args: Prisma.ItemGroupFindManyArgs
  ): Promise<PrismaItemGroup[]> {
    return this.prisma.itemGroup.findMany(args);
  }
  async itemGroup(
    args: Prisma.ItemGroupFindUniqueArgs
  ): Promise<PrismaItemGroup | null> {
    return this.prisma.itemGroup.findUnique(args);
  }
  async createItemGroup(
    args: Prisma.ItemGroupCreateArgs
  ): Promise<PrismaItemGroup> {
    return this.prisma.itemGroup.create(args);
  }
  async updateItemGroup(
    args: Prisma.ItemGroupUpdateArgs
  ): Promise<PrismaItemGroup> {
    return this.prisma.itemGroup.update(args);
  }
  async deleteItemGroup(
    args: Prisma.ItemGroupDeleteArgs
  ): Promise<PrismaItemGroup> {
    return this.prisma.itemGroup.delete(args);
  }
}
