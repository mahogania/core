/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemGroupService } from "../itemGroup.service";
import { ItemGroupCreateInput } from "./ItemGroupCreateInput";
import { ItemGroup } from "./ItemGroup";
import { ItemGroupFindManyArgs } from "./ItemGroupFindManyArgs";
import { ItemGroupWhereUniqueInput } from "./ItemGroupWhereUniqueInput";
import { ItemGroupUpdateInput } from "./ItemGroupUpdateInput";

export class ItemGroupControllerBase {
  constructor(protected readonly service: ItemGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemGroup })
  async createItemGroup(
    @common.Body() data: ItemGroupCreateInput
  ): Promise<ItemGroup> {
    return await this.service.createItemGroup({
      data: data,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        image: true,
        isGroup: true,
        itemGroupName: true,
        lft: true,
        modifiedBy: true,
        name: true,
        oldParent: true,
        owner: true,
        parentItemGroup: true,
        rgt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemGroup] })
  @ApiNestedQuery(ItemGroupFindManyArgs)
  async itemGroups(@common.Req() request: Request): Promise<ItemGroup[]> {
    const args = plainToClass(ItemGroupFindManyArgs, request.query);
    return this.service.itemGroups({
      ...args,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        image: true,
        isGroup: true,
        itemGroupName: true,
        lft: true,
        modifiedBy: true,
        name: true,
        oldParent: true,
        owner: true,
        parentItemGroup: true,
        rgt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemGroup(
    @common.Param() params: ItemGroupWhereUniqueInput
  ): Promise<ItemGroup | null> {
    const result = await this.service.itemGroup({
      where: params,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        image: true,
        isGroup: true,
        itemGroupName: true,
        lft: true,
        modifiedBy: true,
        name: true,
        oldParent: true,
        owner: true,
        parentItemGroup: true,
        rgt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemGroup(
    @common.Param() params: ItemGroupWhereUniqueInput,
    @common.Body() data: ItemGroupUpdateInput
  ): Promise<ItemGroup | null> {
    try {
      return await this.service.updateItemGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          image: true,
          isGroup: true,
          itemGroupName: true,
          lft: true,
          modifiedBy: true,
          name: true,
          oldParent: true,
          owner: true,
          parentItemGroup: true,
          rgt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemGroup(
    @common.Param() params: ItemGroupWhereUniqueInput
  ): Promise<ItemGroup | null> {
    try {
      return await this.service.deleteItemGroup({
        where: params,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          image: true,
          isGroup: true,
          itemGroupName: true,
          lft: true,
          modifiedBy: true,
          name: true,
          oldParent: true,
          owner: true,
          parentItemGroup: true,
          rgt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
