/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesPartnerItem } from "./SalesPartnerItem";
import { SalesPartnerItemCountArgs } from "./SalesPartnerItemCountArgs";
import { SalesPartnerItemFindManyArgs } from "./SalesPartnerItemFindManyArgs";
import { SalesPartnerItemFindUniqueArgs } from "./SalesPartnerItemFindUniqueArgs";
import { CreateSalesPartnerItemArgs } from "./CreateSalesPartnerItemArgs";
import { UpdateSalesPartnerItemArgs } from "./UpdateSalesPartnerItemArgs";
import { DeleteSalesPartnerItemArgs } from "./DeleteSalesPartnerItemArgs";
import { SalesPartnerItemService } from "../salesPartnerItem.service";
@graphql.Resolver(() => SalesPartnerItem)
export class SalesPartnerItemResolverBase {
  constructor(protected readonly service: SalesPartnerItemService) {}

  async _salesPartnerItemsMeta(
    @graphql.Args() args: SalesPartnerItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesPartnerItem])
  async salesPartnerItems(
    @graphql.Args() args: SalesPartnerItemFindManyArgs
  ): Promise<SalesPartnerItem[]> {
    return this.service.salesPartnerItems(args);
  }

  @graphql.Query(() => SalesPartnerItem, { nullable: true })
  async salesPartnerItem(
    @graphql.Args() args: SalesPartnerItemFindUniqueArgs
  ): Promise<SalesPartnerItem | null> {
    const result = await this.service.salesPartnerItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesPartnerItem)
  async createSalesPartnerItem(
    @graphql.Args() args: CreateSalesPartnerItemArgs
  ): Promise<SalesPartnerItem> {
    return await this.service.createSalesPartnerItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesPartnerItem)
  async updateSalesPartnerItem(
    @graphql.Args() args: UpdateSalesPartnerItemArgs
  ): Promise<SalesPartnerItem | null> {
    try {
      return await this.service.updateSalesPartnerItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesPartnerItem)
  async deleteSalesPartnerItem(
    @graphql.Args() args: DeleteSalesPartnerItemArgs
  ): Promise<SalesPartnerItem | null> {
    try {
      return await this.service.deleteSalesPartnerItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
