/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesPartnerItemService } from "../salesPartnerItem.service";
import { SalesPartnerItemCreateInput } from "./SalesPartnerItemCreateInput";
import { SalesPartnerItem } from "./SalesPartnerItem";
import { SalesPartnerItemFindManyArgs } from "./SalesPartnerItemFindManyArgs";
import { SalesPartnerItemWhereUniqueInput } from "./SalesPartnerItemWhereUniqueInput";
import { SalesPartnerItemUpdateInput } from "./SalesPartnerItemUpdateInput";

export class SalesPartnerItemControllerBase {
  constructor(protected readonly service: SalesPartnerItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesPartnerItem })
  async createSalesPartnerItem(
    @common.Body() data: SalesPartnerItemCreateInput
  ): Promise<SalesPartnerItem> {
    return await this.service.createSalesPartnerItem({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        salesPartner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesPartnerItem] })
  @ApiNestedQuery(SalesPartnerItemFindManyArgs)
  async salesPartnerItems(
    @common.Req() request: Request
  ): Promise<SalesPartnerItem[]> {
    const args = plainToClass(SalesPartnerItemFindManyArgs, request.query);
    return this.service.salesPartnerItems({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        salesPartner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesPartnerItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesPartnerItem(
    @common.Param() params: SalesPartnerItemWhereUniqueInput
  ): Promise<SalesPartnerItem | null> {
    const result = await this.service.salesPartnerItem({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        salesPartner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesPartnerItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesPartnerItem(
    @common.Param() params: SalesPartnerItemWhereUniqueInput,
    @common.Body() data: SalesPartnerItemUpdateInput
  ): Promise<SalesPartnerItem | null> {
    try {
      return await this.service.updateSalesPartnerItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          salesPartner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesPartnerItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesPartnerItem(
    @common.Param() params: SalesPartnerItemWhereUniqueInput
  ): Promise<SalesPartnerItem | null> {
    try {
      return await this.service.deleteSalesPartnerItem({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          salesPartner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
