/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SalesPartnerItem as PrismaSalesPartnerItem,
} from "@prisma/client";

export class SalesPartnerItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalesPartnerItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salesPartnerItem.count(args);
  }

  async salesPartnerItems(
    args: Prisma.SalesPartnerItemFindManyArgs
  ): Promise<PrismaSalesPartnerItem[]> {
    return this.prisma.salesPartnerItem.findMany(args);
  }
  async salesPartnerItem(
    args: Prisma.SalesPartnerItemFindUniqueArgs
  ): Promise<PrismaSalesPartnerItem | null> {
    return this.prisma.salesPartnerItem.findUnique(args);
  }
  async createSalesPartnerItem(
    args: Prisma.SalesPartnerItemCreateArgs
  ): Promise<PrismaSalesPartnerItem> {
    return this.prisma.salesPartnerItem.create(args);
  }
  async updateSalesPartnerItem(
    args: Prisma.SalesPartnerItemUpdateArgs
  ): Promise<PrismaSalesPartnerItem> {
    return this.prisma.salesPartnerItem.update(args);
  }
  async deleteSalesPartnerItem(
    args: Prisma.SalesPartnerItemDeleteArgs
  ): Promise<PrismaSalesPartnerItem> {
    return this.prisma.salesPartnerItem.delete(args);
  }
}
