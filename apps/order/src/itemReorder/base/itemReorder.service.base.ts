/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemReorder as PrismaItemReorder } from "@prisma/client";

export class ItemReorderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemReorderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemReorder.count(args);
  }

  async itemReorders(
    args: Prisma.ItemReorderFindManyArgs
  ): Promise<PrismaItemReorder[]> {
    return this.prisma.itemReorder.findMany(args);
  }
  async itemReorder(
    args: Prisma.ItemReorderFindUniqueArgs
  ): Promise<PrismaItemReorder | null> {
    return this.prisma.itemReorder.findUnique(args);
  }
  async createItemReorder(
    args: Prisma.ItemReorderCreateArgs
  ): Promise<PrismaItemReorder> {
    return this.prisma.itemReorder.create(args);
  }
  async updateItemReorder(
    args: Prisma.ItemReorderUpdateArgs
  ): Promise<PrismaItemReorder> {
    return this.prisma.itemReorder.update(args);
  }
  async deleteItemReorder(
    args: Prisma.ItemReorderDeleteArgs
  ): Promise<PrismaItemReorder> {
    return this.prisma.itemReorder.delete(args);
  }
}
