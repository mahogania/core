/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemReorderService } from "../itemReorder.service";
import { ItemReorderCreateInput } from "./ItemReorderCreateInput";
import { ItemReorder } from "./ItemReorder";
import { ItemReorderFindManyArgs } from "./ItemReorderFindManyArgs";
import { ItemReorderWhereUniqueInput } from "./ItemReorderWhereUniqueInput";
import { ItemReorderUpdateInput } from "./ItemReorderUpdateInput";

export class ItemReorderControllerBase {
  constructor(protected readonly service: ItemReorderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemReorder })
  async createItemReorder(
    @common.Body() data: ItemReorderCreateInput
  ): Promise<ItemReorder> {
    return await this.service.createItemReorder({
      data: data,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        materialRequestType: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        warehouse: true,
        warehouseGroup: true,
        warehouseReorderLevel: true,
        warehouseReorderQty: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemReorder] })
  @ApiNestedQuery(ItemReorderFindManyArgs)
  async itemReorders(@common.Req() request: Request): Promise<ItemReorder[]> {
    const args = plainToClass(ItemReorderFindManyArgs, request.query);
    return this.service.itemReorders({
      ...args,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        materialRequestType: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        warehouse: true,
        warehouseGroup: true,
        warehouseReorderLevel: true,
        warehouseReorderQty: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemReorder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemReorder(
    @common.Param() params: ItemReorderWhereUniqueInput
  ): Promise<ItemReorder | null> {
    const result = await this.service.itemReorder({
      where: params,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        materialRequestType: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        warehouse: true,
        warehouseGroup: true,
        warehouseReorderLevel: true,
        warehouseReorderQty: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemReorder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemReorder(
    @common.Param() params: ItemReorderWhereUniqueInput,
    @common.Body() data: ItemReorderUpdateInput
  ): Promise<ItemReorder | null> {
    try {
      return await this.service.updateItemReorder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          materialRequestType: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          warehouse: true,
          warehouseGroup: true,
          warehouseReorderLevel: true,
          warehouseReorderQty: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemReorder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemReorder(
    @common.Param() params: ItemReorderWhereUniqueInput
  ): Promise<ItemReorder | null> {
    try {
      return await this.service.deleteItemReorder({
        where: params,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          materialRequestType: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          warehouse: true,
          warehouseGroup: true,
          warehouseReorderLevel: true,
          warehouseReorderQty: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
