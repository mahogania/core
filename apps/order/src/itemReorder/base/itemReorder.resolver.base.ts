/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemReorder } from "./ItemReorder";
import { ItemReorderCountArgs } from "./ItemReorderCountArgs";
import { ItemReorderFindManyArgs } from "./ItemReorderFindManyArgs";
import { ItemReorderFindUniqueArgs } from "./ItemReorderFindUniqueArgs";
import { CreateItemReorderArgs } from "./CreateItemReorderArgs";
import { UpdateItemReorderArgs } from "./UpdateItemReorderArgs";
import { DeleteItemReorderArgs } from "./DeleteItemReorderArgs";
import { ItemReorderService } from "../itemReorder.service";
@graphql.Resolver(() => ItemReorder)
export class ItemReorderResolverBase {
  constructor(protected readonly service: ItemReorderService) {}

  async _itemReordersMeta(
    @graphql.Args() args: ItemReorderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemReorder])
  async itemReorders(
    @graphql.Args() args: ItemReorderFindManyArgs
  ): Promise<ItemReorder[]> {
    return this.service.itemReorders(args);
  }

  @graphql.Query(() => ItemReorder, { nullable: true })
  async itemReorder(
    @graphql.Args() args: ItemReorderFindUniqueArgs
  ): Promise<ItemReorder | null> {
    const result = await this.service.itemReorder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemReorder)
  async createItemReorder(
    @graphql.Args() args: CreateItemReorderArgs
  ): Promise<ItemReorder> {
    return await this.service.createItemReorder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemReorder)
  async updateItemReorder(
    @graphql.Args() args: UpdateItemReorderArgs
  ): Promise<ItemReorder | null> {
    try {
      return await this.service.updateItemReorder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemReorder)
  async deleteItemReorder(
    @graphql.Args() args: DeleteItemReorderArgs
  ): Promise<ItemReorder | null> {
    try {
      return await this.service.deleteItemReorder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
