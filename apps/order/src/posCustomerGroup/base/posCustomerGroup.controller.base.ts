/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosCustomerGroupService } from "../posCustomerGroup.service";
import { PosCustomerGroupCreateInput } from "./PosCustomerGroupCreateInput";
import { PosCustomerGroup } from "./PosCustomerGroup";
import { PosCustomerGroupFindManyArgs } from "./PosCustomerGroupFindManyArgs";
import { PosCustomerGroupWhereUniqueInput } from "./PosCustomerGroupWhereUniqueInput";
import { PosCustomerGroupUpdateInput } from "./PosCustomerGroupUpdateInput";

export class PosCustomerGroupControllerBase {
  constructor(protected readonly service: PosCustomerGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosCustomerGroup })
  async createPosCustomerGroup(
    @common.Body() data: PosCustomerGroupCreateInput
  ): Promise<PosCustomerGroup> {
    return await this.service.createPosCustomerGroup({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        customerGroup: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosCustomerGroup] })
  @ApiNestedQuery(PosCustomerGroupFindManyArgs)
  async posCustomerGroups(
    @common.Req() request: Request
  ): Promise<PosCustomerGroup[]> {
    const args = plainToClass(PosCustomerGroupFindManyArgs, request.query);
    return this.service.posCustomerGroups({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        customerGroup: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosCustomerGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posCustomerGroup(
    @common.Param() params: PosCustomerGroupWhereUniqueInput
  ): Promise<PosCustomerGroup | null> {
    const result = await this.service.posCustomerGroup({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        customerGroup: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosCustomerGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosCustomerGroup(
    @common.Param() params: PosCustomerGroupWhereUniqueInput,
    @common.Body() data: PosCustomerGroupUpdateInput
  ): Promise<PosCustomerGroup | null> {
    try {
      return await this.service.updatePosCustomerGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          customerGroup: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosCustomerGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosCustomerGroup(
    @common.Param() params: PosCustomerGroupWhereUniqueInput
  ): Promise<PosCustomerGroup | null> {
    try {
      return await this.service.deletePosCustomerGroup({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          customerGroup: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
