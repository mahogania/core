/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesInvoiceAdvance } from "./SalesInvoiceAdvance";
import { SalesInvoiceAdvanceCountArgs } from "./SalesInvoiceAdvanceCountArgs";
import { SalesInvoiceAdvanceFindManyArgs } from "./SalesInvoiceAdvanceFindManyArgs";
import { SalesInvoiceAdvanceFindUniqueArgs } from "./SalesInvoiceAdvanceFindUniqueArgs";
import { CreateSalesInvoiceAdvanceArgs } from "./CreateSalesInvoiceAdvanceArgs";
import { UpdateSalesInvoiceAdvanceArgs } from "./UpdateSalesInvoiceAdvanceArgs";
import { DeleteSalesInvoiceAdvanceArgs } from "./DeleteSalesInvoiceAdvanceArgs";
import { SalesInvoiceAdvanceService } from "../salesInvoiceAdvance.service";
@graphql.Resolver(() => SalesInvoiceAdvance)
export class SalesInvoiceAdvanceResolverBase {
  constructor(protected readonly service: SalesInvoiceAdvanceService) {}

  async _salesInvoiceAdvancesMeta(
    @graphql.Args() args: SalesInvoiceAdvanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesInvoiceAdvance])
  async salesInvoiceAdvances(
    @graphql.Args() args: SalesInvoiceAdvanceFindManyArgs
  ): Promise<SalesInvoiceAdvance[]> {
    return this.service.salesInvoiceAdvances(args);
  }

  @graphql.Query(() => SalesInvoiceAdvance, { nullable: true })
  async salesInvoiceAdvance(
    @graphql.Args() args: SalesInvoiceAdvanceFindUniqueArgs
  ): Promise<SalesInvoiceAdvance | null> {
    const result = await this.service.salesInvoiceAdvance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesInvoiceAdvance)
  async createSalesInvoiceAdvance(
    @graphql.Args() args: CreateSalesInvoiceAdvanceArgs
  ): Promise<SalesInvoiceAdvance> {
    return await this.service.createSalesInvoiceAdvance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesInvoiceAdvance)
  async updateSalesInvoiceAdvance(
    @graphql.Args() args: UpdateSalesInvoiceAdvanceArgs
  ): Promise<SalesInvoiceAdvance | null> {
    try {
      return await this.service.updateSalesInvoiceAdvance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesInvoiceAdvance)
  async deleteSalesInvoiceAdvance(
    @graphql.Args() args: DeleteSalesInvoiceAdvanceArgs
  ): Promise<SalesInvoiceAdvance | null> {
    try {
      return await this.service.deleteSalesInvoiceAdvance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
