/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesInvoiceAdvanceService } from "../salesInvoiceAdvance.service";
import { SalesInvoiceAdvanceCreateInput } from "./SalesInvoiceAdvanceCreateInput";
import { SalesInvoiceAdvance } from "./SalesInvoiceAdvance";
import { SalesInvoiceAdvanceFindManyArgs } from "./SalesInvoiceAdvanceFindManyArgs";
import { SalesInvoiceAdvanceWhereUniqueInput } from "./SalesInvoiceAdvanceWhereUniqueInput";
import { SalesInvoiceAdvanceUpdateInput } from "./SalesInvoiceAdvanceUpdateInput";

export class SalesInvoiceAdvanceControllerBase {
  constructor(protected readonly service: SalesInvoiceAdvanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesInvoiceAdvance })
  async createSalesInvoiceAdvance(
    @common.Body() data: SalesInvoiceAdvanceCreateInput
  ): Promise<SalesInvoiceAdvance> {
    return await this.service.createSalesInvoiceAdvance({
      data: data,
      select: {
        advanceAmount: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        exchangeGainLoss: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        refExchangeRate: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        remarks: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesInvoiceAdvance] })
  @ApiNestedQuery(SalesInvoiceAdvanceFindManyArgs)
  async salesInvoiceAdvances(
    @common.Req() request: Request
  ): Promise<SalesInvoiceAdvance[]> {
    const args = plainToClass(SalesInvoiceAdvanceFindManyArgs, request.query);
    return this.service.salesInvoiceAdvances({
      ...args,
      select: {
        advanceAmount: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        exchangeGainLoss: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        refExchangeRate: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        remarks: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoiceAdvance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesInvoiceAdvance(
    @common.Param() params: SalesInvoiceAdvanceWhereUniqueInput
  ): Promise<SalesInvoiceAdvance | null> {
    const result = await this.service.salesInvoiceAdvance({
      where: params,
      select: {
        advanceAmount: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        exchangeGainLoss: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        refExchangeRate: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        remarks: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoiceAdvance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesInvoiceAdvance(
    @common.Param() params: SalesInvoiceAdvanceWhereUniqueInput,
    @common.Body() data: SalesInvoiceAdvanceUpdateInput
  ): Promise<SalesInvoiceAdvance | null> {
    try {
      return await this.service.updateSalesInvoiceAdvance({
        where: params,
        data: data,
        select: {
          advanceAmount: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          exchangeGainLoss: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          refExchangeRate: true,
          referenceName: true,
          referenceRow: true,
          referenceType: true,
          remarks: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoiceAdvance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesInvoiceAdvance(
    @common.Param() params: SalesInvoiceAdvanceWhereUniqueInput
  ): Promise<SalesInvoiceAdvance | null> {
    try {
      return await this.service.deleteSalesInvoiceAdvance({
        where: params,
        select: {
          advanceAmount: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          exchangeGainLoss: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          refExchangeRate: true,
          referenceName: true,
          referenceRow: true,
          referenceType: true,
          remarks: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
