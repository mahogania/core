/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemManufacturerService } from "../itemManufacturer.service";
import { ItemManufacturerCreateInput } from "./ItemManufacturerCreateInput";
import { ItemManufacturer } from "./ItemManufacturer";
import { ItemManufacturerFindManyArgs } from "./ItemManufacturerFindManyArgs";
import { ItemManufacturerWhereUniqueInput } from "./ItemManufacturerWhereUniqueInput";
import { ItemManufacturerUpdateInput } from "./ItemManufacturerUpdateInput";

export class ItemManufacturerControllerBase {
  constructor(protected readonly service: ItemManufacturerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemManufacturer })
  async createItemManufacturer(
    @common.Body() data: ItemManufacturerCreateInput
  ): Promise<ItemManufacturer> {
    return await this.service.createItemManufacturer({
      data: data,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        itemCode: true,
        itemName: true,
        manufacturer: true,
        manufacturerPartNo: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemManufacturer] })
  @ApiNestedQuery(ItemManufacturerFindManyArgs)
  async itemManufacturers(
    @common.Req() request: Request
  ): Promise<ItemManufacturer[]> {
    const args = plainToClass(ItemManufacturerFindManyArgs, request.query);
    return this.service.itemManufacturers({
      ...args,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        itemCode: true,
        itemName: true,
        manufacturer: true,
        manufacturerPartNo: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemManufacturer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemManufacturer(
    @common.Param() params: ItemManufacturerWhereUniqueInput
  ): Promise<ItemManufacturer | null> {
    const result = await this.service.itemManufacturer({
      where: params,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        itemCode: true,
        itemName: true,
        manufacturer: true,
        manufacturerPartNo: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemManufacturer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemManufacturer(
    @common.Param() params: ItemManufacturerWhereUniqueInput,
    @common.Body() data: ItemManufacturerUpdateInput
  ): Promise<ItemManufacturer | null> {
    try {
      return await this.service.updateItemManufacturer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          itemCode: true,
          itemName: true,
          manufacturer: true,
          manufacturerPartNo: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemManufacturer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemManufacturer(
    @common.Param() params: ItemManufacturerWhereUniqueInput
  ): Promise<ItemManufacturer | null> {
    try {
      return await this.service.deleteItemManufacturer({
        where: params,
        select: {
          createdAt: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          itemCode: true,
          itemName: true,
          manufacturer: true,
          manufacturerPartNo: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
