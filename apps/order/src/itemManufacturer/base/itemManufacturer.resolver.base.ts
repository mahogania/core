/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemManufacturer } from "./ItemManufacturer";
import { ItemManufacturerCountArgs } from "./ItemManufacturerCountArgs";
import { ItemManufacturerFindManyArgs } from "./ItemManufacturerFindManyArgs";
import { ItemManufacturerFindUniqueArgs } from "./ItemManufacturerFindUniqueArgs";
import { CreateItemManufacturerArgs } from "./CreateItemManufacturerArgs";
import { UpdateItemManufacturerArgs } from "./UpdateItemManufacturerArgs";
import { DeleteItemManufacturerArgs } from "./DeleteItemManufacturerArgs";
import { ItemManufacturerService } from "../itemManufacturer.service";
@graphql.Resolver(() => ItemManufacturer)
export class ItemManufacturerResolverBase {
  constructor(protected readonly service: ItemManufacturerService) {}

  async _itemManufacturersMeta(
    @graphql.Args() args: ItemManufacturerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemManufacturer])
  async itemManufacturers(
    @graphql.Args() args: ItemManufacturerFindManyArgs
  ): Promise<ItemManufacturer[]> {
    return this.service.itemManufacturers(args);
  }

  @graphql.Query(() => ItemManufacturer, { nullable: true })
  async itemManufacturer(
    @graphql.Args() args: ItemManufacturerFindUniqueArgs
  ): Promise<ItemManufacturer | null> {
    const result = await this.service.itemManufacturer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemManufacturer)
  async createItemManufacturer(
    @graphql.Args() args: CreateItemManufacturerArgs
  ): Promise<ItemManufacturer> {
    return await this.service.createItemManufacturer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemManufacturer)
  async updateItemManufacturer(
    @graphql.Args() args: UpdateItemManufacturerArgs
  ): Promise<ItemManufacturer | null> {
    try {
      return await this.service.updateItemManufacturer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemManufacturer)
  async deleteItemManufacturer(
    @graphql.Args() args: DeleteItemManufacturerArgs
  ): Promise<ItemManufacturer | null> {
    try {
      return await this.service.deleteItemManufacturer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
