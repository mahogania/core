/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemManufacturer as PrismaItemManufacturer,
} from "@prisma/client";

export class ItemManufacturerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemManufacturerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemManufacturer.count(args);
  }

  async itemManufacturers(
    args: Prisma.ItemManufacturerFindManyArgs
  ): Promise<PrismaItemManufacturer[]> {
    return this.prisma.itemManufacturer.findMany(args);
  }
  async itemManufacturer(
    args: Prisma.ItemManufacturerFindUniqueArgs
  ): Promise<PrismaItemManufacturer | null> {
    return this.prisma.itemManufacturer.findUnique(args);
  }
  async createItemManufacturer(
    args: Prisma.ItemManufacturerCreateArgs
  ): Promise<PrismaItemManufacturer> {
    return this.prisma.itemManufacturer.create(args);
  }
  async updateItemManufacturer(
    args: Prisma.ItemManufacturerUpdateArgs
  ): Promise<PrismaItemManufacturer> {
    return this.prisma.itemManufacturer.update(args);
  }
  async deleteItemManufacturer(
    args: Prisma.ItemManufacturerDeleteArgs
  ): Promise<PrismaItemManufacturer> {
    return this.prisma.itemManufacturer.delete(args);
  }
}
