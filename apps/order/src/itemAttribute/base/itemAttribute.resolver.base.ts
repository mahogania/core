/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemAttribute } from "./ItemAttribute";
import { ItemAttributeCountArgs } from "./ItemAttributeCountArgs";
import { ItemAttributeFindManyArgs } from "./ItemAttributeFindManyArgs";
import { ItemAttributeFindUniqueArgs } from "./ItemAttributeFindUniqueArgs";
import { CreateItemAttributeArgs } from "./CreateItemAttributeArgs";
import { UpdateItemAttributeArgs } from "./UpdateItemAttributeArgs";
import { DeleteItemAttributeArgs } from "./DeleteItemAttributeArgs";
import { ItemAttributeService } from "../itemAttribute.service";
@graphql.Resolver(() => ItemAttribute)
export class ItemAttributeResolverBase {
  constructor(protected readonly service: ItemAttributeService) {}

  async _itemAttributesMeta(
    @graphql.Args() args: ItemAttributeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemAttribute])
  async itemAttributes(
    @graphql.Args() args: ItemAttributeFindManyArgs
  ): Promise<ItemAttribute[]> {
    return this.service.itemAttributes(args);
  }

  @graphql.Query(() => ItemAttribute, { nullable: true })
  async itemAttribute(
    @graphql.Args() args: ItemAttributeFindUniqueArgs
  ): Promise<ItemAttribute | null> {
    const result = await this.service.itemAttribute(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemAttribute)
  async createItemAttribute(
    @graphql.Args() args: CreateItemAttributeArgs
  ): Promise<ItemAttribute> {
    return await this.service.createItemAttribute({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemAttribute)
  async updateItemAttribute(
    @graphql.Args() args: UpdateItemAttributeArgs
  ): Promise<ItemAttribute | null> {
    try {
      return await this.service.updateItemAttribute({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemAttribute)
  async deleteItemAttribute(
    @graphql.Args() args: DeleteItemAttributeArgs
  ): Promise<ItemAttribute | null> {
    try {
      return await this.service.deleteItemAttribute(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
