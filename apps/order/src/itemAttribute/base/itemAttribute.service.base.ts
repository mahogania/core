/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemAttribute as PrismaItemAttribute } from "@prisma/client";

export class ItemAttributeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemAttributeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemAttribute.count(args);
  }

  async itemAttributes(
    args: Prisma.ItemAttributeFindManyArgs
  ): Promise<PrismaItemAttribute[]> {
    return this.prisma.itemAttribute.findMany(args);
  }
  async itemAttribute(
    args: Prisma.ItemAttributeFindUniqueArgs
  ): Promise<PrismaItemAttribute | null> {
    return this.prisma.itemAttribute.findUnique(args);
  }
  async createItemAttribute(
    args: Prisma.ItemAttributeCreateArgs
  ): Promise<PrismaItemAttribute> {
    return this.prisma.itemAttribute.create(args);
  }
  async updateItemAttribute(
    args: Prisma.ItemAttributeUpdateArgs
  ): Promise<PrismaItemAttribute> {
    return this.prisma.itemAttribute.update(args);
  }
  async deleteItemAttribute(
    args: Prisma.ItemAttributeDeleteArgs
  ): Promise<PrismaItemAttribute> {
    return this.prisma.itemAttribute.delete(args);
  }
}
