/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosField } from "./PosField";
import { PosFieldCountArgs } from "./PosFieldCountArgs";
import { PosFieldFindManyArgs } from "./PosFieldFindManyArgs";
import { PosFieldFindUniqueArgs } from "./PosFieldFindUniqueArgs";
import { CreatePosFieldArgs } from "./CreatePosFieldArgs";
import { UpdatePosFieldArgs } from "./UpdatePosFieldArgs";
import { DeletePosFieldArgs } from "./DeletePosFieldArgs";
import { PosFieldService } from "../posField.service";
@graphql.Resolver(() => PosField)
export class PosFieldResolverBase {
  constructor(protected readonly service: PosFieldService) {}

  async _posFieldsMeta(
    @graphql.Args() args: PosFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosField])
  async posFields(
    @graphql.Args() args: PosFieldFindManyArgs
  ): Promise<PosField[]> {
    return this.service.posFields(args);
  }

  @graphql.Query(() => PosField, { nullable: true })
  async posField(
    @graphql.Args() args: PosFieldFindUniqueArgs
  ): Promise<PosField | null> {
    const result = await this.service.posField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosField)
  async createPosField(
    @graphql.Args() args: CreatePosFieldArgs
  ): Promise<PosField> {
    return await this.service.createPosField({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosField)
  async updatePosField(
    @graphql.Args() args: UpdatePosFieldArgs
  ): Promise<PosField | null> {
    try {
      return await this.service.updatePosField({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosField)
  async deletePosField(
    @graphql.Args() args: DeletePosFieldArgs
  ): Promise<PosField | null> {
    try {
      return await this.service.deletePosField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
