/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesOrderItem } from "./SalesOrderItem";
import { SalesOrderItemCountArgs } from "./SalesOrderItemCountArgs";
import { SalesOrderItemFindManyArgs } from "./SalesOrderItemFindManyArgs";
import { SalesOrderItemFindUniqueArgs } from "./SalesOrderItemFindUniqueArgs";
import { CreateSalesOrderItemArgs } from "./CreateSalesOrderItemArgs";
import { UpdateSalesOrderItemArgs } from "./UpdateSalesOrderItemArgs";
import { DeleteSalesOrderItemArgs } from "./DeleteSalesOrderItemArgs";
import { SalesOrderItemService } from "../salesOrderItem.service";
@graphql.Resolver(() => SalesOrderItem)
export class SalesOrderItemResolverBase {
  constructor(protected readonly service: SalesOrderItemService) {}

  async _salesOrderItemsMeta(
    @graphql.Args() args: SalesOrderItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesOrderItem])
  async salesOrderItems(
    @graphql.Args() args: SalesOrderItemFindManyArgs
  ): Promise<SalesOrderItem[]> {
    return this.service.salesOrderItems(args);
  }

  @graphql.Query(() => SalesOrderItem, { nullable: true })
  async salesOrderItem(
    @graphql.Args() args: SalesOrderItemFindUniqueArgs
  ): Promise<SalesOrderItem | null> {
    const result = await this.service.salesOrderItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesOrderItem)
  async createSalesOrderItem(
    @graphql.Args() args: CreateSalesOrderItemArgs
  ): Promise<SalesOrderItem> {
    return await this.service.createSalesOrderItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesOrderItem)
  async updateSalesOrderItem(
    @graphql.Args() args: UpdateSalesOrderItemArgs
  ): Promise<SalesOrderItem | null> {
    try {
      return await this.service.updateSalesOrderItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesOrderItem)
  async deleteSalesOrderItem(
    @graphql.Args() args: DeleteSalesOrderItemArgs
  ): Promise<SalesOrderItem | null> {
    try {
      return await this.service.deleteSalesOrderItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
