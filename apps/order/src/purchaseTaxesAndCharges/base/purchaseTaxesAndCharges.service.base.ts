/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PurchaseTaxesAndCharges as PrismaPurchaseTaxesAndCharges,
} from "@prisma/client";

export class PurchaseTaxesAndChargesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseTaxesAndChargesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseTaxesAndCharges.count(args);
  }

  async purchaseTaxesAndChargesItems(
    args: Prisma.PurchaseTaxesAndChargesFindManyArgs
  ): Promise<PrismaPurchaseTaxesAndCharges[]> {
    return this.prisma.purchaseTaxesAndCharges.findMany(args);
  }
  async purchaseTaxesAndCharges(
    args: Prisma.PurchaseTaxesAndChargesFindUniqueArgs
  ): Promise<PrismaPurchaseTaxesAndCharges | null> {
    return this.prisma.purchaseTaxesAndCharges.findUnique(args);
  }
  async createPurchaseTaxesAndCharges(
    args: Prisma.PurchaseTaxesAndChargesCreateArgs
  ): Promise<PrismaPurchaseTaxesAndCharges> {
    return this.prisma.purchaseTaxesAndCharges.create(args);
  }
  async updatePurchaseTaxesAndCharges(
    args: Prisma.PurchaseTaxesAndChargesUpdateArgs
  ): Promise<PrismaPurchaseTaxesAndCharges> {
    return this.prisma.purchaseTaxesAndCharges.update(args);
  }
  async deletePurchaseTaxesAndCharges(
    args: Prisma.PurchaseTaxesAndChargesDeleteArgs
  ): Promise<PrismaPurchaseTaxesAndCharges> {
    return this.prisma.purchaseTaxesAndCharges.delete(args);
  }
}
