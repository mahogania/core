/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PurchaseTaxesAndChargesService } from "../purchaseTaxesAndCharges.service";
import { PurchaseTaxesAndChargesCreateInput } from "./PurchaseTaxesAndChargesCreateInput";
import { PurchaseTaxesAndCharges } from "./PurchaseTaxesAndCharges";
import { PurchaseTaxesAndChargesFindManyArgs } from "./PurchaseTaxesAndChargesFindManyArgs";
import { PurchaseTaxesAndChargesWhereUniqueInput } from "./PurchaseTaxesAndChargesWhereUniqueInput";
import { PurchaseTaxesAndChargesUpdateInput } from "./PurchaseTaxesAndChargesUpdateInput";

export class PurchaseTaxesAndChargesControllerBase {
  constructor(protected readonly service: PurchaseTaxesAndChargesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseTaxesAndCharges })
  async createPurchaseTaxesAndCharges(
    @common.Body() data: PurchaseTaxesAndChargesCreateInput
  ): Promise<PurchaseTaxesAndCharges> {
    return await this.service.createPurchaseTaxesAndCharges({
      data: data,
      select: {
        accountCurrency: true,
        accountHead: true,
        addDeductTax: true,
        baseTaxAmount: true,
        baseTaxAmountAfterDiscountAmount: true,
        baseTotal: true,
        category: true,
        chargeType: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        includedInPaidAmount: true,
        includedInPrintRate: true,
        isTaxWithholdingAccount: true,
        itemWiseTaxDetail: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        rate: true,
        rowId: true,
        taxAmount: true,
        taxAmountAfterDiscountAmount: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseTaxesAndCharges] })
  @ApiNestedQuery(PurchaseTaxesAndChargesFindManyArgs)
  async purchaseTaxesAndChargesItems(
    @common.Req() request: Request
  ): Promise<PurchaseTaxesAndCharges[]> {
    const args = plainToClass(
      PurchaseTaxesAndChargesFindManyArgs,
      request.query
    );
    return this.service.purchaseTaxesAndChargesItems({
      ...args,
      select: {
        accountCurrency: true,
        accountHead: true,
        addDeductTax: true,
        baseTaxAmount: true,
        baseTaxAmountAfterDiscountAmount: true,
        baseTotal: true,
        category: true,
        chargeType: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        includedInPaidAmount: true,
        includedInPrintRate: true,
        isTaxWithholdingAccount: true,
        itemWiseTaxDetail: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        rate: true,
        rowId: true,
        taxAmount: true,
        taxAmountAfterDiscountAmount: true,
        total: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseTaxesAndCharges })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async purchaseTaxesAndCharges(
    @common.Param() params: PurchaseTaxesAndChargesWhereUniqueInput
  ): Promise<PurchaseTaxesAndCharges | null> {
    const result = await this.service.purchaseTaxesAndCharges({
      where: params,
      select: {
        accountCurrency: true,
        accountHead: true,
        addDeductTax: true,
        baseTaxAmount: true,
        baseTaxAmountAfterDiscountAmount: true,
        baseTotal: true,
        category: true,
        chargeType: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        includedInPaidAmount: true,
        includedInPrintRate: true,
        isTaxWithholdingAccount: true,
        itemWiseTaxDetail: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        rate: true,
        rowId: true,
        taxAmount: true,
        taxAmountAfterDiscountAmount: true,
        total: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseTaxesAndCharges })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePurchaseTaxesAndCharges(
    @common.Param() params: PurchaseTaxesAndChargesWhereUniqueInput,
    @common.Body() data: PurchaseTaxesAndChargesUpdateInput
  ): Promise<PurchaseTaxesAndCharges | null> {
    try {
      return await this.service.updatePurchaseTaxesAndCharges({
        where: params,
        data: data,
        select: {
          accountCurrency: true,
          accountHead: true,
          addDeductTax: true,
          baseTaxAmount: true,
          baseTaxAmountAfterDiscountAmount: true,
          baseTotal: true,
          category: true,
          chargeType: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          includedInPaidAmount: true,
          includedInPrintRate: true,
          isTaxWithholdingAccount: true,
          itemWiseTaxDetail: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          rate: true,
          rowId: true,
          taxAmount: true,
          taxAmountAfterDiscountAmount: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseTaxesAndCharges })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePurchaseTaxesAndCharges(
    @common.Param() params: PurchaseTaxesAndChargesWhereUniqueInput
  ): Promise<PurchaseTaxesAndCharges | null> {
    try {
      return await this.service.deletePurchaseTaxesAndCharges({
        where: params,
        select: {
          accountCurrency: true,
          accountHead: true,
          addDeductTax: true,
          baseTaxAmount: true,
          baseTaxAmountAfterDiscountAmount: true,
          baseTotal: true,
          category: true,
          chargeType: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          includedInPaidAmount: true,
          includedInPrintRate: true,
          isTaxWithholdingAccount: true,
          itemWiseTaxDetail: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          rate: true,
          rowId: true,
          taxAmount: true,
          taxAmountAfterDiscountAmount: true,
          total: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
