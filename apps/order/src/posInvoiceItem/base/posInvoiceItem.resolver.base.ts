/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosInvoiceItem } from "./PosInvoiceItem";
import { PosInvoiceItemCountArgs } from "./PosInvoiceItemCountArgs";
import { PosInvoiceItemFindManyArgs } from "./PosInvoiceItemFindManyArgs";
import { PosInvoiceItemFindUniqueArgs } from "./PosInvoiceItemFindUniqueArgs";
import { CreatePosInvoiceItemArgs } from "./CreatePosInvoiceItemArgs";
import { UpdatePosInvoiceItemArgs } from "./UpdatePosInvoiceItemArgs";
import { DeletePosInvoiceItemArgs } from "./DeletePosInvoiceItemArgs";
import { PosInvoiceItemService } from "../posInvoiceItem.service";
@graphql.Resolver(() => PosInvoiceItem)
export class PosInvoiceItemResolverBase {
  constructor(protected readonly service: PosInvoiceItemService) {}

  async _posInvoiceItemsMeta(
    @graphql.Args() args: PosInvoiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosInvoiceItem])
  async posInvoiceItems(
    @graphql.Args() args: PosInvoiceItemFindManyArgs
  ): Promise<PosInvoiceItem[]> {
    return this.service.posInvoiceItems(args);
  }

  @graphql.Query(() => PosInvoiceItem, { nullable: true })
  async posInvoiceItem(
    @graphql.Args() args: PosInvoiceItemFindUniqueArgs
  ): Promise<PosInvoiceItem | null> {
    const result = await this.service.posInvoiceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosInvoiceItem)
  async createPosInvoiceItem(
    @graphql.Args() args: CreatePosInvoiceItemArgs
  ): Promise<PosInvoiceItem> {
    return await this.service.createPosInvoiceItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosInvoiceItem)
  async updatePosInvoiceItem(
    @graphql.Args() args: UpdatePosInvoiceItemArgs
  ): Promise<PosInvoiceItem | null> {
    try {
      return await this.service.updatePosInvoiceItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosInvoiceItem)
  async deletePosInvoiceItem(
    @graphql.Args() args: DeletePosInvoiceItemArgs
  ): Promise<PosInvoiceItem | null> {
    try {
      return await this.service.deletePosInvoiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
