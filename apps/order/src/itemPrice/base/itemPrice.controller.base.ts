/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemPriceService } from "../itemPrice.service";
import { ItemPriceCreateInput } from "./ItemPriceCreateInput";
import { ItemPrice } from "./ItemPrice";
import { ItemPriceFindManyArgs } from "./ItemPriceFindManyArgs";
import { ItemPriceWhereUniqueInput } from "./ItemPriceWhereUniqueInput";
import { ItemPriceUpdateInput } from "./ItemPriceUpdateInput";

export class ItemPriceControllerBase {
  constructor(protected readonly service: ItemPriceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemPrice })
  async createItemPrice(
    @common.Body() data: ItemPriceCreateInput
  ): Promise<ItemPrice> {
    return await this.service.createItemPrice({
      data: data,
      select: {
        batchNo: true,
        brand: true,
        buying: true,
        createdAt: true,
        currency: true,
        customer: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemDescription: true,
        itemName: true,
        leadTimeDays: true,
        modifiedBy: true,
        name: true,
        note: true,
        owner: true,
        packingUnit: true,
        priceList: true,
        priceListRate: true,
        reference: true,
        selling: true,
        supplier: true,
        uom: true,
        updatedAt: true,
        validFrom: true,
        validUpto: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemPrice] })
  @ApiNestedQuery(ItemPriceFindManyArgs)
  async itemPrices(@common.Req() request: Request): Promise<ItemPrice[]> {
    const args = plainToClass(ItemPriceFindManyArgs, request.query);
    return this.service.itemPrices({
      ...args,
      select: {
        batchNo: true,
        brand: true,
        buying: true,
        createdAt: true,
        currency: true,
        customer: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemDescription: true,
        itemName: true,
        leadTimeDays: true,
        modifiedBy: true,
        name: true,
        note: true,
        owner: true,
        packingUnit: true,
        priceList: true,
        priceListRate: true,
        reference: true,
        selling: true,
        supplier: true,
        uom: true,
        updatedAt: true,
        validFrom: true,
        validUpto: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemPrice(
    @common.Param() params: ItemPriceWhereUniqueInput
  ): Promise<ItemPrice | null> {
    const result = await this.service.itemPrice({
      where: params,
      select: {
        batchNo: true,
        brand: true,
        buying: true,
        createdAt: true,
        currency: true,
        customer: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemDescription: true,
        itemName: true,
        leadTimeDays: true,
        modifiedBy: true,
        name: true,
        note: true,
        owner: true,
        packingUnit: true,
        priceList: true,
        priceListRate: true,
        reference: true,
        selling: true,
        supplier: true,
        uom: true,
        updatedAt: true,
        validFrom: true,
        validUpto: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemPrice(
    @common.Param() params: ItemPriceWhereUniqueInput,
    @common.Body() data: ItemPriceUpdateInput
  ): Promise<ItemPrice | null> {
    try {
      return await this.service.updateItemPrice({
        where: params,
        data: data,
        select: {
          batchNo: true,
          brand: true,
          buying: true,
          createdAt: true,
          currency: true,
          customer: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemDescription: true,
          itemName: true,
          leadTimeDays: true,
          modifiedBy: true,
          name: true,
          note: true,
          owner: true,
          packingUnit: true,
          priceList: true,
          priceListRate: true,
          reference: true,
          selling: true,
          supplier: true,
          uom: true,
          updatedAt: true,
          validFrom: true,
          validUpto: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemPrice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemPrice(
    @common.Param() params: ItemPriceWhereUniqueInput
  ): Promise<ItemPrice | null> {
    try {
      return await this.service.deleteItemPrice({
        where: params,
        select: {
          batchNo: true,
          brand: true,
          buying: true,
          createdAt: true,
          currency: true,
          customer: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemDescription: true,
          itemName: true,
          leadTimeDays: true,
          modifiedBy: true,
          name: true,
          note: true,
          owner: true,
          packingUnit: true,
          priceList: true,
          priceListRate: true,
          reference: true,
          selling: true,
          supplier: true,
          uom: true,
          updatedAt: true,
          validFrom: true,
          validUpto: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
