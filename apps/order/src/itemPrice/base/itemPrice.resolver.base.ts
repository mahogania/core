/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemPrice } from "./ItemPrice";
import { ItemPriceCountArgs } from "./ItemPriceCountArgs";
import { ItemPriceFindManyArgs } from "./ItemPriceFindManyArgs";
import { ItemPriceFindUniqueArgs } from "./ItemPriceFindUniqueArgs";
import { CreateItemPriceArgs } from "./CreateItemPriceArgs";
import { UpdateItemPriceArgs } from "./UpdateItemPriceArgs";
import { DeleteItemPriceArgs } from "./DeleteItemPriceArgs";
import { ItemPriceService } from "../itemPrice.service";
@graphql.Resolver(() => ItemPrice)
export class ItemPriceResolverBase {
  constructor(protected readonly service: ItemPriceService) {}

  async _itemPricesMeta(
    @graphql.Args() args: ItemPriceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemPrice])
  async itemPrices(
    @graphql.Args() args: ItemPriceFindManyArgs
  ): Promise<ItemPrice[]> {
    return this.service.itemPrices(args);
  }

  @graphql.Query(() => ItemPrice, { nullable: true })
  async itemPrice(
    @graphql.Args() args: ItemPriceFindUniqueArgs
  ): Promise<ItemPrice | null> {
    const result = await this.service.itemPrice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemPrice)
  async createItemPrice(
    @graphql.Args() args: CreateItemPriceArgs
  ): Promise<ItemPrice> {
    return await this.service.createItemPrice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemPrice)
  async updateItemPrice(
    @graphql.Args() args: UpdateItemPriceArgs
  ): Promise<ItemPrice | null> {
    try {
      return await this.service.updateItemPrice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemPrice)
  async deleteItemPrice(
    @graphql.Args() args: DeleteItemPriceArgs
  ): Promise<ItemPrice | null> {
    try {
      return await this.service.deleteItemPrice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
