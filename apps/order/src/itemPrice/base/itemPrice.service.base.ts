/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemPrice as PrismaItemPrice } from "@prisma/client";

export class ItemPriceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemPriceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemPrice.count(args);
  }

  async itemPrices(
    args: Prisma.ItemPriceFindManyArgs
  ): Promise<PrismaItemPrice[]> {
    return this.prisma.itemPrice.findMany(args);
  }
  async itemPrice(
    args: Prisma.ItemPriceFindUniqueArgs
  ): Promise<PrismaItemPrice | null> {
    return this.prisma.itemPrice.findUnique(args);
  }
  async createItemPrice(
    args: Prisma.ItemPriceCreateArgs
  ): Promise<PrismaItemPrice> {
    return this.prisma.itemPrice.create(args);
  }
  async updateItemPrice(
    args: Prisma.ItemPriceUpdateArgs
  ): Promise<PrismaItemPrice> {
    return this.prisma.itemPrice.update(args);
  }
  async deleteItemPrice(
    args: Prisma.ItemPriceDeleteArgs
  ): Promise<PrismaItemPrice> {
    return this.prisma.itemPrice.delete(args);
  }
}
