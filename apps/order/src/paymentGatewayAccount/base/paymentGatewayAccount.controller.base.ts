/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentGatewayAccountService } from "../paymentGatewayAccount.service";
import { PaymentGatewayAccountCreateInput } from "./PaymentGatewayAccountCreateInput";
import { PaymentGatewayAccount } from "./PaymentGatewayAccount";
import { PaymentGatewayAccountFindManyArgs } from "./PaymentGatewayAccountFindManyArgs";
import { PaymentGatewayAccountWhereUniqueInput } from "./PaymentGatewayAccountWhereUniqueInput";
import { PaymentGatewayAccountUpdateInput } from "./PaymentGatewayAccountUpdateInput";

export class PaymentGatewayAccountControllerBase {
  constructor(protected readonly service: PaymentGatewayAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentGatewayAccount })
  async createPaymentGatewayAccount(
    @common.Body() data: PaymentGatewayAccountCreateInput
  ): Promise<PaymentGatewayAccount> {
    return await this.service.createPaymentGatewayAccount({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        currency: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        message: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        paymentAccount: true,
        paymentChannel: true,
        paymentGateway: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentGatewayAccount] })
  @ApiNestedQuery(PaymentGatewayAccountFindManyArgs)
  async paymentGatewayAccounts(
    @common.Req() request: Request
  ): Promise<PaymentGatewayAccount[]> {
    const args = plainToClass(PaymentGatewayAccountFindManyArgs, request.query);
    return this.service.paymentGatewayAccounts({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        currency: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        message: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        paymentAccount: true,
        paymentChannel: true,
        paymentGateway: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentGatewayAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentGatewayAccount(
    @common.Param() params: PaymentGatewayAccountWhereUniqueInput
  ): Promise<PaymentGatewayAccount | null> {
    const result = await this.service.paymentGatewayAccount({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        currency: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        message: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        paymentAccount: true,
        paymentChannel: true,
        paymentGateway: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentGatewayAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentGatewayAccount(
    @common.Param() params: PaymentGatewayAccountWhereUniqueInput,
    @common.Body() data: PaymentGatewayAccountUpdateInput
  ): Promise<PaymentGatewayAccount | null> {
    try {
      return await this.service.updatePaymentGatewayAccount({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          currency: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          message: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          paymentAccount: true,
          paymentChannel: true,
          paymentGateway: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentGatewayAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentGatewayAccount(
    @common.Param() params: PaymentGatewayAccountWhereUniqueInput
  ): Promise<PaymentGatewayAccount | null> {
    try {
      return await this.service.deletePaymentGatewayAccount({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          currency: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          message: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          paymentAccount: true,
          paymentChannel: true,
          paymentGateway: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
