/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentGatewayAccount } from "./PaymentGatewayAccount";
import { PaymentGatewayAccountCountArgs } from "./PaymentGatewayAccountCountArgs";
import { PaymentGatewayAccountFindManyArgs } from "./PaymentGatewayAccountFindManyArgs";
import { PaymentGatewayAccountFindUniqueArgs } from "./PaymentGatewayAccountFindUniqueArgs";
import { CreatePaymentGatewayAccountArgs } from "./CreatePaymentGatewayAccountArgs";
import { UpdatePaymentGatewayAccountArgs } from "./UpdatePaymentGatewayAccountArgs";
import { DeletePaymentGatewayAccountArgs } from "./DeletePaymentGatewayAccountArgs";
import { PaymentGatewayAccountService } from "../paymentGatewayAccount.service";
@graphql.Resolver(() => PaymentGatewayAccount)
export class PaymentGatewayAccountResolverBase {
  constructor(protected readonly service: PaymentGatewayAccountService) {}

  async _paymentGatewayAccountsMeta(
    @graphql.Args() args: PaymentGatewayAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentGatewayAccount])
  async paymentGatewayAccounts(
    @graphql.Args() args: PaymentGatewayAccountFindManyArgs
  ): Promise<PaymentGatewayAccount[]> {
    return this.service.paymentGatewayAccounts(args);
  }

  @graphql.Query(() => PaymentGatewayAccount, { nullable: true })
  async paymentGatewayAccount(
    @graphql.Args() args: PaymentGatewayAccountFindUniqueArgs
  ): Promise<PaymentGatewayAccount | null> {
    const result = await this.service.paymentGatewayAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentGatewayAccount)
  async createPaymentGatewayAccount(
    @graphql.Args() args: CreatePaymentGatewayAccountArgs
  ): Promise<PaymentGatewayAccount> {
    return await this.service.createPaymentGatewayAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentGatewayAccount)
  async updatePaymentGatewayAccount(
    @graphql.Args() args: UpdatePaymentGatewayAccountArgs
  ): Promise<PaymentGatewayAccount | null> {
    try {
      return await this.service.updatePaymentGatewayAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentGatewayAccount)
  async deletePaymentGatewayAccount(
    @graphql.Args() args: DeletePaymentGatewayAccountArgs
  ): Promise<PaymentGatewayAccount | null> {
    try {
      return await this.service.deletePaymentGatewayAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
