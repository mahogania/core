/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QuotationLostReasonDetail } from "./QuotationLostReasonDetail";
import { QuotationLostReasonDetailCountArgs } from "./QuotationLostReasonDetailCountArgs";
import { QuotationLostReasonDetailFindManyArgs } from "./QuotationLostReasonDetailFindManyArgs";
import { QuotationLostReasonDetailFindUniqueArgs } from "./QuotationLostReasonDetailFindUniqueArgs";
import { CreateQuotationLostReasonDetailArgs } from "./CreateQuotationLostReasonDetailArgs";
import { UpdateQuotationLostReasonDetailArgs } from "./UpdateQuotationLostReasonDetailArgs";
import { DeleteQuotationLostReasonDetailArgs } from "./DeleteQuotationLostReasonDetailArgs";
import { QuotationLostReasonDetailService } from "../quotationLostReasonDetail.service";
@graphql.Resolver(() => QuotationLostReasonDetail)
export class QuotationLostReasonDetailResolverBase {
  constructor(protected readonly service: QuotationLostReasonDetailService) {}

  async _quotationLostReasonDetailsMeta(
    @graphql.Args() args: QuotationLostReasonDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QuotationLostReasonDetail])
  async quotationLostReasonDetails(
    @graphql.Args() args: QuotationLostReasonDetailFindManyArgs
  ): Promise<QuotationLostReasonDetail[]> {
    return this.service.quotationLostReasonDetails(args);
  }

  @graphql.Query(() => QuotationLostReasonDetail, { nullable: true })
  async quotationLostReasonDetail(
    @graphql.Args() args: QuotationLostReasonDetailFindUniqueArgs
  ): Promise<QuotationLostReasonDetail | null> {
    const result = await this.service.quotationLostReasonDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuotationLostReasonDetail)
  async createQuotationLostReasonDetail(
    @graphql.Args() args: CreateQuotationLostReasonDetailArgs
  ): Promise<QuotationLostReasonDetail> {
    return await this.service.createQuotationLostReasonDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => QuotationLostReasonDetail)
  async updateQuotationLostReasonDetail(
    @graphql.Args() args: UpdateQuotationLostReasonDetailArgs
  ): Promise<QuotationLostReasonDetail | null> {
    try {
      return await this.service.updateQuotationLostReasonDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuotationLostReasonDetail)
  async deleteQuotationLostReasonDetail(
    @graphql.Args() args: DeleteQuotationLostReasonDetailArgs
  ): Promise<QuotationLostReasonDetail | null> {
    try {
      return await this.service.deleteQuotationLostReasonDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
