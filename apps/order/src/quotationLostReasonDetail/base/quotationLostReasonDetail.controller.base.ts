/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuotationLostReasonDetailService } from "../quotationLostReasonDetail.service";
import { QuotationLostReasonDetailCreateInput } from "./QuotationLostReasonDetailCreateInput";
import { QuotationLostReasonDetail } from "./QuotationLostReasonDetail";
import { QuotationLostReasonDetailFindManyArgs } from "./QuotationLostReasonDetailFindManyArgs";
import { QuotationLostReasonDetailWhereUniqueInput } from "./QuotationLostReasonDetailWhereUniqueInput";
import { QuotationLostReasonDetailUpdateInput } from "./QuotationLostReasonDetailUpdateInput";

export class QuotationLostReasonDetailControllerBase {
  constructor(protected readonly service: QuotationLostReasonDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuotationLostReasonDetail })
  async createQuotationLostReasonDetail(
    @common.Body() data: QuotationLostReasonDetailCreateInput
  ): Promise<QuotationLostReasonDetail> {
    return await this.service.createQuotationLostReasonDetail({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        lostReason: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuotationLostReasonDetail] })
  @ApiNestedQuery(QuotationLostReasonDetailFindManyArgs)
  async quotationLostReasonDetails(
    @common.Req() request: Request
  ): Promise<QuotationLostReasonDetail[]> {
    const args = plainToClass(
      QuotationLostReasonDetailFindManyArgs,
      request.query
    );
    return this.service.quotationLostReasonDetails({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        lostReason: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuotationLostReasonDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quotationLostReasonDetail(
    @common.Param() params: QuotationLostReasonDetailWhereUniqueInput
  ): Promise<QuotationLostReasonDetail | null> {
    const result = await this.service.quotationLostReasonDetail({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        lostReason: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuotationLostReasonDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuotationLostReasonDetail(
    @common.Param() params: QuotationLostReasonDetailWhereUniqueInput,
    @common.Body() data: QuotationLostReasonDetailUpdateInput
  ): Promise<QuotationLostReasonDetail | null> {
    try {
      return await this.service.updateQuotationLostReasonDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          lostReason: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuotationLostReasonDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuotationLostReasonDetail(
    @common.Param() params: QuotationLostReasonDetailWhereUniqueInput
  ): Promise<QuotationLostReasonDetail | null> {
    try {
      return await this.service.deleteQuotationLostReasonDetail({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          lostReason: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
