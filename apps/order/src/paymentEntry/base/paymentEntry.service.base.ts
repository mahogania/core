/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PaymentEntry as PrismaPaymentEntry } from "@prisma/client";

export class PaymentEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentEntry.count(args);
  }

  async paymentEntries(
    args: Prisma.PaymentEntryFindManyArgs
  ): Promise<PrismaPaymentEntry[]> {
    return this.prisma.paymentEntry.findMany(args);
  }
  async paymentEntry(
    args: Prisma.PaymentEntryFindUniqueArgs
  ): Promise<PrismaPaymentEntry | null> {
    return this.prisma.paymentEntry.findUnique(args);
  }
  async createPaymentEntry(
    args: Prisma.PaymentEntryCreateArgs
  ): Promise<PrismaPaymentEntry> {
    return this.prisma.paymentEntry.create(args);
  }
  async updatePaymentEntry(
    args: Prisma.PaymentEntryUpdateArgs
  ): Promise<PrismaPaymentEntry> {
    return this.prisma.paymentEntry.update(args);
  }
  async deletePaymentEntry(
    args: Prisma.PaymentEntryDeleteArgs
  ): Promise<PrismaPaymentEntry> {
    return this.prisma.paymentEntry.delete(args);
  }
}
