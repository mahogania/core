/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentEntry } from "./PaymentEntry";
import { PaymentEntryCountArgs } from "./PaymentEntryCountArgs";
import { PaymentEntryFindManyArgs } from "./PaymentEntryFindManyArgs";
import { PaymentEntryFindUniqueArgs } from "./PaymentEntryFindUniqueArgs";
import { CreatePaymentEntryArgs } from "./CreatePaymentEntryArgs";
import { UpdatePaymentEntryArgs } from "./UpdatePaymentEntryArgs";
import { DeletePaymentEntryArgs } from "./DeletePaymentEntryArgs";
import { PaymentEntryService } from "../paymentEntry.service";
@graphql.Resolver(() => PaymentEntry)
export class PaymentEntryResolverBase {
  constructor(protected readonly service: PaymentEntryService) {}

  async _paymentEntriesMeta(
    @graphql.Args() args: PaymentEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentEntry])
  async paymentEntries(
    @graphql.Args() args: PaymentEntryFindManyArgs
  ): Promise<PaymentEntry[]> {
    return this.service.paymentEntries(args);
  }

  @graphql.Query(() => PaymentEntry, { nullable: true })
  async paymentEntry(
    @graphql.Args() args: PaymentEntryFindUniqueArgs
  ): Promise<PaymentEntry | null> {
    const result = await this.service.paymentEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentEntry)
  async createPaymentEntry(
    @graphql.Args() args: CreatePaymentEntryArgs
  ): Promise<PaymentEntry> {
    return await this.service.createPaymentEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentEntry)
  async updatePaymentEntry(
    @graphql.Args() args: UpdatePaymentEntryArgs
  ): Promise<PaymentEntry | null> {
    try {
      return await this.service.updatePaymentEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentEntry)
  async deletePaymentEntry(
    @graphql.Args() args: DeletePaymentEntryArgs
  ): Promise<PaymentEntry | null> {
    try {
      return await this.service.deletePaymentEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
