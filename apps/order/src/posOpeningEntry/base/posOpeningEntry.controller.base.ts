/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PosOpeningEntryService } from "../posOpeningEntry.service";
import { PosOpeningEntryCreateInput } from "./PosOpeningEntryCreateInput";
import { PosOpeningEntry } from "./PosOpeningEntry";
import { PosOpeningEntryFindManyArgs } from "./PosOpeningEntryFindManyArgs";
import { PosOpeningEntryWhereUniqueInput } from "./PosOpeningEntryWhereUniqueInput";
import { PosOpeningEntryUpdateInput } from "./PosOpeningEntryUpdateInput";

export class PosOpeningEntryControllerBase {
  constructor(protected readonly service: PosOpeningEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PosOpeningEntry })
  async createPosOpeningEntry(
    @common.Body() data: PosOpeningEntryCreateInput
  ): Promise<PosOpeningEntry> {
    return await this.service.createPosOpeningEntry({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodEndDate: true,
        periodStartDate: true,
        posClosingEntry: true,
        posProfile: true,
        postingDate: true,
        setPostingDate: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PosOpeningEntry] })
  @ApiNestedQuery(PosOpeningEntryFindManyArgs)
  async posOpeningEntries(
    @common.Req() request: Request
  ): Promise<PosOpeningEntry[]> {
    const args = plainToClass(PosOpeningEntryFindManyArgs, request.query);
    return this.service.posOpeningEntries({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodEndDate: true,
        periodStartDate: true,
        posClosingEntry: true,
        posProfile: true,
        postingDate: true,
        setPostingDate: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PosOpeningEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async posOpeningEntry(
    @common.Param() params: PosOpeningEntryWhereUniqueInput
  ): Promise<PosOpeningEntry | null> {
    const result = await this.service.posOpeningEntry({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodEndDate: true,
        periodStartDate: true,
        posClosingEntry: true,
        posProfile: true,
        postingDate: true,
        setPostingDate: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PosOpeningEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePosOpeningEntry(
    @common.Param() params: PosOpeningEntryWhereUniqueInput,
    @common.Body() data: PosOpeningEntryUpdateInput
  ): Promise<PosOpeningEntry | null> {
    try {
      return await this.service.updatePosOpeningEntry({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodEndDate: true,
          periodStartDate: true,
          posClosingEntry: true,
          posProfile: true,
          postingDate: true,
          setPostingDate: true,
          status: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PosOpeningEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePosOpeningEntry(
    @common.Param() params: PosOpeningEntryWhereUniqueInput
  ): Promise<PosOpeningEntry | null> {
    try {
      return await this.service.deletePosOpeningEntry({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodEndDate: true,
          periodStartDate: true,
          posClosingEntry: true,
          posProfile: true,
          postingDate: true,
          setPostingDate: true,
          status: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
