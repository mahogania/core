/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosOpeningEntry } from "./PosOpeningEntry";
import { PosOpeningEntryCountArgs } from "./PosOpeningEntryCountArgs";
import { PosOpeningEntryFindManyArgs } from "./PosOpeningEntryFindManyArgs";
import { PosOpeningEntryFindUniqueArgs } from "./PosOpeningEntryFindUniqueArgs";
import { CreatePosOpeningEntryArgs } from "./CreatePosOpeningEntryArgs";
import { UpdatePosOpeningEntryArgs } from "./UpdatePosOpeningEntryArgs";
import { DeletePosOpeningEntryArgs } from "./DeletePosOpeningEntryArgs";
import { PosOpeningEntryService } from "../posOpeningEntry.service";
@graphql.Resolver(() => PosOpeningEntry)
export class PosOpeningEntryResolverBase {
  constructor(protected readonly service: PosOpeningEntryService) {}

  async _posOpeningEntriesMeta(
    @graphql.Args() args: PosOpeningEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosOpeningEntry])
  async posOpeningEntries(
    @graphql.Args() args: PosOpeningEntryFindManyArgs
  ): Promise<PosOpeningEntry[]> {
    return this.service.posOpeningEntries(args);
  }

  @graphql.Query(() => PosOpeningEntry, { nullable: true })
  async posOpeningEntry(
    @graphql.Args() args: PosOpeningEntryFindUniqueArgs
  ): Promise<PosOpeningEntry | null> {
    const result = await this.service.posOpeningEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosOpeningEntry)
  async createPosOpeningEntry(
    @graphql.Args() args: CreatePosOpeningEntryArgs
  ): Promise<PosOpeningEntry> {
    return await this.service.createPosOpeningEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosOpeningEntry)
  async updatePosOpeningEntry(
    @graphql.Args() args: UpdatePosOpeningEntryArgs
  ): Promise<PosOpeningEntry | null> {
    try {
      return await this.service.updatePosOpeningEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosOpeningEntry)
  async deletePosOpeningEntry(
    @graphql.Args() args: DeletePosOpeningEntryArgs
  ): Promise<PosOpeningEntry | null> {
    try {
      return await this.service.deletePosOpeningEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
