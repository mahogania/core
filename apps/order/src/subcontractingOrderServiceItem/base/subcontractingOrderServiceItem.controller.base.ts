/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubcontractingOrderServiceItemService } from "../subcontractingOrderServiceItem.service";
import { SubcontractingOrderServiceItemCreateInput } from "./SubcontractingOrderServiceItemCreateInput";
import { SubcontractingOrderServiceItem } from "./SubcontractingOrderServiceItem";
import { SubcontractingOrderServiceItemFindManyArgs } from "./SubcontractingOrderServiceItemFindManyArgs";
import { SubcontractingOrderServiceItemWhereUniqueInput } from "./SubcontractingOrderServiceItemWhereUniqueInput";
import { SubcontractingOrderServiceItemUpdateInput } from "./SubcontractingOrderServiceItemUpdateInput";

export class SubcontractingOrderServiceItemControllerBase {
  constructor(
    protected readonly service: SubcontractingOrderServiceItemService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubcontractingOrderServiceItem })
  async createSubcontractingOrderServiceItem(
    @common.Body() data: SubcontractingOrderServiceItemCreateInput
  ): Promise<SubcontractingOrderServiceItem> {
    return await this.service.createSubcontractingOrderServiceItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubcontractingOrderServiceItem] })
  @ApiNestedQuery(SubcontractingOrderServiceItemFindManyArgs)
  async subcontractingOrderServiceItems(
    @common.Req() request: Request
  ): Promise<SubcontractingOrderServiceItem[]> {
    const args = plainToClass(
      SubcontractingOrderServiceItemFindManyArgs,
      request.query
    );
    return this.service.subcontractingOrderServiceItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrderServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subcontractingOrderServiceItem(
    @common.Param() params: SubcontractingOrderServiceItemWhereUniqueInput
  ): Promise<SubcontractingOrderServiceItem | null> {
    const result = await this.service.subcontractingOrderServiceItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrderServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubcontractingOrderServiceItem(
    @common.Param() params: SubcontractingOrderServiceItemWhereUniqueInput,
    @common.Body() data: SubcontractingOrderServiceItemUpdateInput
  ): Promise<SubcontractingOrderServiceItem | null> {
    try {
      return await this.service.updateSubcontractingOrderServiceItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubcontractingOrderServiceItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubcontractingOrderServiceItem(
    @common.Param() params: SubcontractingOrderServiceItemWhereUniqueInput
  ): Promise<SubcontractingOrderServiceItem | null> {
    try {
      return await this.service.deleteSubcontractingOrderServiceItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
