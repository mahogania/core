/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SubcontractingOrderServiceItem } from "./SubcontractingOrderServiceItem";
import { SubcontractingOrderServiceItemCountArgs } from "./SubcontractingOrderServiceItemCountArgs";
import { SubcontractingOrderServiceItemFindManyArgs } from "./SubcontractingOrderServiceItemFindManyArgs";
import { SubcontractingOrderServiceItemFindUniqueArgs } from "./SubcontractingOrderServiceItemFindUniqueArgs";
import { DeleteSubcontractingOrderServiceItemArgs } from "./DeleteSubcontractingOrderServiceItemArgs";
import { SubcontractingOrderServiceItemService } from "../subcontractingOrderServiceItem.service";
@graphql.Resolver(() => SubcontractingOrderServiceItem)
export class SubcontractingOrderServiceItemResolverBase {
  constructor(
    protected readonly service: SubcontractingOrderServiceItemService
  ) {}

  async _subcontractingOrderServiceItemsMeta(
    @graphql.Args() args: SubcontractingOrderServiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SubcontractingOrderServiceItem])
  async subcontractingOrderServiceItems(
    @graphql.Args() args: SubcontractingOrderServiceItemFindManyArgs
  ): Promise<SubcontractingOrderServiceItem[]> {
    return this.service.subcontractingOrderServiceItems(args);
  }

  @graphql.Query(() => SubcontractingOrderServiceItem, { nullable: true })
  async subcontractingOrderServiceItem(
    @graphql.Args() args: SubcontractingOrderServiceItemFindUniqueArgs
  ): Promise<SubcontractingOrderServiceItem | null> {
    const result = await this.service.subcontractingOrderServiceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SubcontractingOrderServiceItem)
  async deleteSubcontractingOrderServiceItem(
    @graphql.Args() args: DeleteSubcontractingOrderServiceItemArgs
  ): Promise<SubcontractingOrderServiceItem | null> {
    try {
      return await this.service.deleteSubcontractingOrderServiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
