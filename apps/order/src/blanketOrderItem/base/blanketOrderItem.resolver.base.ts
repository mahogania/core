/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlanketOrderItem } from "./BlanketOrderItem";
import { BlanketOrderItemCountArgs } from "./BlanketOrderItemCountArgs";
import { BlanketOrderItemFindManyArgs } from "./BlanketOrderItemFindManyArgs";
import { BlanketOrderItemFindUniqueArgs } from "./BlanketOrderItemFindUniqueArgs";
import { CreateBlanketOrderItemArgs } from "./CreateBlanketOrderItemArgs";
import { UpdateBlanketOrderItemArgs } from "./UpdateBlanketOrderItemArgs";
import { DeleteBlanketOrderItemArgs } from "./DeleteBlanketOrderItemArgs";
import { BlanketOrderItemService } from "../blanketOrderItem.service";
@graphql.Resolver(() => BlanketOrderItem)
export class BlanketOrderItemResolverBase {
  constructor(protected readonly service: BlanketOrderItemService) {}

  async _blanketOrderItemsMeta(
    @graphql.Args() args: BlanketOrderItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlanketOrderItem])
  async blanketOrderItems(
    @graphql.Args() args: BlanketOrderItemFindManyArgs
  ): Promise<BlanketOrderItem[]> {
    return this.service.blanketOrderItems(args);
  }

  @graphql.Query(() => BlanketOrderItem, { nullable: true })
  async blanketOrderItem(
    @graphql.Args() args: BlanketOrderItemFindUniqueArgs
  ): Promise<BlanketOrderItem | null> {
    const result = await this.service.blanketOrderItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlanketOrderItem)
  async createBlanketOrderItem(
    @graphql.Args() args: CreateBlanketOrderItemArgs
  ): Promise<BlanketOrderItem> {
    return await this.service.createBlanketOrderItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BlanketOrderItem)
  async updateBlanketOrderItem(
    @graphql.Args() args: UpdateBlanketOrderItemArgs
  ): Promise<BlanketOrderItem | null> {
    try {
      return await this.service.updateBlanketOrderItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlanketOrderItem)
  async deleteBlanketOrderItem(
    @graphql.Args() args: DeleteBlanketOrderItemArgs
  ): Promise<BlanketOrderItem | null> {
    try {
      return await this.service.deleteBlanketOrderItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
