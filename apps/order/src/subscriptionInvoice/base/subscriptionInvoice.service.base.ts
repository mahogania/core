/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SubscriptionInvoice as PrismaSubscriptionInvoice,
} from "@prisma/client";

export class SubscriptionInvoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubscriptionInvoiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subscriptionInvoice.count(args);
  }

  async subscriptionInvoices(
    args: Prisma.SubscriptionInvoiceFindManyArgs
  ): Promise<PrismaSubscriptionInvoice[]> {
    return this.prisma.subscriptionInvoice.findMany(args);
  }
  async subscriptionInvoice(
    args: Prisma.SubscriptionInvoiceFindUniqueArgs
  ): Promise<PrismaSubscriptionInvoice | null> {
    return this.prisma.subscriptionInvoice.findUnique(args);
  }
  async createSubscriptionInvoice(
    args: Prisma.SubscriptionInvoiceCreateArgs
  ): Promise<PrismaSubscriptionInvoice> {
    return this.prisma.subscriptionInvoice.create(args);
  }
  async updateSubscriptionInvoice(
    args: Prisma.SubscriptionInvoiceUpdateArgs
  ): Promise<PrismaSubscriptionInvoice> {
    return this.prisma.subscriptionInvoice.update(args);
  }
  async deleteSubscriptionInvoice(
    args: Prisma.SubscriptionInvoiceDeleteArgs
  ): Promise<PrismaSubscriptionInvoice> {
    return this.prisma.subscriptionInvoice.delete(args);
  }
}
