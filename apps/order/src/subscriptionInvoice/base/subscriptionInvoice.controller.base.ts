/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubscriptionInvoiceService } from "../subscriptionInvoice.service";
import { SubscriptionInvoiceCreateInput } from "./SubscriptionInvoiceCreateInput";
import { SubscriptionInvoice } from "./SubscriptionInvoice";
import { SubscriptionInvoiceFindManyArgs } from "./SubscriptionInvoiceFindManyArgs";
import { SubscriptionInvoiceWhereUniqueInput } from "./SubscriptionInvoiceWhereUniqueInput";
import { SubscriptionInvoiceUpdateInput } from "./SubscriptionInvoiceUpdateInput";

export class SubscriptionInvoiceControllerBase {
  constructor(protected readonly service: SubscriptionInvoiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubscriptionInvoice })
  async createSubscriptionInvoice(
    @common.Body() data: SubscriptionInvoiceCreateInput
  ): Promise<SubscriptionInvoice> {
    return await this.service.createSubscriptionInvoice({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SubscriptionInvoice] })
  @ApiNestedQuery(SubscriptionInvoiceFindManyArgs)
  async subscriptionInvoices(
    @common.Req() request: Request
  ): Promise<SubscriptionInvoice[]> {
    const args = plainToClass(SubscriptionInvoiceFindManyArgs, request.query);
    return this.service.subscriptionInvoices({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subscriptionInvoice(
    @common.Param() params: SubscriptionInvoiceWhereUniqueInput
  ): Promise<SubscriptionInvoice | null> {
    const result = await this.service.subscriptionInvoice({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubscriptionInvoice(
    @common.Param() params: SubscriptionInvoiceWhereUniqueInput,
    @common.Body() data: SubscriptionInvoiceUpdateInput
  ): Promise<SubscriptionInvoice | null> {
    try {
      return await this.service.updateSubscriptionInvoice({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubscriptionInvoice(
    @common.Param() params: SubscriptionInvoiceWhereUniqueInput
  ): Promise<SubscriptionInvoice | null> {
    try {
      return await this.service.deleteSubscriptionInvoice({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
