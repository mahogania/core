/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemCustomerDetailService } from "../itemCustomerDetail.service";
import { ItemCustomerDetailCreateInput } from "./ItemCustomerDetailCreateInput";
import { ItemCustomerDetail } from "./ItemCustomerDetail";
import { ItemCustomerDetailFindManyArgs } from "./ItemCustomerDetailFindManyArgs";
import { ItemCustomerDetailWhereUniqueInput } from "./ItemCustomerDetailWhereUniqueInput";
import { ItemCustomerDetailUpdateInput } from "./ItemCustomerDetailUpdateInput";

export class ItemCustomerDetailControllerBase {
  constructor(protected readonly service: ItemCustomerDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemCustomerDetail })
  async createItemCustomerDetail(
    @common.Body() data: ItemCustomerDetailCreateInput
  ): Promise<ItemCustomerDetail> {
    return await this.service.createItemCustomerDetail({
      data: data,
      select: {
        createdAt: true,
        customerGroup: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        refCode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemCustomerDetail] })
  @ApiNestedQuery(ItemCustomerDetailFindManyArgs)
  async itemCustomerDetails(
    @common.Req() request: Request
  ): Promise<ItemCustomerDetail[]> {
    const args = plainToClass(ItemCustomerDetailFindManyArgs, request.query);
    return this.service.itemCustomerDetails({
      ...args,
      select: {
        createdAt: true,
        customerGroup: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        refCode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemCustomerDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemCustomerDetail(
    @common.Param() params: ItemCustomerDetailWhereUniqueInput
  ): Promise<ItemCustomerDetail | null> {
    const result = await this.service.itemCustomerDetail({
      where: params,
      select: {
        createdAt: true,
        customerGroup: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        refCode: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemCustomerDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemCustomerDetail(
    @common.Param() params: ItemCustomerDetailWhereUniqueInput,
    @common.Body() data: ItemCustomerDetailUpdateInput
  ): Promise<ItemCustomerDetail | null> {
    try {
      return await this.service.updateItemCustomerDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          customerGroup: true,
          customerName: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          refCode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemCustomerDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemCustomerDetail(
    @common.Param() params: ItemCustomerDetailWhereUniqueInput
  ): Promise<ItemCustomerDetail | null> {
    try {
      return await this.service.deleteItemCustomerDetail({
        where: params,
        select: {
          createdAt: true,
          customerGroup: true,
          customerName: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          refCode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
