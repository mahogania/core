/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesTeam } from "./SalesTeam";
import { SalesTeamCountArgs } from "./SalesTeamCountArgs";
import { SalesTeamFindManyArgs } from "./SalesTeamFindManyArgs";
import { SalesTeamFindUniqueArgs } from "./SalesTeamFindUniqueArgs";
import { CreateSalesTeamArgs } from "./CreateSalesTeamArgs";
import { UpdateSalesTeamArgs } from "./UpdateSalesTeamArgs";
import { DeleteSalesTeamArgs } from "./DeleteSalesTeamArgs";
import { SalesTeamService } from "../salesTeam.service";
@graphql.Resolver(() => SalesTeam)
export class SalesTeamResolverBase {
  constructor(protected readonly service: SalesTeamService) {}

  async _salesTeamsMeta(
    @graphql.Args() args: SalesTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesTeam])
  async salesTeams(
    @graphql.Args() args: SalesTeamFindManyArgs
  ): Promise<SalesTeam[]> {
    return this.service.salesTeams(args);
  }

  @graphql.Query(() => SalesTeam, { nullable: true })
  async salesTeam(
    @graphql.Args() args: SalesTeamFindUniqueArgs
  ): Promise<SalesTeam | null> {
    const result = await this.service.salesTeam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesTeam)
  async createSalesTeam(
    @graphql.Args() args: CreateSalesTeamArgs
  ): Promise<SalesTeam> {
    return await this.service.createSalesTeam({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesTeam)
  async updateSalesTeam(
    @graphql.Args() args: UpdateSalesTeamArgs
  ): Promise<SalesTeam | null> {
    try {
      return await this.service.updateSalesTeam({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesTeam)
  async deleteSalesTeam(
    @graphql.Args() args: DeleteSalesTeamArgs
  ): Promise<SalesTeam | null> {
    try {
      return await this.service.deleteSalesTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
