/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseInvoiceItem } from "./PurchaseInvoiceItem";
import { PurchaseInvoiceItemCountArgs } from "./PurchaseInvoiceItemCountArgs";
import { PurchaseInvoiceItemFindManyArgs } from "./PurchaseInvoiceItemFindManyArgs";
import { PurchaseInvoiceItemFindUniqueArgs } from "./PurchaseInvoiceItemFindUniqueArgs";
import { CreatePurchaseInvoiceItemArgs } from "./CreatePurchaseInvoiceItemArgs";
import { UpdatePurchaseInvoiceItemArgs } from "./UpdatePurchaseInvoiceItemArgs";
import { DeletePurchaseInvoiceItemArgs } from "./DeletePurchaseInvoiceItemArgs";
import { PurchaseInvoiceItemService } from "../purchaseInvoiceItem.service";
@graphql.Resolver(() => PurchaseInvoiceItem)
export class PurchaseInvoiceItemResolverBase {
  constructor(protected readonly service: PurchaseInvoiceItemService) {}

  async _purchaseInvoiceItemsMeta(
    @graphql.Args() args: PurchaseInvoiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseInvoiceItem])
  async purchaseInvoiceItems(
    @graphql.Args() args: PurchaseInvoiceItemFindManyArgs
  ): Promise<PurchaseInvoiceItem[]> {
    return this.service.purchaseInvoiceItems(args);
  }

  @graphql.Query(() => PurchaseInvoiceItem, { nullable: true })
  async purchaseInvoiceItem(
    @graphql.Args() args: PurchaseInvoiceItemFindUniqueArgs
  ): Promise<PurchaseInvoiceItem | null> {
    const result = await this.service.purchaseInvoiceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseInvoiceItem)
  async createPurchaseInvoiceItem(
    @graphql.Args() args: CreatePurchaseInvoiceItemArgs
  ): Promise<PurchaseInvoiceItem> {
    return await this.service.createPurchaseInvoiceItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseInvoiceItem)
  async updatePurchaseInvoiceItem(
    @graphql.Args() args: UpdatePurchaseInvoiceItemArgs
  ): Promise<PurchaseInvoiceItem | null> {
    try {
      return await this.service.updatePurchaseInvoiceItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseInvoiceItem)
  async deletePurchaseInvoiceItem(
    @graphql.Args() args: DeletePurchaseInvoiceItemArgs
  ): Promise<PurchaseInvoiceItem | null> {
    try {
      return await this.service.deletePurchaseInvoiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
