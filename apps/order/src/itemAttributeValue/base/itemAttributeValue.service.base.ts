/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemAttributeValue as PrismaItemAttributeValue,
} from "@prisma/client";

export class ItemAttributeValueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemAttributeValueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemAttributeValue.count(args);
  }

  async itemAttributeValues(
    args: Prisma.ItemAttributeValueFindManyArgs
  ): Promise<PrismaItemAttributeValue[]> {
    return this.prisma.itemAttributeValue.findMany(args);
  }
  async itemAttributeValue(
    args: Prisma.ItemAttributeValueFindUniqueArgs
  ): Promise<PrismaItemAttributeValue | null> {
    return this.prisma.itemAttributeValue.findUnique(args);
  }
  async createItemAttributeValue(
    args: Prisma.ItemAttributeValueCreateArgs
  ): Promise<PrismaItemAttributeValue> {
    return this.prisma.itemAttributeValue.create(args);
  }
  async updateItemAttributeValue(
    args: Prisma.ItemAttributeValueUpdateArgs
  ): Promise<PrismaItemAttributeValue> {
    return this.prisma.itemAttributeValue.update(args);
  }
  async deleteItemAttributeValue(
    args: Prisma.ItemAttributeValueDeleteArgs
  ): Promise<PrismaItemAttributeValue> {
    return this.prisma.itemAttributeValue.delete(args);
  }
}
