/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemAttributeValueService } from "../itemAttributeValue.service";
import { ItemAttributeValueCreateInput } from "./ItemAttributeValueCreateInput";
import { ItemAttributeValue } from "./ItemAttributeValue";
import { ItemAttributeValueFindManyArgs } from "./ItemAttributeValueFindManyArgs";
import { ItemAttributeValueWhereUniqueInput } from "./ItemAttributeValueWhereUniqueInput";
import { ItemAttributeValueUpdateInput } from "./ItemAttributeValueUpdateInput";

export class ItemAttributeValueControllerBase {
  constructor(protected readonly service: ItemAttributeValueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemAttributeValue })
  async createItemAttributeValue(
    @common.Body() data: ItemAttributeValueCreateInput
  ): Promise<ItemAttributeValue> {
    return await this.service.createItemAttributeValue({
      data: data,
      select: {
        abbr: true,
        attributeValue: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemAttributeValue] })
  @ApiNestedQuery(ItemAttributeValueFindManyArgs)
  async itemAttributeValues(
    @common.Req() request: Request
  ): Promise<ItemAttributeValue[]> {
    const args = plainToClass(ItemAttributeValueFindManyArgs, request.query);
    return this.service.itemAttributeValues({
      ...args,
      select: {
        abbr: true,
        attributeValue: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemAttributeValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemAttributeValue(
    @common.Param() params: ItemAttributeValueWhereUniqueInput
  ): Promise<ItemAttributeValue | null> {
    const result = await this.service.itemAttributeValue({
      where: params,
      select: {
        abbr: true,
        attributeValue: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemAttributeValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemAttributeValue(
    @common.Param() params: ItemAttributeValueWhereUniqueInput,
    @common.Body() data: ItemAttributeValueUpdateInput
  ): Promise<ItemAttributeValue | null> {
    try {
      return await this.service.updateItemAttributeValue({
        where: params,
        data: data,
        select: {
          abbr: true,
          attributeValue: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemAttributeValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemAttributeValue(
    @common.Param() params: ItemAttributeValueWhereUniqueInput
  ): Promise<ItemAttributeValue | null> {
    try {
      return await this.service.deleteItemAttributeValue({
        where: params,
        select: {
          abbr: true,
          attributeValue: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
