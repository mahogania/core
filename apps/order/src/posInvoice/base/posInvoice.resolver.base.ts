/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PosInvoice } from "./PosInvoice";
import { PosInvoiceCountArgs } from "./PosInvoiceCountArgs";
import { PosInvoiceFindManyArgs } from "./PosInvoiceFindManyArgs";
import { PosInvoiceFindUniqueArgs } from "./PosInvoiceFindUniqueArgs";
import { CreatePosInvoiceArgs } from "./CreatePosInvoiceArgs";
import { UpdatePosInvoiceArgs } from "./UpdatePosInvoiceArgs";
import { DeletePosInvoiceArgs } from "./DeletePosInvoiceArgs";
import { PosInvoiceService } from "../posInvoice.service";
@graphql.Resolver(() => PosInvoice)
export class PosInvoiceResolverBase {
  constructor(protected readonly service: PosInvoiceService) {}

  async _posInvoicesMeta(
    @graphql.Args() args: PosInvoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PosInvoice])
  async posInvoices(
    @graphql.Args() args: PosInvoiceFindManyArgs
  ): Promise<PosInvoice[]> {
    return this.service.posInvoices(args);
  }

  @graphql.Query(() => PosInvoice, { nullable: true })
  async posInvoice(
    @graphql.Args() args: PosInvoiceFindUniqueArgs
  ): Promise<PosInvoice | null> {
    const result = await this.service.posInvoice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PosInvoice)
  async createPosInvoice(
    @graphql.Args() args: CreatePosInvoiceArgs
  ): Promise<PosInvoice> {
    return await this.service.createPosInvoice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PosInvoice)
  async updatePosInvoice(
    @graphql.Args() args: UpdatePosInvoiceArgs
  ): Promise<PosInvoice | null> {
    try {
      return await this.service.updatePosInvoice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PosInvoice)
  async deletePosInvoice(
    @graphql.Args() args: DeletePosInvoiceArgs
  ): Promise<PosInvoice | null> {
    try {
      return await this.service.deletePosInvoice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
