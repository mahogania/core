/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlanketOrder } from "./BlanketOrder";
import { BlanketOrderCountArgs } from "./BlanketOrderCountArgs";
import { BlanketOrderFindManyArgs } from "./BlanketOrderFindManyArgs";
import { BlanketOrderFindUniqueArgs } from "./BlanketOrderFindUniqueArgs";
import { CreateBlanketOrderArgs } from "./CreateBlanketOrderArgs";
import { UpdateBlanketOrderArgs } from "./UpdateBlanketOrderArgs";
import { DeleteBlanketOrderArgs } from "./DeleteBlanketOrderArgs";
import { BlanketOrderService } from "../blanketOrder.service";
@graphql.Resolver(() => BlanketOrder)
export class BlanketOrderResolverBase {
  constructor(protected readonly service: BlanketOrderService) {}

  async _blanketOrdersMeta(
    @graphql.Args() args: BlanketOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlanketOrder])
  async blanketOrders(
    @graphql.Args() args: BlanketOrderFindManyArgs
  ): Promise<BlanketOrder[]> {
    return this.service.blanketOrders(args);
  }

  @graphql.Query(() => BlanketOrder, { nullable: true })
  async blanketOrder(
    @graphql.Args() args: BlanketOrderFindUniqueArgs
  ): Promise<BlanketOrder | null> {
    const result = await this.service.blanketOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlanketOrder)
  async createBlanketOrder(
    @graphql.Args() args: CreateBlanketOrderArgs
  ): Promise<BlanketOrder> {
    return await this.service.createBlanketOrder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BlanketOrder)
  async updateBlanketOrder(
    @graphql.Args() args: UpdateBlanketOrderArgs
  ): Promise<BlanketOrder | null> {
    try {
      return await this.service.updateBlanketOrder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlanketOrder)
  async deleteBlanketOrder(
    @graphql.Args() args: DeleteBlanketOrderArgs
  ): Promise<BlanketOrder | null> {
    try {
      return await this.service.deleteBlanketOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
