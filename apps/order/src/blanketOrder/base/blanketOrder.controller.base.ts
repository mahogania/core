/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlanketOrderService } from "../blanketOrder.service";
import { BlanketOrderCreateInput } from "./BlanketOrderCreateInput";
import { BlanketOrder } from "./BlanketOrder";
import { BlanketOrderFindManyArgs } from "./BlanketOrderFindManyArgs";
import { BlanketOrderWhereUniqueInput } from "./BlanketOrderWhereUniqueInput";
import { BlanketOrderUpdateInput } from "./BlanketOrderUpdateInput";

export class BlanketOrderControllerBase {
  constructor(protected readonly service: BlanketOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlanketOrder })
  async createBlanketOrder(
    @common.Body() data: BlanketOrderCreateInput
  ): Promise<BlanketOrder> {
    return await this.service.createBlanketOrder({
      data: data,
      select: {
        amendedFrom: true,
        blanketOrderType: true,
        company: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerName: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        supplier: true,
        supplierName: true,
        tcName: true,
        terms: true,
        toDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlanketOrder] })
  @ApiNestedQuery(BlanketOrderFindManyArgs)
  async blanketOrders(@common.Req() request: Request): Promise<BlanketOrder[]> {
    const args = plainToClass(BlanketOrderFindManyArgs, request.query);
    return this.service.blanketOrders({
      ...args,
      select: {
        amendedFrom: true,
        blanketOrderType: true,
        company: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerName: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        supplier: true,
        supplierName: true,
        tcName: true,
        terms: true,
        toDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlanketOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blanketOrder(
    @common.Param() params: BlanketOrderWhereUniqueInput
  ): Promise<BlanketOrder | null> {
    const result = await this.service.blanketOrder({
      where: params,
      select: {
        amendedFrom: true,
        blanketOrderType: true,
        company: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerName: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        supplier: true,
        supplierName: true,
        tcName: true,
        terms: true,
        toDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlanketOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlanketOrder(
    @common.Param() params: BlanketOrderWhereUniqueInput,
    @common.Body() data: BlanketOrderUpdateInput
  ): Promise<BlanketOrder | null> {
    try {
      return await this.service.updateBlanketOrder({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          blanketOrderType: true,
          company: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerName: true,
          docstatus: true,
          fromDate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          supplier: true,
          supplierName: true,
          tcName: true,
          terms: true,
          toDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlanketOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlanketOrder(
    @common.Param() params: BlanketOrderWhereUniqueInput
  ): Promise<BlanketOrder | null> {
    try {
      return await this.service.deleteBlanketOrder({
        where: params,
        select: {
          amendedFrom: true,
          blanketOrderType: true,
          company: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerName: true,
          docstatus: true,
          fromDate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          supplier: true,
          supplierName: true,
          tcName: true,
          terms: true,
          toDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
