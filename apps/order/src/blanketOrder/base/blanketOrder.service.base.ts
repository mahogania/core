/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BlanketOrder as PrismaBlanketOrder } from "@prisma/client";

export class BlanketOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlanketOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blanketOrder.count(args);
  }

  async blanketOrders(
    args: Prisma.BlanketOrderFindManyArgs
  ): Promise<PrismaBlanketOrder[]> {
    return this.prisma.blanketOrder.findMany(args);
  }
  async blanketOrder(
    args: Prisma.BlanketOrderFindUniqueArgs
  ): Promise<PrismaBlanketOrder | null> {
    return this.prisma.blanketOrder.findUnique(args);
  }
  async createBlanketOrder(
    args: Prisma.BlanketOrderCreateArgs
  ): Promise<PrismaBlanketOrder> {
    return this.prisma.blanketOrder.create(args);
  }
  async updateBlanketOrder(
    args: Prisma.BlanketOrderUpdateArgs
  ): Promise<PrismaBlanketOrder> {
    return this.prisma.blanketOrder.update(args);
  }
  async deleteBlanketOrder(
    args: Prisma.BlanketOrderDeleteArgs
  ): Promise<PrismaBlanketOrder> {
    return this.prisma.blanketOrder.delete(args);
  }
}
