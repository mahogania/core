/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PurchaseInvoice } from "./PurchaseInvoice";
import { PurchaseInvoiceCountArgs } from "./PurchaseInvoiceCountArgs";
import { PurchaseInvoiceFindManyArgs } from "./PurchaseInvoiceFindManyArgs";
import { PurchaseInvoiceFindUniqueArgs } from "./PurchaseInvoiceFindUniqueArgs";
import { CreatePurchaseInvoiceArgs } from "./CreatePurchaseInvoiceArgs";
import { UpdatePurchaseInvoiceArgs } from "./UpdatePurchaseInvoiceArgs";
import { DeletePurchaseInvoiceArgs } from "./DeletePurchaseInvoiceArgs";
import { PurchaseInvoiceService } from "../purchaseInvoice.service";
@graphql.Resolver(() => PurchaseInvoice)
export class PurchaseInvoiceResolverBase {
  constructor(protected readonly service: PurchaseInvoiceService) {}

  async _purchaseInvoicesMeta(
    @graphql.Args() args: PurchaseInvoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PurchaseInvoice])
  async purchaseInvoices(
    @graphql.Args() args: PurchaseInvoiceFindManyArgs
  ): Promise<PurchaseInvoice[]> {
    return this.service.purchaseInvoices(args);
  }

  @graphql.Query(() => PurchaseInvoice, { nullable: true })
  async purchaseInvoice(
    @graphql.Args() args: PurchaseInvoiceFindUniqueArgs
  ): Promise<PurchaseInvoice | null> {
    const result = await this.service.purchaseInvoice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PurchaseInvoice)
  async createPurchaseInvoice(
    @graphql.Args() args: CreatePurchaseInvoiceArgs
  ): Promise<PurchaseInvoice> {
    return await this.service.createPurchaseInvoice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PurchaseInvoice)
  async updatePurchaseInvoice(
    @graphql.Args() args: UpdatePurchaseInvoiceArgs
  ): Promise<PurchaseInvoice | null> {
    try {
      return await this.service.updatePurchaseInvoice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseInvoice)
  async deletePurchaseInvoice(
    @graphql.Args() args: DeletePurchaseInvoiceArgs
  ): Promise<PurchaseInvoice | null> {
    try {
      return await this.service.deletePurchaseInvoice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
