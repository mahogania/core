/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesInvoice } from "./SalesInvoice";
import { SalesInvoiceCountArgs } from "./SalesInvoiceCountArgs";
import { SalesInvoiceFindManyArgs } from "./SalesInvoiceFindManyArgs";
import { SalesInvoiceFindUniqueArgs } from "./SalesInvoiceFindUniqueArgs";
import { CreateSalesInvoiceArgs } from "./CreateSalesInvoiceArgs";
import { UpdateSalesInvoiceArgs } from "./UpdateSalesInvoiceArgs";
import { DeleteSalesInvoiceArgs } from "./DeleteSalesInvoiceArgs";
import { SalesInvoiceService } from "../salesInvoice.service";
@graphql.Resolver(() => SalesInvoice)
export class SalesInvoiceResolverBase {
  constructor(protected readonly service: SalesInvoiceService) {}

  async _salesInvoicesMeta(
    @graphql.Args() args: SalesInvoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesInvoice])
  async salesInvoices(
    @graphql.Args() args: SalesInvoiceFindManyArgs
  ): Promise<SalesInvoice[]> {
    return this.service.salesInvoices(args);
  }

  @graphql.Query(() => SalesInvoice, { nullable: true })
  async salesInvoice(
    @graphql.Args() args: SalesInvoiceFindUniqueArgs
  ): Promise<SalesInvoice | null> {
    const result = await this.service.salesInvoice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesInvoice)
  async createSalesInvoice(
    @graphql.Args() args: CreateSalesInvoiceArgs
  ): Promise<SalesInvoice> {
    return await this.service.createSalesInvoice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesInvoice)
  async updateSalesInvoice(
    @graphql.Args() args: UpdateSalesInvoiceArgs
  ): Promise<SalesInvoice | null> {
    try {
      return await this.service.updateSalesInvoice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesInvoice)
  async deleteSalesInvoice(
    @graphql.Args() args: DeleteSalesInvoiceArgs
  ): Promise<SalesInvoice | null> {
    try {
      return await this.service.deleteSalesInvoice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
