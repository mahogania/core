/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SalesInvoice as PrismaSalesInvoice } from "@prisma/client";

export class SalesInvoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalesInvoiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salesInvoice.count(args);
  }

  async salesInvoices(
    args: Prisma.SalesInvoiceFindManyArgs
  ): Promise<PrismaSalesInvoice[]> {
    return this.prisma.salesInvoice.findMany(args);
  }
  async salesInvoice(
    args: Prisma.SalesInvoiceFindUniqueArgs
  ): Promise<PrismaSalesInvoice | null> {
    return this.prisma.salesInvoice.findUnique(args);
  }
  async createSalesInvoice(
    args: Prisma.SalesInvoiceCreateArgs
  ): Promise<PrismaSalesInvoice> {
    return this.prisma.salesInvoice.create(args);
  }
  async updateSalesInvoice(
    args: Prisma.SalesInvoiceUpdateArgs
  ): Promise<PrismaSalesInvoice> {
    return this.prisma.salesInvoice.update(args);
  }
  async deleteSalesInvoice(
    args: Prisma.SalesInvoiceDeleteArgs
  ): Promise<PrismaSalesInvoice> {
    return this.prisma.salesInvoice.delete(args);
  }
}
