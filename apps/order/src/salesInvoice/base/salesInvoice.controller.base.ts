/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesInvoiceService } from "../salesInvoice.service";
import { SalesInvoiceCreateInput } from "./SalesInvoiceCreateInput";
import { SalesInvoice } from "./SalesInvoice";
import { SalesInvoiceFindManyArgs } from "./SalesInvoiceFindManyArgs";
import { SalesInvoiceWhereUniqueInput } from "./SalesInvoiceWhereUniqueInput";
import { SalesInvoiceUpdateInput } from "./SalesInvoiceUpdateInput";

export class SalesInvoiceControllerBase {
  constructor(protected readonly service: SalesInvoiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesInvoice })
  async createSalesInvoice(
    @common.Body() data: SalesInvoiceCreateInput
  ): Promise<SalesInvoice> {
    return await this.service.createSalesInvoice({
      data: data,
      select: {
        accountForChangeAmount: true,
        additionalDiscountAccount: true,
        additionalDiscountPercentage: true,
        addressDisplay: true,
        againstIncomeAccount: true,
        allocateAdvancesAutomatically: true,
        amendedFrom: true,
        amountEligibleForCommission: true,
        applyDiscountOn: true,
        autoRepeat: true,
        baseChangeAmount: true,
        baseDiscountAmount: true,
        baseGrandTotal: true,
        baseInWords: true,
        baseNetTotal: true,
        basePaidAmount: true,
        baseRoundedTotal: true,
        baseRoundingAdjustment: true,
        baseTotal: true,
        baseTotalTaxesAndCharges: true,
        baseWriteOffAmount: true,
        campaign: true,
        cashBankAccount: true,
        changeAmount: true,
        commissionRate: true,
        company: true,
        companyAddress: true,
        companyAddressDisplay: true,
        companyTaxId: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        conversionRate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        customerAddress: true,
        customerGroup: true,
        customerName: true,
        debitTo: true,
        disableRoundedTotal: true,
        discountAmount: true,
        dispatchAddress: true,
        dispatchAddressName: true,
        docstatus: true,
        dueDate: true,
        fromDate: true,
        grandTotal: true,
        groupSameItems: true,
        id: true,
        idx: true,
        ignoreDefaultPaymentTermsTemplate: true,
        ignorePricingRule: true,
        inWords: true,
        incoterm: true,
        interCompanyInvoiceReference: true,
        isCashOrNonTradeDiscount: true,
        isConsolidated: true,
        isDebitNote: true,
        isDiscounted: true,
        isInternalCustomer: true,
        isOpening: true,
        isPos: true,
        isReturn: true,
        language: true,
        letterHead: true,
        loyaltyAmount: true,
        loyaltyPoints: true,
        loyaltyProgram: true,
        loyaltyRedemptionAccount: true,
        loyaltyRedemptionCostCenter: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namedPlace: true,
        namingSeries: true,
        netTotal: true,
        onlyIncludeAllocatedPayments: true,
        otherChargesCalculation: true,
        outstandingAmount: true,
        owner: true,
        paidAmount: true,
        partyAccountCurrency: true,
        paymentTermsTemplate: true,
        plcConversionRate: true,
        poDate: true,
        poNo: true,
        posProfile: true,
        postingDate: true,
        postingTime: true,
        priceListCurrency: true,
        project: true,
        redeemLoyaltyPoints: true,
        remarks: true,
        representsCompany: true,
        returnAgainst: true,
        roundedTotal: true,
        roundingAdjustment: true,
        salesPartner: true,
        scanBarcode: true,
        selectPrintHeading: true,
        sellingPriceList: true,
        setPostingTime: true,
        setTargetWarehouse: true,
        setWarehouse: true,
        shippingAddress: true,
        shippingAddressName: true,
        shippingRule: true,
        source: true,
        status: true,
        subscription: true,
        taxCategory: true,
        taxId: true,
        taxesAndCharges: true,
        tcName: true,
        terms: true,
        territory: true,
        title: true,
        toDate: true,
        total: true,
        totalAdvance: true,
        totalBillingAmount: true,
        totalBillingHours: true,
        totalCommission: true,
        totalNetWeight: true,
        totalQty: true,
        totalTaxesAndCharges: true,
        unrealizedProfitLossAccount: true,
        updateBilledAmountInDeliveryNote: true,
        updateBilledAmountInSalesOrder: true,
        updateOutstandingForSelf: true,
        updateStock: true,
        updatedAt: true,
        useCompanyRoundoffCostCenter: true,
        writeOffAccount: true,
        writeOffAmount: true,
        writeOffCostCenter: true,
        writeOffOutstandingAmountAutomatically: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesInvoice] })
  @ApiNestedQuery(SalesInvoiceFindManyArgs)
  async salesInvoices(@common.Req() request: Request): Promise<SalesInvoice[]> {
    const args = plainToClass(SalesInvoiceFindManyArgs, request.query);
    return this.service.salesInvoices({
      ...args,
      select: {
        accountForChangeAmount: true,
        additionalDiscountAccount: true,
        additionalDiscountPercentage: true,
        addressDisplay: true,
        againstIncomeAccount: true,
        allocateAdvancesAutomatically: true,
        amendedFrom: true,
        amountEligibleForCommission: true,
        applyDiscountOn: true,
        autoRepeat: true,
        baseChangeAmount: true,
        baseDiscountAmount: true,
        baseGrandTotal: true,
        baseInWords: true,
        baseNetTotal: true,
        basePaidAmount: true,
        baseRoundedTotal: true,
        baseRoundingAdjustment: true,
        baseTotal: true,
        baseTotalTaxesAndCharges: true,
        baseWriteOffAmount: true,
        campaign: true,
        cashBankAccount: true,
        changeAmount: true,
        commissionRate: true,
        company: true,
        companyAddress: true,
        companyAddressDisplay: true,
        companyTaxId: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        conversionRate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        customerAddress: true,
        customerGroup: true,
        customerName: true,
        debitTo: true,
        disableRoundedTotal: true,
        discountAmount: true,
        dispatchAddress: true,
        dispatchAddressName: true,
        docstatus: true,
        dueDate: true,
        fromDate: true,
        grandTotal: true,
        groupSameItems: true,
        id: true,
        idx: true,
        ignoreDefaultPaymentTermsTemplate: true,
        ignorePricingRule: true,
        inWords: true,
        incoterm: true,
        interCompanyInvoiceReference: true,
        isCashOrNonTradeDiscount: true,
        isConsolidated: true,
        isDebitNote: true,
        isDiscounted: true,
        isInternalCustomer: true,
        isOpening: true,
        isPos: true,
        isReturn: true,
        language: true,
        letterHead: true,
        loyaltyAmount: true,
        loyaltyPoints: true,
        loyaltyProgram: true,
        loyaltyRedemptionAccount: true,
        loyaltyRedemptionCostCenter: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namedPlace: true,
        namingSeries: true,
        netTotal: true,
        onlyIncludeAllocatedPayments: true,
        otherChargesCalculation: true,
        outstandingAmount: true,
        owner: true,
        paidAmount: true,
        partyAccountCurrency: true,
        paymentTermsTemplate: true,
        plcConversionRate: true,
        poDate: true,
        poNo: true,
        posProfile: true,
        postingDate: true,
        postingTime: true,
        priceListCurrency: true,
        project: true,
        redeemLoyaltyPoints: true,
        remarks: true,
        representsCompany: true,
        returnAgainst: true,
        roundedTotal: true,
        roundingAdjustment: true,
        salesPartner: true,
        scanBarcode: true,
        selectPrintHeading: true,
        sellingPriceList: true,
        setPostingTime: true,
        setTargetWarehouse: true,
        setWarehouse: true,
        shippingAddress: true,
        shippingAddressName: true,
        shippingRule: true,
        source: true,
        status: true,
        subscription: true,
        taxCategory: true,
        taxId: true,
        taxesAndCharges: true,
        tcName: true,
        terms: true,
        territory: true,
        title: true,
        toDate: true,
        total: true,
        totalAdvance: true,
        totalBillingAmount: true,
        totalBillingHours: true,
        totalCommission: true,
        totalNetWeight: true,
        totalQty: true,
        totalTaxesAndCharges: true,
        unrealizedProfitLossAccount: true,
        updateBilledAmountInDeliveryNote: true,
        updateBilledAmountInSalesOrder: true,
        updateOutstandingForSelf: true,
        updateStock: true,
        updatedAt: true,
        useCompanyRoundoffCostCenter: true,
        writeOffAccount: true,
        writeOffAmount: true,
        writeOffCostCenter: true,
        writeOffOutstandingAmountAutomatically: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesInvoice(
    @common.Param() params: SalesInvoiceWhereUniqueInput
  ): Promise<SalesInvoice | null> {
    const result = await this.service.salesInvoice({
      where: params,
      select: {
        accountForChangeAmount: true,
        additionalDiscountAccount: true,
        additionalDiscountPercentage: true,
        addressDisplay: true,
        againstIncomeAccount: true,
        allocateAdvancesAutomatically: true,
        amendedFrom: true,
        amountEligibleForCommission: true,
        applyDiscountOn: true,
        autoRepeat: true,
        baseChangeAmount: true,
        baseDiscountAmount: true,
        baseGrandTotal: true,
        baseInWords: true,
        baseNetTotal: true,
        basePaidAmount: true,
        baseRoundedTotal: true,
        baseRoundingAdjustment: true,
        baseTotal: true,
        baseTotalTaxesAndCharges: true,
        baseWriteOffAmount: true,
        campaign: true,
        cashBankAccount: true,
        changeAmount: true,
        commissionRate: true,
        company: true,
        companyAddress: true,
        companyAddressDisplay: true,
        companyTaxId: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        conversionRate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        customerAddress: true,
        customerGroup: true,
        customerName: true,
        debitTo: true,
        disableRoundedTotal: true,
        discountAmount: true,
        dispatchAddress: true,
        dispatchAddressName: true,
        docstatus: true,
        dueDate: true,
        fromDate: true,
        grandTotal: true,
        groupSameItems: true,
        id: true,
        idx: true,
        ignoreDefaultPaymentTermsTemplate: true,
        ignorePricingRule: true,
        inWords: true,
        incoterm: true,
        interCompanyInvoiceReference: true,
        isCashOrNonTradeDiscount: true,
        isConsolidated: true,
        isDebitNote: true,
        isDiscounted: true,
        isInternalCustomer: true,
        isOpening: true,
        isPos: true,
        isReturn: true,
        language: true,
        letterHead: true,
        loyaltyAmount: true,
        loyaltyPoints: true,
        loyaltyProgram: true,
        loyaltyRedemptionAccount: true,
        loyaltyRedemptionCostCenter: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namedPlace: true,
        namingSeries: true,
        netTotal: true,
        onlyIncludeAllocatedPayments: true,
        otherChargesCalculation: true,
        outstandingAmount: true,
        owner: true,
        paidAmount: true,
        partyAccountCurrency: true,
        paymentTermsTemplate: true,
        plcConversionRate: true,
        poDate: true,
        poNo: true,
        posProfile: true,
        postingDate: true,
        postingTime: true,
        priceListCurrency: true,
        project: true,
        redeemLoyaltyPoints: true,
        remarks: true,
        representsCompany: true,
        returnAgainst: true,
        roundedTotal: true,
        roundingAdjustment: true,
        salesPartner: true,
        scanBarcode: true,
        selectPrintHeading: true,
        sellingPriceList: true,
        setPostingTime: true,
        setTargetWarehouse: true,
        setWarehouse: true,
        shippingAddress: true,
        shippingAddressName: true,
        shippingRule: true,
        source: true,
        status: true,
        subscription: true,
        taxCategory: true,
        taxId: true,
        taxesAndCharges: true,
        tcName: true,
        terms: true,
        territory: true,
        title: true,
        toDate: true,
        total: true,
        totalAdvance: true,
        totalBillingAmount: true,
        totalBillingHours: true,
        totalCommission: true,
        totalNetWeight: true,
        totalQty: true,
        totalTaxesAndCharges: true,
        unrealizedProfitLossAccount: true,
        updateBilledAmountInDeliveryNote: true,
        updateBilledAmountInSalesOrder: true,
        updateOutstandingForSelf: true,
        updateStock: true,
        updatedAt: true,
        useCompanyRoundoffCostCenter: true,
        writeOffAccount: true,
        writeOffAmount: true,
        writeOffCostCenter: true,
        writeOffOutstandingAmountAutomatically: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesInvoice(
    @common.Param() params: SalesInvoiceWhereUniqueInput,
    @common.Body() data: SalesInvoiceUpdateInput
  ): Promise<SalesInvoice | null> {
    try {
      return await this.service.updateSalesInvoice({
        where: params,
        data: data,
        select: {
          accountForChangeAmount: true,
          additionalDiscountAccount: true,
          additionalDiscountPercentage: true,
          addressDisplay: true,
          againstIncomeAccount: true,
          allocateAdvancesAutomatically: true,
          amendedFrom: true,
          amountEligibleForCommission: true,
          applyDiscountOn: true,
          autoRepeat: true,
          baseChangeAmount: true,
          baseDiscountAmount: true,
          baseGrandTotal: true,
          baseInWords: true,
          baseNetTotal: true,
          basePaidAmount: true,
          baseRoundedTotal: true,
          baseRoundingAdjustment: true,
          baseTotal: true,
          baseTotalTaxesAndCharges: true,
          baseWriteOffAmount: true,
          campaign: true,
          cashBankAccount: true,
          changeAmount: true,
          commissionRate: true,
          company: true,
          companyAddress: true,
          companyAddressDisplay: true,
          companyTaxId: true,
          contactDisplay: true,
          contactEmail: true,
          contactMobile: true,
          contactPerson: true,
          conversionRate: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currency: true,
          customer: true,
          customerAddress: true,
          customerGroup: true,
          customerName: true,
          debitTo: true,
          disableRoundedTotal: true,
          discountAmount: true,
          dispatchAddress: true,
          dispatchAddressName: true,
          docstatus: true,
          dueDate: true,
          fromDate: true,
          grandTotal: true,
          groupSameItems: true,
          id: true,
          idx: true,
          ignoreDefaultPaymentTermsTemplate: true,
          ignorePricingRule: true,
          inWords: true,
          incoterm: true,
          interCompanyInvoiceReference: true,
          isCashOrNonTradeDiscount: true,
          isConsolidated: true,
          isDebitNote: true,
          isDiscounted: true,
          isInternalCustomer: true,
          isOpening: true,
          isPos: true,
          isReturn: true,
          language: true,
          letterHead: true,
          loyaltyAmount: true,
          loyaltyPoints: true,
          loyaltyProgram: true,
          loyaltyRedemptionAccount: true,
          loyaltyRedemptionCostCenter: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namedPlace: true,
          namingSeries: true,
          netTotal: true,
          onlyIncludeAllocatedPayments: true,
          otherChargesCalculation: true,
          outstandingAmount: true,
          owner: true,
          paidAmount: true,
          partyAccountCurrency: true,
          paymentTermsTemplate: true,
          plcConversionRate: true,
          poDate: true,
          poNo: true,
          posProfile: true,
          postingDate: true,
          postingTime: true,
          priceListCurrency: true,
          project: true,
          redeemLoyaltyPoints: true,
          remarks: true,
          representsCompany: true,
          returnAgainst: true,
          roundedTotal: true,
          roundingAdjustment: true,
          salesPartner: true,
          scanBarcode: true,
          selectPrintHeading: true,
          sellingPriceList: true,
          setPostingTime: true,
          setTargetWarehouse: true,
          setWarehouse: true,
          shippingAddress: true,
          shippingAddressName: true,
          shippingRule: true,
          source: true,
          status: true,
          subscription: true,
          taxCategory: true,
          taxId: true,
          taxesAndCharges: true,
          tcName: true,
          terms: true,
          territory: true,
          title: true,
          toDate: true,
          total: true,
          totalAdvance: true,
          totalBillingAmount: true,
          totalBillingHours: true,
          totalCommission: true,
          totalNetWeight: true,
          totalQty: true,
          totalTaxesAndCharges: true,
          unrealizedProfitLossAccount: true,
          updateBilledAmountInDeliveryNote: true,
          updateBilledAmountInSalesOrder: true,
          updateOutstandingForSelf: true,
          updateStock: true,
          updatedAt: true,
          useCompanyRoundoffCostCenter: true,
          writeOffAccount: true,
          writeOffAmount: true,
          writeOffCostCenter: true,
          writeOffOutstandingAmountAutomatically: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesInvoice(
    @common.Param() params: SalesInvoiceWhereUniqueInput
  ): Promise<SalesInvoice | null> {
    try {
      return await this.service.deleteSalesInvoice({
        where: params,
        select: {
          accountForChangeAmount: true,
          additionalDiscountAccount: true,
          additionalDiscountPercentage: true,
          addressDisplay: true,
          againstIncomeAccount: true,
          allocateAdvancesAutomatically: true,
          amendedFrom: true,
          amountEligibleForCommission: true,
          applyDiscountOn: true,
          autoRepeat: true,
          baseChangeAmount: true,
          baseDiscountAmount: true,
          baseGrandTotal: true,
          baseInWords: true,
          baseNetTotal: true,
          basePaidAmount: true,
          baseRoundedTotal: true,
          baseRoundingAdjustment: true,
          baseTotal: true,
          baseTotalTaxesAndCharges: true,
          baseWriteOffAmount: true,
          campaign: true,
          cashBankAccount: true,
          changeAmount: true,
          commissionRate: true,
          company: true,
          companyAddress: true,
          companyAddressDisplay: true,
          companyTaxId: true,
          contactDisplay: true,
          contactEmail: true,
          contactMobile: true,
          contactPerson: true,
          conversionRate: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currency: true,
          customer: true,
          customerAddress: true,
          customerGroup: true,
          customerName: true,
          debitTo: true,
          disableRoundedTotal: true,
          discountAmount: true,
          dispatchAddress: true,
          dispatchAddressName: true,
          docstatus: true,
          dueDate: true,
          fromDate: true,
          grandTotal: true,
          groupSameItems: true,
          id: true,
          idx: true,
          ignoreDefaultPaymentTermsTemplate: true,
          ignorePricingRule: true,
          inWords: true,
          incoterm: true,
          interCompanyInvoiceReference: true,
          isCashOrNonTradeDiscount: true,
          isConsolidated: true,
          isDebitNote: true,
          isDiscounted: true,
          isInternalCustomer: true,
          isOpening: true,
          isPos: true,
          isReturn: true,
          language: true,
          letterHead: true,
          loyaltyAmount: true,
          loyaltyPoints: true,
          loyaltyProgram: true,
          loyaltyRedemptionAccount: true,
          loyaltyRedemptionCostCenter: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namedPlace: true,
          namingSeries: true,
          netTotal: true,
          onlyIncludeAllocatedPayments: true,
          otherChargesCalculation: true,
          outstandingAmount: true,
          owner: true,
          paidAmount: true,
          partyAccountCurrency: true,
          paymentTermsTemplate: true,
          plcConversionRate: true,
          poDate: true,
          poNo: true,
          posProfile: true,
          postingDate: true,
          postingTime: true,
          priceListCurrency: true,
          project: true,
          redeemLoyaltyPoints: true,
          remarks: true,
          representsCompany: true,
          returnAgainst: true,
          roundedTotal: true,
          roundingAdjustment: true,
          salesPartner: true,
          scanBarcode: true,
          selectPrintHeading: true,
          sellingPriceList: true,
          setPostingTime: true,
          setTargetWarehouse: true,
          setWarehouse: true,
          shippingAddress: true,
          shippingAddressName: true,
          shippingRule: true,
          source: true,
          status: true,
          subscription: true,
          taxCategory: true,
          taxId: true,
          taxesAndCharges: true,
          tcName: true,
          terms: true,
          territory: true,
          title: true,
          toDate: true,
          total: true,
          totalAdvance: true,
          totalBillingAmount: true,
          totalBillingHours: true,
          totalCommission: true,
          totalNetWeight: true,
          totalQty: true,
          totalTaxesAndCharges: true,
          unrealizedProfitLossAccount: true,
          updateBilledAmountInDeliveryNote: true,
          updateBilledAmountInSalesOrder: true,
          updateOutstandingForSelf: true,
          updateStock: true,
          updatedAt: true,
          useCompanyRoundoffCostCenter: true,
          writeOffAccount: true,
          writeOffAmount: true,
          writeOffCostCenter: true,
          writeOffOutstandingAmountAutomatically: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
