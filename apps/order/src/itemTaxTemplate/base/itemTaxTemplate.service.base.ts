/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemTaxTemplate as PrismaItemTaxTemplate,
} from "@prisma/client";

export class ItemTaxTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemTaxTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemTaxTemplate.count(args);
  }

  async itemTaxTemplates(
    args: Prisma.ItemTaxTemplateFindManyArgs
  ): Promise<PrismaItemTaxTemplate[]> {
    return this.prisma.itemTaxTemplate.findMany(args);
  }
  async itemTaxTemplate(
    args: Prisma.ItemTaxTemplateFindUniqueArgs
  ): Promise<PrismaItemTaxTemplate | null> {
    return this.prisma.itemTaxTemplate.findUnique(args);
  }
  async createItemTaxTemplate(
    args: Prisma.ItemTaxTemplateCreateArgs
  ): Promise<PrismaItemTaxTemplate> {
    return this.prisma.itemTaxTemplate.create(args);
  }
  async updateItemTaxTemplate(
    args: Prisma.ItemTaxTemplateUpdateArgs
  ): Promise<PrismaItemTaxTemplate> {
    return this.prisma.itemTaxTemplate.update(args);
  }
  async deleteItemTaxTemplate(
    args: Prisma.ItemTaxTemplateDeleteArgs
  ): Promise<PrismaItemTaxTemplate> {
    return this.prisma.itemTaxTemplate.delete(args);
  }
}
