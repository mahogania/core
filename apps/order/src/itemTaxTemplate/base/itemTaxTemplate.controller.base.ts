/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemTaxTemplateService } from "../itemTaxTemplate.service";
import { ItemTaxTemplateCreateInput } from "./ItemTaxTemplateCreateInput";
import { ItemTaxTemplate } from "./ItemTaxTemplate";
import { ItemTaxTemplateFindManyArgs } from "./ItemTaxTemplateFindManyArgs";
import { ItemTaxTemplateWhereUniqueInput } from "./ItemTaxTemplateWhereUniqueInput";
import { ItemTaxTemplateUpdateInput } from "./ItemTaxTemplateUpdateInput";

export class ItemTaxTemplateControllerBase {
  constructor(protected readonly service: ItemTaxTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemTaxTemplate })
  async createItemTaxTemplate(
    @common.Body() data: ItemTaxTemplateCreateInput
  ): Promise<ItemTaxTemplate> {
    return await this.service.createItemTaxTemplate({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemTaxTemplate] })
  @ApiNestedQuery(ItemTaxTemplateFindManyArgs)
  async itemTaxTemplates(
    @common.Req() request: Request
  ): Promise<ItemTaxTemplate[]> {
    const args = plainToClass(ItemTaxTemplateFindManyArgs, request.query);
    return this.service.itemTaxTemplates({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemTaxTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemTaxTemplate(
    @common.Param() params: ItemTaxTemplateWhereUniqueInput
  ): Promise<ItemTaxTemplate | null> {
    const result = await this.service.itemTaxTemplate({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemTaxTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemTaxTemplate(
    @common.Param() params: ItemTaxTemplateWhereUniqueInput,
    @common.Body() data: ItemTaxTemplateUpdateInput
  ): Promise<ItemTaxTemplate | null> {
    try {
      return await this.service.updateItemTaxTemplate({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemTaxTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemTaxTemplate(
    @common.Param() params: ItemTaxTemplateWhereUniqueInput
  ): Promise<ItemTaxTemplate | null> {
    try {
      return await this.service.deleteItemTaxTemplate({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
