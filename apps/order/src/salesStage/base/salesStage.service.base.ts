/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SalesStage as PrismaSalesStage } from "@prisma/client";

export class SalesStageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalesStageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salesStage.count(args);
  }

  async salesStages(
    args: Prisma.SalesStageFindManyArgs
  ): Promise<PrismaSalesStage[]> {
    return this.prisma.salesStage.findMany(args);
  }
  async salesStage(
    args: Prisma.SalesStageFindUniqueArgs
  ): Promise<PrismaSalesStage | null> {
    return this.prisma.salesStage.findUnique(args);
  }
  async createSalesStage(
    args: Prisma.SalesStageCreateArgs
  ): Promise<PrismaSalesStage> {
    return this.prisma.salesStage.create(args);
  }
  async updateSalesStage(
    args: Prisma.SalesStageUpdateArgs
  ): Promise<PrismaSalesStage> {
    return this.prisma.salesStage.update(args);
  }
  async deleteSalesStage(
    args: Prisma.SalesStageDeleteArgs
  ): Promise<PrismaSalesStage> {
    return this.prisma.salesStage.delete(args);
  }
}
