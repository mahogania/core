/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesStageService } from "../salesStage.service";
import { SalesStageCreateInput } from "./SalesStageCreateInput";
import { SalesStage } from "./SalesStage";
import { SalesStageFindManyArgs } from "./SalesStageFindManyArgs";
import { SalesStageWhereUniqueInput } from "./SalesStageWhereUniqueInput";
import { SalesStageUpdateInput } from "./SalesStageUpdateInput";

export class SalesStageControllerBase {
  constructor(protected readonly service: SalesStageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SalesStage })
  async createSalesStage(
    @common.Body() data: SalesStageCreateInput
  ): Promise<SalesStage> {
    return await this.service.createSalesStage({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        stageName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SalesStage] })
  @ApiNestedQuery(SalesStageFindManyArgs)
  async salesStages(@common.Req() request: Request): Promise<SalesStage[]> {
    const args = plainToClass(SalesStageFindManyArgs, request.query);
    return this.service.salesStages({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        stageName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SalesStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salesStage(
    @common.Param() params: SalesStageWhereUniqueInput
  ): Promise<SalesStage | null> {
    const result = await this.service.salesStage({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        stageName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SalesStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalesStage(
    @common.Param() params: SalesStageWhereUniqueInput,
    @common.Body() data: SalesStageUpdateInput
  ): Promise<SalesStage | null> {
    try {
      return await this.service.updateSalesStage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          stageName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SalesStage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalesStage(
    @common.Param() params: SalesStageWhereUniqueInput
  ): Promise<SalesStage | null> {
    try {
      return await this.service.deleteSalesStage({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          stageName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
