/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemTax as PrismaItemTax } from "@prisma/client";

export class ItemTaxServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ItemTaxCountArgs, "select">): Promise<number> {
    return this.prisma.itemTax.count(args);
  }

  async itemTaxes(args: Prisma.ItemTaxFindManyArgs): Promise<PrismaItemTax[]> {
    return this.prisma.itemTax.findMany(args);
  }
  async itemTax(
    args: Prisma.ItemTaxFindUniqueArgs
  ): Promise<PrismaItemTax | null> {
    return this.prisma.itemTax.findUnique(args);
  }
  async createItemTax(args: Prisma.ItemTaxCreateArgs): Promise<PrismaItemTax> {
    return this.prisma.itemTax.create(args);
  }
  async updateItemTax(args: Prisma.ItemTaxUpdateArgs): Promise<PrismaItemTax> {
    return this.prisma.itemTax.update(args);
  }
  async deleteItemTax(args: Prisma.ItemTaxDeleteArgs): Promise<PrismaItemTax> {
    return this.prisma.itemTax.delete(args);
  }
}
