/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemTaxService } from "../itemTax.service";
import { ItemTaxCreateInput } from "./ItemTaxCreateInput";
import { ItemTax } from "./ItemTax";
import { ItemTaxFindManyArgs } from "./ItemTaxFindManyArgs";
import { ItemTaxWhereUniqueInput } from "./ItemTaxWhereUniqueInput";
import { ItemTaxUpdateInput } from "./ItemTaxUpdateInput";

export class ItemTaxControllerBase {
  constructor(protected readonly service: ItemTaxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemTax })
  async createItemTax(
    @common.Body() data: ItemTaxCreateInput
  ): Promise<ItemTax> {
    return await this.service.createItemTax({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemTaxTemplate: true,
        maximumNetRate: true,
        minimumNetRate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        taxCategory: true,
        updatedAt: true,
        validFrom: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemTax] })
  @ApiNestedQuery(ItemTaxFindManyArgs)
  async itemTaxes(@common.Req() request: Request): Promise<ItemTax[]> {
    const args = plainToClass(ItemTaxFindManyArgs, request.query);
    return this.service.itemTaxes({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemTaxTemplate: true,
        maximumNetRate: true,
        minimumNetRate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        taxCategory: true,
        updatedAt: true,
        validFrom: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemTax(
    @common.Param() params: ItemTaxWhereUniqueInput
  ): Promise<ItemTax | null> {
    const result = await this.service.itemTax({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemTaxTemplate: true,
        maximumNetRate: true,
        minimumNetRate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        taxCategory: true,
        updatedAt: true,
        validFrom: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemTax(
    @common.Param() params: ItemTaxWhereUniqueInput,
    @common.Body() data: ItemTaxUpdateInput
  ): Promise<ItemTax | null> {
    try {
      return await this.service.updateItemTax({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemTaxTemplate: true,
          maximumNetRate: true,
          minimumNetRate: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          taxCategory: true,
          updatedAt: true,
          validFrom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemTax(
    @common.Param() params: ItemTaxWhereUniqueInput
  ): Promise<ItemTax | null> {
    try {
      return await this.service.deleteItemTax({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemTaxTemplate: true,
          maximumNetRate: true,
          minimumNetRate: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          taxCategory: true,
          updatedAt: true,
          validFrom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
