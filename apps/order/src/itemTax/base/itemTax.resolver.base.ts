/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemTax } from "./ItemTax";
import { ItemTaxCountArgs } from "./ItemTaxCountArgs";
import { ItemTaxFindManyArgs } from "./ItemTaxFindManyArgs";
import { ItemTaxFindUniqueArgs } from "./ItemTaxFindUniqueArgs";
import { CreateItemTaxArgs } from "./CreateItemTaxArgs";
import { UpdateItemTaxArgs } from "./UpdateItemTaxArgs";
import { DeleteItemTaxArgs } from "./DeleteItemTaxArgs";
import { ItemTaxService } from "../itemTax.service";
@graphql.Resolver(() => ItemTax)
export class ItemTaxResolverBase {
  constructor(protected readonly service: ItemTaxService) {}

  async _itemTaxesMeta(
    @graphql.Args() args: ItemTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemTax])
  async itemTaxes(
    @graphql.Args() args: ItemTaxFindManyArgs
  ): Promise<ItemTax[]> {
    return this.service.itemTaxes(args);
  }

  @graphql.Query(() => ItemTax, { nullable: true })
  async itemTax(
    @graphql.Args() args: ItemTaxFindUniqueArgs
  ): Promise<ItemTax | null> {
    const result = await this.service.itemTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemTax)
  async createItemTax(
    @graphql.Args() args: CreateItemTaxArgs
  ): Promise<ItemTax> {
    return await this.service.createItemTax({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemTax)
  async updateItemTax(
    @graphql.Args() args: UpdateItemTaxArgs
  ): Promise<ItemTax | null> {
    try {
      return await this.service.updateItemTax({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemTax)
  async deleteItemTax(
    @graphql.Args() args: DeleteItemTaxArgs
  ): Promise<ItemTax | null> {
    try {
      return await this.service.deleteItemTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
