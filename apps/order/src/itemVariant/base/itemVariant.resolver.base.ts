/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemVariant } from "./ItemVariant";
import { ItemVariantCountArgs } from "./ItemVariantCountArgs";
import { ItemVariantFindManyArgs } from "./ItemVariantFindManyArgs";
import { ItemVariantFindUniqueArgs } from "./ItemVariantFindUniqueArgs";
import { CreateItemVariantArgs } from "./CreateItemVariantArgs";
import { UpdateItemVariantArgs } from "./UpdateItemVariantArgs";
import { DeleteItemVariantArgs } from "./DeleteItemVariantArgs";
import { ItemVariantService } from "../itemVariant.service";
@graphql.Resolver(() => ItemVariant)
export class ItemVariantResolverBase {
  constructor(protected readonly service: ItemVariantService) {}

  async _itemVariantsMeta(
    @graphql.Args() args: ItemVariantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemVariant])
  async itemVariants(
    @graphql.Args() args: ItemVariantFindManyArgs
  ): Promise<ItemVariant[]> {
    return this.service.itemVariants(args);
  }

  @graphql.Query(() => ItemVariant, { nullable: true })
  async itemVariant(
    @graphql.Args() args: ItemVariantFindUniqueArgs
  ): Promise<ItemVariant | null> {
    const result = await this.service.itemVariant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemVariant)
  async createItemVariant(
    @graphql.Args() args: CreateItemVariantArgs
  ): Promise<ItemVariant> {
    return await this.service.createItemVariant({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemVariant)
  async updateItemVariant(
    @graphql.Args() args: UpdateItemVariantArgs
  ): Promise<ItemVariant | null> {
    try {
      return await this.service.updateItemVariant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemVariant)
  async deleteItemVariant(
    @graphql.Args() args: DeleteItemVariantArgs
  ): Promise<ItemVariant | null> {
    try {
      return await this.service.deleteItemVariant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
