/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ItemVariant as PrismaItemVariant } from "@prisma/client";

export class ItemVariantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemVariantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemVariant.count(args);
  }

  async itemVariants(
    args: Prisma.ItemVariantFindManyArgs
  ): Promise<PrismaItemVariant[]> {
    return this.prisma.itemVariant.findMany(args);
  }
  async itemVariant(
    args: Prisma.ItemVariantFindUniqueArgs
  ): Promise<PrismaItemVariant | null> {
    return this.prisma.itemVariant.findUnique(args);
  }
  async createItemVariant(
    args: Prisma.ItemVariantCreateArgs
  ): Promise<PrismaItemVariant> {
    return this.prisma.itemVariant.create(args);
  }
  async updateItemVariant(
    args: Prisma.ItemVariantUpdateArgs
  ): Promise<PrismaItemVariant> {
    return this.prisma.itemVariant.update(args);
  }
  async deleteItemVariant(
    args: Prisma.ItemVariantDeleteArgs
  ): Promise<PrismaItemVariant> {
    return this.prisma.itemVariant.delete(args);
  }
}
