/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PickListService } from "../pickList.service";
import { PickListCreateInput } from "./PickListCreateInput";
import { PickList } from "./PickList";
import { PickListFindManyArgs } from "./PickListFindManyArgs";
import { PickListWhereUniqueInput } from "./PickListWhereUniqueInput";
import { PickListUpdateInput } from "./PickListUpdateInput";

export class PickListControllerBase {
  constructor(protected readonly service: PickListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PickList })
  async createPickList(
    @common.Body() data: PickListCreateInput
  ): Promise<PickList> {
    return await this.service.createPickList({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        considerRejectedWarehouses: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerName: true,
        docstatus: true,
        forQty: true,
        groupSameItems: true,
        id: true,
        idx: true,
        ignorePricingRule: true,
        materialRequest: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        parentWarehouse: true,
        pickManually: true,
        promptQty: true,
        purpose: true,
        scanBarcode: true,
        scanMode: true,
        status: true,
        updatedAt: true,
        workOrder: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PickList] })
  @ApiNestedQuery(PickListFindManyArgs)
  async pickLists(@common.Req() request: Request): Promise<PickList[]> {
    const args = plainToClass(PickListFindManyArgs, request.query);
    return this.service.pickLists({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        considerRejectedWarehouses: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerName: true,
        docstatus: true,
        forQty: true,
        groupSameItems: true,
        id: true,
        idx: true,
        ignorePricingRule: true,
        materialRequest: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        parentWarehouse: true,
        pickManually: true,
        promptQty: true,
        purpose: true,
        scanBarcode: true,
        scanMode: true,
        status: true,
        updatedAt: true,
        workOrder: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PickList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pickList(
    @common.Param() params: PickListWhereUniqueInput
  ): Promise<PickList | null> {
    const result = await this.service.pickList({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        considerRejectedWarehouses: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerName: true,
        docstatus: true,
        forQty: true,
        groupSameItems: true,
        id: true,
        idx: true,
        ignorePricingRule: true,
        materialRequest: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        parentWarehouse: true,
        pickManually: true,
        promptQty: true,
        purpose: true,
        scanBarcode: true,
        scanMode: true,
        status: true,
        updatedAt: true,
        workOrder: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PickList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePickList(
    @common.Param() params: PickListWhereUniqueInput,
    @common.Body() data: PickListUpdateInput
  ): Promise<PickList | null> {
    try {
      return await this.service.updatePickList({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          considerRejectedWarehouses: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerName: true,
          docstatus: true,
          forQty: true,
          groupSameItems: true,
          id: true,
          idx: true,
          ignorePricingRule: true,
          materialRequest: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          parentWarehouse: true,
          pickManually: true,
          promptQty: true,
          purpose: true,
          scanBarcode: true,
          scanMode: true,
          status: true,
          updatedAt: true,
          workOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PickList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePickList(
    @common.Param() params: PickListWhereUniqueInput
  ): Promise<PickList | null> {
    try {
      return await this.service.deletePickList({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          considerRejectedWarehouses: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerName: true,
          docstatus: true,
          forQty: true,
          groupSameItems: true,
          id: true,
          idx: true,
          ignorePricingRule: true,
          materialRequest: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          parentWarehouse: true,
          pickManually: true,
          promptQty: true,
          purpose: true,
          scanBarcode: true,
          scanMode: true,
          status: true,
          updatedAt: true,
          workOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
