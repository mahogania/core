/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedPrcDclr } from "./TbClreDedPrcDclr";
import { TbClreDedPrcDclrCountArgs } from "./TbClreDedPrcDclrCountArgs";
import { TbClreDedPrcDclrFindManyArgs } from "./TbClreDedPrcDclrFindManyArgs";
import { TbClreDedPrcDclrFindUniqueArgs } from "./TbClreDedPrcDclrFindUniqueArgs";
import { CreateTbClreDedPrcDclrArgs } from "./CreateTbClreDedPrcDclrArgs";
import { UpdateTbClreDedPrcDclrArgs } from "./UpdateTbClreDedPrcDclrArgs";
import { DeleteTbClreDedPrcDclrArgs } from "./DeleteTbClreDedPrcDclrArgs";
import { TbClreDedPrcDclrService } from "../tbClreDedPrcDclr.service";
@graphql.Resolver(() => TbClreDedPrcDclr)
export class TbClreDedPrcDclrResolverBase {
  constructor(protected readonly service: TbClreDedPrcDclrService) {}

  async _tbClreDedPrcDclrsMeta(
    @graphql.Args() args: TbClreDedPrcDclrCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedPrcDclr])
  async tbClreDedPrcDclrs(
    @graphql.Args() args: TbClreDedPrcDclrFindManyArgs
  ): Promise<TbClreDedPrcDclr[]> {
    return this.service.tbClreDedPrcDclrs(args);
  }

  @graphql.Query(() => TbClreDedPrcDclr, { nullable: true })
  async tbClreDedPrcDclr(
    @graphql.Args() args: TbClreDedPrcDclrFindUniqueArgs
  ): Promise<TbClreDedPrcDclr | null> {
    const result = await this.service.tbClreDedPrcDclr(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedPrcDclr)
  async createTbClreDedPrcDclr(
    @graphql.Args() args: CreateTbClreDedPrcDclrArgs
  ): Promise<TbClreDedPrcDclr> {
    return await this.service.createTbClreDedPrcDclr({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedPrcDclr)
  async updateTbClreDedPrcDclr(
    @graphql.Args() args: UpdateTbClreDedPrcDclrArgs
  ): Promise<TbClreDedPrcDclr | null> {
    try {
      return await this.service.updateTbClreDedPrcDclr({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedPrcDclr)
  async deleteTbClreDedPrcDclr(
    @graphql.Args() args: DeleteTbClreDedPrcDclrArgs
  ): Promise<TbClreDedPrcDclr | null> {
    try {
      return await this.service.deleteTbClreDedPrcDclr(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
