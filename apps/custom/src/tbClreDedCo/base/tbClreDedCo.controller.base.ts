/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TbClreDedCoService } from "../tbClreDedCo.service";
import { TbClreDedCoCreateInput } from "./TbClreDedCoCreateInput";
import { TbClreDedCo } from "./TbClreDedCo";
import { TbClreDedCoFindManyArgs } from "./TbClreDedCoFindManyArgs";
import { TbClreDedCoWhereUniqueInput } from "./TbClreDedCoWhereUniqueInput";
import { TbClreDedCoUpdateInput } from "./TbClreDedCoUpdateInput";

export class TbClreDedCoControllerBase {
  constructor(protected readonly service: TbClreDedCoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedCo })
  @swagger.ApiBody({
    type: TbClreDedCoCreateInput,
  })
  async createTbClreDedCo(
    @common.Body() data: TbClreDedCoCreateInput
  ): Promise<TbClreDedCo> {
    return await this.service.createTbClreDedCo({
      data: data,
      select: {
        createdAt: true,
        dcerAddr: true,
        dcerCoNm: true,
        delYn: true,
        exppnAddr: true,
        exppnCoNm: true,
        exppnEml: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        imppnAddr: true,
        imppnCoNm: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        reffNo: true,
        txprAddr: true,
        txprCoNm: true,
        txprEml: true,
        txprTlphNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedCo] })
  @ApiNestedQuery(TbClreDedCoFindManyArgs)
  async tbClreDedCos(@common.Req() request: Request): Promise<TbClreDedCo[]> {
    const args = plainToClass(TbClreDedCoFindManyArgs, request.query);
    return this.service.tbClreDedCos({
      ...args,
      select: {
        createdAt: true,
        dcerAddr: true,
        dcerCoNm: true,
        delYn: true,
        exppnAddr: true,
        exppnCoNm: true,
        exppnEml: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        imppnAddr: true,
        imppnCoNm: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        reffNo: true,
        txprAddr: true,
        txprCoNm: true,
        txprEml: true,
        txprTlphNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedCo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tbClreDedCo(
    @common.Param() params: TbClreDedCoWhereUniqueInput
  ): Promise<TbClreDedCo | null> {
    const result = await this.service.tbClreDedCo({
      where: params,
      select: {
        createdAt: true,
        dcerAddr: true,
        dcerCoNm: true,
        delYn: true,
        exppnAddr: true,
        exppnCoNm: true,
        exppnEml: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        imppnAddr: true,
        imppnCoNm: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        reffNo: true,
        txprAddr: true,
        txprCoNm: true,
        txprEml: true,
        txprTlphNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedCo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: TbClreDedCoUpdateInput,
  })
  async updateTbClreDedCo(
    @common.Param() params: TbClreDedCoWhereUniqueInput,
    @common.Body() data: TbClreDedCoUpdateInput
  ): Promise<TbClreDedCo | null> {
    try {
      return await this.service.updateTbClreDedCo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dcerAddr: true,
          dcerCoNm: true,
          delYn: true,
          exppnAddr: true,
          exppnCoNm: true,
          exppnEml: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          imppnAddr: true,
          imppnCoNm: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          reffNo: true,
          txprAddr: true,
          txprCoNm: true,
          txprEml: true,
          txprTlphNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedCo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTbClreDedCo(
    @common.Param() params: TbClreDedCoWhereUniqueInput
  ): Promise<TbClreDedCo | null> {
    try {
      return await this.service.deleteTbClreDedCo({
        where: params,
        select: {
          createdAt: true,
          dcerAddr: true,
          dcerCoNm: true,
          delYn: true,
          exppnAddr: true,
          exppnCoNm: true,
          exppnEml: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          imppnAddr: true,
          imppnCoNm: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          reffNo: true,
          txprAddr: true,
          txprCoNm: true,
          txprEml: true,
          txprTlphNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
