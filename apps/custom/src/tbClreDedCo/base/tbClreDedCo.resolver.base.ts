/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedCo } from "./TbClreDedCo";
import { TbClreDedCoCountArgs } from "./TbClreDedCoCountArgs";
import { TbClreDedCoFindManyArgs } from "./TbClreDedCoFindManyArgs";
import { TbClreDedCoFindUniqueArgs } from "./TbClreDedCoFindUniqueArgs";
import { CreateTbClreDedCoArgs } from "./CreateTbClreDedCoArgs";
import { UpdateTbClreDedCoArgs } from "./UpdateTbClreDedCoArgs";
import { DeleteTbClreDedCoArgs } from "./DeleteTbClreDedCoArgs";
import { TbClreDedCoService } from "../tbClreDedCo.service";
@graphql.Resolver(() => TbClreDedCo)
export class TbClreDedCoResolverBase {
  constructor(protected readonly service: TbClreDedCoService) {}

  async _tbClreDedCosMeta(
    @graphql.Args() args: TbClreDedCoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedCo])
  async tbClreDedCos(
    @graphql.Args() args: TbClreDedCoFindManyArgs
  ): Promise<TbClreDedCo[]> {
    return this.service.tbClreDedCos(args);
  }

  @graphql.Query(() => TbClreDedCo, { nullable: true })
  async tbClreDedCo(
    @graphql.Args() args: TbClreDedCoFindUniqueArgs
  ): Promise<TbClreDedCo | null> {
    const result = await this.service.tbClreDedCo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedCo)
  async createTbClreDedCo(
    @graphql.Args() args: CreateTbClreDedCoArgs
  ): Promise<TbClreDedCo> {
    return await this.service.createTbClreDedCo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedCo)
  async updateTbClreDedCo(
    @graphql.Args() args: UpdateTbClreDedCoArgs
  ): Promise<TbClreDedCo | null> {
    try {
      return await this.service.updateTbClreDedCo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedCo)
  async deleteTbClreDedCo(
    @graphql.Args() args: DeleteTbClreDedCoArgs
  ): Promise<TbClreDedCo | null> {
    try {
      return await this.service.deleteTbClreDedCo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
