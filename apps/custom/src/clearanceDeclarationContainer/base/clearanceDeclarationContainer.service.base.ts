/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ClearanceDeclarationContainer as PrismaClearanceDeclarationContainer,
} from "@prisma/client";

export class ClearanceDeclarationContainerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClearanceDeclarationContainerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clearanceDeclarationContainer.count(args);
  }

  async clearanceDeclarationContainers(
    args: Prisma.ClearanceDeclarationContainerFindManyArgs
  ): Promise<PrismaClearanceDeclarationContainer[]> {
    return this.prisma.clearanceDeclarationContainer.findMany(args);
  }
  async clearanceDeclarationContainer(
    args: Prisma.ClearanceDeclarationContainerFindUniqueArgs
  ): Promise<PrismaClearanceDeclarationContainer | null> {
    return this.prisma.clearanceDeclarationContainer.findUnique(args);
  }
  async createClearanceDeclarationContainer(
    args: Prisma.ClearanceDeclarationContainerCreateArgs
  ): Promise<PrismaClearanceDeclarationContainer> {
    return this.prisma.clearanceDeclarationContainer.create(args);
  }
  async updateClearanceDeclarationContainer(
    args: Prisma.ClearanceDeclarationContainerUpdateArgs
  ): Promise<PrismaClearanceDeclarationContainer> {
    return this.prisma.clearanceDeclarationContainer.update(args);
  }
  async deleteClearanceDeclarationContainer(
    args: Prisma.ClearanceDeclarationContainerDeleteArgs
  ): Promise<PrismaClearanceDeclarationContainer> {
    return this.prisma.clearanceDeclarationContainer.delete(args);
  }
}
