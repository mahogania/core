/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClearanceDeclarationContainerService } from "../clearanceDeclarationContainer.service";
import { ClearanceDeclarationContainerCreateInput } from "./ClearanceDeclarationContainerCreateInput";
import { ClearanceDeclarationContainerWhereInput } from "./ClearanceDeclarationContainerWhereInput";
import { ClearanceDeclarationContainerWhereUniqueInput } from "./ClearanceDeclarationContainerWhereUniqueInput";
import { ClearanceDeclarationContainerFindManyArgs } from "./ClearanceDeclarationContainerFindManyArgs";
import { ClearanceDeclarationContainerUpdateInput } from "./ClearanceDeclarationContainerUpdateInput";
import { ClearanceDeclarationContainer } from "./ClearanceDeclarationContainer";

export class ClearanceDeclarationContainerGrpcControllerBase {
  constructor(
    protected readonly service: ClearanceDeclarationContainerService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClearanceDeclarationContainer })
  @GrpcMethod(
    "ClearanceDeclarationContainerService",
    "createClearanceDeclarationContainer"
  )
  async createClearanceDeclarationContainer(
    @common.Body() data: ClearanceDeclarationContainerCreateInput
  ): Promise<ClearanceDeclarationContainer> {
    return await this.service.createClearanceDeclarationContainer({
      data: data,
      select: {
        cntrNo: true,
        cntrSrno: true,
        cntrStfnSttsCd: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        inscTrgtYn: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        reffNo: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealChpnCd: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClearanceDeclarationContainer] })
  @ApiNestedQuery(ClearanceDeclarationContainerFindManyArgs)
  @GrpcMethod(
    "ClearanceDeclarationContainerService",
    "clearanceDeclarationContainers"
  )
  async clearanceDeclarationContainers(
    @common.Req() request: Request
  ): Promise<ClearanceDeclarationContainer[]> {
    const args = plainToClass(
      ClearanceDeclarationContainerFindManyArgs,
      request.query
    );
    return this.service.clearanceDeclarationContainers({
      ...args,
      select: {
        cntrNo: true,
        cntrSrno: true,
        cntrStfnSttsCd: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        inscTrgtYn: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        reffNo: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealChpnCd: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClearanceDeclarationContainer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "ClearanceDeclarationContainerService",
    "clearanceDeclarationContainer"
  )
  async clearanceDeclarationContainer(
    @common.Param() params: ClearanceDeclarationContainerWhereUniqueInput
  ): Promise<ClearanceDeclarationContainer | null> {
    const result = await this.service.clearanceDeclarationContainer({
      where: params,
      select: {
        cntrNo: true,
        cntrSrno: true,
        cntrStfnSttsCd: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        inscTrgtYn: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        reffNo: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealChpnCd: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClearanceDeclarationContainer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "ClearanceDeclarationContainerService",
    "updateClearanceDeclarationContainer"
  )
  async updateClearanceDeclarationContainer(
    @common.Param() params: ClearanceDeclarationContainerWhereUniqueInput,
    @common.Body() data: ClearanceDeclarationContainerUpdateInput
  ): Promise<ClearanceDeclarationContainer | null> {
    try {
      return await this.service.updateClearanceDeclarationContainer({
        where: params,
        data: data,
        select: {
          cntrNo: true,
          cntrSrno: true,
          cntrStfnSttsCd: true,
          cntrTpCd: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          inscTrgtYn: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          reffNo: true,
          sealChpn1: true,
          sealChpn2: true,
          sealChpn3: true,
          sealChpnCd: true,
          sealNo1: true,
          sealNo2: true,
          sealNo3: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClearanceDeclarationContainer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "ClearanceDeclarationContainerService",
    "deleteClearanceDeclarationContainer"
  )
  async deleteClearanceDeclarationContainer(
    @common.Param() params: ClearanceDeclarationContainerWhereUniqueInput
  ): Promise<ClearanceDeclarationContainer | null> {
    try {
      return await this.service.deleteClearanceDeclarationContainer({
        where: params,
        select: {
          cntrNo: true,
          cntrSrno: true,
          cntrStfnSttsCd: true,
          cntrTpCd: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          inscTrgtYn: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          reffNo: true,
          sealChpn1: true,
          sealChpn2: true,
          sealChpn3: true,
          sealChpnCd: true,
          sealNo1: true,
          sealNo2: true,
          sealNo3: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
