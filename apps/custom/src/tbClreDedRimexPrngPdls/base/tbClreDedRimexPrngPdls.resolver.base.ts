/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedRimexPrngPdls } from "./TbClreDedRimexPrngPdls";
import { TbClreDedRimexPrngPdlsCountArgs } from "./TbClreDedRimexPrngPdlsCountArgs";
import { TbClreDedRimexPrngPdlsFindManyArgs } from "./TbClreDedRimexPrngPdlsFindManyArgs";
import { TbClreDedRimexPrngPdlsFindUniqueArgs } from "./TbClreDedRimexPrngPdlsFindUniqueArgs";
import { CreateTbClreDedRimexPrngPdlsArgs } from "./CreateTbClreDedRimexPrngPdlsArgs";
import { UpdateTbClreDedRimexPrngPdlsArgs } from "./UpdateTbClreDedRimexPrngPdlsArgs";
import { DeleteTbClreDedRimexPrngPdlsArgs } from "./DeleteTbClreDedRimexPrngPdlsArgs";
import { TbClreDedRimexPrngPdlsService } from "../tbClreDedRimexPrngPdls.service";
@graphql.Resolver(() => TbClreDedRimexPrngPdls)
export class TbClreDedRimexPrngPdlsResolverBase {
  constructor(protected readonly service: TbClreDedRimexPrngPdlsService) {}

  async _tbClreDedRimexPrngPdlsItemsMeta(
    @graphql.Args() args: TbClreDedRimexPrngPdlsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedRimexPrngPdls])
  async tbClreDedRimexPrngPdlsItems(
    @graphql.Args() args: TbClreDedRimexPrngPdlsFindManyArgs
  ): Promise<TbClreDedRimexPrngPdls[]> {
    return this.service.tbClreDedRimexPrngPdlsItems(args);
  }

  @graphql.Query(() => TbClreDedRimexPrngPdls, { nullable: true })
  async tbClreDedRimexPrngPdls(
    @graphql.Args() args: TbClreDedRimexPrngPdlsFindUniqueArgs
  ): Promise<TbClreDedRimexPrngPdls | null> {
    const result = await this.service.tbClreDedRimexPrngPdls(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedRimexPrngPdls)
  async createTbClreDedRimexPrngPdls(
    @graphql.Args() args: CreateTbClreDedRimexPrngPdlsArgs
  ): Promise<TbClreDedRimexPrngPdls> {
    return await this.service.createTbClreDedRimexPrngPdls({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedRimexPrngPdls)
  async updateTbClreDedRimexPrngPdls(
    @graphql.Args() args: UpdateTbClreDedRimexPrngPdlsArgs
  ): Promise<TbClreDedRimexPrngPdls | null> {
    try {
      return await this.service.updateTbClreDedRimexPrngPdls({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedRimexPrngPdls)
  async deleteTbClreDedRimexPrngPdls(
    @graphql.Args() args: DeleteTbClreDedRimexPrngPdlsArgs
  ): Promise<TbClreDedRimexPrngPdls | null> {
    try {
      return await this.service.deleteTbClreDedRimexPrngPdls(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
