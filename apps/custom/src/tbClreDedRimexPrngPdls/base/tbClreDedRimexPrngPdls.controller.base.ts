/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TbClreDedRimexPrngPdlsService } from "../tbClreDedRimexPrngPdls.service";
import { TbClreDedRimexPrngPdlsCreateInput } from "./TbClreDedRimexPrngPdlsCreateInput";
import { TbClreDedRimexPrngPdls } from "./TbClreDedRimexPrngPdls";
import { TbClreDedRimexPrngPdlsFindManyArgs } from "./TbClreDedRimexPrngPdlsFindManyArgs";
import { TbClreDedRimexPrngPdlsWhereUniqueInput } from "./TbClreDedRimexPrngPdlsWhereUniqueInput";
import { TbClreDedRimexPrngPdlsUpdateInput } from "./TbClreDedRimexPrngPdlsUpdateInput";

export class TbClreDedRimexPrngPdlsControllerBase {
  constructor(protected readonly service: TbClreDedRimexPrngPdlsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedRimexPrngPdls })
  @swagger.ApiBody({
    type: TbClreDedRimexPrngPdlsCreateInput,
  })
  async createTbClreDedRimexPrngPdls(
    @common.Body() data: TbClreDedRimexPrngPdlsCreateInput
  ): Promise<TbClreDedRimexPrngPdls> {
    return await this.service.createTbClreDedRimexPrngPdls({
      data: data,
      select: {
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        orcyCntyCd: true,
        pdlsNm: true,
        pdlsNtwg: true,
        pdlsTtwg: true,
        prngPdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedRimexPrngPdls] })
  @ApiNestedQuery(TbClreDedRimexPrngPdlsFindManyArgs)
  async tbClreDedRimexPrngPdlsItems(
    @common.Req() request: Request
  ): Promise<TbClreDedRimexPrngPdls[]> {
    const args = plainToClass(
      TbClreDedRimexPrngPdlsFindManyArgs,
      request.query
    );
    return this.service.tbClreDedRimexPrngPdlsItems({
      ...args,
      select: {
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        orcyCntyCd: true,
        pdlsNm: true,
        pdlsNtwg: true,
        pdlsTtwg: true,
        prngPdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedRimexPrngPdls })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tbClreDedRimexPrngPdls(
    @common.Param() params: TbClreDedRimexPrngPdlsWhereUniqueInput
  ): Promise<TbClreDedRimexPrngPdls | null> {
    const result = await this.service.tbClreDedRimexPrngPdls({
      where: params,
      select: {
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        orcyCntyCd: true,
        pdlsNm: true,
        pdlsNtwg: true,
        pdlsTtwg: true,
        prngPdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedRimexPrngPdls })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: TbClreDedRimexPrngPdlsUpdateInput,
  })
  async updateTbClreDedRimexPrngPdls(
    @common.Param() params: TbClreDedRimexPrngPdlsWhereUniqueInput,
    @common.Body() data: TbClreDedRimexPrngPdlsUpdateInput
  ): Promise<TbClreDedRimexPrngPdls | null> {
    try {
      return await this.service.updateTbClreDedRimexPrngPdls({
        where: params,
        data: data,
        select: {
          cmdtClsfSpelCd: true,
          createdAt: true,
          delYn: true,
          dlngPdlsNm: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          orcyCntyCd: true,
          pdlsNm: true,
          pdlsNtwg: true,
          pdlsTtwg: true,
          prngPdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedRimexPrngPdls })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTbClreDedRimexPrngPdls(
    @common.Param() params: TbClreDedRimexPrngPdlsWhereUniqueInput
  ): Promise<TbClreDedRimexPrngPdls | null> {
    try {
      return await this.service.deleteTbClreDedRimexPrngPdls({
        where: params,
        select: {
          cmdtClsfSpelCd: true,
          createdAt: true,
          delYn: true,
          dlngPdlsNm: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          orcyCntyCd: true,
          pdlsNm: true,
          pdlsNtwg: true,
          pdlsTtwg: true,
          prngPdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
