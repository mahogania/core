/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClreDedRwmService } from "../clreDedRwm.service";
import { ClreDedRwmCreateInput } from "./ClreDedRwmCreateInput";
import { ClreDedRwmWhereInput } from "./ClreDedRwmWhereInput";
import { ClreDedRwmWhereUniqueInput } from "./ClreDedRwmWhereUniqueInput";
import { ClreDedRwmFindManyArgs } from "./ClreDedRwmFindManyArgs";
import { ClreDedRwmUpdateInput } from "./ClreDedRwmUpdateInput";
import { ClreDedRwm } from "./ClreDedRwm";

export class ClreDedRwmGrpcControllerBase {
  constructor(protected readonly service: ClreDedRwmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedRwm })
  @GrpcMethod("ClreDedRwmService", "createClreDedRwm")
  async createClreDedRwm(
    @common.Body() data: ClreDedRwmCreateInput
  ): Promise<ClreDedRwm> {
    return await this.service.createClreDedRwm({
      data: data,
      select: {
        bfCmdtClsfSpelCd: true,
        bfDtlDcshNo: true,
        bfHsCd: true,
        bfPdlsNo: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        ntwg: true,
        pdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        rwmsSrno: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedRwm] })
  @ApiNestedQuery(ClreDedRwmFindManyArgs)
  @GrpcMethod("ClreDedRwmService", "clreDedRwms")
  async clreDedRwms(@common.Req() request: Request): Promise<ClreDedRwm[]> {
    const args = plainToClass(ClreDedRwmFindManyArgs, request.query);
    return this.service.clreDedRwms({
      ...args,
      select: {
        bfCmdtClsfSpelCd: true,
        bfDtlDcshNo: true,
        bfHsCd: true,
        bfPdlsNo: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        ntwg: true,
        pdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        rwmsSrno: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedRwm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedRwmService", "clreDedRwm")
  async clreDedRwm(
    @common.Param() params: ClreDedRwmWhereUniqueInput
  ): Promise<ClreDedRwm | null> {
    const result = await this.service.clreDedRwm({
      where: params,
      select: {
        bfCmdtClsfSpelCd: true,
        bfDtlDcshNo: true,
        bfHsCd: true,
        bfPdlsNo: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        ntwg: true,
        pdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        rwmsSrno: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedRwm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedRwmService", "updateClreDedRwm")
  async updateClreDedRwm(
    @common.Param() params: ClreDedRwmWhereUniqueInput,
    @common.Body() data: ClreDedRwmUpdateInput
  ): Promise<ClreDedRwm | null> {
    try {
      return await this.service.updateClreDedRwm({
        where: params,
        data: data,
        select: {
          bfCmdtClsfSpelCd: true,
          bfDtlDcshNo: true,
          bfHsCd: true,
          bfPdlsNo: true,
          createdAt: true,
          delYn: true,
          divdFfmnTpCd: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          ntwg: true,
          pdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          rwmsSrno: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedRwm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedRwmService", "deleteClreDedRwm")
  async deleteClreDedRwm(
    @common.Param() params: ClreDedRwmWhereUniqueInput
  ): Promise<ClreDedRwm | null> {
    try {
      return await this.service.deleteClreDedRwm({
        where: params,
        select: {
          bfCmdtClsfSpelCd: true,
          bfDtlDcshNo: true,
          bfHsCd: true,
          bfPdlsNo: true,
          createdAt: true,
          delYn: true,
          divdFfmnTpCd: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          ntwg: true,
          pdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          rwmsSrno: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
