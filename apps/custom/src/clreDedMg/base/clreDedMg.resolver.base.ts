/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedMg } from "./ClreDedMg";
import { ClreDedMgCountArgs } from "./ClreDedMgCountArgs";
import { ClreDedMgFindManyArgs } from "./ClreDedMgFindManyArgs";
import { ClreDedMgFindUniqueArgs } from "./ClreDedMgFindUniqueArgs";
import { CreateClreDedMgArgs } from "./CreateClreDedMgArgs";
import { UpdateClreDedMgArgs } from "./UpdateClreDedMgArgs";
import { DeleteClreDedMgArgs } from "./DeleteClreDedMgArgs";
import { ClreDedMgService } from "../clreDedMg.service";
@graphql.Resolver(() => ClreDedMg)
export class ClreDedMgResolverBase {
  constructor(protected readonly service: ClreDedMgService) {}

  async _clreDedMgsMeta(
    @graphql.Args() args: ClreDedMgCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedMg])
  async clreDedMgs(
    @graphql.Args() args: ClreDedMgFindManyArgs
  ): Promise<ClreDedMg[]> {
    return this.service.clreDedMgs(args);
  }

  @graphql.Query(() => ClreDedMg, { nullable: true })
  async clreDedMg(
    @graphql.Args() args: ClreDedMgFindUniqueArgs
  ): Promise<ClreDedMg | null> {
    const result = await this.service.clreDedMg(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedMg)
  async createClreDedMg(
    @graphql.Args() args: CreateClreDedMgArgs
  ): Promise<ClreDedMg> {
    return await this.service.createClreDedMg({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedMg)
  async updateClreDedMg(
    @graphql.Args() args: UpdateClreDedMgArgs
  ): Promise<ClreDedMg | null> {
    try {
      return await this.service.updateClreDedMg({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedMg)
  async deleteClreDedMg(
    @graphql.Args() args: DeleteClreDedMgArgs
  ): Promise<ClreDedMg | null> {
    try {
      return await this.service.deleteClreDedMg(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
