/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClreDedMgService } from "../clreDedMg.service";
import { ClreDedMgCreateInput } from "./ClreDedMgCreateInput";
import { ClreDedMgWhereInput } from "./ClreDedMgWhereInput";
import { ClreDedMgWhereUniqueInput } from "./ClreDedMgWhereUniqueInput";
import { ClreDedMgFindManyArgs } from "./ClreDedMgFindManyArgs";
import { ClreDedMgUpdateInput } from "./ClreDedMgUpdateInput";
import { ClreDedMg } from "./ClreDedMg";

export class ClreDedMgGrpcControllerBase {
  constructor(protected readonly service: ClreDedMgService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedMg })
  @GrpcMethod("ClreDedMgService", "createClreDedMg")
  async createClreDedMg(
    @common.Body() data: ClreDedMgCreateInput
  ): Promise<ClreDedMg> {
    return await this.service.createClreDedMg({
      data: data,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgAcNo: true,
        mgTpCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedMg] })
  @ApiNestedQuery(ClreDedMgFindManyArgs)
  @GrpcMethod("ClreDedMgService", "clreDedMgs")
  async clreDedMgs(@common.Req() request: Request): Promise<ClreDedMg[]> {
    const args = plainToClass(ClreDedMgFindManyArgs, request.query);
    return this.service.clreDedMgs({
      ...args,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgAcNo: true,
        mgTpCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedMg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedMgService", "clreDedMg")
  async clreDedMg(
    @common.Param() params: ClreDedMgWhereUniqueInput
  ): Promise<ClreDedMg | null> {
    const result = await this.service.clreDedMg({
      where: params,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgAcNo: true,
        mgTpCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedMg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedMgService", "updateClreDedMg")
  async updateClreDedMg(
    @common.Param() params: ClreDedMgWhereUniqueInput,
    @common.Body() data: ClreDedMgUpdateInput
  ): Promise<ClreDedMg | null> {
    try {
      return await this.service.updateClreDedMg({
        where: params,
        data: data,
        select: {
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgAcNo: true,
          mgTpCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedMg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedMgService", "deleteClreDedMg")
  async deleteClreDedMg(
    @common.Param() params: ClreDedMgWhereUniqueInput
  ): Promise<ClreDedMg | null> {
    try {
      return await this.service.deleteClreDedMg({
        where: params,
        select: {
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgAcNo: true,
          mgTpCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
