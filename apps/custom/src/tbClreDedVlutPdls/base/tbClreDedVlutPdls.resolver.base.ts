/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedVlutPdls } from "./TbClreDedVlutPdls";
import { TbClreDedVlutPdlsCountArgs } from "./TbClreDedVlutPdlsCountArgs";
import { TbClreDedVlutPdlsFindManyArgs } from "./TbClreDedVlutPdlsFindManyArgs";
import { TbClreDedVlutPdlsFindUniqueArgs } from "./TbClreDedVlutPdlsFindUniqueArgs";
import { CreateTbClreDedVlutPdlsArgs } from "./CreateTbClreDedVlutPdlsArgs";
import { UpdateTbClreDedVlutPdlsArgs } from "./UpdateTbClreDedVlutPdlsArgs";
import { DeleteTbClreDedVlutPdlsArgs } from "./DeleteTbClreDedVlutPdlsArgs";
import { TbClreDedVlutPdlsService } from "../tbClreDedVlutPdls.service";
@graphql.Resolver(() => TbClreDedVlutPdls)
export class TbClreDedVlutPdlsResolverBase {
  constructor(protected readonly service: TbClreDedVlutPdlsService) {}

  async _tbClreDedVlutPdlsItemsMeta(
    @graphql.Args() args: TbClreDedVlutPdlsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedVlutPdls])
  async tbClreDedVlutPdlsItems(
    @graphql.Args() args: TbClreDedVlutPdlsFindManyArgs
  ): Promise<TbClreDedVlutPdls[]> {
    return this.service.tbClreDedVlutPdlsItems(args);
  }

  @graphql.Query(() => TbClreDedVlutPdls, { nullable: true })
  async tbClreDedVlutPdls(
    @graphql.Args() args: TbClreDedVlutPdlsFindUniqueArgs
  ): Promise<TbClreDedVlutPdls | null> {
    const result = await this.service.tbClreDedVlutPdls(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedVlutPdls)
  async createTbClreDedVlutPdls(
    @graphql.Args() args: CreateTbClreDedVlutPdlsArgs
  ): Promise<TbClreDedVlutPdls> {
    return await this.service.createTbClreDedVlutPdls({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedVlutPdls)
  async updateTbClreDedVlutPdls(
    @graphql.Args() args: UpdateTbClreDedVlutPdlsArgs
  ): Promise<TbClreDedVlutPdls | null> {
    try {
      return await this.service.updateTbClreDedVlutPdls({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedVlutPdls)
  async deleteTbClreDedVlutPdls(
    @graphql.Args() args: DeleteTbClreDedVlutPdlsArgs
  ): Promise<TbClreDedVlutPdls | null> {
    try {
      return await this.service.deleteTbClreDedVlutPdls(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
