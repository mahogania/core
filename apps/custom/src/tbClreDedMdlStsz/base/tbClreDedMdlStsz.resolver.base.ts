/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedMdlStsz } from "./TbClreDedMdlStsz";
import { TbClreDedMdlStszCountArgs } from "./TbClreDedMdlStszCountArgs";
import { TbClreDedMdlStszFindManyArgs } from "./TbClreDedMdlStszFindManyArgs";
import { TbClreDedMdlStszFindUniqueArgs } from "./TbClreDedMdlStszFindUniqueArgs";
import { CreateTbClreDedMdlStszArgs } from "./CreateTbClreDedMdlStszArgs";
import { UpdateTbClreDedMdlStszArgs } from "./UpdateTbClreDedMdlStszArgs";
import { DeleteTbClreDedMdlStszArgs } from "./DeleteTbClreDedMdlStszArgs";
import { TbClreDedMdlStszService } from "../tbClreDedMdlStsz.service";
@graphql.Resolver(() => TbClreDedMdlStsz)
export class TbClreDedMdlStszResolverBase {
  constructor(protected readonly service: TbClreDedMdlStszService) {}

  async _tbClreDedMdlStszsMeta(
    @graphql.Args() args: TbClreDedMdlStszCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedMdlStsz])
  async tbClreDedMdlStszs(
    @graphql.Args() args: TbClreDedMdlStszFindManyArgs
  ): Promise<TbClreDedMdlStsz[]> {
    return this.service.tbClreDedMdlStszs(args);
  }

  @graphql.Query(() => TbClreDedMdlStsz, { nullable: true })
  async tbClreDedMdlStsz(
    @graphql.Args() args: TbClreDedMdlStszFindUniqueArgs
  ): Promise<TbClreDedMdlStsz | null> {
    const result = await this.service.tbClreDedMdlStsz(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedMdlStsz)
  async createTbClreDedMdlStsz(
    @graphql.Args() args: CreateTbClreDedMdlStszArgs
  ): Promise<TbClreDedMdlStsz> {
    return await this.service.createTbClreDedMdlStsz({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedMdlStsz)
  async updateTbClreDedMdlStsz(
    @graphql.Args() args: UpdateTbClreDedMdlStszArgs
  ): Promise<TbClreDedMdlStsz | null> {
    try {
      return await this.service.updateTbClreDedMdlStsz({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedMdlStsz)
  async deleteTbClreDedMdlStsz(
    @graphql.Args() args: DeleteTbClreDedMdlStszArgs
  ): Promise<TbClreDedMdlStsz | null> {
    try {
      return await this.service.deleteTbClreDedMdlStsz(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
