/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClreDedPrcDclrService } from "../clreDedPrcDclr.service";
import { ClreDedPrcDclrCreateInput } from "./ClreDedPrcDclrCreateInput";
import { ClreDedPrcDclrWhereInput } from "./ClreDedPrcDclrWhereInput";
import { ClreDedPrcDclrWhereUniqueInput } from "./ClreDedPrcDclrWhereUniqueInput";
import { ClreDedPrcDclrFindManyArgs } from "./ClreDedPrcDclrFindManyArgs";
import { ClreDedPrcDclrUpdateInput } from "./ClreDedPrcDclrUpdateInput";
import { ClreDedPrcDclr } from "./ClreDedPrcDclr";

export class ClreDedPrcDclrGrpcControllerBase {
  constructor(protected readonly service: ClreDedPrcDclrService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedPrcDclr })
  @GrpcMethod("ClreDedPrcDclrService", "createClreDedPrcDclr")
  async createClreDedPrcDclr(
    @common.Body() data: ClreDedPrcDclrCreateInput
  ): Promise<ClreDedPrcDclr> {
    return await this.service.createClreDedPrcDclr({
      data: data,
      select: {
        adcstBrkgAmt: true,
        adcstCnsmCmdtCst: true,
        adcstCtnrPckgCst: true,
        adcstImpPortInfeeAmt: true,
        adcstImpPortOtcst: true,
        adcstImpPortTrcgAmt: true,
        adcstMtrlCmpsFtorCst: true,
        adcstPrcsCst: true,
        adcstPuchCmisYn: true,
        adcstRyltCst: true,
        adcstSaleCmisYn: true,
        adcstSelrRvrsAmt: true,
        adcstTechDgnOtcst: true,
        adcstToolOtcst: true,
        adcstTrnpCst: true,
        aditOpinCn: true,
        adtnCstSumAmt: true,
        bfhnDtrmOfdcNo: true,
        bfhnDtrmOfdcPblsDt: true,
        byerIdfyNo: true,
        cputBssDlngPrc: true,
        cputBssIndrAmt: true,
        cputBssSumAmt: true,
        createdAt: true,
        cvntDt: true,
        cvntNo: true,
        dcerNm: true,
        dclrDt: true,
        dclrPlcNm: true,
        dclrTxPrc: true,
        ddctExpCntyTrifAmt: true,
        ddctOtcst: true,
        ddctOthsApmtAmt: true,
        ddctSumAmt: true,
        ddctTrnpCst: true,
        delYn: true,
        dlvrCondCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        invcNo: true,
        invcPblsDt: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        othsDesc: true,
        quesRspn_1Yn: true,
        quesRspn_2Yn: true,
        quesRspn_3Yn: true,
        quesRspn_4Yn: true,
        quesRspn_5Yn: true,
        quesRspn_6Yn: true,
        quesRspn_7Yn: true,
        quesRspn_8Yn: true,
        reffNo: true,
        rstcMtrCn: true,
        selrNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedPrcDclr] })
  @ApiNestedQuery(ClreDedPrcDclrFindManyArgs)
  @GrpcMethod("ClreDedPrcDclrService", "clreDedPrcDclrs")
  async clreDedPrcDclrs(
    @common.Req() request: Request
  ): Promise<ClreDedPrcDclr[]> {
    const args = plainToClass(ClreDedPrcDclrFindManyArgs, request.query);
    return this.service.clreDedPrcDclrs({
      ...args,
      select: {
        adcstBrkgAmt: true,
        adcstCnsmCmdtCst: true,
        adcstCtnrPckgCst: true,
        adcstImpPortInfeeAmt: true,
        adcstImpPortOtcst: true,
        adcstImpPortTrcgAmt: true,
        adcstMtrlCmpsFtorCst: true,
        adcstPrcsCst: true,
        adcstPuchCmisYn: true,
        adcstRyltCst: true,
        adcstSaleCmisYn: true,
        adcstSelrRvrsAmt: true,
        adcstTechDgnOtcst: true,
        adcstToolOtcst: true,
        adcstTrnpCst: true,
        aditOpinCn: true,
        adtnCstSumAmt: true,
        bfhnDtrmOfdcNo: true,
        bfhnDtrmOfdcPblsDt: true,
        byerIdfyNo: true,
        cputBssDlngPrc: true,
        cputBssIndrAmt: true,
        cputBssSumAmt: true,
        createdAt: true,
        cvntDt: true,
        cvntNo: true,
        dcerNm: true,
        dclrDt: true,
        dclrPlcNm: true,
        dclrTxPrc: true,
        ddctExpCntyTrifAmt: true,
        ddctOtcst: true,
        ddctOthsApmtAmt: true,
        ddctSumAmt: true,
        ddctTrnpCst: true,
        delYn: true,
        dlvrCondCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        invcNo: true,
        invcPblsDt: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        othsDesc: true,
        quesRspn_1Yn: true,
        quesRspn_2Yn: true,
        quesRspn_3Yn: true,
        quesRspn_4Yn: true,
        quesRspn_5Yn: true,
        quesRspn_6Yn: true,
        quesRspn_7Yn: true,
        quesRspn_8Yn: true,
        reffNo: true,
        rstcMtrCn: true,
        selrNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedPrcDclr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedPrcDclrService", "clreDedPrcDclr")
  async clreDedPrcDclr(
    @common.Param() params: ClreDedPrcDclrWhereUniqueInput
  ): Promise<ClreDedPrcDclr | null> {
    const result = await this.service.clreDedPrcDclr({
      where: params,
      select: {
        adcstBrkgAmt: true,
        adcstCnsmCmdtCst: true,
        adcstCtnrPckgCst: true,
        adcstImpPortInfeeAmt: true,
        adcstImpPortOtcst: true,
        adcstImpPortTrcgAmt: true,
        adcstMtrlCmpsFtorCst: true,
        adcstPrcsCst: true,
        adcstPuchCmisYn: true,
        adcstRyltCst: true,
        adcstSaleCmisYn: true,
        adcstSelrRvrsAmt: true,
        adcstTechDgnOtcst: true,
        adcstToolOtcst: true,
        adcstTrnpCst: true,
        aditOpinCn: true,
        adtnCstSumAmt: true,
        bfhnDtrmOfdcNo: true,
        bfhnDtrmOfdcPblsDt: true,
        byerIdfyNo: true,
        cputBssDlngPrc: true,
        cputBssIndrAmt: true,
        cputBssSumAmt: true,
        createdAt: true,
        cvntDt: true,
        cvntNo: true,
        dcerNm: true,
        dclrDt: true,
        dclrPlcNm: true,
        dclrTxPrc: true,
        ddctExpCntyTrifAmt: true,
        ddctOtcst: true,
        ddctOthsApmtAmt: true,
        ddctSumAmt: true,
        ddctTrnpCst: true,
        delYn: true,
        dlvrCondCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        invcNo: true,
        invcPblsDt: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        othsDesc: true,
        quesRspn_1Yn: true,
        quesRspn_2Yn: true,
        quesRspn_3Yn: true,
        quesRspn_4Yn: true,
        quesRspn_5Yn: true,
        quesRspn_6Yn: true,
        quesRspn_7Yn: true,
        quesRspn_8Yn: true,
        reffNo: true,
        rstcMtrCn: true,
        selrNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedPrcDclr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedPrcDclrService", "updateClreDedPrcDclr")
  async updateClreDedPrcDclr(
    @common.Param() params: ClreDedPrcDclrWhereUniqueInput,
    @common.Body() data: ClreDedPrcDclrUpdateInput
  ): Promise<ClreDedPrcDclr | null> {
    try {
      return await this.service.updateClreDedPrcDclr({
        where: params,
        data: data,
        select: {
          adcstBrkgAmt: true,
          adcstCnsmCmdtCst: true,
          adcstCtnrPckgCst: true,
          adcstImpPortInfeeAmt: true,
          adcstImpPortOtcst: true,
          adcstImpPortTrcgAmt: true,
          adcstMtrlCmpsFtorCst: true,
          adcstPrcsCst: true,
          adcstPuchCmisYn: true,
          adcstRyltCst: true,
          adcstSaleCmisYn: true,
          adcstSelrRvrsAmt: true,
          adcstTechDgnOtcst: true,
          adcstToolOtcst: true,
          adcstTrnpCst: true,
          aditOpinCn: true,
          adtnCstSumAmt: true,
          bfhnDtrmOfdcNo: true,
          bfhnDtrmOfdcPblsDt: true,
          byerIdfyNo: true,
          cputBssDlngPrc: true,
          cputBssIndrAmt: true,
          cputBssSumAmt: true,
          createdAt: true,
          cvntDt: true,
          cvntNo: true,
          dcerNm: true,
          dclrDt: true,
          dclrPlcNm: true,
          dclrTxPrc: true,
          ddctExpCntyTrifAmt: true,
          ddctOtcst: true,
          ddctOthsApmtAmt: true,
          ddctSumAmt: true,
          ddctTrnpCst: true,
          delYn: true,
          dlvrCondCd: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          invcNo: true,
          invcPblsDt: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          othsDesc: true,
          quesRspn_1Yn: true,
          quesRspn_2Yn: true,
          quesRspn_3Yn: true,
          quesRspn_4Yn: true,
          quesRspn_5Yn: true,
          quesRspn_6Yn: true,
          quesRspn_7Yn: true,
          quesRspn_8Yn: true,
          reffNo: true,
          rstcMtrCn: true,
          selrNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedPrcDclr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedPrcDclrService", "deleteClreDedPrcDclr")
  async deleteClreDedPrcDclr(
    @common.Param() params: ClreDedPrcDclrWhereUniqueInput
  ): Promise<ClreDedPrcDclr | null> {
    try {
      return await this.service.deleteClreDedPrcDclr({
        where: params,
        select: {
          adcstBrkgAmt: true,
          adcstCnsmCmdtCst: true,
          adcstCtnrPckgCst: true,
          adcstImpPortInfeeAmt: true,
          adcstImpPortOtcst: true,
          adcstImpPortTrcgAmt: true,
          adcstMtrlCmpsFtorCst: true,
          adcstPrcsCst: true,
          adcstPuchCmisYn: true,
          adcstRyltCst: true,
          adcstSaleCmisYn: true,
          adcstSelrRvrsAmt: true,
          adcstTechDgnOtcst: true,
          adcstToolOtcst: true,
          adcstTrnpCst: true,
          aditOpinCn: true,
          adtnCstSumAmt: true,
          bfhnDtrmOfdcNo: true,
          bfhnDtrmOfdcPblsDt: true,
          byerIdfyNo: true,
          cputBssDlngPrc: true,
          cputBssIndrAmt: true,
          cputBssSumAmt: true,
          createdAt: true,
          cvntDt: true,
          cvntNo: true,
          dcerNm: true,
          dclrDt: true,
          dclrPlcNm: true,
          dclrTxPrc: true,
          ddctExpCntyTrifAmt: true,
          ddctOtcst: true,
          ddctOthsApmtAmt: true,
          ddctSumAmt: true,
          ddctTrnpCst: true,
          delYn: true,
          dlvrCondCd: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          invcNo: true,
          invcPblsDt: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          othsDesc: true,
          quesRspn_1Yn: true,
          quesRspn_2Yn: true,
          quesRspn_3Yn: true,
          quesRspn_4Yn: true,
          quesRspn_5Yn: true,
          quesRspn_6Yn: true,
          quesRspn_7Yn: true,
          quesRspn_8Yn: true,
          reffNo: true,
          rstcMtrCn: true,
          selrNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
