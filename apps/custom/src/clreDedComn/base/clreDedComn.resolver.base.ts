/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedComn } from "./ClreDedComn";
import { ClreDedComnCountArgs } from "./ClreDedComnCountArgs";
import { ClreDedComnFindManyArgs } from "./ClreDedComnFindManyArgs";
import { ClreDedComnFindUniqueArgs } from "./ClreDedComnFindUniqueArgs";
import { CreateClreDedComnArgs } from "./CreateClreDedComnArgs";
import { UpdateClreDedComnArgs } from "./UpdateClreDedComnArgs";
import { DeleteClreDedComnArgs } from "./DeleteClreDedComnArgs";
import { ClreDedComnService } from "../clreDedComn.service";
@graphql.Resolver(() => ClreDedComn)
export class ClreDedComnResolverBase {
  constructor(protected readonly service: ClreDedComnService) {}

  async _clreDedComnsMeta(
    @graphql.Args() args: ClreDedComnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedComn])
  async clreDedComns(
    @graphql.Args() args: ClreDedComnFindManyArgs
  ): Promise<ClreDedComn[]> {
    return this.service.clreDedComns(args);
  }

  @graphql.Query(() => ClreDedComn, { nullable: true })
  async clreDedComn(
    @graphql.Args() args: ClreDedComnFindUniqueArgs
  ): Promise<ClreDedComn | null> {
    const result = await this.service.clreDedComn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedComn)
  async createClreDedComn(
    @graphql.Args() args: CreateClreDedComnArgs
  ): Promise<ClreDedComn> {
    return await this.service.createClreDedComn({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedComn)
  async updateClreDedComn(
    @graphql.Args() args: UpdateClreDedComnArgs
  ): Promise<ClreDedComn | null> {
    try {
      return await this.service.updateClreDedComn({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedComn)
  async deleteClreDedComn(
    @graphql.Args() args: DeleteClreDedComnArgs
  ): Promise<ClreDedComn | null> {
    try {
      return await this.service.deleteClreDedComn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
