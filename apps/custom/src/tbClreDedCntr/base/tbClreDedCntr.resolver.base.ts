/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedCntr } from "./TbClreDedCntr";
import { TbClreDedCntrCountArgs } from "./TbClreDedCntrCountArgs";
import { TbClreDedCntrFindManyArgs } from "./TbClreDedCntrFindManyArgs";
import { TbClreDedCntrFindUniqueArgs } from "./TbClreDedCntrFindUniqueArgs";
import { CreateTbClreDedCntrArgs } from "./CreateTbClreDedCntrArgs";
import { UpdateTbClreDedCntrArgs } from "./UpdateTbClreDedCntrArgs";
import { DeleteTbClreDedCntrArgs } from "./DeleteTbClreDedCntrArgs";
import { TbClreDedCntrService } from "../tbClreDedCntr.service";
@graphql.Resolver(() => TbClreDedCntr)
export class TbClreDedCntrResolverBase {
  constructor(protected readonly service: TbClreDedCntrService) {}

  async _tbClreDedCntrsMeta(
    @graphql.Args() args: TbClreDedCntrCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedCntr])
  async tbClreDedCntrs(
    @graphql.Args() args: TbClreDedCntrFindManyArgs
  ): Promise<TbClreDedCntr[]> {
    return this.service.tbClreDedCntrs(args);
  }

  @graphql.Query(() => TbClreDedCntr, { nullable: true })
  async tbClreDedCntr(
    @graphql.Args() args: TbClreDedCntrFindUniqueArgs
  ): Promise<TbClreDedCntr | null> {
    const result = await this.service.tbClreDedCntr(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedCntr)
  async createTbClreDedCntr(
    @graphql.Args() args: CreateTbClreDedCntrArgs
  ): Promise<TbClreDedCntr> {
    return await this.service.createTbClreDedCntr({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedCntr)
  async updateTbClreDedCntr(
    @graphql.Args() args: UpdateTbClreDedCntrArgs
  ): Promise<TbClreDedCntr | null> {
    try {
      return await this.service.updateTbClreDedCntr({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedCntr)
  async deleteTbClreDedCntr(
    @graphql.Args() args: DeleteTbClreDedCntrArgs
  ): Promise<TbClreDedCntr | null> {
    try {
      return await this.service.deleteTbClreDedCntr(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
