/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClreDedTaxService } from "../clreDedTax.service";
import { ClreDedTaxCreateInput } from "./ClreDedTaxCreateInput";
import { ClreDedTax } from "./ClreDedTax";
import { ClreDedTaxFindManyArgs } from "./ClreDedTaxFindManyArgs";
import { ClreDedTaxWhereUniqueInput } from "./ClreDedTaxWhereUniqueInput";
import { ClreDedTaxUpdateInput } from "./ClreDedTaxUpdateInput";

export class ClreDedTaxControllerBase {
  constructor(protected readonly service: ClreDedTaxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedTax })
  @swagger.ApiBody({
    type: ClreDedTaxCreateInput,
  })
  async createClreDedTax(
    @common.Body() data: ClreDedTaxCreateInput
  ): Promise<ClreDedTax> {
    return await this.service.createClreDedTax({
      data: data,
      select: {
        bscsTaxAmt: true,
        bscsTxbsAmt: true,
        bscsTxrt: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnAplyAmt: true,
        payKndCd: true,
        payTaxAmt: true,
        pdlsNo: true,
        rdexAmt: true,
        rdexBaseAmt: true,
        rdexCd: true,
        rdexPtCd: true,
        rdexTxrt: true,
        reffNo: true,
        taxAmt: true,
        taxCd: true,
        tfrtCtgyCd: true,
        txbsAmt: true,
        txrt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedTax] })
  @ApiNestedQuery(ClreDedTaxFindManyArgs)
  async clreDedTaxes(@common.Req() request: Request): Promise<ClreDedTax[]> {
    const args = plainToClass(ClreDedTaxFindManyArgs, request.query);
    return this.service.clreDedTaxes({
      ...args,
      select: {
        bscsTaxAmt: true,
        bscsTxbsAmt: true,
        bscsTxrt: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnAplyAmt: true,
        payKndCd: true,
        payTaxAmt: true,
        pdlsNo: true,
        rdexAmt: true,
        rdexBaseAmt: true,
        rdexCd: true,
        rdexPtCd: true,
        rdexTxrt: true,
        reffNo: true,
        taxAmt: true,
        taxCd: true,
        tfrtCtgyCd: true,
        txbsAmt: true,
        txrt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clreDedTax(
    @common.Param() params: ClreDedTaxWhereUniqueInput
  ): Promise<ClreDedTax | null> {
    const result = await this.service.clreDedTax({
      where: params,
      select: {
        bscsTaxAmt: true,
        bscsTxbsAmt: true,
        bscsTxrt: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnAplyAmt: true,
        payKndCd: true,
        payTaxAmt: true,
        pdlsNo: true,
        rdexAmt: true,
        rdexBaseAmt: true,
        rdexCd: true,
        rdexPtCd: true,
        rdexTxrt: true,
        reffNo: true,
        taxAmt: true,
        taxCd: true,
        tfrtCtgyCd: true,
        txbsAmt: true,
        txrt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ClreDedTaxUpdateInput,
  })
  async updateClreDedTax(
    @common.Param() params: ClreDedTaxWhereUniqueInput,
    @common.Body() data: ClreDedTaxUpdateInput
  ): Promise<ClreDedTax | null> {
    try {
      return await this.service.updateClreDedTax({
        where: params,
        data: data,
        select: {
          bscsTaxAmt: true,
          bscsTxbsAmt: true,
          bscsTxrt: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgDscnAplyAmt: true,
          payKndCd: true,
          payTaxAmt: true,
          pdlsNo: true,
          rdexAmt: true,
          rdexBaseAmt: true,
          rdexCd: true,
          rdexPtCd: true,
          rdexTxrt: true,
          reffNo: true,
          taxAmt: true,
          taxCd: true,
          tfrtCtgyCd: true,
          txbsAmt: true,
          txrt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClreDedTax(
    @common.Param() params: ClreDedTaxWhereUniqueInput
  ): Promise<ClreDedTax | null> {
    try {
      return await this.service.deleteClreDedTax({
        where: params,
        select: {
          bscsTaxAmt: true,
          bscsTxbsAmt: true,
          bscsTxrt: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgDscnAplyAmt: true,
          payKndCd: true,
          payTaxAmt: true,
          pdlsNo: true,
          rdexAmt: true,
          rdexBaseAmt: true,
          rdexCd: true,
          rdexPtCd: true,
          rdexTxrt: true,
          reffNo: true,
          taxAmt: true,
          taxCd: true,
          tfrtCtgyCd: true,
          txbsAmt: true,
          txrt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
