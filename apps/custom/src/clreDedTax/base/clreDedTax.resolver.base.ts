/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedTax } from "./ClreDedTax";
import { ClreDedTaxCountArgs } from "./ClreDedTaxCountArgs";
import { ClreDedTaxFindManyArgs } from "./ClreDedTaxFindManyArgs";
import { ClreDedTaxFindUniqueArgs } from "./ClreDedTaxFindUniqueArgs";
import { CreateClreDedTaxArgs } from "./CreateClreDedTaxArgs";
import { UpdateClreDedTaxArgs } from "./UpdateClreDedTaxArgs";
import { DeleteClreDedTaxArgs } from "./DeleteClreDedTaxArgs";
import { ClreDedTaxService } from "../clreDedTax.service";
@graphql.Resolver(() => ClreDedTax)
export class ClreDedTaxResolverBase {
  constructor(protected readonly service: ClreDedTaxService) {}

  async _clreDedTaxesMeta(
    @graphql.Args() args: ClreDedTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedTax])
  async clreDedTaxes(
    @graphql.Args() args: ClreDedTaxFindManyArgs
  ): Promise<ClreDedTax[]> {
    return this.service.clreDedTaxes(args);
  }

  @graphql.Query(() => ClreDedTax, { nullable: true })
  async clreDedTax(
    @graphql.Args() args: ClreDedTaxFindUniqueArgs
  ): Promise<ClreDedTax | null> {
    const result = await this.service.clreDedTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedTax)
  async createClreDedTax(
    @graphql.Args() args: CreateClreDedTaxArgs
  ): Promise<ClreDedTax> {
    return await this.service.createClreDedTax({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedTax)
  async updateClreDedTax(
    @graphql.Args() args: UpdateClreDedTaxArgs
  ): Promise<ClreDedTax | null> {
    try {
      return await this.service.updateClreDedTax({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedTax)
  async deleteClreDedTax(
    @graphql.Args() args: DeleteClreDedTaxArgs
  ): Promise<ClreDedTax | null> {
    try {
      return await this.service.deleteClreDedTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
