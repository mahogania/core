/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClreDedPrcDclrPdlService } from "../clreDedPrcDclrPdl.service";
import { ClreDedPrcDclrPdlCreateInput } from "./ClreDedPrcDclrPdlCreateInput";
import { ClreDedPrcDclrPdlWhereInput } from "./ClreDedPrcDclrPdlWhereInput";
import { ClreDedPrcDclrPdlWhereUniqueInput } from "./ClreDedPrcDclrPdlWhereUniqueInput";
import { ClreDedPrcDclrPdlFindManyArgs } from "./ClreDedPrcDclrPdlFindManyArgs";
import { ClreDedPrcDclrPdlUpdateInput } from "./ClreDedPrcDclrPdlUpdateInput";
import { ClreDedPrcDclrPdl } from "./ClreDedPrcDclrPdl";

export class ClreDedPrcDclrPdlGrpcControllerBase {
  constructor(protected readonly service: ClreDedPrcDclrPdlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedPrcDclrPdl })
  @GrpcMethod("ClreDedPrcDclrPdlService", "createClreDedPrcDclrPdl")
  async createClreDedPrcDclrPdl(
    @common.Body() data: ClreDedPrcDclrPdlCreateInput
  ): Promise<ClreDedPrcDclrPdl> {
    return await this.service.createClreDedPrcDclrPdl({
      data: data,
      select: {
        brngTrnpCst: true,
        byerPymnCst: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        indrPymnTamt: true,
        infeeAmt: true,
        lastChgDttm: true,
        lastChprId: true,
        loadCstAmt: true,
        mdfyDgcnt: true,
        mdlStszNo: true,
        mdtnPcfeAmt: true,
        mnfuSrvc_1Amt: true,
        mnfuSrvc_2Amt: true,
        mnfuSrvc_3Amt: true,
        mnfuSrvc_4Amt: true,
        otcstAmt: true,
        pcfeAmt: true,
        pcfeLcneAmt: true,
        pckgAmt: true,
        pdlsNo: true,
        pyrTrifAmt: true,
        reffNo: true,
        resaleErnAmt: true,
        techSpptCst: true,
        trnpCstAmt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedPrcDclrPdl] })
  @ApiNestedQuery(ClreDedPrcDclrPdlFindManyArgs)
  @GrpcMethod("ClreDedPrcDclrPdlService", "clreDedPrcDclrPdls")
  async clreDedPrcDclrPdls(
    @common.Req() request: Request
  ): Promise<ClreDedPrcDclrPdl[]> {
    const args = plainToClass(ClreDedPrcDclrPdlFindManyArgs, request.query);
    return this.service.clreDedPrcDclrPdls({
      ...args,
      select: {
        brngTrnpCst: true,
        byerPymnCst: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        indrPymnTamt: true,
        infeeAmt: true,
        lastChgDttm: true,
        lastChprId: true,
        loadCstAmt: true,
        mdfyDgcnt: true,
        mdlStszNo: true,
        mdtnPcfeAmt: true,
        mnfuSrvc_1Amt: true,
        mnfuSrvc_2Amt: true,
        mnfuSrvc_3Amt: true,
        mnfuSrvc_4Amt: true,
        otcstAmt: true,
        pcfeAmt: true,
        pcfeLcneAmt: true,
        pckgAmt: true,
        pdlsNo: true,
        pyrTrifAmt: true,
        reffNo: true,
        resaleErnAmt: true,
        techSpptCst: true,
        trnpCstAmt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedPrcDclrPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedPrcDclrPdlService", "clreDedPrcDclrPdl")
  async clreDedPrcDclrPdl(
    @common.Param() params: ClreDedPrcDclrPdlWhereUniqueInput
  ): Promise<ClreDedPrcDclrPdl | null> {
    const result = await this.service.clreDedPrcDclrPdl({
      where: params,
      select: {
        brngTrnpCst: true,
        byerPymnCst: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        indrPymnTamt: true,
        infeeAmt: true,
        lastChgDttm: true,
        lastChprId: true,
        loadCstAmt: true,
        mdfyDgcnt: true,
        mdlStszNo: true,
        mdtnPcfeAmt: true,
        mnfuSrvc_1Amt: true,
        mnfuSrvc_2Amt: true,
        mnfuSrvc_3Amt: true,
        mnfuSrvc_4Amt: true,
        otcstAmt: true,
        pcfeAmt: true,
        pcfeLcneAmt: true,
        pckgAmt: true,
        pdlsNo: true,
        pyrTrifAmt: true,
        reffNo: true,
        resaleErnAmt: true,
        techSpptCst: true,
        trnpCstAmt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedPrcDclrPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedPrcDclrPdlService", "updateClreDedPrcDclrPdl")
  async updateClreDedPrcDclrPdl(
    @common.Param() params: ClreDedPrcDclrPdlWhereUniqueInput,
    @common.Body() data: ClreDedPrcDclrPdlUpdateInput
  ): Promise<ClreDedPrcDclrPdl | null> {
    try {
      return await this.service.updateClreDedPrcDclrPdl({
        where: params,
        data: data,
        select: {
          brngTrnpCst: true,
          byerPymnCst: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          indrPymnTamt: true,
          infeeAmt: true,
          lastChgDttm: true,
          lastChprId: true,
          loadCstAmt: true,
          mdfyDgcnt: true,
          mdlStszNo: true,
          mdtnPcfeAmt: true,
          mnfuSrvc_1Amt: true,
          mnfuSrvc_2Amt: true,
          mnfuSrvc_3Amt: true,
          mnfuSrvc_4Amt: true,
          otcstAmt: true,
          pcfeAmt: true,
          pcfeLcneAmt: true,
          pckgAmt: true,
          pdlsNo: true,
          pyrTrifAmt: true,
          reffNo: true,
          resaleErnAmt: true,
          techSpptCst: true,
          trnpCstAmt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedPrcDclrPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedPrcDclrPdlService", "deleteClreDedPrcDclrPdl")
  async deleteClreDedPrcDclrPdl(
    @common.Param() params: ClreDedPrcDclrPdlWhereUniqueInput
  ): Promise<ClreDedPrcDclrPdl | null> {
    try {
      return await this.service.deleteClreDedPrcDclrPdl({
        where: params,
        select: {
          brngTrnpCst: true,
          byerPymnCst: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          indrPymnTamt: true,
          infeeAmt: true,
          lastChgDttm: true,
          lastChprId: true,
          loadCstAmt: true,
          mdfyDgcnt: true,
          mdlStszNo: true,
          mdtnPcfeAmt: true,
          mnfuSrvc_1Amt: true,
          mnfuSrvc_2Amt: true,
          mnfuSrvc_3Amt: true,
          mnfuSrvc_4Amt: true,
          otcstAmt: true,
          pcfeAmt: true,
          pcfeLcneAmt: true,
          pckgAmt: true,
          pdlsNo: true,
          pyrTrifAmt: true,
          reffNo: true,
          resaleErnAmt: true,
          techSpptCst: true,
          trnpCstAmt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
