/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedPrcDclrPdl } from "./ClreDedPrcDclrPdl";
import { ClreDedPrcDclrPdlCountArgs } from "./ClreDedPrcDclrPdlCountArgs";
import { ClreDedPrcDclrPdlFindManyArgs } from "./ClreDedPrcDclrPdlFindManyArgs";
import { ClreDedPrcDclrPdlFindUniqueArgs } from "./ClreDedPrcDclrPdlFindUniqueArgs";
import { CreateClreDedPrcDclrPdlArgs } from "./CreateClreDedPrcDclrPdlArgs";
import { UpdateClreDedPrcDclrPdlArgs } from "./UpdateClreDedPrcDclrPdlArgs";
import { DeleteClreDedPrcDclrPdlArgs } from "./DeleteClreDedPrcDclrPdlArgs";
import { ClreDedPrcDclrPdlService } from "../clreDedPrcDclrPdl.service";
@graphql.Resolver(() => ClreDedPrcDclrPdl)
export class ClreDedPrcDclrPdlResolverBase {
  constructor(protected readonly service: ClreDedPrcDclrPdlService) {}

  async _clreDedPrcDclrPdlsMeta(
    @graphql.Args() args: ClreDedPrcDclrPdlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedPrcDclrPdl])
  async clreDedPrcDclrPdls(
    @graphql.Args() args: ClreDedPrcDclrPdlFindManyArgs
  ): Promise<ClreDedPrcDclrPdl[]> {
    return this.service.clreDedPrcDclrPdls(args);
  }

  @graphql.Query(() => ClreDedPrcDclrPdl, { nullable: true })
  async clreDedPrcDclrPdl(
    @graphql.Args() args: ClreDedPrcDclrPdlFindUniqueArgs
  ): Promise<ClreDedPrcDclrPdl | null> {
    const result = await this.service.clreDedPrcDclrPdl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedPrcDclrPdl)
  async createClreDedPrcDclrPdl(
    @graphql.Args() args: CreateClreDedPrcDclrPdlArgs
  ): Promise<ClreDedPrcDclrPdl> {
    return await this.service.createClreDedPrcDclrPdl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedPrcDclrPdl)
  async updateClreDedPrcDclrPdl(
    @graphql.Args() args: UpdateClreDedPrcDclrPdlArgs
  ): Promise<ClreDedPrcDclrPdl | null> {
    try {
      return await this.service.updateClreDedPrcDclrPdl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedPrcDclrPdl)
  async deleteClreDedPrcDclrPdl(
    @graphql.Args() args: DeleteClreDedPrcDclrPdlArgs
  ): Promise<ClreDedPrcDclrPdl | null> {
    try {
      return await this.service.deleteClreDedPrcDclrPdl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
