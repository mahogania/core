/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ClearanceDeclaration as PrismaClearanceDeclaration,
} from "@prisma/client";

export class ClearanceDeclarationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClearanceDeclarationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clearanceDeclaration.count(args);
  }

  async clearanceDeclarations(
    args: Prisma.ClearanceDeclarationFindManyArgs
  ): Promise<PrismaClearanceDeclaration[]> {
    return this.prisma.clearanceDeclaration.findMany(args);
  }
  async clearanceDeclaration(
    args: Prisma.ClearanceDeclarationFindUniqueArgs
  ): Promise<PrismaClearanceDeclaration | null> {
    return this.prisma.clearanceDeclaration.findUnique(args);
  }
  async createClearanceDeclaration(
    args: Prisma.ClearanceDeclarationCreateArgs
  ): Promise<PrismaClearanceDeclaration> {
    return this.prisma.clearanceDeclaration.create(args);
  }
  async updateClearanceDeclaration(
    args: Prisma.ClearanceDeclarationUpdateArgs
  ): Promise<PrismaClearanceDeclaration> {
    return this.prisma.clearanceDeclaration.update(args);
  }
  async deleteClearanceDeclaration(
    args: Prisma.ClearanceDeclarationDeleteArgs
  ): Promise<PrismaClearanceDeclaration> {
    return this.prisma.clearanceDeclaration.delete(args);
  }
}
