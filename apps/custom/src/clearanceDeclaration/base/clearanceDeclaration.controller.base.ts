/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClearanceDeclarationService } from "../clearanceDeclaration.service";
import { ClearanceDeclarationCreateInput } from "./ClearanceDeclarationCreateInput";
import { ClearanceDeclaration } from "./ClearanceDeclaration";
import { ClearanceDeclarationFindManyArgs } from "./ClearanceDeclarationFindManyArgs";
import { ClearanceDeclarationWhereUniqueInput } from "./ClearanceDeclarationWhereUniqueInput";
import { ClearanceDeclarationUpdateInput } from "./ClearanceDeclarationUpdateInput";

export class ClearanceDeclarationControllerBase {
  constructor(protected readonly service: ClearanceDeclarationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClearanceDeclaration })
  @swagger.ApiBody({
    type: ClearanceDeclarationCreateInput,
  })
  async createClearanceDeclaration(
    @common.Body() data: ClearanceDeclarationCreateInput
  ): Promise<ClearanceDeclaration> {
    return await this.service.createClearanceDeclaration({
      data: data,
      select: {
        aditTxQty: true,
        aditTxQtyUtCd: true,
        alNtwg: true,
        alTtwg: true,
        apcAtpmEndDt: true,
        apcAtpmStrtDt: true,
        apcCd: true,
        arvlDt: true,
        bfBnbnCmdtWrhsCd: true,
        bfDtlDcshDt: true,
        bfDtlDcshNo: true,
        bfPdlsNo: true,
        blDt: true,
        blNo: true,
        bnbnCmdtWrhsCd: true,
        brndNm: true,
        cagMgmtNo: true,
        cmdtClsfSpelCd: true,
        cmdtStgeLoctCd: true,
        cntrCagYn: true,
        cntrGcnt: true,
        createdAt: true,
        csclPlnCd: true,
        csmCntyCd: true,
        dcerCd: true,
        dcerWrteCn: true,
        dclrCstmCd: true,
        dclrPtCd: true,
        dcrdYn: true,
        dcshFmCd: true,
        delYn: true,
        deptCd: true,
        disprCd: true,
        divdCsclTpCd: true,
        divdFfmnTpCd: true,
        dlngCond1Cd: true,
        dlngCond2Cd: true,
        dlngPdlsNm: true,
        dlngPymnMeanCd: true,
        dlvrCondCd: true,
        dlvrPlcCd: true,
        dstnCntyCd: true,
        dstnRegnCd: true,
        dtlDcshNo: true,
        epcCd: true,
        expCntyCd: true,
        exppnCmrcRegsNo: true,
        exppnIdfyNo: true,
        exppnIdfyNoTpCd: true,
        frstDclrDt: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        hsExcpMtrCd: true,
        id: true,
        imppnCmrcRegsNo: true,
        imppnIdfyNo: true,
        imppnIdfyNoTpCd: true,
        invcNo: true,
        invcPblsDt: true,
        lastChgDttm: true,
        lastChprId: true,
        lastYn: true,
        ldnpCd: true,
        ldunDt: true,
        mdfyDgcnt: true,
        mdfyRsnCd: true,
        mdfyRsnCn: true,
        mgDscnApreNo: true,
        nwprScarCmdtCd: true,
        oilTankNo: true,
        orcyCntyCd: true,
        owhsPrcEvYn: true,
        pckgDesc: true,
        pckgShmrMarkNo: true,
        pckgTgcnt: true,
        pdlsClsfBfhnJdgnPn: true,
        pdlsGcnt: true,
        pdlsNm: true,
        pdlsNo: true,
        pdlsNtwg: true,
        pdlsPckgGcnt: true,
        pdlsPckgUtCd: true,
        pdlsTtwg: true,
        prcDcshWrteYn: true,
        prcDtrmMeanCd: true,
        prhbCmdtCd: true,
        prmsntDt: true,
        prmsntSttsCd: true,
        prvlCd: true,
        psmgtFfmnXpirPrid: true,
        psnrPrcsCn: true,
        psnrReffNo: true,
        pymnAcNo: true,
        pymnBnkBrnhCd: true,
        pymnBnkCd: true,
        pymnMeanCd: true,
        qtaApreNo: true,
        qty: true,
        qtyUtCd: true,
        refNo: true,
        reffNo: true,
        regmRqstCd: true,
        rethink: true,
        rlbrCstmCd: true,
        rqstDt: true,
        shipNm: true,
        sysUseSs: true,
        trdeDlngCntyCd: true,
        trifBaseVal: true,
        trnpMethIdfyNo: true,
        trnpMethKndCd: true,
        trnpMethNatCd: true,
        txprCmrcRegsNo: true,
        txprIdfyNo: true,
        updatedAt: true,
        uprPdlsNo: true,
        vhclYn: true,
        wkngPtCd: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClearanceDeclaration] })
  @ApiNestedQuery(ClearanceDeclarationFindManyArgs)
  async clearanceDeclarations(
    @common.Req() request: Request
  ): Promise<ClearanceDeclaration[]> {
    const args = plainToClass(ClearanceDeclarationFindManyArgs, request.query);
    return this.service.clearanceDeclarations({
      ...args,
      select: {
        aditTxQty: true,
        aditTxQtyUtCd: true,
        alNtwg: true,
        alTtwg: true,
        apcAtpmEndDt: true,
        apcAtpmStrtDt: true,
        apcCd: true,
        arvlDt: true,
        bfBnbnCmdtWrhsCd: true,
        bfDtlDcshDt: true,
        bfDtlDcshNo: true,
        bfPdlsNo: true,
        blDt: true,
        blNo: true,
        bnbnCmdtWrhsCd: true,
        brndNm: true,
        cagMgmtNo: true,
        cmdtClsfSpelCd: true,
        cmdtStgeLoctCd: true,
        cntrCagYn: true,
        cntrGcnt: true,
        createdAt: true,
        csclPlnCd: true,
        csmCntyCd: true,
        dcerCd: true,
        dcerWrteCn: true,
        dclrCstmCd: true,
        dclrPtCd: true,
        dcrdYn: true,
        dcshFmCd: true,
        delYn: true,
        deptCd: true,
        disprCd: true,
        divdCsclTpCd: true,
        divdFfmnTpCd: true,
        dlngCond1Cd: true,
        dlngCond2Cd: true,
        dlngPdlsNm: true,
        dlngPymnMeanCd: true,
        dlvrCondCd: true,
        dlvrPlcCd: true,
        dstnCntyCd: true,
        dstnRegnCd: true,
        dtlDcshNo: true,
        epcCd: true,
        expCntyCd: true,
        exppnCmrcRegsNo: true,
        exppnIdfyNo: true,
        exppnIdfyNoTpCd: true,
        frstDclrDt: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        hsExcpMtrCd: true,
        id: true,
        imppnCmrcRegsNo: true,
        imppnIdfyNo: true,
        imppnIdfyNoTpCd: true,
        invcNo: true,
        invcPblsDt: true,
        lastChgDttm: true,
        lastChprId: true,
        lastYn: true,
        ldnpCd: true,
        ldunDt: true,
        mdfyDgcnt: true,
        mdfyRsnCd: true,
        mdfyRsnCn: true,
        mgDscnApreNo: true,
        nwprScarCmdtCd: true,
        oilTankNo: true,
        orcyCntyCd: true,
        owhsPrcEvYn: true,
        pckgDesc: true,
        pckgShmrMarkNo: true,
        pckgTgcnt: true,
        pdlsClsfBfhnJdgnPn: true,
        pdlsGcnt: true,
        pdlsNm: true,
        pdlsNo: true,
        pdlsNtwg: true,
        pdlsPckgGcnt: true,
        pdlsPckgUtCd: true,
        pdlsTtwg: true,
        prcDcshWrteYn: true,
        prcDtrmMeanCd: true,
        prhbCmdtCd: true,
        prmsntDt: true,
        prmsntSttsCd: true,
        prvlCd: true,
        psmgtFfmnXpirPrid: true,
        psnrPrcsCn: true,
        psnrReffNo: true,
        pymnAcNo: true,
        pymnBnkBrnhCd: true,
        pymnBnkCd: true,
        pymnMeanCd: true,
        qtaApreNo: true,
        qty: true,
        qtyUtCd: true,
        refNo: true,
        reffNo: true,
        regmRqstCd: true,
        rethink: true,
        rlbrCstmCd: true,
        rqstDt: true,
        shipNm: true,
        sysUseSs: true,
        trdeDlngCntyCd: true,
        trifBaseVal: true,
        trnpMethIdfyNo: true,
        trnpMethKndCd: true,
        trnpMethNatCd: true,
        txprCmrcRegsNo: true,
        txprIdfyNo: true,
        updatedAt: true,
        uprPdlsNo: true,
        vhclYn: true,
        wkngPtCd: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClearanceDeclaration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clearanceDeclaration(
    @common.Param() params: ClearanceDeclarationWhereUniqueInput
  ): Promise<ClearanceDeclaration | null> {
    const result = await this.service.clearanceDeclaration({
      where: params,
      select: {
        aditTxQty: true,
        aditTxQtyUtCd: true,
        alNtwg: true,
        alTtwg: true,
        apcAtpmEndDt: true,
        apcAtpmStrtDt: true,
        apcCd: true,
        arvlDt: true,
        bfBnbnCmdtWrhsCd: true,
        bfDtlDcshDt: true,
        bfDtlDcshNo: true,
        bfPdlsNo: true,
        blDt: true,
        blNo: true,
        bnbnCmdtWrhsCd: true,
        brndNm: true,
        cagMgmtNo: true,
        cmdtClsfSpelCd: true,
        cmdtStgeLoctCd: true,
        cntrCagYn: true,
        cntrGcnt: true,
        createdAt: true,
        csclPlnCd: true,
        csmCntyCd: true,
        dcerCd: true,
        dcerWrteCn: true,
        dclrCstmCd: true,
        dclrPtCd: true,
        dcrdYn: true,
        dcshFmCd: true,
        delYn: true,
        deptCd: true,
        disprCd: true,
        divdCsclTpCd: true,
        divdFfmnTpCd: true,
        dlngCond1Cd: true,
        dlngCond2Cd: true,
        dlngPdlsNm: true,
        dlngPymnMeanCd: true,
        dlvrCondCd: true,
        dlvrPlcCd: true,
        dstnCntyCd: true,
        dstnRegnCd: true,
        dtlDcshNo: true,
        epcCd: true,
        expCntyCd: true,
        exppnCmrcRegsNo: true,
        exppnIdfyNo: true,
        exppnIdfyNoTpCd: true,
        frstDclrDt: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        hsExcpMtrCd: true,
        id: true,
        imppnCmrcRegsNo: true,
        imppnIdfyNo: true,
        imppnIdfyNoTpCd: true,
        invcNo: true,
        invcPblsDt: true,
        lastChgDttm: true,
        lastChprId: true,
        lastYn: true,
        ldnpCd: true,
        ldunDt: true,
        mdfyDgcnt: true,
        mdfyRsnCd: true,
        mdfyRsnCn: true,
        mgDscnApreNo: true,
        nwprScarCmdtCd: true,
        oilTankNo: true,
        orcyCntyCd: true,
        owhsPrcEvYn: true,
        pckgDesc: true,
        pckgShmrMarkNo: true,
        pckgTgcnt: true,
        pdlsClsfBfhnJdgnPn: true,
        pdlsGcnt: true,
        pdlsNm: true,
        pdlsNo: true,
        pdlsNtwg: true,
        pdlsPckgGcnt: true,
        pdlsPckgUtCd: true,
        pdlsTtwg: true,
        prcDcshWrteYn: true,
        prcDtrmMeanCd: true,
        prhbCmdtCd: true,
        prmsntDt: true,
        prmsntSttsCd: true,
        prvlCd: true,
        psmgtFfmnXpirPrid: true,
        psnrPrcsCn: true,
        psnrReffNo: true,
        pymnAcNo: true,
        pymnBnkBrnhCd: true,
        pymnBnkCd: true,
        pymnMeanCd: true,
        qtaApreNo: true,
        qty: true,
        qtyUtCd: true,
        refNo: true,
        reffNo: true,
        regmRqstCd: true,
        rethink: true,
        rlbrCstmCd: true,
        rqstDt: true,
        shipNm: true,
        sysUseSs: true,
        trdeDlngCntyCd: true,
        trifBaseVal: true,
        trnpMethIdfyNo: true,
        trnpMethKndCd: true,
        trnpMethNatCd: true,
        txprCmrcRegsNo: true,
        txprIdfyNo: true,
        updatedAt: true,
        uprPdlsNo: true,
        vhclYn: true,
        wkngPtCd: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClearanceDeclaration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ClearanceDeclarationUpdateInput,
  })
  async updateClearanceDeclaration(
    @common.Param() params: ClearanceDeclarationWhereUniqueInput,
    @common.Body() data: ClearanceDeclarationUpdateInput
  ): Promise<ClearanceDeclaration | null> {
    try {
      return await this.service.updateClearanceDeclaration({
        where: params,
        data: data,
        select: {
          aditTxQty: true,
          aditTxQtyUtCd: true,
          alNtwg: true,
          alTtwg: true,
          apcAtpmEndDt: true,
          apcAtpmStrtDt: true,
          apcCd: true,
          arvlDt: true,
          bfBnbnCmdtWrhsCd: true,
          bfDtlDcshDt: true,
          bfDtlDcshNo: true,
          bfPdlsNo: true,
          blDt: true,
          blNo: true,
          bnbnCmdtWrhsCd: true,
          brndNm: true,
          cagMgmtNo: true,
          cmdtClsfSpelCd: true,
          cmdtStgeLoctCd: true,
          cntrCagYn: true,
          cntrGcnt: true,
          createdAt: true,
          csclPlnCd: true,
          csmCntyCd: true,
          dcerCd: true,
          dcerWrteCn: true,
          dclrCstmCd: true,
          dclrPtCd: true,
          dcrdYn: true,
          dcshFmCd: true,
          delYn: true,
          deptCd: true,
          disprCd: true,
          divdCsclTpCd: true,
          divdFfmnTpCd: true,
          dlngCond1Cd: true,
          dlngCond2Cd: true,
          dlngPdlsNm: true,
          dlngPymnMeanCd: true,
          dlvrCondCd: true,
          dlvrPlcCd: true,
          dstnCntyCd: true,
          dstnRegnCd: true,
          dtlDcshNo: true,
          epcCd: true,
          expCntyCd: true,
          exppnCmrcRegsNo: true,
          exppnIdfyNo: true,
          exppnIdfyNoTpCd: true,
          frstDclrDt: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          hsExcpMtrCd: true,
          id: true,
          imppnCmrcRegsNo: true,
          imppnIdfyNo: true,
          imppnIdfyNoTpCd: true,
          invcNo: true,
          invcPblsDt: true,
          lastChgDttm: true,
          lastChprId: true,
          lastYn: true,
          ldnpCd: true,
          ldunDt: true,
          mdfyDgcnt: true,
          mdfyRsnCd: true,
          mdfyRsnCn: true,
          mgDscnApreNo: true,
          nwprScarCmdtCd: true,
          oilTankNo: true,
          orcyCntyCd: true,
          owhsPrcEvYn: true,
          pckgDesc: true,
          pckgShmrMarkNo: true,
          pckgTgcnt: true,
          pdlsClsfBfhnJdgnPn: true,
          pdlsGcnt: true,
          pdlsNm: true,
          pdlsNo: true,
          pdlsNtwg: true,
          pdlsPckgGcnt: true,
          pdlsPckgUtCd: true,
          pdlsTtwg: true,
          prcDcshWrteYn: true,
          prcDtrmMeanCd: true,
          prhbCmdtCd: true,
          prmsntDt: true,
          prmsntSttsCd: true,
          prvlCd: true,
          psmgtFfmnXpirPrid: true,
          psnrPrcsCn: true,
          psnrReffNo: true,
          pymnAcNo: true,
          pymnBnkBrnhCd: true,
          pymnBnkCd: true,
          pymnMeanCd: true,
          qtaApreNo: true,
          qty: true,
          qtyUtCd: true,
          refNo: true,
          reffNo: true,
          regmRqstCd: true,
          rethink: true,
          rlbrCstmCd: true,
          rqstDt: true,
          shipNm: true,
          sysUseSs: true,
          trdeDlngCntyCd: true,
          trifBaseVal: true,
          trnpMethIdfyNo: true,
          trnpMethKndCd: true,
          trnpMethNatCd: true,
          txprCmrcRegsNo: true,
          txprIdfyNo: true,
          updatedAt: true,
          uprPdlsNo: true,
          vhclYn: true,
          wkngPtCd: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClearanceDeclaration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClearanceDeclaration(
    @common.Param() params: ClearanceDeclarationWhereUniqueInput
  ): Promise<ClearanceDeclaration | null> {
    try {
      return await this.service.deleteClearanceDeclaration({
        where: params,
        select: {
          aditTxQty: true,
          aditTxQtyUtCd: true,
          alNtwg: true,
          alTtwg: true,
          apcAtpmEndDt: true,
          apcAtpmStrtDt: true,
          apcCd: true,
          arvlDt: true,
          bfBnbnCmdtWrhsCd: true,
          bfDtlDcshDt: true,
          bfDtlDcshNo: true,
          bfPdlsNo: true,
          blDt: true,
          blNo: true,
          bnbnCmdtWrhsCd: true,
          brndNm: true,
          cagMgmtNo: true,
          cmdtClsfSpelCd: true,
          cmdtStgeLoctCd: true,
          cntrCagYn: true,
          cntrGcnt: true,
          createdAt: true,
          csclPlnCd: true,
          csmCntyCd: true,
          dcerCd: true,
          dcerWrteCn: true,
          dclrCstmCd: true,
          dclrPtCd: true,
          dcrdYn: true,
          dcshFmCd: true,
          delYn: true,
          deptCd: true,
          disprCd: true,
          divdCsclTpCd: true,
          divdFfmnTpCd: true,
          dlngCond1Cd: true,
          dlngCond2Cd: true,
          dlngPdlsNm: true,
          dlngPymnMeanCd: true,
          dlvrCondCd: true,
          dlvrPlcCd: true,
          dstnCntyCd: true,
          dstnRegnCd: true,
          dtlDcshNo: true,
          epcCd: true,
          expCntyCd: true,
          exppnCmrcRegsNo: true,
          exppnIdfyNo: true,
          exppnIdfyNoTpCd: true,
          frstDclrDt: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          hsExcpMtrCd: true,
          id: true,
          imppnCmrcRegsNo: true,
          imppnIdfyNo: true,
          imppnIdfyNoTpCd: true,
          invcNo: true,
          invcPblsDt: true,
          lastChgDttm: true,
          lastChprId: true,
          lastYn: true,
          ldnpCd: true,
          ldunDt: true,
          mdfyDgcnt: true,
          mdfyRsnCd: true,
          mdfyRsnCn: true,
          mgDscnApreNo: true,
          nwprScarCmdtCd: true,
          oilTankNo: true,
          orcyCntyCd: true,
          owhsPrcEvYn: true,
          pckgDesc: true,
          pckgShmrMarkNo: true,
          pckgTgcnt: true,
          pdlsClsfBfhnJdgnPn: true,
          pdlsGcnt: true,
          pdlsNm: true,
          pdlsNo: true,
          pdlsNtwg: true,
          pdlsPckgGcnt: true,
          pdlsPckgUtCd: true,
          pdlsTtwg: true,
          prcDcshWrteYn: true,
          prcDtrmMeanCd: true,
          prhbCmdtCd: true,
          prmsntDt: true,
          prmsntSttsCd: true,
          prvlCd: true,
          psmgtFfmnXpirPrid: true,
          psnrPrcsCn: true,
          psnrReffNo: true,
          pymnAcNo: true,
          pymnBnkBrnhCd: true,
          pymnBnkCd: true,
          pymnMeanCd: true,
          qtaApreNo: true,
          qty: true,
          qtyUtCd: true,
          refNo: true,
          reffNo: true,
          regmRqstCd: true,
          rethink: true,
          rlbrCstmCd: true,
          rqstDt: true,
          shipNm: true,
          sysUseSs: true,
          trdeDlngCntyCd: true,
          trifBaseVal: true,
          trnpMethIdfyNo: true,
          trnpMethKndCd: true,
          trnpMethNatCd: true,
          txprCmrcRegsNo: true,
          txprIdfyNo: true,
          updatedAt: true,
          uprPdlsNo: true,
          vhclYn: true,
          wkngPtCd: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
