/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClearanceDeclaration } from "./ClearanceDeclaration";
import { ClearanceDeclarationCountArgs } from "./ClearanceDeclarationCountArgs";
import { ClearanceDeclarationFindManyArgs } from "./ClearanceDeclarationFindManyArgs";
import { ClearanceDeclarationFindUniqueArgs } from "./ClearanceDeclarationFindUniqueArgs";
import { CreateClearanceDeclarationArgs } from "./CreateClearanceDeclarationArgs";
import { UpdateClearanceDeclarationArgs } from "./UpdateClearanceDeclarationArgs";
import { DeleteClearanceDeclarationArgs } from "./DeleteClearanceDeclarationArgs";
import { ClearanceDeclarationService } from "../clearanceDeclaration.service";
@graphql.Resolver(() => ClearanceDeclaration)
export class ClearanceDeclarationResolverBase {
  constructor(protected readonly service: ClearanceDeclarationService) {}

  async _clearanceDeclarationsMeta(
    @graphql.Args() args: ClearanceDeclarationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClearanceDeclaration])
  async clearanceDeclarations(
    @graphql.Args() args: ClearanceDeclarationFindManyArgs
  ): Promise<ClearanceDeclaration[]> {
    return this.service.clearanceDeclarations(args);
  }

  @graphql.Query(() => ClearanceDeclaration, { nullable: true })
  async clearanceDeclaration(
    @graphql.Args() args: ClearanceDeclarationFindUniqueArgs
  ): Promise<ClearanceDeclaration | null> {
    const result = await this.service.clearanceDeclaration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClearanceDeclaration)
  async createClearanceDeclaration(
    @graphql.Args() args: CreateClearanceDeclarationArgs
  ): Promise<ClearanceDeclaration> {
    return await this.service.createClearanceDeclaration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClearanceDeclaration)
  async updateClearanceDeclaration(
    @graphql.Args() args: UpdateClearanceDeclarationArgs
  ): Promise<ClearanceDeclaration | null> {
    try {
      return await this.service.updateClearanceDeclaration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClearanceDeclaration)
  async deleteClearanceDeclaration(
    @graphql.Args() args: DeleteClearanceDeclarationArgs
  ): Promise<ClearanceDeclaration | null> {
    try {
      return await this.service.deleteClearanceDeclaration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
