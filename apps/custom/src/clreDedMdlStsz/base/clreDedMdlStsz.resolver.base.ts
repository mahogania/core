/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedMdlStsz } from "./ClreDedMdlStsz";
import { ClreDedMdlStszCountArgs } from "./ClreDedMdlStszCountArgs";
import { ClreDedMdlStszFindManyArgs } from "./ClreDedMdlStszFindManyArgs";
import { ClreDedMdlStszFindUniqueArgs } from "./ClreDedMdlStszFindUniqueArgs";
import { CreateClreDedMdlStszArgs } from "./CreateClreDedMdlStszArgs";
import { UpdateClreDedMdlStszArgs } from "./UpdateClreDedMdlStszArgs";
import { DeleteClreDedMdlStszArgs } from "./DeleteClreDedMdlStszArgs";
import { ClreDedMdlStszService } from "../clreDedMdlStsz.service";
@graphql.Resolver(() => ClreDedMdlStsz)
export class ClreDedMdlStszResolverBase {
  constructor(protected readonly service: ClreDedMdlStszService) {}

  async _clreDedMdlStszsMeta(
    @graphql.Args() args: ClreDedMdlStszCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedMdlStsz])
  async clreDedMdlStszs(
    @graphql.Args() args: ClreDedMdlStszFindManyArgs
  ): Promise<ClreDedMdlStsz[]> {
    return this.service.clreDedMdlStszs(args);
  }

  @graphql.Query(() => ClreDedMdlStsz, { nullable: true })
  async clreDedMdlStsz(
    @graphql.Args() args: ClreDedMdlStszFindUniqueArgs
  ): Promise<ClreDedMdlStsz | null> {
    const result = await this.service.clreDedMdlStsz(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedMdlStsz)
  async createClreDedMdlStsz(
    @graphql.Args() args: CreateClreDedMdlStszArgs
  ): Promise<ClreDedMdlStsz> {
    return await this.service.createClreDedMdlStsz({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedMdlStsz)
  async updateClreDedMdlStsz(
    @graphql.Args() args: UpdateClreDedMdlStszArgs
  ): Promise<ClreDedMdlStsz | null> {
    try {
      return await this.service.updateClreDedMdlStsz({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedMdlStsz)
  async deleteClreDedMdlStsz(
    @graphql.Args() args: DeleteClreDedMdlStszArgs
  ): Promise<ClreDedMdlStsz | null> {
    try {
      return await this.service.deleteClreDedMdlStsz(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
