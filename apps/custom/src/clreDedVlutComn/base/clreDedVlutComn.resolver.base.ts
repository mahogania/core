/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedVlutComn } from "./ClreDedVlutComn";
import { ClreDedVlutComnCountArgs } from "./ClreDedVlutComnCountArgs";
import { ClreDedVlutComnFindManyArgs } from "./ClreDedVlutComnFindManyArgs";
import { ClreDedVlutComnFindUniqueArgs } from "./ClreDedVlutComnFindUniqueArgs";
import { CreateClreDedVlutComnArgs } from "./CreateClreDedVlutComnArgs";
import { UpdateClreDedVlutComnArgs } from "./UpdateClreDedVlutComnArgs";
import { DeleteClreDedVlutComnArgs } from "./DeleteClreDedVlutComnArgs";
import { ClreDedVlutComnService } from "../clreDedVlutComn.service";
@graphql.Resolver(() => ClreDedVlutComn)
export class ClreDedVlutComnResolverBase {
  constructor(protected readonly service: ClreDedVlutComnService) {}

  async _clreDedVlutComnsMeta(
    @graphql.Args() args: ClreDedVlutComnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedVlutComn])
  async clreDedVlutComns(
    @graphql.Args() args: ClreDedVlutComnFindManyArgs
  ): Promise<ClreDedVlutComn[]> {
    return this.service.clreDedVlutComns(args);
  }

  @graphql.Query(() => ClreDedVlutComn, { nullable: true })
  async clreDedVlutComn(
    @graphql.Args() args: ClreDedVlutComnFindUniqueArgs
  ): Promise<ClreDedVlutComn | null> {
    const result = await this.service.clreDedVlutComn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedVlutComn)
  async createClreDedVlutComn(
    @graphql.Args() args: CreateClreDedVlutComnArgs
  ): Promise<ClreDedVlutComn> {
    return await this.service.createClreDedVlutComn({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedVlutComn)
  async updateClreDedVlutComn(
    @graphql.Args() args: UpdateClreDedVlutComnArgs
  ): Promise<ClreDedVlutComn | null> {
    try {
      return await this.service.updateClreDedVlutComn({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedVlutComn)
  async deleteClreDedVlutComn(
    @graphql.Args() args: DeleteClreDedVlutComnArgs
  ): Promise<ClreDedVlutComn | null> {
    try {
      return await this.service.deleteClreDedVlutComn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
