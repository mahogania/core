/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TbClreDedTaxService } from "../tbClreDedTax.service";
import { TbClreDedTaxCreateInput } from "./TbClreDedTaxCreateInput";
import { TbClreDedTax } from "./TbClreDedTax";
import { TbClreDedTaxFindManyArgs } from "./TbClreDedTaxFindManyArgs";
import { TbClreDedTaxWhereUniqueInput } from "./TbClreDedTaxWhereUniqueInput";
import { TbClreDedTaxUpdateInput } from "./TbClreDedTaxUpdateInput";

export class TbClreDedTaxControllerBase {
  constructor(protected readonly service: TbClreDedTaxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedTax })
  @swagger.ApiBody({
    type: TbClreDedTaxCreateInput,
  })
  async createTbClreDedTax(
    @common.Body() data: TbClreDedTaxCreateInput
  ): Promise<TbClreDedTax> {
    return await this.service.createTbClreDedTax({
      data: data,
      select: {
        bscsTaxAmt: true,
        bscsTxbsAmt: true,
        bscsTxrt: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnAplyAmt: true,
        payKndCd: true,
        payTaxAmt: true,
        pdlsNo: true,
        rdexAmt: true,
        rdexBaseAmt: true,
        rdexCd: true,
        rdexPtCd: true,
        rdexTxrt: true,
        reffNo: true,
        taxAmt: true,
        taxCd: true,
        tfrtCtgyCd: true,
        txbsAmt: true,
        txrt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedTax] })
  @ApiNestedQuery(TbClreDedTaxFindManyArgs)
  async tbClreDedTaxes(
    @common.Req() request: Request
  ): Promise<TbClreDedTax[]> {
    const args = plainToClass(TbClreDedTaxFindManyArgs, request.query);
    return this.service.tbClreDedTaxes({
      ...args,
      select: {
        bscsTaxAmt: true,
        bscsTxbsAmt: true,
        bscsTxrt: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnAplyAmt: true,
        payKndCd: true,
        payTaxAmt: true,
        pdlsNo: true,
        rdexAmt: true,
        rdexBaseAmt: true,
        rdexCd: true,
        rdexPtCd: true,
        rdexTxrt: true,
        reffNo: true,
        taxAmt: true,
        taxCd: true,
        tfrtCtgyCd: true,
        txbsAmt: true,
        txrt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tbClreDedTax(
    @common.Param() params: TbClreDedTaxWhereUniqueInput
  ): Promise<TbClreDedTax | null> {
    const result = await this.service.tbClreDedTax({
      where: params,
      select: {
        bscsTaxAmt: true,
        bscsTxbsAmt: true,
        bscsTxrt: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnAplyAmt: true,
        payKndCd: true,
        payTaxAmt: true,
        pdlsNo: true,
        rdexAmt: true,
        rdexBaseAmt: true,
        rdexCd: true,
        rdexPtCd: true,
        rdexTxrt: true,
        reffNo: true,
        taxAmt: true,
        taxCd: true,
        tfrtCtgyCd: true,
        txbsAmt: true,
        txrt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: TbClreDedTaxUpdateInput,
  })
  async updateTbClreDedTax(
    @common.Param() params: TbClreDedTaxWhereUniqueInput,
    @common.Body() data: TbClreDedTaxUpdateInput
  ): Promise<TbClreDedTax | null> {
    try {
      return await this.service.updateTbClreDedTax({
        where: params,
        data: data,
        select: {
          bscsTaxAmt: true,
          bscsTxbsAmt: true,
          bscsTxrt: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgDscnAplyAmt: true,
          payKndCd: true,
          payTaxAmt: true,
          pdlsNo: true,
          rdexAmt: true,
          rdexBaseAmt: true,
          rdexCd: true,
          rdexPtCd: true,
          rdexTxrt: true,
          reffNo: true,
          taxAmt: true,
          taxCd: true,
          tfrtCtgyCd: true,
          txbsAmt: true,
          txrt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTbClreDedTax(
    @common.Param() params: TbClreDedTaxWhereUniqueInput
  ): Promise<TbClreDedTax | null> {
    try {
      return await this.service.deleteTbClreDedTax({
        where: params,
        select: {
          bscsTaxAmt: true,
          bscsTxbsAmt: true,
          bscsTxrt: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgDscnAplyAmt: true,
          payKndCd: true,
          payTaxAmt: true,
          pdlsNo: true,
          rdexAmt: true,
          rdexBaseAmt: true,
          rdexCd: true,
          rdexPtCd: true,
          rdexTxrt: true,
          reffNo: true,
          taxAmt: true,
          taxCd: true,
          tfrtCtgyCd: true,
          txbsAmt: true,
          txrt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
