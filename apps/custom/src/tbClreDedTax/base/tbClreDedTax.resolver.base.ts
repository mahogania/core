/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedTax } from "./TbClreDedTax";
import { TbClreDedTaxCountArgs } from "./TbClreDedTaxCountArgs";
import { TbClreDedTaxFindManyArgs } from "./TbClreDedTaxFindManyArgs";
import { TbClreDedTaxFindUniqueArgs } from "./TbClreDedTaxFindUniqueArgs";
import { CreateTbClreDedTaxArgs } from "./CreateTbClreDedTaxArgs";
import { UpdateTbClreDedTaxArgs } from "./UpdateTbClreDedTaxArgs";
import { DeleteTbClreDedTaxArgs } from "./DeleteTbClreDedTaxArgs";
import { TbClreDedTaxService } from "../tbClreDedTax.service";
@graphql.Resolver(() => TbClreDedTax)
export class TbClreDedTaxResolverBase {
  constructor(protected readonly service: TbClreDedTaxService) {}

  async _tbClreDedTaxesMeta(
    @graphql.Args() args: TbClreDedTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedTax])
  async tbClreDedTaxes(
    @graphql.Args() args: TbClreDedTaxFindManyArgs
  ): Promise<TbClreDedTax[]> {
    return this.service.tbClreDedTaxes(args);
  }

  @graphql.Query(() => TbClreDedTax, { nullable: true })
  async tbClreDedTax(
    @graphql.Args() args: TbClreDedTaxFindUniqueArgs
  ): Promise<TbClreDedTax | null> {
    const result = await this.service.tbClreDedTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedTax)
  async createTbClreDedTax(
    @graphql.Args() args: CreateTbClreDedTaxArgs
  ): Promise<TbClreDedTax> {
    return await this.service.createTbClreDedTax({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedTax)
  async updateTbClreDedTax(
    @graphql.Args() args: UpdateTbClreDedTaxArgs
  ): Promise<TbClreDedTax | null> {
    try {
      return await this.service.updateTbClreDedTax({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedTax)
  async deleteTbClreDedTax(
    @graphql.Args() args: DeleteTbClreDedTaxArgs
  ): Promise<TbClreDedTax | null> {
    try {
      return await this.service.deleteTbClreDedTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
