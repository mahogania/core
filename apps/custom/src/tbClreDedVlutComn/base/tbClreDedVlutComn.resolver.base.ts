/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedVlutComn } from "./TbClreDedVlutComn";
import { TbClreDedVlutComnCountArgs } from "./TbClreDedVlutComnCountArgs";
import { TbClreDedVlutComnFindManyArgs } from "./TbClreDedVlutComnFindManyArgs";
import { TbClreDedVlutComnFindUniqueArgs } from "./TbClreDedVlutComnFindUniqueArgs";
import { CreateTbClreDedVlutComnArgs } from "./CreateTbClreDedVlutComnArgs";
import { UpdateTbClreDedVlutComnArgs } from "./UpdateTbClreDedVlutComnArgs";
import { DeleteTbClreDedVlutComnArgs } from "./DeleteTbClreDedVlutComnArgs";
import { TbClreDedVlutComnService } from "../tbClreDedVlutComn.service";
@graphql.Resolver(() => TbClreDedVlutComn)
export class TbClreDedVlutComnResolverBase {
  constructor(protected readonly service: TbClreDedVlutComnService) {}

  async _tbClreDedVlutComnsMeta(
    @graphql.Args() args: TbClreDedVlutComnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedVlutComn])
  async tbClreDedVlutComns(
    @graphql.Args() args: TbClreDedVlutComnFindManyArgs
  ): Promise<TbClreDedVlutComn[]> {
    return this.service.tbClreDedVlutComns(args);
  }

  @graphql.Query(() => TbClreDedVlutComn, { nullable: true })
  async tbClreDedVlutComn(
    @graphql.Args() args: TbClreDedVlutComnFindUniqueArgs
  ): Promise<TbClreDedVlutComn | null> {
    const result = await this.service.tbClreDedVlutComn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedVlutComn)
  async createTbClreDedVlutComn(
    @graphql.Args() args: CreateTbClreDedVlutComnArgs
  ): Promise<TbClreDedVlutComn> {
    return await this.service.createTbClreDedVlutComn({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedVlutComn)
  async updateTbClreDedVlutComn(
    @graphql.Args() args: UpdateTbClreDedVlutComnArgs
  ): Promise<TbClreDedVlutComn | null> {
    try {
      return await this.service.updateTbClreDedVlutComn({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedVlutComn)
  async deleteTbClreDedVlutComn(
    @graphql.Args() args: DeleteTbClreDedVlutComnArgs
  ): Promise<TbClreDedVlutComn | null> {
    try {
      return await this.service.deleteTbClreDedVlutComn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
