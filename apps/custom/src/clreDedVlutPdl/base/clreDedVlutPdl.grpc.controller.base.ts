/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClreDedVlutPdlService } from "../clreDedVlutPdl.service";
import { ClreDedVlutPdlCreateInput } from "./ClreDedVlutPdlCreateInput";
import { ClreDedVlutPdlWhereInput } from "./ClreDedVlutPdlWhereInput";
import { ClreDedVlutPdlWhereUniqueInput } from "./ClreDedVlutPdlWhereUniqueInput";
import { ClreDedVlutPdlFindManyArgs } from "./ClreDedVlutPdlFindManyArgs";
import { ClreDedVlutPdlUpdateInput } from "./ClreDedVlutPdlUpdateInput";
import { ClreDedVlutPdl } from "./ClreDedVlutPdl";

export class ClreDedVlutPdlGrpcControllerBase {
  constructor(protected readonly service: ClreDedVlutPdlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedVlutPdl })
  @GrpcMethod("ClreDedVlutPdlService", "createClreDedVlutPdl")
  async createClreDedVlutPdl(
    @common.Body() data: ClreDedVlutPdlCreateInput
  ): Promise<ClreDedVlutPdl> {
    return await this.service.createClreDedVlutPdl({
      data: data,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        pdlsCachAmt: true,
        pdlsCachCurrCd: true,
        pdlsCachFxrt: true,
        pdlsCachNcyAmt: true,
        pdlsDdctAmt: true,
        pdlsDdctCurrCd: true,
        pdlsDdctFxrt: true,
        pdlsDdctNcyAmt: true,
        pdlsInfeeAmt: true,
        pdlsInfeeCurrCd: true,
        pdlsInfeeFxrt: true,
        pdlsInfeeNcyAmt: true,
        pdlsInvcAmt: true,
        pdlsInvcCurrCd: true,
        pdlsInvcFxrt: true,
        pdlsInvcNcyAmt: true,
        pdlsInvcUsdAmt: true,
        pdlsMprcBaseVal: true,
        pdlsMprcCurrCd: true,
        pdlsMprcNcyAmt: true,
        pdlsMprcTpCd: true,
        pdlsMprcUsdAmt: true,
        pdlsMprcUtAmt: true,
        pdlsNo: true,
        pdlsOtcstAmt: true,
        pdlsOtcstCurrCd: true,
        pdlsOtcstFxrt: true,
        pdlsOtcstNcyAmt: true,
        pdlsTxbsNcyAmt: true,
        pdlsTxbsUsdAmt: true,
        pdlsVlutNcyAmt: true,
        pdlsVlutUsdAmt: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedVlutPdl] })
  @ApiNestedQuery(ClreDedVlutPdlFindManyArgs)
  @GrpcMethod("ClreDedVlutPdlService", "clreDedVlutPdls")
  async clreDedVlutPdls(
    @common.Req() request: Request
  ): Promise<ClreDedVlutPdl[]> {
    const args = plainToClass(ClreDedVlutPdlFindManyArgs, request.query);
    return this.service.clreDedVlutPdls({
      ...args,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        pdlsCachAmt: true,
        pdlsCachCurrCd: true,
        pdlsCachFxrt: true,
        pdlsCachNcyAmt: true,
        pdlsDdctAmt: true,
        pdlsDdctCurrCd: true,
        pdlsDdctFxrt: true,
        pdlsDdctNcyAmt: true,
        pdlsInfeeAmt: true,
        pdlsInfeeCurrCd: true,
        pdlsInfeeFxrt: true,
        pdlsInfeeNcyAmt: true,
        pdlsInvcAmt: true,
        pdlsInvcCurrCd: true,
        pdlsInvcFxrt: true,
        pdlsInvcNcyAmt: true,
        pdlsInvcUsdAmt: true,
        pdlsMprcBaseVal: true,
        pdlsMprcCurrCd: true,
        pdlsMprcNcyAmt: true,
        pdlsMprcTpCd: true,
        pdlsMprcUsdAmt: true,
        pdlsMprcUtAmt: true,
        pdlsNo: true,
        pdlsOtcstAmt: true,
        pdlsOtcstCurrCd: true,
        pdlsOtcstFxrt: true,
        pdlsOtcstNcyAmt: true,
        pdlsTxbsNcyAmt: true,
        pdlsTxbsUsdAmt: true,
        pdlsVlutNcyAmt: true,
        pdlsVlutUsdAmt: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedVlutPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedVlutPdlService", "clreDedVlutPdl")
  async clreDedVlutPdl(
    @common.Param() params: ClreDedVlutPdlWhereUniqueInput
  ): Promise<ClreDedVlutPdl | null> {
    const result = await this.service.clreDedVlutPdl({
      where: params,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        pdlsCachAmt: true,
        pdlsCachCurrCd: true,
        pdlsCachFxrt: true,
        pdlsCachNcyAmt: true,
        pdlsDdctAmt: true,
        pdlsDdctCurrCd: true,
        pdlsDdctFxrt: true,
        pdlsDdctNcyAmt: true,
        pdlsInfeeAmt: true,
        pdlsInfeeCurrCd: true,
        pdlsInfeeFxrt: true,
        pdlsInfeeNcyAmt: true,
        pdlsInvcAmt: true,
        pdlsInvcCurrCd: true,
        pdlsInvcFxrt: true,
        pdlsInvcNcyAmt: true,
        pdlsInvcUsdAmt: true,
        pdlsMprcBaseVal: true,
        pdlsMprcCurrCd: true,
        pdlsMprcNcyAmt: true,
        pdlsMprcTpCd: true,
        pdlsMprcUsdAmt: true,
        pdlsMprcUtAmt: true,
        pdlsNo: true,
        pdlsOtcstAmt: true,
        pdlsOtcstCurrCd: true,
        pdlsOtcstFxrt: true,
        pdlsOtcstNcyAmt: true,
        pdlsTxbsNcyAmt: true,
        pdlsTxbsUsdAmt: true,
        pdlsVlutNcyAmt: true,
        pdlsVlutUsdAmt: true,
        reffNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedVlutPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedVlutPdlService", "updateClreDedVlutPdl")
  async updateClreDedVlutPdl(
    @common.Param() params: ClreDedVlutPdlWhereUniqueInput,
    @common.Body() data: ClreDedVlutPdlUpdateInput
  ): Promise<ClreDedVlutPdl | null> {
    try {
      return await this.service.updateClreDedVlutPdl({
        where: params,
        data: data,
        select: {
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          pdlsCachAmt: true,
          pdlsCachCurrCd: true,
          pdlsCachFxrt: true,
          pdlsCachNcyAmt: true,
          pdlsDdctAmt: true,
          pdlsDdctCurrCd: true,
          pdlsDdctFxrt: true,
          pdlsDdctNcyAmt: true,
          pdlsInfeeAmt: true,
          pdlsInfeeCurrCd: true,
          pdlsInfeeFxrt: true,
          pdlsInfeeNcyAmt: true,
          pdlsInvcAmt: true,
          pdlsInvcCurrCd: true,
          pdlsInvcFxrt: true,
          pdlsInvcNcyAmt: true,
          pdlsInvcUsdAmt: true,
          pdlsMprcBaseVal: true,
          pdlsMprcCurrCd: true,
          pdlsMprcNcyAmt: true,
          pdlsMprcTpCd: true,
          pdlsMprcUsdAmt: true,
          pdlsMprcUtAmt: true,
          pdlsNo: true,
          pdlsOtcstAmt: true,
          pdlsOtcstCurrCd: true,
          pdlsOtcstFxrt: true,
          pdlsOtcstNcyAmt: true,
          pdlsTxbsNcyAmt: true,
          pdlsTxbsUsdAmt: true,
          pdlsVlutNcyAmt: true,
          pdlsVlutUsdAmt: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedVlutPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClreDedVlutPdlService", "deleteClreDedVlutPdl")
  async deleteClreDedVlutPdl(
    @common.Param() params: ClreDedVlutPdlWhereUniqueInput
  ): Promise<ClreDedVlutPdl | null> {
    try {
      return await this.service.deleteClreDedVlutPdl({
        where: params,
        select: {
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          pdlsCachAmt: true,
          pdlsCachCurrCd: true,
          pdlsCachFxrt: true,
          pdlsCachNcyAmt: true,
          pdlsDdctAmt: true,
          pdlsDdctCurrCd: true,
          pdlsDdctFxrt: true,
          pdlsDdctNcyAmt: true,
          pdlsInfeeAmt: true,
          pdlsInfeeCurrCd: true,
          pdlsInfeeFxrt: true,
          pdlsInfeeNcyAmt: true,
          pdlsInvcAmt: true,
          pdlsInvcCurrCd: true,
          pdlsInvcFxrt: true,
          pdlsInvcNcyAmt: true,
          pdlsInvcUsdAmt: true,
          pdlsMprcBaseVal: true,
          pdlsMprcCurrCd: true,
          pdlsMprcNcyAmt: true,
          pdlsMprcTpCd: true,
          pdlsMprcUsdAmt: true,
          pdlsMprcUtAmt: true,
          pdlsNo: true,
          pdlsOtcstAmt: true,
          pdlsOtcstCurrCd: true,
          pdlsOtcstFxrt: true,
          pdlsOtcstNcyAmt: true,
          pdlsTxbsNcyAmt: true,
          pdlsTxbsUsdAmt: true,
          pdlsVlutNcyAmt: true,
          pdlsVlutUsdAmt: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
