/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedVlutPdl } from "./ClreDedVlutPdl";
import { ClreDedVlutPdlCountArgs } from "./ClreDedVlutPdlCountArgs";
import { ClreDedVlutPdlFindManyArgs } from "./ClreDedVlutPdlFindManyArgs";
import { ClreDedVlutPdlFindUniqueArgs } from "./ClreDedVlutPdlFindUniqueArgs";
import { CreateClreDedVlutPdlArgs } from "./CreateClreDedVlutPdlArgs";
import { UpdateClreDedVlutPdlArgs } from "./UpdateClreDedVlutPdlArgs";
import { DeleteClreDedVlutPdlArgs } from "./DeleteClreDedVlutPdlArgs";
import { ClreDedVlutPdlService } from "../clreDedVlutPdl.service";
@graphql.Resolver(() => ClreDedVlutPdl)
export class ClreDedVlutPdlResolverBase {
  constructor(protected readonly service: ClreDedVlutPdlService) {}

  async _clreDedVlutPdlsMeta(
    @graphql.Args() args: ClreDedVlutPdlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedVlutPdl])
  async clreDedVlutPdls(
    @graphql.Args() args: ClreDedVlutPdlFindManyArgs
  ): Promise<ClreDedVlutPdl[]> {
    return this.service.clreDedVlutPdls(args);
  }

  @graphql.Query(() => ClreDedVlutPdl, { nullable: true })
  async clreDedVlutPdl(
    @graphql.Args() args: ClreDedVlutPdlFindUniqueArgs
  ): Promise<ClreDedVlutPdl | null> {
    const result = await this.service.clreDedVlutPdl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedVlutPdl)
  async createClreDedVlutPdl(
    @graphql.Args() args: CreateClreDedVlutPdlArgs
  ): Promise<ClreDedVlutPdl> {
    return await this.service.createClreDedVlutPdl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedVlutPdl)
  async updateClreDedVlutPdl(
    @graphql.Args() args: UpdateClreDedVlutPdlArgs
  ): Promise<ClreDedVlutPdl | null> {
    try {
      return await this.service.updateClreDedVlutPdl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedVlutPdl)
  async deleteClreDedVlutPdl(
    @graphql.Args() args: DeleteClreDedVlutPdlArgs
  ): Promise<ClreDedVlutPdl | null> {
    try {
      return await this.service.deleteClreDedVlutPdl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
