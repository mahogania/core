/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedPdls } from "./TbClreDedPdls";
import { TbClreDedPdlsCountArgs } from "./TbClreDedPdlsCountArgs";
import { TbClreDedPdlsFindManyArgs } from "./TbClreDedPdlsFindManyArgs";
import { TbClreDedPdlsFindUniqueArgs } from "./TbClreDedPdlsFindUniqueArgs";
import { CreateTbClreDedPdlsArgs } from "./CreateTbClreDedPdlsArgs";
import { UpdateTbClreDedPdlsArgs } from "./UpdateTbClreDedPdlsArgs";
import { DeleteTbClreDedPdlsArgs } from "./DeleteTbClreDedPdlsArgs";
import { TbClreDedPdlsService } from "../tbClreDedPdls.service";
@graphql.Resolver(() => TbClreDedPdls)
export class TbClreDedPdlsResolverBase {
  constructor(protected readonly service: TbClreDedPdlsService) {}

  async _tbClreDedPdlsItemsMeta(
    @graphql.Args() args: TbClreDedPdlsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedPdls])
  async tbClreDedPdlsItems(
    @graphql.Args() args: TbClreDedPdlsFindManyArgs
  ): Promise<TbClreDedPdls[]> {
    return this.service.tbClreDedPdlsItems(args);
  }

  @graphql.Query(() => TbClreDedPdls, { nullable: true })
  async tbClreDedPdls(
    @graphql.Args() args: TbClreDedPdlsFindUniqueArgs
  ): Promise<TbClreDedPdls | null> {
    const result = await this.service.tbClreDedPdls(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedPdls)
  async createTbClreDedPdls(
    @graphql.Args() args: CreateTbClreDedPdlsArgs
  ): Promise<TbClreDedPdls> {
    return await this.service.createTbClreDedPdls({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedPdls)
  async updateTbClreDedPdls(
    @graphql.Args() args: UpdateTbClreDedPdlsArgs
  ): Promise<TbClreDedPdls | null> {
    try {
      return await this.service.updateTbClreDedPdls({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedPdls)
  async deleteTbClreDedPdls(
    @graphql.Args() args: DeleteTbClreDedPdlsArgs
  ): Promise<TbClreDedPdls | null> {
    try {
      return await this.service.deleteTbClreDedPdls(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
