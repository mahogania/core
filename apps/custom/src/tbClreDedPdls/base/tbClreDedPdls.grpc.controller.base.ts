/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { TbClreDedPdlsService } from "../tbClreDedPdls.service";
import { TbClreDedPdlsCreateInput } from "./TbClreDedPdlsCreateInput";
import { TbClreDedPdlsWhereInput } from "./TbClreDedPdlsWhereInput";
import { TbClreDedPdlsWhereUniqueInput } from "./TbClreDedPdlsWhereUniqueInput";
import { TbClreDedPdlsFindManyArgs } from "./TbClreDedPdlsFindManyArgs";
import { TbClreDedPdlsUpdateInput } from "./TbClreDedPdlsUpdateInput";
import { TbClreDedPdls } from "./TbClreDedPdls";

export class TbClreDedPdlsGrpcControllerBase {
  constructor(protected readonly service: TbClreDedPdlsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedPdls })
  @GrpcMethod("TbClreDedPdlsService", "createTbClreDedPdls")
  async createTbClreDedPdls(
    @common.Body() data: TbClreDedPdlsCreateInput
  ): Promise<TbClreDedPdls> {
    return await this.service.createTbClreDedPdls({
      data: data,
      select: {
        aditTxQty: true,
        aditTxQtyUtCd: true,
        apcAtpmEndDt: true,
        apcAtpmStrtDt: true,
        apcCd: true,
        bfDtlDcshDt: true,
        bfDtlDcshNo: true,
        bfPdlsNo: true,
        brndNm: true,
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        hsExcpMtrCd: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnApreNo: true,
        nwprScarCmdtCd: true,
        oilTankNo: true,
        orcyCntyCd: true,
        pckgDesc: true,
        pckgShmrMarkNo: true,
        pdlsClsfBfhnJdgnPn: true,
        pdlsNm: true,
        pdlsNo: true,
        pdlsNtwg: true,
        pdlsPckgGcnt: true,
        pdlsPckgUtCd: true,
        pdlsTtwg: true,
        prcDtrmMeanCd: true,
        prhbCmdtCd: true,
        prvlCd: true,
        psmgtFfmnXpirPrid: true,
        qtaApreNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        regmRqstCd: true,
        trifBaseVal: true,
        updatedAt: true,
        uprPdlsNo: true,
        vhclYn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedPdls] })
  @ApiNestedQuery(TbClreDedPdlsFindManyArgs)
  @GrpcMethod("TbClreDedPdlsService", "tbClreDedPdlsItems")
  async tbClreDedPdlsItems(
    @common.Req() request: Request
  ): Promise<TbClreDedPdls[]> {
    const args = plainToClass(TbClreDedPdlsFindManyArgs, request.query);
    return this.service.tbClreDedPdlsItems({
      ...args,
      select: {
        aditTxQty: true,
        aditTxQtyUtCd: true,
        apcAtpmEndDt: true,
        apcAtpmStrtDt: true,
        apcCd: true,
        bfDtlDcshDt: true,
        bfDtlDcshNo: true,
        bfPdlsNo: true,
        brndNm: true,
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        hsExcpMtrCd: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnApreNo: true,
        nwprScarCmdtCd: true,
        oilTankNo: true,
        orcyCntyCd: true,
        pckgDesc: true,
        pckgShmrMarkNo: true,
        pdlsClsfBfhnJdgnPn: true,
        pdlsNm: true,
        pdlsNo: true,
        pdlsNtwg: true,
        pdlsPckgGcnt: true,
        pdlsPckgUtCd: true,
        pdlsTtwg: true,
        prcDtrmMeanCd: true,
        prhbCmdtCd: true,
        prvlCd: true,
        psmgtFfmnXpirPrid: true,
        qtaApreNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        regmRqstCd: true,
        trifBaseVal: true,
        updatedAt: true,
        uprPdlsNo: true,
        vhclYn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedPdls })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedPdlsService", "tbClreDedPdls")
  async tbClreDedPdls(
    @common.Param() params: TbClreDedPdlsWhereUniqueInput
  ): Promise<TbClreDedPdls | null> {
    const result = await this.service.tbClreDedPdls({
      where: params,
      select: {
        aditTxQty: true,
        aditTxQtyUtCd: true,
        apcAtpmEndDt: true,
        apcAtpmStrtDt: true,
        apcCd: true,
        bfDtlDcshDt: true,
        bfDtlDcshNo: true,
        bfPdlsNo: true,
        brndNm: true,
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        hsExcpMtrCd: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgDscnApreNo: true,
        nwprScarCmdtCd: true,
        oilTankNo: true,
        orcyCntyCd: true,
        pckgDesc: true,
        pckgShmrMarkNo: true,
        pdlsClsfBfhnJdgnPn: true,
        pdlsNm: true,
        pdlsNo: true,
        pdlsNtwg: true,
        pdlsPckgGcnt: true,
        pdlsPckgUtCd: true,
        pdlsTtwg: true,
        prcDtrmMeanCd: true,
        prhbCmdtCd: true,
        prvlCd: true,
        psmgtFfmnXpirPrid: true,
        qtaApreNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        regmRqstCd: true,
        trifBaseVal: true,
        updatedAt: true,
        uprPdlsNo: true,
        vhclYn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedPdls })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedPdlsService", "updateTbClreDedPdls")
  async updateTbClreDedPdls(
    @common.Param() params: TbClreDedPdlsWhereUniqueInput,
    @common.Body() data: TbClreDedPdlsUpdateInput
  ): Promise<TbClreDedPdls | null> {
    try {
      return await this.service.updateTbClreDedPdls({
        where: params,
        data: data,
        select: {
          aditTxQty: true,
          aditTxQtyUtCd: true,
          apcAtpmEndDt: true,
          apcAtpmStrtDt: true,
          apcCd: true,
          bfDtlDcshDt: true,
          bfDtlDcshNo: true,
          bfPdlsNo: true,
          brndNm: true,
          cmdtClsfSpelCd: true,
          createdAt: true,
          delYn: true,
          divdFfmnTpCd: true,
          dlngPdlsNm: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          hsExcpMtrCd: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgDscnApreNo: true,
          nwprScarCmdtCd: true,
          oilTankNo: true,
          orcyCntyCd: true,
          pckgDesc: true,
          pckgShmrMarkNo: true,
          pdlsClsfBfhnJdgnPn: true,
          pdlsNm: true,
          pdlsNo: true,
          pdlsNtwg: true,
          pdlsPckgGcnt: true,
          pdlsPckgUtCd: true,
          pdlsTtwg: true,
          prcDtrmMeanCd: true,
          prhbCmdtCd: true,
          prvlCd: true,
          psmgtFfmnXpirPrid: true,
          qtaApreNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          regmRqstCd: true,
          trifBaseVal: true,
          updatedAt: true,
          uprPdlsNo: true,
          vhclYn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedPdls })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedPdlsService", "deleteTbClreDedPdls")
  async deleteTbClreDedPdls(
    @common.Param() params: TbClreDedPdlsWhereUniqueInput
  ): Promise<TbClreDedPdls | null> {
    try {
      return await this.service.deleteTbClreDedPdls({
        where: params,
        select: {
          aditTxQty: true,
          aditTxQtyUtCd: true,
          apcAtpmEndDt: true,
          apcAtpmStrtDt: true,
          apcCd: true,
          bfDtlDcshDt: true,
          bfDtlDcshNo: true,
          bfPdlsNo: true,
          brndNm: true,
          cmdtClsfSpelCd: true,
          createdAt: true,
          delYn: true,
          divdFfmnTpCd: true,
          dlngPdlsNm: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          hsExcpMtrCd: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgDscnApreNo: true,
          nwprScarCmdtCd: true,
          oilTankNo: true,
          orcyCntyCd: true,
          pckgDesc: true,
          pckgShmrMarkNo: true,
          pdlsClsfBfhnJdgnPn: true,
          pdlsNm: true,
          pdlsNo: true,
          pdlsNtwg: true,
          pdlsPckgGcnt: true,
          pdlsPckgUtCd: true,
          pdlsTtwg: true,
          prcDtrmMeanCd: true,
          prhbCmdtCd: true,
          prvlCd: true,
          psmgtFfmnXpirPrid: true,
          qtaApreNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          regmRqstCd: true,
          trifBaseVal: true,
          updatedAt: true,
          uprPdlsNo: true,
          vhclYn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
