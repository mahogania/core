/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedPdls } from "./ClreDedPdls";
import { ClreDedPdlsCountArgs } from "./ClreDedPdlsCountArgs";
import { ClreDedPdlsFindManyArgs } from "./ClreDedPdlsFindManyArgs";
import { ClreDedPdlsFindUniqueArgs } from "./ClreDedPdlsFindUniqueArgs";
import { CreateClreDedPdlsArgs } from "./CreateClreDedPdlsArgs";
import { UpdateClreDedPdlsArgs } from "./UpdateClreDedPdlsArgs";
import { DeleteClreDedPdlsArgs } from "./DeleteClreDedPdlsArgs";
import { ClreDedPdlsService } from "../clreDedPdls.service";
@graphql.Resolver(() => ClreDedPdls)
export class ClreDedPdlsResolverBase {
  constructor(protected readonly service: ClreDedPdlsService) {}

  async _clreDedPdlsItemsMeta(
    @graphql.Args() args: ClreDedPdlsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedPdls])
  async clreDedPdlsItems(
    @graphql.Args() args: ClreDedPdlsFindManyArgs
  ): Promise<ClreDedPdls[]> {
    return this.service.clreDedPdlsItems(args);
  }

  @graphql.Query(() => ClreDedPdls, { nullable: true })
  async clreDedPdls(
    @graphql.Args() args: ClreDedPdlsFindUniqueArgs
  ): Promise<ClreDedPdls | null> {
    const result = await this.service.clreDedPdls(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedPdls)
  async createClreDedPdls(
    @graphql.Args() args: CreateClreDedPdlsArgs
  ): Promise<ClreDedPdls> {
    return await this.service.createClreDedPdls({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedPdls)
  async updateClreDedPdls(
    @graphql.Args() args: UpdateClreDedPdlsArgs
  ): Promise<ClreDedPdls | null> {
    try {
      return await this.service.updateClreDedPdls({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedPdls)
  async deleteClreDedPdls(
    @graphql.Args() args: DeleteClreDedPdlsArgs
  ): Promise<ClreDedPdls | null> {
    try {
      return await this.service.deleteClreDedPdls(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
