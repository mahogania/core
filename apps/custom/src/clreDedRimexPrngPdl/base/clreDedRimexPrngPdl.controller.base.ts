/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClreDedRimexPrngPdlService } from "../clreDedRimexPrngPdl.service";
import { ClreDedRimexPrngPdlCreateInput } from "./ClreDedRimexPrngPdlCreateInput";
import { ClreDedRimexPrngPdl } from "./ClreDedRimexPrngPdl";
import { ClreDedRimexPrngPdlFindManyArgs } from "./ClreDedRimexPrngPdlFindManyArgs";
import { ClreDedRimexPrngPdlWhereUniqueInput } from "./ClreDedRimexPrngPdlWhereUniqueInput";
import { ClreDedRimexPrngPdlUpdateInput } from "./ClreDedRimexPrngPdlUpdateInput";

export class ClreDedRimexPrngPdlControllerBase {
  constructor(protected readonly service: ClreDedRimexPrngPdlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClreDedRimexPrngPdl })
  @swagger.ApiBody({
    type: ClreDedRimexPrngPdlCreateInput,
  })
  async createClreDedRimexPrngPdl(
    @common.Body() data: ClreDedRimexPrngPdlCreateInput
  ): Promise<ClreDedRimexPrngPdl> {
    return await this.service.createClreDedRimexPrngPdl({
      data: data,
      select: {
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        orcyCntyCd: true,
        pdlsNm: true,
        pdlsNtwg: true,
        pdlsTtwg: true,
        prngPdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClreDedRimexPrngPdl] })
  @ApiNestedQuery(ClreDedRimexPrngPdlFindManyArgs)
  async clreDedRimexPrngPdls(
    @common.Req() request: Request
  ): Promise<ClreDedRimexPrngPdl[]> {
    const args = plainToClass(ClreDedRimexPrngPdlFindManyArgs, request.query);
    return this.service.clreDedRimexPrngPdls({
      ...args,
      select: {
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        orcyCntyCd: true,
        pdlsNm: true,
        pdlsNtwg: true,
        pdlsTtwg: true,
        prngPdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClreDedRimexPrngPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clreDedRimexPrngPdl(
    @common.Param() params: ClreDedRimexPrngPdlWhereUniqueInput
  ): Promise<ClreDedRimexPrngPdl | null> {
    const result = await this.service.clreDedRimexPrngPdl({
      where: params,
      select: {
        cmdtClsfSpelCd: true,
        createdAt: true,
        delYn: true,
        dlngPdlsNm: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        hsCd: true,
        hsErrPvntVal: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        orcyCntyCd: true,
        pdlsNm: true,
        pdlsNtwg: true,
        pdlsTtwg: true,
        prngPdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClreDedRimexPrngPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ClreDedRimexPrngPdlUpdateInput,
  })
  async updateClreDedRimexPrngPdl(
    @common.Param() params: ClreDedRimexPrngPdlWhereUniqueInput,
    @common.Body() data: ClreDedRimexPrngPdlUpdateInput
  ): Promise<ClreDedRimexPrngPdl | null> {
    try {
      return await this.service.updateClreDedRimexPrngPdl({
        where: params,
        data: data,
        select: {
          cmdtClsfSpelCd: true,
          createdAt: true,
          delYn: true,
          dlngPdlsNm: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          orcyCntyCd: true,
          pdlsNm: true,
          pdlsNtwg: true,
          pdlsTtwg: true,
          prngPdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClreDedRimexPrngPdl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClreDedRimexPrngPdl(
    @common.Param() params: ClreDedRimexPrngPdlWhereUniqueInput
  ): Promise<ClreDedRimexPrngPdl | null> {
    try {
      return await this.service.deleteClreDedRimexPrngPdl({
        where: params,
        select: {
          cmdtClsfSpelCd: true,
          createdAt: true,
          delYn: true,
          dlngPdlsNm: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          hsCd: true,
          hsErrPvntVal: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          orcyCntyCd: true,
          pdlsNm: true,
          pdlsNtwg: true,
          pdlsTtwg: true,
          prngPdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
