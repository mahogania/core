/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedRimexPrngPdl } from "./ClreDedRimexPrngPdl";
import { ClreDedRimexPrngPdlCountArgs } from "./ClreDedRimexPrngPdlCountArgs";
import { ClreDedRimexPrngPdlFindManyArgs } from "./ClreDedRimexPrngPdlFindManyArgs";
import { ClreDedRimexPrngPdlFindUniqueArgs } from "./ClreDedRimexPrngPdlFindUniqueArgs";
import { CreateClreDedRimexPrngPdlArgs } from "./CreateClreDedRimexPrngPdlArgs";
import { UpdateClreDedRimexPrngPdlArgs } from "./UpdateClreDedRimexPrngPdlArgs";
import { DeleteClreDedRimexPrngPdlArgs } from "./DeleteClreDedRimexPrngPdlArgs";
import { ClreDedRimexPrngPdlService } from "../clreDedRimexPrngPdl.service";
@graphql.Resolver(() => ClreDedRimexPrngPdl)
export class ClreDedRimexPrngPdlResolverBase {
  constructor(protected readonly service: ClreDedRimexPrngPdlService) {}

  async _clreDedRimexPrngPdlsMeta(
    @graphql.Args() args: ClreDedRimexPrngPdlCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedRimexPrngPdl])
  async clreDedRimexPrngPdls(
    @graphql.Args() args: ClreDedRimexPrngPdlFindManyArgs
  ): Promise<ClreDedRimexPrngPdl[]> {
    return this.service.clreDedRimexPrngPdls(args);
  }

  @graphql.Query(() => ClreDedRimexPrngPdl, { nullable: true })
  async clreDedRimexPrngPdl(
    @graphql.Args() args: ClreDedRimexPrngPdlFindUniqueArgs
  ): Promise<ClreDedRimexPrngPdl | null> {
    const result = await this.service.clreDedRimexPrngPdl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedRimexPrngPdl)
  async createClreDedRimexPrngPdl(
    @graphql.Args() args: CreateClreDedRimexPrngPdlArgs
  ): Promise<ClreDedRimexPrngPdl> {
    return await this.service.createClreDedRimexPrngPdl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedRimexPrngPdl)
  async updateClreDedRimexPrngPdl(
    @graphql.Args() args: UpdateClreDedRimexPrngPdlArgs
  ): Promise<ClreDedRimexPrngPdl | null> {
    try {
      return await this.service.updateClreDedRimexPrngPdl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedRimexPrngPdl)
  async deleteClreDedRimexPrngPdl(
    @graphql.Args() args: DeleteClreDedRimexPrngPdlArgs
  ): Promise<ClreDedRimexPrngPdl | null> {
    try {
      return await this.service.deleteClreDedRimexPrngPdl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
