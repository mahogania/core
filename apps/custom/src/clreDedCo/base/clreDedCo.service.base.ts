/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClreDedCo as PrismaClreDedCo } from "@prisma/client";

export class ClreDedCoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClreDedCoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clreDedCo.count(args);
  }

  async clreDedCos(
    args: Prisma.ClreDedCoFindManyArgs
  ): Promise<PrismaClreDedCo[]> {
    return this.prisma.clreDedCo.findMany(args);
  }
  async clreDedCo(
    args: Prisma.ClreDedCoFindUniqueArgs
  ): Promise<PrismaClreDedCo | null> {
    return this.prisma.clreDedCo.findUnique(args);
  }
  async createClreDedCo(
    args: Prisma.ClreDedCoCreateArgs
  ): Promise<PrismaClreDedCo> {
    return this.prisma.clreDedCo.create(args);
  }
  async updateClreDedCo(
    args: Prisma.ClreDedCoUpdateArgs
  ): Promise<PrismaClreDedCo> {
    return this.prisma.clreDedCo.update(args);
  }
  async deleteClreDedCo(
    args: Prisma.ClreDedCoDeleteArgs
  ): Promise<PrismaClreDedCo> {
    return this.prisma.clreDedCo.delete(args);
  }
}
