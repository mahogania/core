/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedCo } from "./ClreDedCo";
import { ClreDedCoCountArgs } from "./ClreDedCoCountArgs";
import { ClreDedCoFindManyArgs } from "./ClreDedCoFindManyArgs";
import { ClreDedCoFindUniqueArgs } from "./ClreDedCoFindUniqueArgs";
import { CreateClreDedCoArgs } from "./CreateClreDedCoArgs";
import { UpdateClreDedCoArgs } from "./UpdateClreDedCoArgs";
import { DeleteClreDedCoArgs } from "./DeleteClreDedCoArgs";
import { ClreDedCoService } from "../clreDedCo.service";
@graphql.Resolver(() => ClreDedCo)
export class ClreDedCoResolverBase {
  constructor(protected readonly service: ClreDedCoService) {}

  async _clreDedCosMeta(
    @graphql.Args() args: ClreDedCoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedCo])
  async clreDedCos(
    @graphql.Args() args: ClreDedCoFindManyArgs
  ): Promise<ClreDedCo[]> {
    return this.service.clreDedCos(args);
  }

  @graphql.Query(() => ClreDedCo, { nullable: true })
  async clreDedCo(
    @graphql.Args() args: ClreDedCoFindUniqueArgs
  ): Promise<ClreDedCo | null> {
    const result = await this.service.clreDedCo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedCo)
  async createClreDedCo(
    @graphql.Args() args: CreateClreDedCoArgs
  ): Promise<ClreDedCo> {
    return await this.service.createClreDedCo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedCo)
  async updateClreDedCo(
    @graphql.Args() args: UpdateClreDedCoArgs
  ): Promise<ClreDedCo | null> {
    try {
      return await this.service.updateClreDedCo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedCo)
  async deleteClreDedCo(
    @graphql.Args() args: DeleteClreDedCoArgs
  ): Promise<ClreDedCo | null> {
    try {
      return await this.service.deleteClreDedCo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
