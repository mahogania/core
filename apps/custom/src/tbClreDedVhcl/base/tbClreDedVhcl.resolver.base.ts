/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedVhcl } from "./TbClreDedVhcl";
import { TbClreDedVhclCountArgs } from "./TbClreDedVhclCountArgs";
import { TbClreDedVhclFindManyArgs } from "./TbClreDedVhclFindManyArgs";
import { TbClreDedVhclFindUniqueArgs } from "./TbClreDedVhclFindUniqueArgs";
import { CreateTbClreDedVhclArgs } from "./CreateTbClreDedVhclArgs";
import { UpdateTbClreDedVhclArgs } from "./UpdateTbClreDedVhclArgs";
import { DeleteTbClreDedVhclArgs } from "./DeleteTbClreDedVhclArgs";
import { TbClreDedVhclService } from "../tbClreDedVhcl.service";
@graphql.Resolver(() => TbClreDedVhcl)
export class TbClreDedVhclResolverBase {
  constructor(protected readonly service: TbClreDedVhclService) {}

  async _tbClreDedVhclsMeta(
    @graphql.Args() args: TbClreDedVhclCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedVhcl])
  async tbClreDedVhcls(
    @graphql.Args() args: TbClreDedVhclFindManyArgs
  ): Promise<TbClreDedVhcl[]> {
    return this.service.tbClreDedVhcls(args);
  }

  @graphql.Query(() => TbClreDedVhcl, { nullable: true })
  async tbClreDedVhcl(
    @graphql.Args() args: TbClreDedVhclFindUniqueArgs
  ): Promise<TbClreDedVhcl | null> {
    const result = await this.service.tbClreDedVhcl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedVhcl)
  async createTbClreDedVhcl(
    @graphql.Args() args: CreateTbClreDedVhclArgs
  ): Promise<TbClreDedVhcl> {
    return await this.service.createTbClreDedVhcl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedVhcl)
  async updateTbClreDedVhcl(
    @graphql.Args() args: UpdateTbClreDedVhclArgs
  ): Promise<TbClreDedVhcl | null> {
    try {
      return await this.service.updateTbClreDedVhcl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedVhcl)
  async deleteTbClreDedVhcl(
    @graphql.Args() args: DeleteTbClreDedVhclArgs
  ): Promise<TbClreDedVhcl | null> {
    try {
      return await this.service.deleteTbClreDedVhcl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
