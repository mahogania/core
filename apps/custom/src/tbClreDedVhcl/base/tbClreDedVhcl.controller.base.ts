/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TbClreDedVhclService } from "../tbClreDedVhcl.service";
import { TbClreDedVhclCreateInput } from "./TbClreDedVhclCreateInput";
import { TbClreDedVhcl } from "./TbClreDedVhcl";
import { TbClreDedVhclFindManyArgs } from "./TbClreDedVhclFindManyArgs";
import { TbClreDedVhclWhereUniqueInput } from "./TbClreDedVhclWhereUniqueInput";
import { TbClreDedVhclUpdateInput } from "./TbClreDedVhclUpdateInput";

export class TbClreDedVhclControllerBase {
  constructor(protected readonly service: TbClreDedVhclService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedVhcl })
  @swagger.ApiBody({
    type: TbClreDedVhclCreateInput,
  })
  async createTbClreDedVhcl(
    @common.Body() data: TbClreDedVhclCreateInput
  ): Promise<TbClreDedVhcl> {
    return await this.service.createTbClreDedVhcl({
      data: data,
      select: {
        caboNm: true,
        carRgsrNo: true,
        chssNo: true,
        clrNm: true,
        createdAt: true,
        delYn: true,
        dpcmtCn: true,
        drvrAddr: true,
        drvrNm: true,
        drvrPostNo: true,
        flKndNm: true,
        frstOpraDt: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        impPtNm: true,
        lastChgDttm: true,
        lastChprId: true,
        loadWghtCn: true,
        mdfyDgcnt: true,
        mdlStszNo: true,
        mkngYy: true,
        otptCn: true,
        pdlsNo: true,
        reffNo: true,
        stcnt: true,
        tpdMgmtNo: true,
        trsfNnprEndDt: true,
        trsfNnprStrtDt: true,
        trsfNnprYn: true,
        updatedAt: true,
        vhclKndCd: true,
        vhclKndNm: true,
        vhclMdlCd: true,
        vhclMnurCd: true,
        vhclReleDt: true,
        vhclWghtCn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedVhcl] })
  @ApiNestedQuery(TbClreDedVhclFindManyArgs)
  async tbClreDedVhcls(
    @common.Req() request: Request
  ): Promise<TbClreDedVhcl[]> {
    const args = plainToClass(TbClreDedVhclFindManyArgs, request.query);
    return this.service.tbClreDedVhcls({
      ...args,
      select: {
        caboNm: true,
        carRgsrNo: true,
        chssNo: true,
        clrNm: true,
        createdAt: true,
        delYn: true,
        dpcmtCn: true,
        drvrAddr: true,
        drvrNm: true,
        drvrPostNo: true,
        flKndNm: true,
        frstOpraDt: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        impPtNm: true,
        lastChgDttm: true,
        lastChprId: true,
        loadWghtCn: true,
        mdfyDgcnt: true,
        mdlStszNo: true,
        mkngYy: true,
        otptCn: true,
        pdlsNo: true,
        reffNo: true,
        stcnt: true,
        tpdMgmtNo: true,
        trsfNnprEndDt: true,
        trsfNnprStrtDt: true,
        trsfNnprYn: true,
        updatedAt: true,
        vhclKndCd: true,
        vhclKndNm: true,
        vhclMdlCd: true,
        vhclMnurCd: true,
        vhclReleDt: true,
        vhclWghtCn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedVhcl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tbClreDedVhcl(
    @common.Param() params: TbClreDedVhclWhereUniqueInput
  ): Promise<TbClreDedVhcl | null> {
    const result = await this.service.tbClreDedVhcl({
      where: params,
      select: {
        caboNm: true,
        carRgsrNo: true,
        chssNo: true,
        clrNm: true,
        createdAt: true,
        delYn: true,
        dpcmtCn: true,
        drvrAddr: true,
        drvrNm: true,
        drvrPostNo: true,
        flKndNm: true,
        frstOpraDt: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        impPtNm: true,
        lastChgDttm: true,
        lastChprId: true,
        loadWghtCn: true,
        mdfyDgcnt: true,
        mdlStszNo: true,
        mkngYy: true,
        otptCn: true,
        pdlsNo: true,
        reffNo: true,
        stcnt: true,
        tpdMgmtNo: true,
        trsfNnprEndDt: true,
        trsfNnprStrtDt: true,
        trsfNnprYn: true,
        updatedAt: true,
        vhclKndCd: true,
        vhclKndNm: true,
        vhclMdlCd: true,
        vhclMnurCd: true,
        vhclReleDt: true,
        vhclWghtCn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedVhcl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: TbClreDedVhclUpdateInput,
  })
  async updateTbClreDedVhcl(
    @common.Param() params: TbClreDedVhclWhereUniqueInput,
    @common.Body() data: TbClreDedVhclUpdateInput
  ): Promise<TbClreDedVhcl | null> {
    try {
      return await this.service.updateTbClreDedVhcl({
        where: params,
        data: data,
        select: {
          caboNm: true,
          carRgsrNo: true,
          chssNo: true,
          clrNm: true,
          createdAt: true,
          delYn: true,
          dpcmtCn: true,
          drvrAddr: true,
          drvrNm: true,
          drvrPostNo: true,
          flKndNm: true,
          frstOpraDt: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          impPtNm: true,
          lastChgDttm: true,
          lastChprId: true,
          loadWghtCn: true,
          mdfyDgcnt: true,
          mdlStszNo: true,
          mkngYy: true,
          otptCn: true,
          pdlsNo: true,
          reffNo: true,
          stcnt: true,
          tpdMgmtNo: true,
          trsfNnprEndDt: true,
          trsfNnprStrtDt: true,
          trsfNnprYn: true,
          updatedAt: true,
          vhclKndCd: true,
          vhclKndNm: true,
          vhclMdlCd: true,
          vhclMnurCd: true,
          vhclReleDt: true,
          vhclWghtCn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedVhcl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTbClreDedVhcl(
    @common.Param() params: TbClreDedVhclWhereUniqueInput
  ): Promise<TbClreDedVhcl | null> {
    try {
      return await this.service.deleteTbClreDedVhcl({
        where: params,
        select: {
          caboNm: true,
          carRgsrNo: true,
          chssNo: true,
          clrNm: true,
          createdAt: true,
          delYn: true,
          dpcmtCn: true,
          drvrAddr: true,
          drvrNm: true,
          drvrPostNo: true,
          flKndNm: true,
          frstOpraDt: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          impPtNm: true,
          lastChgDttm: true,
          lastChprId: true,
          loadWghtCn: true,
          mdfyDgcnt: true,
          mdlStszNo: true,
          mkngYy: true,
          otptCn: true,
          pdlsNo: true,
          reffNo: true,
          stcnt: true,
          tpdMgmtNo: true,
          trsfNnprEndDt: true,
          trsfNnprStrtDt: true,
          trsfNnprYn: true,
          updatedAt: true,
          vhclKndCd: true,
          vhclKndNm: true,
          vhclMdlCd: true,
          vhclMnurCd: true,
          vhclReleDt: true,
          vhclWghtCn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
