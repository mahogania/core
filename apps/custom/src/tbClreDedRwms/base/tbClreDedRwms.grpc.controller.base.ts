/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { TbClreDedRwmsService } from "../tbClreDedRwms.service";
import { TbClreDedRwmsCreateInput } from "./TbClreDedRwmsCreateInput";
import { TbClreDedRwmsWhereInput } from "./TbClreDedRwmsWhereInput";
import { TbClreDedRwmsWhereUniqueInput } from "./TbClreDedRwmsWhereUniqueInput";
import { TbClreDedRwmsFindManyArgs } from "./TbClreDedRwmsFindManyArgs";
import { TbClreDedRwmsUpdateInput } from "./TbClreDedRwmsUpdateInput";
import { TbClreDedRwms } from "./TbClreDedRwms";

export class TbClreDedRwmsGrpcControllerBase {
  constructor(protected readonly service: TbClreDedRwmsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedRwms })
  @GrpcMethod("TbClreDedRwmsService", "createTbClreDedRwms")
  async createTbClreDedRwms(
    @common.Body() data: TbClreDedRwmsCreateInput
  ): Promise<TbClreDedRwms> {
    return await this.service.createTbClreDedRwms({
      data: data,
      select: {
        bfCmdtClsfSpelCd: true,
        bfDtlDcshNo: true,
        bfHsCd: true,
        bfPdlsNo: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        ntwg: true,
        pdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        rwmsSrno: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedRwms] })
  @ApiNestedQuery(TbClreDedRwmsFindManyArgs)
  @GrpcMethod("TbClreDedRwmsService", "tbClreDedRwmsItems")
  async tbClreDedRwmsItems(
    @common.Req() request: Request
  ): Promise<TbClreDedRwms[]> {
    const args = plainToClass(TbClreDedRwmsFindManyArgs, request.query);
    return this.service.tbClreDedRwmsItems({
      ...args,
      select: {
        bfCmdtClsfSpelCd: true,
        bfDtlDcshNo: true,
        bfHsCd: true,
        bfPdlsNo: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        ntwg: true,
        pdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        rwmsSrno: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedRwms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedRwmsService", "tbClreDedRwms")
  async tbClreDedRwms(
    @common.Param() params: TbClreDedRwmsWhereUniqueInput
  ): Promise<TbClreDedRwms | null> {
    const result = await this.service.tbClreDedRwms({
      where: params,
      select: {
        bfCmdtClsfSpelCd: true,
        bfDtlDcshNo: true,
        bfHsCd: true,
        bfPdlsNo: true,
        createdAt: true,
        delYn: true,
        divdFfmnTpCd: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        ntwg: true,
        pdlsNo: true,
        qty: true,
        qtyUtCd: true,
        reffNo: true,
        rwmsSrno: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedRwms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedRwmsService", "updateTbClreDedRwms")
  async updateTbClreDedRwms(
    @common.Param() params: TbClreDedRwmsWhereUniqueInput,
    @common.Body() data: TbClreDedRwmsUpdateInput
  ): Promise<TbClreDedRwms | null> {
    try {
      return await this.service.updateTbClreDedRwms({
        where: params,
        data: data,
        select: {
          bfCmdtClsfSpelCd: true,
          bfDtlDcshNo: true,
          bfHsCd: true,
          bfPdlsNo: true,
          createdAt: true,
          delYn: true,
          divdFfmnTpCd: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          ntwg: true,
          pdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          rwmsSrno: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedRwms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedRwmsService", "deleteTbClreDedRwms")
  async deleteTbClreDedRwms(
    @common.Param() params: TbClreDedRwmsWhereUniqueInput
  ): Promise<TbClreDedRwms | null> {
    try {
      return await this.service.deleteTbClreDedRwms({
        where: params,
        select: {
          bfCmdtClsfSpelCd: true,
          bfDtlDcshNo: true,
          bfHsCd: true,
          bfPdlsNo: true,
          createdAt: true,
          delYn: true,
          divdFfmnTpCd: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          ntwg: true,
          pdlsNo: true,
          qty: true,
          qtyUtCd: true,
          reffNo: true,
          rwmsSrno: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
