/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedRwms } from "./TbClreDedRwms";
import { TbClreDedRwmsCountArgs } from "./TbClreDedRwmsCountArgs";
import { TbClreDedRwmsFindManyArgs } from "./TbClreDedRwmsFindManyArgs";
import { TbClreDedRwmsFindUniqueArgs } from "./TbClreDedRwmsFindUniqueArgs";
import { CreateTbClreDedRwmsArgs } from "./CreateTbClreDedRwmsArgs";
import { UpdateTbClreDedRwmsArgs } from "./UpdateTbClreDedRwmsArgs";
import { DeleteTbClreDedRwmsArgs } from "./DeleteTbClreDedRwmsArgs";
import { TbClreDedRwmsService } from "../tbClreDedRwms.service";
@graphql.Resolver(() => TbClreDedRwms)
export class TbClreDedRwmsResolverBase {
  constructor(protected readonly service: TbClreDedRwmsService) {}

  async _tbClreDedRwmsItemsMeta(
    @graphql.Args() args: TbClreDedRwmsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedRwms])
  async tbClreDedRwmsItems(
    @graphql.Args() args: TbClreDedRwmsFindManyArgs
  ): Promise<TbClreDedRwms[]> {
    return this.service.tbClreDedRwmsItems(args);
  }

  @graphql.Query(() => TbClreDedRwms, { nullable: true })
  async tbClreDedRwms(
    @graphql.Args() args: TbClreDedRwmsFindUniqueArgs
  ): Promise<TbClreDedRwms | null> {
    const result = await this.service.tbClreDedRwms(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedRwms)
  async createTbClreDedRwms(
    @graphql.Args() args: CreateTbClreDedRwmsArgs
  ): Promise<TbClreDedRwms> {
    return await this.service.createTbClreDedRwms({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedRwms)
  async updateTbClreDedRwms(
    @graphql.Args() args: UpdateTbClreDedRwmsArgs
  ): Promise<TbClreDedRwms | null> {
    try {
      return await this.service.updateTbClreDedRwms({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedRwms)
  async deleteTbClreDedRwms(
    @graphql.Args() args: DeleteTbClreDedRwmsArgs
  ): Promise<TbClreDedRwms | null> {
    try {
      return await this.service.deleteTbClreDedRwms(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
