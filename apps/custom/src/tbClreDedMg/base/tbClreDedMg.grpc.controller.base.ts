/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { TbClreDedMgService } from "../tbClreDedMg.service";
import { TbClreDedMgCreateInput } from "./TbClreDedMgCreateInput";
import { TbClreDedMgWhereInput } from "./TbClreDedMgWhereInput";
import { TbClreDedMgWhereUniqueInput } from "./TbClreDedMgWhereUniqueInput";
import { TbClreDedMgFindManyArgs } from "./TbClreDedMgFindManyArgs";
import { TbClreDedMgUpdateInput } from "./TbClreDedMgUpdateInput";
import { TbClreDedMg } from "./TbClreDedMg";

export class TbClreDedMgGrpcControllerBase {
  constructor(protected readonly service: TbClreDedMgService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TbClreDedMg })
  @GrpcMethod("TbClreDedMgService", "createTbClreDedMg")
  async createTbClreDedMg(
    @common.Body() data: TbClreDedMgCreateInput
  ): Promise<TbClreDedMg> {
    return await this.service.createTbClreDedMg({
      data: data,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgAcNo: true,
        mgTpCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TbClreDedMg] })
  @ApiNestedQuery(TbClreDedMgFindManyArgs)
  @GrpcMethod("TbClreDedMgService", "tbClreDedMgs")
  async tbClreDedMgs(@common.Req() request: Request): Promise<TbClreDedMg[]> {
    const args = plainToClass(TbClreDedMgFindManyArgs, request.query);
    return this.service.tbClreDedMgs({
      ...args,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgAcNo: true,
        mgTpCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedMg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedMgService", "tbClreDedMg")
  async tbClreDedMg(
    @common.Param() params: TbClreDedMgWhereUniqueInput
  ): Promise<TbClreDedMg | null> {
    const result = await this.service.tbClreDedMg({
      where: params,
      select: {
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mdfyDgcnt: true,
        mgAcNo: true,
        mgTpCd: true,
        reffNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedMg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedMgService", "updateTbClreDedMg")
  async updateTbClreDedMg(
    @common.Param() params: TbClreDedMgWhereUniqueInput,
    @common.Body() data: TbClreDedMgUpdateInput
  ): Promise<TbClreDedMg | null> {
    try {
      return await this.service.updateTbClreDedMg({
        where: params,
        data: data,
        select: {
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgAcNo: true,
          mgTpCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TbClreDedMg })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("TbClreDedMgService", "deleteTbClreDedMg")
  async deleteTbClreDedMg(
    @common.Param() params: TbClreDedMgWhereUniqueInput
  ): Promise<TbClreDedMg | null> {
    try {
      return await this.service.deleteTbClreDedMg({
        where: params,
        select: {
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mdfyDgcnt: true,
          mgAcNo: true,
          mgTpCd: true,
          reffNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
