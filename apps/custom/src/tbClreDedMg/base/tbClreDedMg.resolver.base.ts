/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TbClreDedMg } from "./TbClreDedMg";
import { TbClreDedMgCountArgs } from "./TbClreDedMgCountArgs";
import { TbClreDedMgFindManyArgs } from "./TbClreDedMgFindManyArgs";
import { TbClreDedMgFindUniqueArgs } from "./TbClreDedMgFindUniqueArgs";
import { CreateTbClreDedMgArgs } from "./CreateTbClreDedMgArgs";
import { UpdateTbClreDedMgArgs } from "./UpdateTbClreDedMgArgs";
import { DeleteTbClreDedMgArgs } from "./DeleteTbClreDedMgArgs";
import { TbClreDedMgService } from "../tbClreDedMg.service";
@graphql.Resolver(() => TbClreDedMg)
export class TbClreDedMgResolverBase {
  constructor(protected readonly service: TbClreDedMgService) {}

  async _tbClreDedMgsMeta(
    @graphql.Args() args: TbClreDedMgCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TbClreDedMg])
  async tbClreDedMgs(
    @graphql.Args() args: TbClreDedMgFindManyArgs
  ): Promise<TbClreDedMg[]> {
    return this.service.tbClreDedMgs(args);
  }

  @graphql.Query(() => TbClreDedMg, { nullable: true })
  async tbClreDedMg(
    @graphql.Args() args: TbClreDedMgFindUniqueArgs
  ): Promise<TbClreDedMg | null> {
    const result = await this.service.tbClreDedMg(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TbClreDedMg)
  async createTbClreDedMg(
    @graphql.Args() args: CreateTbClreDedMgArgs
  ): Promise<TbClreDedMg> {
    return await this.service.createTbClreDedMg({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TbClreDedMg)
  async updateTbClreDedMg(
    @graphql.Args() args: UpdateTbClreDedMgArgs
  ): Promise<TbClreDedMg | null> {
    try {
      return await this.service.updateTbClreDedMg({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TbClreDedMg)
  async deleteTbClreDedMg(
    @graphql.Args() args: DeleteTbClreDedMgArgs
  ): Promise<TbClreDedMg | null> {
    try {
      return await this.service.deleteTbClreDedMg(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
