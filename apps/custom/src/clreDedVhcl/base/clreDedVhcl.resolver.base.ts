/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClreDedVhcl } from "./ClreDedVhcl";
import { ClreDedVhclCountArgs } from "./ClreDedVhclCountArgs";
import { ClreDedVhclFindManyArgs } from "./ClreDedVhclFindManyArgs";
import { ClreDedVhclFindUniqueArgs } from "./ClreDedVhclFindUniqueArgs";
import { CreateClreDedVhclArgs } from "./CreateClreDedVhclArgs";
import { UpdateClreDedVhclArgs } from "./UpdateClreDedVhclArgs";
import { DeleteClreDedVhclArgs } from "./DeleteClreDedVhclArgs";
import { ClreDedVhclService } from "../clreDedVhcl.service";
@graphql.Resolver(() => ClreDedVhcl)
export class ClreDedVhclResolverBase {
  constructor(protected readonly service: ClreDedVhclService) {}

  async _clreDedVhclsMeta(
    @graphql.Args() args: ClreDedVhclCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClreDedVhcl])
  async clreDedVhcls(
    @graphql.Args() args: ClreDedVhclFindManyArgs
  ): Promise<ClreDedVhcl[]> {
    return this.service.clreDedVhcls(args);
  }

  @graphql.Query(() => ClreDedVhcl, { nullable: true })
  async clreDedVhcl(
    @graphql.Args() args: ClreDedVhclFindUniqueArgs
  ): Promise<ClreDedVhcl | null> {
    const result = await this.service.clreDedVhcl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClreDedVhcl)
  async createClreDedVhcl(
    @graphql.Args() args: CreateClreDedVhclArgs
  ): Promise<ClreDedVhcl> {
    return await this.service.createClreDedVhcl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClreDedVhcl)
  async updateClreDedVhcl(
    @graphql.Args() args: UpdateClreDedVhclArgs
  ): Promise<ClreDedVhcl | null> {
    try {
      return await this.service.updateClreDedVhcl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClreDedVhcl)
  async deleteClreDedVhcl(
    @graphql.Args() args: DeleteClreDedVhclArgs
  ): Promise<ClreDedVhcl | null> {
    try {
      return await this.service.deleteClreDedVhcl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
