/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureImmunities } from "./CreatureImmunities";
import { CreatureImmunitiesCountArgs } from "./CreatureImmunitiesCountArgs";
import { CreatureImmunitiesFindManyArgs } from "./CreatureImmunitiesFindManyArgs";
import { CreatureImmunitiesFindUniqueArgs } from "./CreatureImmunitiesFindUniqueArgs";
import { CreateCreatureImmunitiesArgs } from "./CreateCreatureImmunitiesArgs";
import { UpdateCreatureImmunitiesArgs } from "./UpdateCreatureImmunitiesArgs";
import { DeleteCreatureImmunitiesArgs } from "./DeleteCreatureImmunitiesArgs";
import { CreatureImmunitiesService } from "../creatureImmunities.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureImmunities)
export class CreatureImmunitiesResolverBase {
  constructor(
    protected readonly service: CreatureImmunitiesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunities",
    action: "read",
    possession: "any",
  })
  async _creatureImmunitiesItemsMeta(
    @graphql.Args() args: CreatureImmunitiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureImmunities])
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunities",
    action: "read",
    possession: "any",
  })
  async creatureImmunitiesItems(
    @graphql.Args() args: CreatureImmunitiesFindManyArgs
  ): Promise<CreatureImmunities[]> {
    return this.service.creatureImmunitiesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureImmunities, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunities",
    action: "read",
    possession: "own",
  })
  async creatureImmunities(
    @graphql.Args() args: CreatureImmunitiesFindUniqueArgs
  ): Promise<CreatureImmunities | null> {
    const result = await this.service.creatureImmunities(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureImmunities)
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunities",
    action: "create",
    possession: "any",
  })
  async createCreatureImmunities(
    @graphql.Args() args: CreateCreatureImmunitiesArgs
  ): Promise<CreatureImmunities> {
    return await this.service.createCreatureImmunities({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureImmunities)
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunities",
    action: "update",
    possession: "any",
  })
  async updateCreatureImmunities(
    @graphql.Args() args: UpdateCreatureImmunitiesArgs
  ): Promise<CreatureImmunities | null> {
    try {
      return await this.service.updateCreatureImmunities({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureImmunities)
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunities",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureImmunities(
    @graphql.Args() args: DeleteCreatureImmunitiesArgs
  ): Promise<CreatureImmunities | null> {
    try {
      return await this.service.deleteCreatureImmunities(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
