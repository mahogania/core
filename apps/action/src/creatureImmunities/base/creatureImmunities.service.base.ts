/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureImmunities as PrismaCreatureImmunities,
} from "@prisma/client";

export class CreatureImmunitiesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureImmunitiesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureImmunities.count(args);
  }

  async creatureImmunitiesItems(
    args: Prisma.CreatureImmunitiesFindManyArgs
  ): Promise<PrismaCreatureImmunities[]> {
    return this.prisma.creatureImmunities.findMany(args);
  }
  async creatureImmunities(
    args: Prisma.CreatureImmunitiesFindUniqueArgs
  ): Promise<PrismaCreatureImmunities | null> {
    return this.prisma.creatureImmunities.findUnique(args);
  }
  async createCreatureImmunities(
    args: Prisma.CreatureImmunitiesCreateArgs
  ): Promise<PrismaCreatureImmunities> {
    return this.prisma.creatureImmunities.create(args);
  }
  async updateCreatureImmunities(
    args: Prisma.CreatureImmunitiesUpdateArgs
  ): Promise<PrismaCreatureImmunities> {
    return this.prisma.creatureImmunities.update(args);
  }
  async deleteCreatureImmunities(
    args: Prisma.CreatureImmunitiesDeleteArgs
  ): Promise<PrismaCreatureImmunities> {
    return this.prisma.creatureImmunities.delete(args);
  }
}
