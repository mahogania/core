/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureLootTemplate } from "./CreatureLootTemplate";
import { CreatureLootTemplateCountArgs } from "./CreatureLootTemplateCountArgs";
import { CreatureLootTemplateFindManyArgs } from "./CreatureLootTemplateFindManyArgs";
import { CreatureLootTemplateFindUniqueArgs } from "./CreatureLootTemplateFindUniqueArgs";
import { CreateCreatureLootTemplateArgs } from "./CreateCreatureLootTemplateArgs";
import { UpdateCreatureLootTemplateArgs } from "./UpdateCreatureLootTemplateArgs";
import { DeleteCreatureLootTemplateArgs } from "./DeleteCreatureLootTemplateArgs";
import { CreatureLootTemplateService } from "../creatureLootTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureLootTemplate)
export class CreatureLootTemplateResolverBase {
  constructor(
    protected readonly service: CreatureLootTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureLootTemplate",
    action: "read",
    possession: "any",
  })
  async _creatureLootTemplatesMeta(
    @graphql.Args() args: CreatureLootTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureLootTemplate])
  @nestAccessControl.UseRoles({
    resource: "CreatureLootTemplate",
    action: "read",
    possession: "any",
  })
  async creatureLootTemplates(
    @graphql.Args() args: CreatureLootTemplateFindManyArgs
  ): Promise<CreatureLootTemplate[]> {
    return this.service.creatureLootTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureLootTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureLootTemplate",
    action: "read",
    possession: "own",
  })
  async creatureLootTemplate(
    @graphql.Args() args: CreatureLootTemplateFindUniqueArgs
  ): Promise<CreatureLootTemplate | null> {
    const result = await this.service.creatureLootTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "CreatureLootTemplate",
    action: "create",
    possession: "any",
  })
  async createCreatureLootTemplate(
    @graphql.Args() args: CreateCreatureLootTemplateArgs
  ): Promise<CreatureLootTemplate> {
    return await this.service.createCreatureLootTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "CreatureLootTemplate",
    action: "update",
    possession: "any",
  })
  async updateCreatureLootTemplate(
    @graphql.Args() args: UpdateCreatureLootTemplateArgs
  ): Promise<CreatureLootTemplate | null> {
    try {
      return await this.service.updateCreatureLootTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "CreatureLootTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureLootTemplate(
    @graphql.Args() args: DeleteCreatureLootTemplateArgs
  ): Promise<CreatureLootTemplate | null> {
    try {
      return await this.service.deleteCreatureLootTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
