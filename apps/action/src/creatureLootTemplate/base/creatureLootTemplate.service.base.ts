/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureLootTemplate as PrismaCreatureLootTemplate,
} from "@prisma/client";

export class CreatureLootTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureLootTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureLootTemplate.count(args);
  }

  async creatureLootTemplates(
    args: Prisma.CreatureLootTemplateFindManyArgs
  ): Promise<PrismaCreatureLootTemplate[]> {
    return this.prisma.creatureLootTemplate.findMany(args);
  }
  async creatureLootTemplate(
    args: Prisma.CreatureLootTemplateFindUniqueArgs
  ): Promise<PrismaCreatureLootTemplate | null> {
    return this.prisma.creatureLootTemplate.findUnique(args);
  }
  async createCreatureLootTemplate(
    args: Prisma.CreatureLootTemplateCreateArgs
  ): Promise<PrismaCreatureLootTemplate> {
    return this.prisma.creatureLootTemplate.create(args);
  }
  async updateCreatureLootTemplate(
    args: Prisma.CreatureLootTemplateUpdateArgs
  ): Promise<PrismaCreatureLootTemplate> {
    return this.prisma.creatureLootTemplate.update(args);
  }
  async deleteCreatureLootTemplate(
    args: Prisma.CreatureLootTemplateDeleteArgs
  ): Promise<PrismaCreatureLootTemplate> {
    return this.prisma.creatureLootTemplate.delete(args);
  }
}
