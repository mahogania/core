/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureTemplateMovement as PrismaCreatureTemplateMovement,
} from "@prisma/client";

export class CreatureTemplateMovementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTemplateMovementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureTemplateMovement.count(args);
  }

  async creatureTemplateMovements(
    args: Prisma.CreatureTemplateMovementFindManyArgs
  ): Promise<PrismaCreatureTemplateMovement[]> {
    return this.prisma.creatureTemplateMovement.findMany(args);
  }
  async creatureTemplateMovement(
    args: Prisma.CreatureTemplateMovementFindUniqueArgs
  ): Promise<PrismaCreatureTemplateMovement | null> {
    return this.prisma.creatureTemplateMovement.findUnique(args);
  }
  async createCreatureTemplateMovement(
    args: Prisma.CreatureTemplateMovementCreateArgs
  ): Promise<PrismaCreatureTemplateMovement> {
    return this.prisma.creatureTemplateMovement.create(args);
  }
  async updateCreatureTemplateMovement(
    args: Prisma.CreatureTemplateMovementUpdateArgs
  ): Promise<PrismaCreatureTemplateMovement> {
    return this.prisma.creatureTemplateMovement.update(args);
  }
  async deleteCreatureTemplateMovement(
    args: Prisma.CreatureTemplateMovementDeleteArgs
  ): Promise<PrismaCreatureTemplateMovement> {
    return this.prisma.creatureTemplateMovement.delete(args);
  }
}
