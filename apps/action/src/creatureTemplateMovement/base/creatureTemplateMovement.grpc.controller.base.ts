/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureTemplateMovementService } from "../creatureTemplateMovement.service";
import { CreatureTemplateMovementCreateInput } from "./CreatureTemplateMovementCreateInput";
import { CreatureTemplateMovementWhereInput } from "./CreatureTemplateMovementWhereInput";
import { CreatureTemplateMovementWhereUniqueInput } from "./CreatureTemplateMovementWhereUniqueInput";
import { CreatureTemplateMovementFindManyArgs } from "./CreatureTemplateMovementFindManyArgs";
import { CreatureTemplateMovementUpdateInput } from "./CreatureTemplateMovementUpdateInput";
import { CreatureTemplateMovement } from "./CreatureTemplateMovement";

export class CreatureTemplateMovementGrpcControllerBase {
  constructor(protected readonly service: CreatureTemplateMovementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureTemplateMovement })
  @GrpcMethod(
    "CreatureTemplateMovementService",
    "createCreatureTemplateMovement"
  )
  async createCreatureTemplateMovement(
    @common.Body() data: CreatureTemplateMovementCreateInput
  ): Promise<CreatureTemplateMovement> {
    return await this.service.createCreatureTemplateMovement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureTemplateMovement] })
  @ApiNestedQuery(CreatureTemplateMovementFindManyArgs)
  @GrpcMethod("CreatureTemplateMovementService", "creatureTemplateMovements")
  async creatureTemplateMovements(
    @common.Req() request: Request
  ): Promise<CreatureTemplateMovement[]> {
    const args = plainToClass(
      CreatureTemplateMovementFindManyArgs,
      request.query
    );
    return this.service.creatureTemplateMovements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateMovement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTemplateMovementService", "creatureTemplateMovement")
  async creatureTemplateMovement(
    @common.Param() params: CreatureTemplateMovementWhereUniqueInput
  ): Promise<CreatureTemplateMovement | null> {
    const result = await this.service.creatureTemplateMovement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateMovement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "CreatureTemplateMovementService",
    "updateCreatureTemplateMovement"
  )
  async updateCreatureTemplateMovement(
    @common.Param() params: CreatureTemplateMovementWhereUniqueInput,
    @common.Body() data: CreatureTemplateMovementUpdateInput
  ): Promise<CreatureTemplateMovement | null> {
    try {
      return await this.service.updateCreatureTemplateMovement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateMovement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "CreatureTemplateMovementService",
    "deleteCreatureTemplateMovement"
  )
  async deleteCreatureTemplateMovement(
    @common.Param() params: CreatureTemplateMovementWhereUniqueInput
  ): Promise<CreatureTemplateMovement | null> {
    try {
      return await this.service.deleteCreatureTemplateMovement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
