/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CreatureQuestItemService } from "../creatureQuestItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatureQuestItemCreateInput } from "./CreatureQuestItemCreateInput";
import { CreatureQuestItem } from "./CreatureQuestItem";
import { CreatureQuestItemFindManyArgs } from "./CreatureQuestItemFindManyArgs";
import { CreatureQuestItemWhereUniqueInput } from "./CreatureQuestItemWhereUniqueInput";
import { CreatureQuestItemUpdateInput } from "./CreatureQuestItemUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CreatureQuestItemControllerBase {
  constructor(
    protected readonly service: CreatureQuestItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureQuestItem })
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureQuestItemCreateInput,
  })
  async createCreatureQuestItem(
    @common.Body() data: CreatureQuestItemCreateInput
  ): Promise<CreatureQuestItem> {
    return await this.service.createCreatureQuestItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureQuestItem] })
  @ApiNestedQuery(CreatureQuestItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureQuestItems(
    @common.Req() request: Request
  ): Promise<CreatureQuestItem[]> {
    const args = plainToClass(CreatureQuestItemFindManyArgs, request.query);
    return this.service.creatureQuestItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureQuestItem(
    @common.Param() params: CreatureQuestItemWhereUniqueInput
  ): Promise<CreatureQuestItem | null> {
    const result = await this.service.creatureQuestItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureQuestItemUpdateInput,
  })
  async updateCreatureQuestItem(
    @common.Param() params: CreatureQuestItemWhereUniqueInput,
    @common.Body() data: CreatureQuestItemUpdateInput
  ): Promise<CreatureQuestItem | null> {
    try {
      return await this.service.updateCreatureQuestItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCreatureQuestItem(
    @common.Param() params: CreatureQuestItemWhereUniqueInput
  ): Promise<CreatureQuestItem | null> {
    try {
      return await this.service.deleteCreatureQuestItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
