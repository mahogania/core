/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureQuestItemService } from "../creatureQuestItem.service";
import { CreatureQuestItemCreateInput } from "./CreatureQuestItemCreateInput";
import { CreatureQuestItemWhereInput } from "./CreatureQuestItemWhereInput";
import { CreatureQuestItemWhereUniqueInput } from "./CreatureQuestItemWhereUniqueInput";
import { CreatureQuestItemFindManyArgs } from "./CreatureQuestItemFindManyArgs";
import { CreatureQuestItemUpdateInput } from "./CreatureQuestItemUpdateInput";
import { CreatureQuestItem } from "./CreatureQuestItem";

export class CreatureQuestItemGrpcControllerBase {
  constructor(protected readonly service: CreatureQuestItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureQuestItem })
  @GrpcMethod("CreatureQuestItemService", "createCreatureQuestItem")
  async createCreatureQuestItem(
    @common.Body() data: CreatureQuestItemCreateInput
  ): Promise<CreatureQuestItem> {
    return await this.service.createCreatureQuestItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureQuestItem] })
  @ApiNestedQuery(CreatureQuestItemFindManyArgs)
  @GrpcMethod("CreatureQuestItemService", "creatureQuestItems")
  async creatureQuestItems(
    @common.Req() request: Request
  ): Promise<CreatureQuestItem[]> {
    const args = plainToClass(CreatureQuestItemFindManyArgs, request.query);
    return this.service.creatureQuestItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestItemService", "creatureQuestItem")
  async creatureQuestItem(
    @common.Param() params: CreatureQuestItemWhereUniqueInput
  ): Promise<CreatureQuestItem | null> {
    const result = await this.service.creatureQuestItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestItemService", "updateCreatureQuestItem")
  async updateCreatureQuestItem(
    @common.Param() params: CreatureQuestItemWhereUniqueInput,
    @common.Body() data: CreatureQuestItemUpdateInput
  ): Promise<CreatureQuestItem | null> {
    try {
      return await this.service.updateCreatureQuestItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestItemService", "deleteCreatureQuestItem")
  async deleteCreatureQuestItem(
    @common.Param() params: CreatureQuestItemWhereUniqueInput
  ): Promise<CreatureQuestItem | null> {
    try {
      return await this.service.deleteCreatureQuestItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
