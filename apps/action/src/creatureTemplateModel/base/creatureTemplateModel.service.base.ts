/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureTemplateModel as PrismaCreatureTemplateModel,
} from "@prisma/client";

export class CreatureTemplateModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTemplateModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureTemplateModel.count(args);
  }

  async creatureTemplateModels(
    args: Prisma.CreatureTemplateModelFindManyArgs
  ): Promise<PrismaCreatureTemplateModel[]> {
    return this.prisma.creatureTemplateModel.findMany(args);
  }
  async creatureTemplateModel(
    args: Prisma.CreatureTemplateModelFindUniqueArgs
  ): Promise<PrismaCreatureTemplateModel | null> {
    return this.prisma.creatureTemplateModel.findUnique(args);
  }
  async createCreatureTemplateModel(
    args: Prisma.CreatureTemplateModelCreateArgs
  ): Promise<PrismaCreatureTemplateModel> {
    return this.prisma.creatureTemplateModel.create(args);
  }
  async updateCreatureTemplateModel(
    args: Prisma.CreatureTemplateModelUpdateArgs
  ): Promise<PrismaCreatureTemplateModel> {
    return this.prisma.creatureTemplateModel.update(args);
  }
  async deleteCreatureTemplateModel(
    args: Prisma.CreatureTemplateModelDeleteArgs
  ): Promise<PrismaCreatureTemplateModel> {
    return this.prisma.creatureTemplateModel.delete(args);
  }
}
