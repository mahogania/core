/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CreatureSummonedDataService } from "../creatureSummonedData.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatureSummonedDataCreateInput } from "./CreatureSummonedDataCreateInput";
import { CreatureSummonedData } from "./CreatureSummonedData";
import { CreatureSummonedDataFindManyArgs } from "./CreatureSummonedDataFindManyArgs";
import { CreatureSummonedDataWhereUniqueInput } from "./CreatureSummonedDataWhereUniqueInput";
import { CreatureSummonedDataUpdateInput } from "./CreatureSummonedDataUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CreatureSummonedDataControllerBase {
  constructor(
    protected readonly service: CreatureSummonedDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureSummonedData })
  @nestAccessControl.UseRoles({
    resource: "CreatureSummonedData",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureSummonedDataCreateInput,
  })
  async createCreatureSummonedData(
    @common.Body() data: CreatureSummonedDataCreateInput
  ): Promise<CreatureSummonedData> {
    return await this.service.createCreatureSummonedData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureSummonedData] })
  @ApiNestedQuery(CreatureSummonedDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CreatureSummonedData",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureSummonedDataItems(
    @common.Req() request: Request
  ): Promise<CreatureSummonedData[]> {
    const args = plainToClass(CreatureSummonedDataFindManyArgs, request.query);
    return this.service.creatureSummonedDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureSummonedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureSummonedData",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureSummonedData(
    @common.Param() params: CreatureSummonedDataWhereUniqueInput
  ): Promise<CreatureSummonedData | null> {
    const result = await this.service.creatureSummonedData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureSummonedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureSummonedData",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureSummonedDataUpdateInput,
  })
  async updateCreatureSummonedData(
    @common.Param() params: CreatureSummonedDataWhereUniqueInput,
    @common.Body() data: CreatureSummonedDataUpdateInput
  ): Promise<CreatureSummonedData | null> {
    try {
      return await this.service.updateCreatureSummonedData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureSummonedData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureSummonedData",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCreatureSummonedData(
    @common.Param() params: CreatureSummonedDataWhereUniqueInput
  ): Promise<CreatureSummonedData | null> {
    try {
      return await this.service.deleteCreatureSummonedData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
