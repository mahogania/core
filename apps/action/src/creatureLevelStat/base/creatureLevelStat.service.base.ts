/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CreatureLevelStat as PrismaCreatureLevelStat,
  Creature as PrismaCreature,
} from "@prisma/client";

export class CreatureLevelStatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureLevelStatCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureLevelStat.count(args);
  }

  async creatureLevelStats(
    args: Prisma.CreatureLevelStatFindManyArgs
  ): Promise<PrismaCreatureLevelStat[]> {
    return this.prisma.creatureLevelStat.findMany(args);
  }
  async creatureLevelStat(
    args: Prisma.CreatureLevelStatFindUniqueArgs
  ): Promise<PrismaCreatureLevelStat | null> {
    return this.prisma.creatureLevelStat.findUnique(args);
  }
  async createCreatureLevelStat(
    args: Prisma.CreatureLevelStatCreateArgs
  ): Promise<PrismaCreatureLevelStat> {
    return this.prisma.creatureLevelStat.create(args);
  }
  async updateCreatureLevelStat(
    args: Prisma.CreatureLevelStatUpdateArgs
  ): Promise<PrismaCreatureLevelStat> {
    return this.prisma.creatureLevelStat.update(args);
  }
  async deleteCreatureLevelStat(
    args: Prisma.CreatureLevelStatDeleteArgs
  ): Promise<PrismaCreatureLevelStat> {
    return this.prisma.creatureLevelStat.delete(args);
  }

  async findCreatures(
    parentId: string,
    args: Prisma.CreatureFindManyArgs
  ): Promise<PrismaCreature[]> {
    return this.prisma.creatureLevelStat
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .creatures(args);
  }
}
