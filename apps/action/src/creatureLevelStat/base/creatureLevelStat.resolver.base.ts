/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureLevelStat } from "./CreatureLevelStat";
import { CreatureLevelStatCountArgs } from "./CreatureLevelStatCountArgs";
import { CreatureLevelStatFindManyArgs } from "./CreatureLevelStatFindManyArgs";
import { CreatureLevelStatFindUniqueArgs } from "./CreatureLevelStatFindUniqueArgs";
import { CreateCreatureLevelStatArgs } from "./CreateCreatureLevelStatArgs";
import { UpdateCreatureLevelStatArgs } from "./UpdateCreatureLevelStatArgs";
import { DeleteCreatureLevelStatArgs } from "./DeleteCreatureLevelStatArgs";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureLevelStatService } from "../creatureLevelStat.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureLevelStat)
export class CreatureLevelStatResolverBase {
  constructor(
    protected readonly service: CreatureLevelStatService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureLevelStat",
    action: "read",
    possession: "any",
  })
  async _creatureLevelStatsMeta(
    @graphql.Args() args: CreatureLevelStatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureLevelStat])
  @nestAccessControl.UseRoles({
    resource: "CreatureLevelStat",
    action: "read",
    possession: "any",
  })
  async creatureLevelStats(
    @graphql.Args() args: CreatureLevelStatFindManyArgs
  ): Promise<CreatureLevelStat[]> {
    return this.service.creatureLevelStats(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureLevelStat, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureLevelStat",
    action: "read",
    possession: "own",
  })
  async creatureLevelStat(
    @graphql.Args() args: CreatureLevelStatFindUniqueArgs
  ): Promise<CreatureLevelStat | null> {
    const result = await this.service.creatureLevelStat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureLevelStat)
  @nestAccessControl.UseRoles({
    resource: "CreatureLevelStat",
    action: "create",
    possession: "any",
  })
  async createCreatureLevelStat(
    @graphql.Args() args: CreateCreatureLevelStatArgs
  ): Promise<CreatureLevelStat> {
    return await this.service.createCreatureLevelStat({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureLevelStat)
  @nestAccessControl.UseRoles({
    resource: "CreatureLevelStat",
    action: "update",
    possession: "any",
  })
  async updateCreatureLevelStat(
    @graphql.Args() args: UpdateCreatureLevelStatArgs
  ): Promise<CreatureLevelStat | null> {
    try {
      return await this.service.updateCreatureLevelStat({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureLevelStat)
  @nestAccessControl.UseRoles({
    resource: "CreatureLevelStat",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureLevelStat(
    @graphql.Args() args: DeleteCreatureLevelStatArgs
  ): Promise<CreatureLevelStat | null> {
    try {
      return await this.service.deleteCreatureLevelStat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Creature], { name: "creatures" })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  async findCreatures(
    @graphql.Parent() parent: CreatureLevelStat,
    @graphql.Args() args: CreatureFindManyArgs
  ): Promise<Creature[]> {
    const results = await this.service.findCreatures(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
