/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SkillTiers } from "./SkillTiers";
import { SkillTiersCountArgs } from "./SkillTiersCountArgs";
import { SkillTiersFindManyArgs } from "./SkillTiersFindManyArgs";
import { SkillTiersFindUniqueArgs } from "./SkillTiersFindUniqueArgs";
import { DeleteSkillTiersArgs } from "./DeleteSkillTiersArgs";
import { SkillTiersService } from "../skillTiers.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SkillTiers)
export class SkillTiersResolverBase {
  constructor(
    protected readonly service: SkillTiersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SkillTiers",
    action: "read",
    possession: "any",
  })
  async _skillTiersItemsMeta(
    @graphql.Args() args: SkillTiersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SkillTiers])
  @nestAccessControl.UseRoles({
    resource: "SkillTiers",
    action: "read",
    possession: "any",
  })
  async skillTiersItems(
    @graphql.Args() args: SkillTiersFindManyArgs
  ): Promise<SkillTiers[]> {
    return this.service.skillTiersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SkillTiers, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkillTiers",
    action: "read",
    possession: "own",
  })
  async skillTiers(
    @graphql.Args() args: SkillTiersFindUniqueArgs
  ): Promise<SkillTiers | null> {
    const result = await this.service.skillTiers(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SkillTiers)
  @nestAccessControl.UseRoles({
    resource: "SkillTiers",
    action: "delete",
    possession: "any",
  })
  async deleteSkillTiers(
    @graphql.Args() args: DeleteSkillTiersArgs
  ): Promise<SkillTiers | null> {
    try {
      return await this.service.deleteSkillTiers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
