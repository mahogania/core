/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SpawnGroup } from "./SpawnGroup";
import { SpawnGroupCountArgs } from "./SpawnGroupCountArgs";
import { SpawnGroupFindManyArgs } from "./SpawnGroupFindManyArgs";
import { SpawnGroupFindUniqueArgs } from "./SpawnGroupFindUniqueArgs";
import { DeleteSpawnGroupArgs } from "./DeleteSpawnGroupArgs";
import { SpawnGroupService } from "../spawnGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SpawnGroup)
export class SpawnGroupResolverBase {
  constructor(
    protected readonly service: SpawnGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SpawnGroup",
    action: "read",
    possession: "any",
  })
  async _spawnGroupsMeta(
    @graphql.Args() args: SpawnGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SpawnGroup])
  @nestAccessControl.UseRoles({
    resource: "SpawnGroup",
    action: "read",
    possession: "any",
  })
  async spawnGroups(
    @graphql.Args() args: SpawnGroupFindManyArgs
  ): Promise<SpawnGroup[]> {
    return this.service.spawnGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SpawnGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SpawnGroup",
    action: "read",
    possession: "own",
  })
  async spawnGroup(
    @graphql.Args() args: SpawnGroupFindUniqueArgs
  ): Promise<SpawnGroup | null> {
    const result = await this.service.spawnGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SpawnGroup)
  @nestAccessControl.UseRoles({
    resource: "SpawnGroup",
    action: "delete",
    possession: "any",
  })
  async deleteSpawnGroup(
    @graphql.Args() args: DeleteSpawnGroupArgs
  ): Promise<SpawnGroup | null> {
    try {
      return await this.service.deleteSpawnGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
