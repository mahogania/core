/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SpawnGroup as PrismaSpawnGroup } from "@prisma/client";

export class SpawnGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpawnGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.spawnGroup.count(args);
  }

  async spawnGroups(
    args: Prisma.SpawnGroupFindManyArgs
  ): Promise<PrismaSpawnGroup[]> {
    return this.prisma.spawnGroup.findMany(args);
  }
  async spawnGroup(
    args: Prisma.SpawnGroupFindUniqueArgs
  ): Promise<PrismaSpawnGroup | null> {
    return this.prisma.spawnGroup.findUnique(args);
  }
  async createSpawnGroup(
    args: Prisma.SpawnGroupCreateArgs
  ): Promise<PrismaSpawnGroup> {
    return this.prisma.spawnGroup.create(args);
  }
  async updateSpawnGroup(
    args: Prisma.SpawnGroupUpdateArgs
  ): Promise<PrismaSpawnGroup> {
    return this.prisma.spawnGroup.update(args);
  }
  async deleteSpawnGroup(
    args: Prisma.SpawnGroupDeleteArgs
  ): Promise<PrismaSpawnGroup> {
    return this.prisma.spawnGroup.delete(args);
  }
}
