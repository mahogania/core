/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ServersideSpellService } from "../serversideSpell.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServersideSpellCreateInput } from "./ServersideSpellCreateInput";
import { ServersideSpell } from "./ServersideSpell";
import { ServersideSpellFindManyArgs } from "./ServersideSpellFindManyArgs";
import { ServersideSpellWhereUniqueInput } from "./ServersideSpellWhereUniqueInput";
import { ServersideSpellUpdateInput } from "./ServersideSpellUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServersideSpellControllerBase {
  constructor(
    protected readonly service: ServersideSpellService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServersideSpell })
  @nestAccessControl.UseRoles({
    resource: "ServersideSpell",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ServersideSpellCreateInput,
  })
  async createServersideSpell(
    @common.Body() data: ServersideSpellCreateInput
  ): Promise<ServersideSpell> {
    return await this.service.createServersideSpell({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ServersideSpell] })
  @ApiNestedQuery(ServersideSpellFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ServersideSpell",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serversideSpells(
    @common.Req() request: Request
  ): Promise<ServersideSpell[]> {
    const args = plainToClass(ServersideSpellFindManyArgs, request.query);
    return this.service.serversideSpells({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServersideSpell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServersideSpell",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serversideSpell(
    @common.Param() params: ServersideSpellWhereUniqueInput
  ): Promise<ServersideSpell | null> {
    const result = await this.service.serversideSpell({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServersideSpell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServersideSpell",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ServersideSpellUpdateInput,
  })
  async updateServersideSpell(
    @common.Param() params: ServersideSpellWhereUniqueInput,
    @common.Body() data: ServersideSpellUpdateInput
  ): Promise<ServersideSpell | null> {
    try {
      return await this.service.updateServersideSpell({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServersideSpell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServersideSpell",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteServersideSpell(
    @common.Param() params: ServersideSpellWhereUniqueInput
  ): Promise<ServersideSpell | null> {
    try {
      return await this.service.deleteServersideSpell({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
