/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SmartScripts as PrismaSmartScripts } from "@prisma/client";

export class SmartScriptsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SmartScriptsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.smartScripts.count(args);
  }

  async smartScriptsItems(
    args: Prisma.SmartScriptsFindManyArgs
  ): Promise<PrismaSmartScripts[]> {
    return this.prisma.smartScripts.findMany(args);
  }
  async smartScripts(
    args: Prisma.SmartScriptsFindUniqueArgs
  ): Promise<PrismaSmartScripts | null> {
    return this.prisma.smartScripts.findUnique(args);
  }
  async createSmartScripts(
    args: Prisma.SmartScriptsCreateArgs
  ): Promise<PrismaSmartScripts> {
    return this.prisma.smartScripts.create(args);
  }
  async updateSmartScripts(
    args: Prisma.SmartScriptsUpdateArgs
  ): Promise<PrismaSmartScripts> {
    return this.prisma.smartScripts.update(args);
  }
  async deleteSmartScripts(
    args: Prisma.SmartScriptsDeleteArgs
  ): Promise<PrismaSmartScripts> {
    return this.prisma.smartScripts.delete(args);
  }
}
