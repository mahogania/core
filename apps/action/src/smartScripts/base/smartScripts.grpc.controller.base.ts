/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SmartScriptsService } from "../smartScripts.service";
import { SmartScriptsCreateInput } from "./SmartScriptsCreateInput";
import { SmartScriptsWhereInput } from "./SmartScriptsWhereInput";
import { SmartScriptsWhereUniqueInput } from "./SmartScriptsWhereUniqueInput";
import { SmartScriptsFindManyArgs } from "./SmartScriptsFindManyArgs";
import { SmartScriptsUpdateInput } from "./SmartScriptsUpdateInput";
import { SmartScripts } from "./SmartScripts";

export class SmartScriptsGrpcControllerBase {
  constructor(protected readonly service: SmartScriptsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SmartScripts })
  @GrpcMethod("SmartScriptsService", "createSmartScripts")
  async createSmartScripts(
    @common.Body() data: SmartScriptsCreateInput
  ): Promise<SmartScripts> {
    return await this.service.createSmartScripts({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SmartScripts] })
  @ApiNestedQuery(SmartScriptsFindManyArgs)
  @GrpcMethod("SmartScriptsService", "smartScriptsItems")
  async smartScriptsItems(
    @common.Req() request: Request
  ): Promise<SmartScripts[]> {
    const args = plainToClass(SmartScriptsFindManyArgs, request.query);
    return this.service.smartScriptsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SmartScripts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SmartScriptsService", "smartScripts")
  async smartScripts(
    @common.Param() params: SmartScriptsWhereUniqueInput
  ): Promise<SmartScripts | null> {
    const result = await this.service.smartScripts({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SmartScripts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SmartScriptsService", "updateSmartScripts")
  async updateSmartScripts(
    @common.Param() params: SmartScriptsWhereUniqueInput,
    @common.Body() data: SmartScriptsUpdateInput
  ): Promise<SmartScripts | null> {
    try {
      return await this.service.updateSmartScripts({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SmartScripts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SmartScriptsService", "deleteSmartScripts")
  async deleteSmartScripts(
    @common.Param() params: SmartScriptsWhereUniqueInput
  ): Promise<SmartScripts | null> {
    try {
      return await this.service.deleteSmartScripts({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
