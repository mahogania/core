/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ConversationLineTemplate } from "./ConversationLineTemplate";
import { ConversationLineTemplateCountArgs } from "./ConversationLineTemplateCountArgs";
import { ConversationLineTemplateFindManyArgs } from "./ConversationLineTemplateFindManyArgs";
import { ConversationLineTemplateFindUniqueArgs } from "./ConversationLineTemplateFindUniqueArgs";
import { CreateConversationLineTemplateArgs } from "./CreateConversationLineTemplateArgs";
import { UpdateConversationLineTemplateArgs } from "./UpdateConversationLineTemplateArgs";
import { DeleteConversationLineTemplateArgs } from "./DeleteConversationLineTemplateArgs";
import { ConversationLineTemplateService } from "../conversationLineTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ConversationLineTemplate)
export class ConversationLineTemplateResolverBase {
  constructor(
    protected readonly service: ConversationLineTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ConversationLineTemplate",
    action: "read",
    possession: "any",
  })
  async _conversationLineTemplatesMeta(
    @graphql.Args() args: ConversationLineTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ConversationLineTemplate])
  @nestAccessControl.UseRoles({
    resource: "ConversationLineTemplate",
    action: "read",
    possession: "any",
  })
  async conversationLineTemplates(
    @graphql.Args() args: ConversationLineTemplateFindManyArgs
  ): Promise<ConversationLineTemplate[]> {
    return this.service.conversationLineTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ConversationLineTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ConversationLineTemplate",
    action: "read",
    possession: "own",
  })
  async conversationLineTemplate(
    @graphql.Args() args: ConversationLineTemplateFindUniqueArgs
  ): Promise<ConversationLineTemplate | null> {
    const result = await this.service.conversationLineTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationLineTemplate)
  @nestAccessControl.UseRoles({
    resource: "ConversationLineTemplate",
    action: "create",
    possession: "any",
  })
  async createConversationLineTemplate(
    @graphql.Args() args: CreateConversationLineTemplateArgs
  ): Promise<ConversationLineTemplate> {
    return await this.service.createConversationLineTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationLineTemplate)
  @nestAccessControl.UseRoles({
    resource: "ConversationLineTemplate",
    action: "update",
    possession: "any",
  })
  async updateConversationLineTemplate(
    @graphql.Args() args: UpdateConversationLineTemplateArgs
  ): Promise<ConversationLineTemplate | null> {
    try {
      return await this.service.updateConversationLineTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConversationLineTemplate)
  @nestAccessControl.UseRoles({
    resource: "ConversationLineTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteConversationLineTemplate(
    @graphql.Args() args: DeleteConversationLineTemplateArgs
  ): Promise<ConversationLineTemplate | null> {
    try {
      return await this.service.deleteConversationLineTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
