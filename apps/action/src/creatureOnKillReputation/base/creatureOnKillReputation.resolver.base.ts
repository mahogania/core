/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureOnKillReputation } from "./CreatureOnKillReputation";
import { CreatureOnKillReputationCountArgs } from "./CreatureOnKillReputationCountArgs";
import { CreatureOnKillReputationFindManyArgs } from "./CreatureOnKillReputationFindManyArgs";
import { CreatureOnKillReputationFindUniqueArgs } from "./CreatureOnKillReputationFindUniqueArgs";
import { CreateCreatureOnKillReputationArgs } from "./CreateCreatureOnKillReputationArgs";
import { UpdateCreatureOnKillReputationArgs } from "./UpdateCreatureOnKillReputationArgs";
import { DeleteCreatureOnKillReputationArgs } from "./DeleteCreatureOnKillReputationArgs";
import { CreatureOnKillReputationService } from "../creatureOnKillReputation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureOnKillReputation)
export class CreatureOnKillReputationResolverBase {
  constructor(
    protected readonly service: CreatureOnKillReputationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureOnKillReputation",
    action: "read",
    possession: "any",
  })
  async _creatureOnKillReputationsMeta(
    @graphql.Args() args: CreatureOnKillReputationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureOnKillReputation])
  @nestAccessControl.UseRoles({
    resource: "CreatureOnKillReputation",
    action: "read",
    possession: "any",
  })
  async creatureOnKillReputations(
    @graphql.Args() args: CreatureOnKillReputationFindManyArgs
  ): Promise<CreatureOnKillReputation[]> {
    return this.service.creatureOnKillReputations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureOnKillReputation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureOnKillReputation",
    action: "read",
    possession: "own",
  })
  async creatureOnKillReputation(
    @graphql.Args() args: CreatureOnKillReputationFindUniqueArgs
  ): Promise<CreatureOnKillReputation | null> {
    const result = await this.service.creatureOnKillReputation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureOnKillReputation)
  @nestAccessControl.UseRoles({
    resource: "CreatureOnKillReputation",
    action: "create",
    possession: "any",
  })
  async createCreatureOnKillReputation(
    @graphql.Args() args: CreateCreatureOnKillReputationArgs
  ): Promise<CreatureOnKillReputation> {
    return await this.service.createCreatureOnKillReputation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureOnKillReputation)
  @nestAccessControl.UseRoles({
    resource: "CreatureOnKillReputation",
    action: "update",
    possession: "any",
  })
  async updateCreatureOnKillReputation(
    @graphql.Args() args: UpdateCreatureOnKillReputationArgs
  ): Promise<CreatureOnKillReputation | null> {
    try {
      return await this.service.updateCreatureOnKillReputation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureOnKillReputation)
  @nestAccessControl.UseRoles({
    resource: "CreatureOnKillReputation",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureOnKillReputation(
    @graphql.Args() args: DeleteCreatureOnKillReputationArgs
  ): Promise<CreatureOnKillReputation | null> {
    try {
      return await this.service.deleteCreatureOnKillReputation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
