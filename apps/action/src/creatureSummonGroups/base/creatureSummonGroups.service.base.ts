/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureSummonGroups as PrismaCreatureSummonGroups,
} from "@prisma/client";

export class CreatureSummonGroupsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureSummonGroupsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureSummonGroups.count(args);
  }

  async creatureSummonGroupsItems(
    args: Prisma.CreatureSummonGroupsFindManyArgs
  ): Promise<PrismaCreatureSummonGroups[]> {
    return this.prisma.creatureSummonGroups.findMany(args);
  }
  async creatureSummonGroups(
    args: Prisma.CreatureSummonGroupsFindUniqueArgs
  ): Promise<PrismaCreatureSummonGroups | null> {
    return this.prisma.creatureSummonGroups.findUnique(args);
  }
  async createCreatureSummonGroups(
    args: Prisma.CreatureSummonGroupsCreateArgs
  ): Promise<PrismaCreatureSummonGroups> {
    return this.prisma.creatureSummonGroups.create(args);
  }
  async updateCreatureSummonGroups(
    args: Prisma.CreatureSummonGroupsUpdateArgs
  ): Promise<PrismaCreatureSummonGroups> {
    return this.prisma.creatureSummonGroups.update(args);
  }
  async deleteCreatureSummonGroups(
    args: Prisma.CreatureSummonGroupsDeleteArgs
  ): Promise<PrismaCreatureSummonGroups> {
    return this.prisma.creatureSummonGroups.delete(args);
  }
}
