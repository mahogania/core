/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureQuestStarterService } from "../creatureQuestStarter.service";
import { CreatureQuestStarterCreateInput } from "./CreatureQuestStarterCreateInput";
import { CreatureQuestStarterWhereInput } from "./CreatureQuestStarterWhereInput";
import { CreatureQuestStarterWhereUniqueInput } from "./CreatureQuestStarterWhereUniqueInput";
import { CreatureQuestStarterFindManyArgs } from "./CreatureQuestStarterFindManyArgs";
import { CreatureQuestStarterUpdateInput } from "./CreatureQuestStarterUpdateInput";
import { CreatureQuestStarter } from "./CreatureQuestStarter";

export class CreatureQuestStarterGrpcControllerBase {
  constructor(protected readonly service: CreatureQuestStarterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureQuestStarter })
  @GrpcMethod("CreatureQuestStarterService", "createCreatureQuestStarter")
  async createCreatureQuestStarter(
    @common.Body() data: CreatureQuestStarterCreateInput
  ): Promise<CreatureQuestStarter> {
    return await this.service.createCreatureQuestStarter({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureQuestStarter] })
  @ApiNestedQuery(CreatureQuestStarterFindManyArgs)
  @GrpcMethod("CreatureQuestStarterService", "creatureQuestStarters")
  async creatureQuestStarters(
    @common.Req() request: Request
  ): Promise<CreatureQuestStarter[]> {
    const args = plainToClass(CreatureQuestStarterFindManyArgs, request.query);
    return this.service.creatureQuestStarters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestStarter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestStarterService", "creatureQuestStarter")
  async creatureQuestStarter(
    @common.Param() params: CreatureQuestStarterWhereUniqueInput
  ): Promise<CreatureQuestStarter | null> {
    const result = await this.service.creatureQuestStarter({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestStarter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestStarterService", "updateCreatureQuestStarter")
  async updateCreatureQuestStarter(
    @common.Param() params: CreatureQuestStarterWhereUniqueInput,
    @common.Body() data: CreatureQuestStarterUpdateInput
  ): Promise<CreatureQuestStarter | null> {
    try {
      return await this.service.updateCreatureQuestStarter({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestStarter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestStarterService", "deleteCreatureQuestStarter")
  async deleteCreatureQuestStarter(
    @common.Param() params: CreatureQuestStarterWhereUniqueInput
  ): Promise<CreatureQuestStarter | null> {
    try {
      return await this.service.deleteCreatureQuestStarter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
