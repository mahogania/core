/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureQuestCurrency } from "./CreatureQuestCurrency";
import { CreatureQuestCurrencyCountArgs } from "./CreatureQuestCurrencyCountArgs";
import { CreatureQuestCurrencyFindManyArgs } from "./CreatureQuestCurrencyFindManyArgs";
import { CreatureQuestCurrencyFindUniqueArgs } from "./CreatureQuestCurrencyFindUniqueArgs";
import { CreateCreatureQuestCurrencyArgs } from "./CreateCreatureQuestCurrencyArgs";
import { UpdateCreatureQuestCurrencyArgs } from "./UpdateCreatureQuestCurrencyArgs";
import { DeleteCreatureQuestCurrencyArgs } from "./DeleteCreatureQuestCurrencyArgs";
import { CreatureQuestCurrencyService } from "../creatureQuestCurrency.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureQuestCurrency)
export class CreatureQuestCurrencyResolverBase {
  constructor(
    protected readonly service: CreatureQuestCurrencyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestCurrency",
    action: "read",
    possession: "any",
  })
  async _creatureQuestCurrenciesMeta(
    @graphql.Args() args: CreatureQuestCurrencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureQuestCurrency])
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestCurrency",
    action: "read",
    possession: "any",
  })
  async creatureQuestCurrencies(
    @graphql.Args() args: CreatureQuestCurrencyFindManyArgs
  ): Promise<CreatureQuestCurrency[]> {
    return this.service.creatureQuestCurrencies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureQuestCurrency, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestCurrency",
    action: "read",
    possession: "own",
  })
  async creatureQuestCurrency(
    @graphql.Args() args: CreatureQuestCurrencyFindUniqueArgs
  ): Promise<CreatureQuestCurrency | null> {
    const result = await this.service.creatureQuestCurrency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureQuestCurrency)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestCurrency",
    action: "create",
    possession: "any",
  })
  async createCreatureQuestCurrency(
    @graphql.Args() args: CreateCreatureQuestCurrencyArgs
  ): Promise<CreatureQuestCurrency> {
    return await this.service.createCreatureQuestCurrency({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureQuestCurrency)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestCurrency",
    action: "update",
    possession: "any",
  })
  async updateCreatureQuestCurrency(
    @graphql.Args() args: UpdateCreatureQuestCurrencyArgs
  ): Promise<CreatureQuestCurrency | null> {
    try {
      return await this.service.updateCreatureQuestCurrency({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureQuestCurrency)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestCurrency",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureQuestCurrency(
    @graphql.Args() args: DeleteCreatureQuestCurrencyArgs
  ): Promise<CreatureQuestCurrency | null> {
    try {
      return await this.service.deleteCreatureQuestCurrency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
