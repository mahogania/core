/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureQuestCurrency as PrismaCreatureQuestCurrency,
} from "@prisma/client";

export class CreatureQuestCurrencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureQuestCurrencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureQuestCurrency.count(args);
  }

  async creatureQuestCurrencies(
    args: Prisma.CreatureQuestCurrencyFindManyArgs
  ): Promise<PrismaCreatureQuestCurrency[]> {
    return this.prisma.creatureQuestCurrency.findMany(args);
  }
  async creatureQuestCurrency(
    args: Prisma.CreatureQuestCurrencyFindUniqueArgs
  ): Promise<PrismaCreatureQuestCurrency | null> {
    return this.prisma.creatureQuestCurrency.findUnique(args);
  }
  async createCreatureQuestCurrency(
    args: Prisma.CreatureQuestCurrencyCreateArgs
  ): Promise<PrismaCreatureQuestCurrency> {
    return this.prisma.creatureQuestCurrency.create(args);
  }
  async updateCreatureQuestCurrency(
    args: Prisma.CreatureQuestCurrencyUpdateArgs
  ): Promise<PrismaCreatureQuestCurrency> {
    return this.prisma.creatureQuestCurrency.update(args);
  }
  async deleteCreatureQuestCurrency(
    args: Prisma.CreatureQuestCurrencyDeleteArgs
  ): Promise<PrismaCreatureQuestCurrency> {
    return this.prisma.creatureQuestCurrency.delete(args);
  }
}
