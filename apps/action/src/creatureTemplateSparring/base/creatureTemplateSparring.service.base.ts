/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureTemplateSparring as PrismaCreatureTemplateSparring,
} from "@prisma/client";

export class CreatureTemplateSparringServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTemplateSparringCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureTemplateSparring.count(args);
  }

  async creatureTemplateSparrings(
    args: Prisma.CreatureTemplateSparringFindManyArgs
  ): Promise<PrismaCreatureTemplateSparring[]> {
    return this.prisma.creatureTemplateSparring.findMany(args);
  }
  async creatureTemplateSparring(
    args: Prisma.CreatureTemplateSparringFindUniqueArgs
  ): Promise<PrismaCreatureTemplateSparring | null> {
    return this.prisma.creatureTemplateSparring.findUnique(args);
  }
  async createCreatureTemplateSparring(
    args: Prisma.CreatureTemplateSparringCreateArgs
  ): Promise<PrismaCreatureTemplateSparring> {
    return this.prisma.creatureTemplateSparring.create(args);
  }
  async updateCreatureTemplateSparring(
    args: Prisma.CreatureTemplateSparringUpdateArgs
  ): Promise<PrismaCreatureTemplateSparring> {
    return this.prisma.creatureTemplateSparring.update(args);
  }
  async deleteCreatureTemplateSparring(
    args: Prisma.CreatureTemplateSparringDeleteArgs
  ): Promise<PrismaCreatureTemplateSparring> {
    return this.prisma.creatureTemplateSparring.delete(args);
  }
}
