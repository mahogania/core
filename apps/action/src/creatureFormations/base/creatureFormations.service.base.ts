/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureFormations as PrismaCreatureFormations,
} from "@prisma/client";

export class CreatureFormationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureFormationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureFormations.count(args);
  }

  async creatureFormationsItems(
    args: Prisma.CreatureFormationsFindManyArgs
  ): Promise<PrismaCreatureFormations[]> {
    return this.prisma.creatureFormations.findMany(args);
  }
  async creatureFormations(
    args: Prisma.CreatureFormationsFindUniqueArgs
  ): Promise<PrismaCreatureFormations | null> {
    return this.prisma.creatureFormations.findUnique(args);
  }
  async createCreatureFormations(
    args: Prisma.CreatureFormationsCreateArgs
  ): Promise<PrismaCreatureFormations> {
    return this.prisma.creatureFormations.create(args);
  }
  async updateCreatureFormations(
    args: Prisma.CreatureFormationsUpdateArgs
  ): Promise<PrismaCreatureFormations> {
    return this.prisma.creatureFormations.update(args);
  }
  async deleteCreatureFormations(
    args: Prisma.CreatureFormationsDeleteArgs
  ): Promise<PrismaCreatureFormations> {
    return this.prisma.creatureFormations.delete(args);
  }
}
