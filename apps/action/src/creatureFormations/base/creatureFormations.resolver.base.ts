/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureFormations } from "./CreatureFormations";
import { CreatureFormationsCountArgs } from "./CreatureFormationsCountArgs";
import { CreatureFormationsFindManyArgs } from "./CreatureFormationsFindManyArgs";
import { CreatureFormationsFindUniqueArgs } from "./CreatureFormationsFindUniqueArgs";
import { CreateCreatureFormationsArgs } from "./CreateCreatureFormationsArgs";
import { UpdateCreatureFormationsArgs } from "./UpdateCreatureFormationsArgs";
import { DeleteCreatureFormationsArgs } from "./DeleteCreatureFormationsArgs";
import { CreatureFormationsService } from "../creatureFormations.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureFormations)
export class CreatureFormationsResolverBase {
  constructor(
    protected readonly service: CreatureFormationsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormations",
    action: "read",
    possession: "any",
  })
  async _creatureFormationsItemsMeta(
    @graphql.Args() args: CreatureFormationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureFormations])
  @nestAccessControl.UseRoles({
    resource: "CreatureFormations",
    action: "read",
    possession: "any",
  })
  async creatureFormationsItems(
    @graphql.Args() args: CreatureFormationsFindManyArgs
  ): Promise<CreatureFormations[]> {
    return this.service.creatureFormationsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureFormations, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureFormations",
    action: "read",
    possession: "own",
  })
  async creatureFormations(
    @graphql.Args() args: CreatureFormationsFindUniqueArgs
  ): Promise<CreatureFormations | null> {
    const result = await this.service.creatureFormations(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureFormations)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormations",
    action: "create",
    possession: "any",
  })
  async createCreatureFormations(
    @graphql.Args() args: CreateCreatureFormationsArgs
  ): Promise<CreatureFormations> {
    return await this.service.createCreatureFormations({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureFormations)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormations",
    action: "update",
    possession: "any",
  })
  async updateCreatureFormations(
    @graphql.Args() args: UpdateCreatureFormationsArgs
  ): Promise<CreatureFormations | null> {
    try {
      return await this.service.updateCreatureFormations({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureFormations)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormations",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureFormations(
    @graphql.Args() args: DeleteCreatureFormationsArgs
  ): Promise<CreatureFormations | null> {
    try {
      return await this.service.deleteCreatureFormations(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
