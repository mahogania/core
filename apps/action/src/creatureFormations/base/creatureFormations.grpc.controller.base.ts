/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureFormationsService } from "../creatureFormations.service";
import { CreatureFormationsCreateInput } from "./CreatureFormationsCreateInput";
import { CreatureFormationsWhereInput } from "./CreatureFormationsWhereInput";
import { CreatureFormationsWhereUniqueInput } from "./CreatureFormationsWhereUniqueInput";
import { CreatureFormationsFindManyArgs } from "./CreatureFormationsFindManyArgs";
import { CreatureFormationsUpdateInput } from "./CreatureFormationsUpdateInput";
import { CreatureFormations } from "./CreatureFormations";

export class CreatureFormationsGrpcControllerBase {
  constructor(protected readonly service: CreatureFormationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureFormations })
  @GrpcMethod("CreatureFormationsService", "createCreatureFormations")
  async createCreatureFormations(
    @common.Body() data: CreatureFormationsCreateInput
  ): Promise<CreatureFormations> {
    return await this.service.createCreatureFormations({
      data: data,
      select: {
        angle: true,
        createdAt: true,
        dist: true,
        groupAi: true,
        id: true,
        leaderGuid: true,
        memberGuid: true,
        point_1: true,
        point_2: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureFormations] })
  @ApiNestedQuery(CreatureFormationsFindManyArgs)
  @GrpcMethod("CreatureFormationsService", "creatureFormationsItems")
  async creatureFormationsItems(
    @common.Req() request: Request
  ): Promise<CreatureFormations[]> {
    const args = plainToClass(CreatureFormationsFindManyArgs, request.query);
    return this.service.creatureFormationsItems({
      ...args,
      select: {
        angle: true,
        createdAt: true,
        dist: true,
        groupAi: true,
        id: true,
        leaderGuid: true,
        memberGuid: true,
        point_1: true,
        point_2: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureFormations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureFormationsService", "creatureFormations")
  async creatureFormations(
    @common.Param() params: CreatureFormationsWhereUniqueInput
  ): Promise<CreatureFormations | null> {
    const result = await this.service.creatureFormations({
      where: params,
      select: {
        angle: true,
        createdAt: true,
        dist: true,
        groupAi: true,
        id: true,
        leaderGuid: true,
        memberGuid: true,
        point_1: true,
        point_2: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureFormations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureFormationsService", "updateCreatureFormations")
  async updateCreatureFormations(
    @common.Param() params: CreatureFormationsWhereUniqueInput,
    @common.Body() data: CreatureFormationsUpdateInput
  ): Promise<CreatureFormations | null> {
    try {
      return await this.service.updateCreatureFormations({
        where: params,
        data: data,
        select: {
          angle: true,
          createdAt: true,
          dist: true,
          groupAi: true,
          id: true,
          leaderGuid: true,
          memberGuid: true,
          point_1: true,
          point_2: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureFormations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureFormationsService", "deleteCreatureFormations")
  async deleteCreatureFormations(
    @common.Param() params: CreatureFormationsWhereUniqueInput
  ): Promise<CreatureFormations | null> {
    try {
      return await this.service.deleteCreatureFormations({
        where: params,
        select: {
          angle: true,
          createdAt: true,
          dist: true,
          groupAi: true,
          id: true,
          leaderGuid: true,
          memberGuid: true,
          point_1: true,
          point_2: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
