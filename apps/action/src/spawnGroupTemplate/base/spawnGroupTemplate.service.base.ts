/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SpawnGroupTemplate as PrismaSpawnGroupTemplate,
} from "@prisma/client";

export class SpawnGroupTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpawnGroupTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.spawnGroupTemplate.count(args);
  }

  async spawnGroupTemplates(
    args: Prisma.SpawnGroupTemplateFindManyArgs
  ): Promise<PrismaSpawnGroupTemplate[]> {
    return this.prisma.spawnGroupTemplate.findMany(args);
  }
  async spawnGroupTemplate(
    args: Prisma.SpawnGroupTemplateFindUniqueArgs
  ): Promise<PrismaSpawnGroupTemplate | null> {
    return this.prisma.spawnGroupTemplate.findUnique(args);
  }
  async createSpawnGroupTemplate(
    args: Prisma.SpawnGroupTemplateCreateArgs
  ): Promise<PrismaSpawnGroupTemplate> {
    return this.prisma.spawnGroupTemplate.create(args);
  }
  async updateSpawnGroupTemplate(
    args: Prisma.SpawnGroupTemplateUpdateArgs
  ): Promise<PrismaSpawnGroupTemplate> {
    return this.prisma.spawnGroupTemplate.update(args);
  }
  async deleteSpawnGroupTemplate(
    args: Prisma.SpawnGroupTemplateDeleteArgs
  ): Promise<PrismaSpawnGroupTemplate> {
    return this.prisma.spawnGroupTemplate.delete(args);
  }
}
