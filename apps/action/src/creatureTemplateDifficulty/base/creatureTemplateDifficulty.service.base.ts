/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureTemplateDifficulty as PrismaCreatureTemplateDifficulty,
} from "@prisma/client";

export class CreatureTemplateDifficultyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTemplateDifficultyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureTemplateDifficulty.count(args);
  }

  async creatureTemplateDifficulties(
    args: Prisma.CreatureTemplateDifficultyFindManyArgs
  ): Promise<PrismaCreatureTemplateDifficulty[]> {
    return this.prisma.creatureTemplateDifficulty.findMany(args);
  }
  async creatureTemplateDifficulty(
    args: Prisma.CreatureTemplateDifficultyFindUniqueArgs
  ): Promise<PrismaCreatureTemplateDifficulty | null> {
    return this.prisma.creatureTemplateDifficulty.findUnique(args);
  }
  async createCreatureTemplateDifficulty(
    args: Prisma.CreatureTemplateDifficultyCreateArgs
  ): Promise<PrismaCreatureTemplateDifficulty> {
    return this.prisma.creatureTemplateDifficulty.create(args);
  }
  async updateCreatureTemplateDifficulty(
    args: Prisma.CreatureTemplateDifficultyUpdateArgs
  ): Promise<PrismaCreatureTemplateDifficulty> {
    return this.prisma.creatureTemplateDifficulty.update(args);
  }
  async deleteCreatureTemplateDifficulty(
    args: Prisma.CreatureTemplateDifficultyDeleteArgs
  ): Promise<PrismaCreatureTemplateDifficulty> {
    return this.prisma.creatureTemplateDifficulty.delete(args);
  }
}
