/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SpellArea as PrismaSpellArea } from "@prisma/client";

export class SpellAreaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpellAreaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.spellArea.count(args);
  }

  async spellAreas(
    args: Prisma.SpellAreaFindManyArgs
  ): Promise<PrismaSpellArea[]> {
    return this.prisma.spellArea.findMany(args);
  }
  async spellArea(
    args: Prisma.SpellAreaFindUniqueArgs
  ): Promise<PrismaSpellArea | null> {
    return this.prisma.spellArea.findUnique(args);
  }
  async createSpellArea(
    args: Prisma.SpellAreaCreateArgs
  ): Promise<PrismaSpellArea> {
    return this.prisma.spellArea.create(args);
  }
  async updateSpellArea(
    args: Prisma.SpellAreaUpdateArgs
  ): Promise<PrismaSpellArea> {
    return this.prisma.spellArea.update(args);
  }
  async deleteSpellArea(
    args: Prisma.SpellAreaDeleteArgs
  ): Promise<PrismaSpellArea> {
    return this.prisma.spellArea.delete(args);
  }
}
