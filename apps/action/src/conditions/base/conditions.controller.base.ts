/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ConditionsService } from "../conditions.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ConditionsCreateInput } from "./ConditionsCreateInput";
import { Conditions } from "./Conditions";
import { ConditionsFindManyArgs } from "./ConditionsFindManyArgs";
import { ConditionsWhereUniqueInput } from "./ConditionsWhereUniqueInput";
import { ConditionsUpdateInput } from "./ConditionsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ConditionsControllerBase {
  constructor(
    protected readonly service: ConditionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Conditions })
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ConditionsCreateInput,
  })
  async createConditions(
    @common.Body() data: ConditionsCreateInput
  ): Promise<Conditions> {
    return await this.service.createConditions({
      data: data,
      select: {
        comment: true,
        conditionStringValue1: true,
        conditionTarget: true,
        conditionTypeOrReference: true,
        conditionValue1: true,
        conditionValue2: true,
        conditionValue3: true,
        createdAt: true,
        elseGroup: true,
        errorTextId: true,
        errorType: true,
        id: true,
        negativeCondition: true,
        scriptName: true,
        sourceEntry: true,
        sourceGroup: true,
        sourceId: true,
        sourceTypeOrReferenceId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Conditions] })
  @ApiNestedQuery(ConditionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async conditionsItems(@common.Req() request: Request): Promise<Conditions[]> {
    const args = plainToClass(ConditionsFindManyArgs, request.query);
    return this.service.conditionsItems({
      ...args,
      select: {
        comment: true,
        conditionStringValue1: true,
        conditionTarget: true,
        conditionTypeOrReference: true,
        conditionValue1: true,
        conditionValue2: true,
        conditionValue3: true,
        createdAt: true,
        elseGroup: true,
        errorTextId: true,
        errorType: true,
        id: true,
        negativeCondition: true,
        scriptName: true,
        sourceEntry: true,
        sourceGroup: true,
        sourceId: true,
        sourceTypeOrReferenceId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Conditions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async conditions(
    @common.Param() params: ConditionsWhereUniqueInput
  ): Promise<Conditions | null> {
    const result = await this.service.conditions({
      where: params,
      select: {
        comment: true,
        conditionStringValue1: true,
        conditionTarget: true,
        conditionTypeOrReference: true,
        conditionValue1: true,
        conditionValue2: true,
        conditionValue3: true,
        createdAt: true,
        elseGroup: true,
        errorTextId: true,
        errorType: true,
        id: true,
        negativeCondition: true,
        scriptName: true,
        sourceEntry: true,
        sourceGroup: true,
        sourceId: true,
        sourceTypeOrReferenceId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Conditions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ConditionsUpdateInput,
  })
  async updateConditions(
    @common.Param() params: ConditionsWhereUniqueInput,
    @common.Body() data: ConditionsUpdateInput
  ): Promise<Conditions | null> {
    try {
      return await this.service.updateConditions({
        where: params,
        data: data,
        select: {
          comment: true,
          conditionStringValue1: true,
          conditionTarget: true,
          conditionTypeOrReference: true,
          conditionValue1: true,
          conditionValue2: true,
          conditionValue3: true,
          createdAt: true,
          elseGroup: true,
          errorTextId: true,
          errorType: true,
          id: true,
          negativeCondition: true,
          scriptName: true,
          sourceEntry: true,
          sourceGroup: true,
          sourceId: true,
          sourceTypeOrReferenceId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Conditions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteConditions(
    @common.Param() params: ConditionsWhereUniqueInput
  ): Promise<Conditions | null> {
    try {
      return await this.service.deleteConditions({
        where: params,
        select: {
          comment: true,
          conditionStringValue1: true,
          conditionTarget: true,
          conditionTypeOrReference: true,
          conditionValue1: true,
          conditionValue2: true,
          conditionValue3: true,
          createdAt: true,
          elseGroup: true,
          errorTextId: true,
          errorType: true,
          id: true,
          negativeCondition: true,
          scriptName: true,
          sourceEntry: true,
          sourceGroup: true,
          sourceId: true,
          sourceTypeOrReferenceId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
