/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Conditions as PrismaConditions } from "@prisma/client";

export class ConditionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConditionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conditions.count(args);
  }

  async conditionsItems(
    args: Prisma.ConditionsFindManyArgs
  ): Promise<PrismaConditions[]> {
    return this.prisma.conditions.findMany(args);
  }
  async conditions(
    args: Prisma.ConditionsFindUniqueArgs
  ): Promise<PrismaConditions | null> {
    return this.prisma.conditions.findUnique(args);
  }
  async createConditions(
    args: Prisma.ConditionsCreateArgs
  ): Promise<PrismaConditions> {
    return this.prisma.conditions.create(args);
  }
  async updateConditions(
    args: Prisma.ConditionsUpdateArgs
  ): Promise<PrismaConditions> {
    return this.prisma.conditions.update(args);
  }
  async deleteConditions(
    args: Prisma.ConditionsDeleteArgs
  ): Promise<PrismaConditions> {
    return this.prisma.conditions.delete(args);
  }
}
