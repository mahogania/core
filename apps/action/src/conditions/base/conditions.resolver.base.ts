/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Conditions } from "./Conditions";
import { ConditionsCountArgs } from "./ConditionsCountArgs";
import { ConditionsFindManyArgs } from "./ConditionsFindManyArgs";
import { ConditionsFindUniqueArgs } from "./ConditionsFindUniqueArgs";
import { CreateConditionsArgs } from "./CreateConditionsArgs";
import { UpdateConditionsArgs } from "./UpdateConditionsArgs";
import { DeleteConditionsArgs } from "./DeleteConditionsArgs";
import { ConditionsService } from "../conditions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Conditions)
export class ConditionsResolverBase {
  constructor(
    protected readonly service: ConditionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "read",
    possession: "any",
  })
  async _conditionsItemsMeta(
    @graphql.Args() args: ConditionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Conditions])
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "read",
    possession: "any",
  })
  async conditionsItems(
    @graphql.Args() args: ConditionsFindManyArgs
  ): Promise<Conditions[]> {
    return this.service.conditionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Conditions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "read",
    possession: "own",
  })
  async conditions(
    @graphql.Args() args: ConditionsFindUniqueArgs
  ): Promise<Conditions | null> {
    const result = await this.service.conditions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Conditions)
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "create",
    possession: "any",
  })
  async createConditions(
    @graphql.Args() args: CreateConditionsArgs
  ): Promise<Conditions> {
    return await this.service.createConditions({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Conditions)
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "update",
    possession: "any",
  })
  async updateConditions(
    @graphql.Args() args: UpdateConditionsArgs
  ): Promise<Conditions | null> {
    try {
      return await this.service.updateConditions({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Conditions)
  @nestAccessControl.UseRoles({
    resource: "Conditions",
    action: "delete",
    possession: "any",
  })
  async deleteConditions(
    @graphql.Args() args: DeleteConditionsArgs
  ): Promise<Conditions | null> {
    try {
      return await this.service.deleteConditions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
