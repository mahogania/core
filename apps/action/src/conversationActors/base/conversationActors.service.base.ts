/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ConversationActors as PrismaConversationActors,
} from "@prisma/client";

export class ConversationActorsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationActorsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationActors.count(args);
  }

  async conversationActorsItems(
    args: Prisma.ConversationActorsFindManyArgs
  ): Promise<PrismaConversationActors[]> {
    return this.prisma.conversationActors.findMany(args);
  }
  async conversationActors(
    args: Prisma.ConversationActorsFindUniqueArgs
  ): Promise<PrismaConversationActors | null> {
    return this.prisma.conversationActors.findUnique(args);
  }
  async createConversationActors(
    args: Prisma.ConversationActorsCreateArgs
  ): Promise<PrismaConversationActors> {
    return this.prisma.conversationActors.create(args);
  }
  async updateConversationActors(
    args: Prisma.ConversationActorsUpdateArgs
  ): Promise<PrismaConversationActors> {
    return this.prisma.conversationActors.update(args);
  }
  async deleteConversationActors(
    args: Prisma.ConversationActorsDeleteArgs
  ): Promise<PrismaConversationActors> {
    return this.prisma.conversationActors.delete(args);
  }
}
