/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ConversationActors } from "./ConversationActors";
import { ConversationActorsCountArgs } from "./ConversationActorsCountArgs";
import { ConversationActorsFindManyArgs } from "./ConversationActorsFindManyArgs";
import { ConversationActorsFindUniqueArgs } from "./ConversationActorsFindUniqueArgs";
import { CreateConversationActorsArgs } from "./CreateConversationActorsArgs";
import { UpdateConversationActorsArgs } from "./UpdateConversationActorsArgs";
import { DeleteConversationActorsArgs } from "./DeleteConversationActorsArgs";
import { ConversationActorsService } from "../conversationActors.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ConversationActors)
export class ConversationActorsResolverBase {
  constructor(
    protected readonly service: ConversationActorsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ConversationActors",
    action: "read",
    possession: "any",
  })
  async _conversationActorsItemsMeta(
    @graphql.Args() args: ConversationActorsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ConversationActors])
  @nestAccessControl.UseRoles({
    resource: "ConversationActors",
    action: "read",
    possession: "any",
  })
  async conversationActorsItems(
    @graphql.Args() args: ConversationActorsFindManyArgs
  ): Promise<ConversationActors[]> {
    return this.service.conversationActorsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ConversationActors, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ConversationActors",
    action: "read",
    possession: "own",
  })
  async conversationActors(
    @graphql.Args() args: ConversationActorsFindUniqueArgs
  ): Promise<ConversationActors | null> {
    const result = await this.service.conversationActors(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationActors)
  @nestAccessControl.UseRoles({
    resource: "ConversationActors",
    action: "create",
    possession: "any",
  })
  async createConversationActors(
    @graphql.Args() args: CreateConversationActorsArgs
  ): Promise<ConversationActors> {
    return await this.service.createConversationActors({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationActors)
  @nestAccessControl.UseRoles({
    resource: "ConversationActors",
    action: "update",
    possession: "any",
  })
  async updateConversationActors(
    @graphql.Args() args: UpdateConversationActorsArgs
  ): Promise<ConversationActors | null> {
    try {
      return await this.service.updateConversationActors({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConversationActors)
  @nestAccessControl.UseRoles({
    resource: "ConversationActors",
    action: "delete",
    possession: "any",
  })
  async deleteConversationActors(
    @graphql.Args() args: DeleteConversationActorsArgs
  ): Promise<ConversationActors | null> {
    try {
      return await this.service.deleteConversationActors(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
