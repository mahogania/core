/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureQuestEnder } from "./CreatureQuestEnder";
import { CreatureQuestEnderCountArgs } from "./CreatureQuestEnderCountArgs";
import { CreatureQuestEnderFindManyArgs } from "./CreatureQuestEnderFindManyArgs";
import { CreatureQuestEnderFindUniqueArgs } from "./CreatureQuestEnderFindUniqueArgs";
import { CreateCreatureQuestEnderArgs } from "./CreateCreatureQuestEnderArgs";
import { UpdateCreatureQuestEnderArgs } from "./UpdateCreatureQuestEnderArgs";
import { DeleteCreatureQuestEnderArgs } from "./DeleteCreatureQuestEnderArgs";
import { CreatureQuestEnderService } from "../creatureQuestEnder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureQuestEnder)
export class CreatureQuestEnderResolverBase {
  constructor(
    protected readonly service: CreatureQuestEnderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestEnder",
    action: "read",
    possession: "any",
  })
  async _creatureQuestEndersMeta(
    @graphql.Args() args: CreatureQuestEnderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureQuestEnder])
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestEnder",
    action: "read",
    possession: "any",
  })
  async creatureQuestEnders(
    @graphql.Args() args: CreatureQuestEnderFindManyArgs
  ): Promise<CreatureQuestEnder[]> {
    return this.service.creatureQuestEnders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureQuestEnder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestEnder",
    action: "read",
    possession: "own",
  })
  async creatureQuestEnder(
    @graphql.Args() args: CreatureQuestEnderFindUniqueArgs
  ): Promise<CreatureQuestEnder | null> {
    const result = await this.service.creatureQuestEnder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureQuestEnder)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestEnder",
    action: "create",
    possession: "any",
  })
  async createCreatureQuestEnder(
    @graphql.Args() args: CreateCreatureQuestEnderArgs
  ): Promise<CreatureQuestEnder> {
    return await this.service.createCreatureQuestEnder({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureQuestEnder)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestEnder",
    action: "update",
    possession: "any",
  })
  async updateCreatureQuestEnder(
    @graphql.Args() args: UpdateCreatureQuestEnderArgs
  ): Promise<CreatureQuestEnder | null> {
    try {
      return await this.service.updateCreatureQuestEnder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureQuestEnder)
  @nestAccessControl.UseRoles({
    resource: "CreatureQuestEnder",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureQuestEnder(
    @graphql.Args() args: DeleteCreatureQuestEnderArgs
  ): Promise<CreatureQuestEnder | null> {
    try {
      return await this.service.deleteCreatureQuestEnder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
