/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureQuestEnderService } from "../creatureQuestEnder.service";
import { CreatureQuestEnderCreateInput } from "./CreatureQuestEnderCreateInput";
import { CreatureQuestEnderWhereInput } from "./CreatureQuestEnderWhereInput";
import { CreatureQuestEnderWhereUniqueInput } from "./CreatureQuestEnderWhereUniqueInput";
import { CreatureQuestEnderFindManyArgs } from "./CreatureQuestEnderFindManyArgs";
import { CreatureQuestEnderUpdateInput } from "./CreatureQuestEnderUpdateInput";
import { CreatureQuestEnder } from "./CreatureQuestEnder";

export class CreatureQuestEnderGrpcControllerBase {
  constructor(protected readonly service: CreatureQuestEnderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureQuestEnder })
  @GrpcMethod("CreatureQuestEnderService", "createCreatureQuestEnder")
  async createCreatureQuestEnder(
    @common.Body() data: CreatureQuestEnderCreateInput
  ): Promise<CreatureQuestEnder> {
    return await this.service.createCreatureQuestEnder({
      data: data,
      select: {
        createdAt: true,
        id: true,
        quest: true,
        updatedAt: true,
        verifiedBuild: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureQuestEnder] })
  @ApiNestedQuery(CreatureQuestEnderFindManyArgs)
  @GrpcMethod("CreatureQuestEnderService", "creatureQuestEnders")
  async creatureQuestEnders(
    @common.Req() request: Request
  ): Promise<CreatureQuestEnder[]> {
    const args = plainToClass(CreatureQuestEnderFindManyArgs, request.query);
    return this.service.creatureQuestEnders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        quest: true,
        updatedAt: true,
        verifiedBuild: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestEnder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestEnderService", "creatureQuestEnder")
  async creatureQuestEnder(
    @common.Param() params: CreatureQuestEnderWhereUniqueInput
  ): Promise<CreatureQuestEnder | null> {
    const result = await this.service.creatureQuestEnder({
      where: params,
      select: {
        createdAt: true,
        id: true,
        quest: true,
        updatedAt: true,
        verifiedBuild: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestEnder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestEnderService", "updateCreatureQuestEnder")
  async updateCreatureQuestEnder(
    @common.Param() params: CreatureQuestEnderWhereUniqueInput,
    @common.Body() data: CreatureQuestEnderUpdateInput
  ): Promise<CreatureQuestEnder | null> {
    try {
      return await this.service.updateCreatureQuestEnder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          quest: true,
          updatedAt: true,
          verifiedBuild: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureQuestEnder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureQuestEnderService", "deleteCreatureQuestEnder")
  async deleteCreatureQuestEnder(
    @common.Param() params: CreatureQuestEnderWhereUniqueInput
  ): Promise<CreatureQuestEnder | null> {
    try {
      return await this.service.deleteCreatureQuestEnder({
        where: params,
        select: {
          createdAt: true,
          id: true,
          quest: true,
          updatedAt: true,
          verifiedBuild: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
