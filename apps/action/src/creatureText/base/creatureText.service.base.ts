/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CreatureText as PrismaCreatureText } from "@prisma/client";

export class CreatureTextServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTextCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureText.count(args);
  }

  async creatureTexts(
    args: Prisma.CreatureTextFindManyArgs
  ): Promise<PrismaCreatureText[]> {
    return this.prisma.creatureText.findMany(args);
  }
  async creatureText(
    args: Prisma.CreatureTextFindUniqueArgs
  ): Promise<PrismaCreatureText | null> {
    return this.prisma.creatureText.findUnique(args);
  }
  async createCreatureText(
    args: Prisma.CreatureTextCreateArgs
  ): Promise<PrismaCreatureText> {
    return this.prisma.creatureText.create(args);
  }
  async updateCreatureText(
    args: Prisma.CreatureTextUpdateArgs
  ): Promise<PrismaCreatureText> {
    return this.prisma.creatureText.update(args);
  }
  async deleteCreatureText(
    args: Prisma.CreatureTextDeleteArgs
  ): Promise<PrismaCreatureText> {
    return this.prisma.creatureText.delete(args);
  }
}
