/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CreatureService } from "../creature.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatureCreateInput } from "./CreatureCreateInput";
import { Creature } from "./Creature";
import { CreatureFindManyArgs } from "./CreatureFindManyArgs";
import { CreatureWhereUniqueInput } from "./CreatureWhereUniqueInput";
import { CreatureUpdateInput } from "./CreatureUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CreatureControllerBase {
  constructor(
    protected readonly service: CreatureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Creature })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureCreateInput,
  })
  async createCreature(
    @common.Body() data: CreatureCreateInput
  ): Promise<Creature> {
    return await this.service.createCreature({
      data: data,
      select: {
        areaId: true,
        createdAt: true,
        curhealth: true,
        curmana: true,
        currentwaypoint: true,
        equipmentId: true,
        guid: true,
        id: true,
        map: true,
        modelid: true,
        movementType: true,
        npcflag: true,
        orientation: true,
        phaseGroup: true,
        phaseId: true,
        phaseUseFlags: true,
        positionX: true,
        positionY: true,
        positionZ: true,
        scriptName: true,
        spawnDifficulties: true,
        spawntimesecs: true,
        stringId: true,
        terrainSwapMap: true,
        unitFlags: true,
        unitFlags2: true,
        unitFlags3: true,
        updatedAt: true,
        verifiedBuild: true,
        wanderDistance: true,
        zoneId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Creature] })
  @ApiNestedQuery(CreatureFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatures(@common.Req() request: Request): Promise<Creature[]> {
    const args = plainToClass(CreatureFindManyArgs, request.query);
    return this.service.creatures({
      ...args,
      select: {
        areaId: true,
        createdAt: true,
        curhealth: true,
        curmana: true,
        currentwaypoint: true,
        equipmentId: true,
        guid: true,
        id: true,
        map: true,
        modelid: true,
        movementType: true,
        npcflag: true,
        orientation: true,
        phaseGroup: true,
        phaseId: true,
        phaseUseFlags: true,
        positionX: true,
        positionY: true,
        positionZ: true,
        scriptName: true,
        spawnDifficulties: true,
        spawntimesecs: true,
        stringId: true,
        terrainSwapMap: true,
        unitFlags: true,
        unitFlags2: true,
        unitFlags3: true,
        updatedAt: true,
        verifiedBuild: true,
        wanderDistance: true,
        zoneId: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Creature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creature(
    @common.Param() params: CreatureWhereUniqueInput
  ): Promise<Creature | null> {
    const result = await this.service.creature({
      where: params,
      select: {
        areaId: true,
        createdAt: true,
        curhealth: true,
        curmana: true,
        currentwaypoint: true,
        equipmentId: true,
        guid: true,
        id: true,
        map: true,
        modelid: true,
        movementType: true,
        npcflag: true,
        orientation: true,
        phaseGroup: true,
        phaseId: true,
        phaseUseFlags: true,
        positionX: true,
        positionY: true,
        positionZ: true,
        scriptName: true,
        spawnDifficulties: true,
        spawntimesecs: true,
        stringId: true,
        terrainSwapMap: true,
        unitFlags: true,
        unitFlags2: true,
        unitFlags3: true,
        updatedAt: true,
        verifiedBuild: true,
        wanderDistance: true,
        zoneId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Creature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureUpdateInput,
  })
  async updateCreature(
    @common.Param() params: CreatureWhereUniqueInput,
    @common.Body() data: CreatureUpdateInput
  ): Promise<Creature | null> {
    try {
      return await this.service.updateCreature({
        where: params,
        data: data,
        select: {
          areaId: true,
          createdAt: true,
          curhealth: true,
          curmana: true,
          currentwaypoint: true,
          equipmentId: true,
          guid: true,
          id: true,
          map: true,
          modelid: true,
          movementType: true,
          npcflag: true,
          orientation: true,
          phaseGroup: true,
          phaseId: true,
          phaseUseFlags: true,
          positionX: true,
          positionY: true,
          positionZ: true,
          scriptName: true,
          spawnDifficulties: true,
          spawntimesecs: true,
          stringId: true,
          terrainSwapMap: true,
          unitFlags: true,
          unitFlags2: true,
          unitFlags3: true,
          updatedAt: true,
          verifiedBuild: true,
          wanderDistance: true,
          zoneId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Creature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCreature(
    @common.Param() params: CreatureWhereUniqueInput
  ): Promise<Creature | null> {
    try {
      return await this.service.deleteCreature({
        where: params,
        select: {
          areaId: true,
          createdAt: true,
          curhealth: true,
          curmana: true,
          currentwaypoint: true,
          equipmentId: true,
          guid: true,
          id: true,
          map: true,
          modelid: true,
          movementType: true,
          npcflag: true,
          orientation: true,
          phaseGroup: true,
          phaseId: true,
          phaseUseFlags: true,
          positionX: true,
          positionY: true,
          positionZ: true,
          scriptName: true,
          spawnDifficulties: true,
          spawntimesecs: true,
          stringId: true,
          terrainSwapMap: true,
          unitFlags: true,
          unitFlags2: true,
          unitFlags3: true,
          updatedAt: true,
          verifiedBuild: true,
          wanderDistance: true,
          zoneId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
