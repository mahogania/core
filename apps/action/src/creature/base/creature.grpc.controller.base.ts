/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureService } from "../creature.service";
import { CreatureCreateInput } from "./CreatureCreateInput";
import { CreatureWhereInput } from "./CreatureWhereInput";
import { CreatureWhereUniqueInput } from "./CreatureWhereUniqueInput";
import { CreatureFindManyArgs } from "./CreatureFindManyArgs";
import { CreatureUpdateInput } from "./CreatureUpdateInput";
import { Creature } from "./Creature";

export class CreatureGrpcControllerBase {
  constructor(protected readonly service: CreatureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Creature })
  @GrpcMethod("CreatureService", "createCreature")
  async createCreature(
    @common.Body() data: CreatureCreateInput
  ): Promise<Creature> {
    return await this.service.createCreature({
      data: {
        ...data,

        creatureEquipments: data.creatureEquipments
          ? {
              connect: data.creatureEquipments,
            }
          : undefined,

        creatureFormations: data.creatureFormations
          ? {
              connect: data.creatureFormations,
            }
          : undefined,

        creatureImmunities: data.creatureImmunities
          ? {
              connect: data.creatureImmunities,
            }
          : undefined,

        creatureLevelStats: data.creatureLevelStats
          ? {
              connect: data.creatureLevelStats,
            }
          : undefined,

        creatureLoots: data.creatureLoots
          ? {
              connect: data.creatureLoots,
            }
          : undefined,

        creatureModelInfo: {
          connect: data.creatureModelInfo,
        },

        creatureMovementInfos: {
          connect: data.creatureMovementInfos,
        },
      },
      select: {
        areaId: true,
        behaviourName: true,
        createdAt: true,

        creatureEquipments: {
          select: {
            id: true,
          },
        },

        creatureFormations: {
          select: {
            id: true,
          },
        },

        creatureImmunities: {
          select: {
            id: true,
          },
        },

        creatureLevelStats: {
          select: {
            id: true,
          },
        },

        creatureLoots: {
          select: {
            id: true,
          },
        },

        creatureModelInfo: {
          select: {
            id: true,
          },
        },

        creatureMovementInfos: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        modelId: true,
        name: true,
        realmId: true,
        transformId: true,
        updatedAt: true,
        zoneId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Creature] })
  @ApiNestedQuery(CreatureFindManyArgs)
  @GrpcMethod("CreatureService", "creatures")
  async creatures(@common.Req() request: Request): Promise<Creature[]> {
    const args = plainToClass(CreatureFindManyArgs, request.query);
    return this.service.creatures({
      ...args,
      select: {
        areaId: true,
        behaviourName: true,
        createdAt: true,

        creatureEquipments: {
          select: {
            id: true,
          },
        },

        creatureFormations: {
          select: {
            id: true,
          },
        },

        creatureImmunities: {
          select: {
            id: true,
          },
        },

        creatureLevelStats: {
          select: {
            id: true,
          },
        },

        creatureLoots: {
          select: {
            id: true,
          },
        },

        creatureModelInfo: {
          select: {
            id: true,
          },
        },

        creatureMovementInfos: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        modelId: true,
        name: true,
        realmId: true,
        transformId: true,
        updatedAt: true,
        zoneId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Creature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureService", "creature")
  async creature(
    @common.Param() params: CreatureWhereUniqueInput
  ): Promise<Creature | null> {
    const result = await this.service.creature({
      where: params,
      select: {
        areaId: true,
        behaviourName: true,
        createdAt: true,

        creatureEquipments: {
          select: {
            id: true,
          },
        },

        creatureFormations: {
          select: {
            id: true,
          },
        },

        creatureImmunities: {
          select: {
            id: true,
          },
        },

        creatureLevelStats: {
          select: {
            id: true,
          },
        },

        creatureLoots: {
          select: {
            id: true,
          },
        },

        creatureModelInfo: {
          select: {
            id: true,
          },
        },

        creatureMovementInfos: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        modelId: true,
        name: true,
        realmId: true,
        transformId: true,
        updatedAt: true,
        zoneId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Creature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureService", "updateCreature")
  async updateCreature(
    @common.Param() params: CreatureWhereUniqueInput,
    @common.Body() data: CreatureUpdateInput
  ): Promise<Creature | null> {
    try {
      return await this.service.updateCreature({
        where: params,
        data: {
          ...data,

          creatureEquipments: data.creatureEquipments
            ? {
                connect: data.creatureEquipments,
              }
            : undefined,

          creatureFormations: data.creatureFormations
            ? {
                connect: data.creatureFormations,
              }
            : undefined,

          creatureImmunities: data.creatureImmunities
            ? {
                connect: data.creatureImmunities,
              }
            : undefined,

          creatureLevelStats: data.creatureLevelStats
            ? {
                connect: data.creatureLevelStats,
              }
            : undefined,

          creatureLoots: data.creatureLoots
            ? {
                connect: data.creatureLoots,
              }
            : undefined,

          creatureModelInfo: {
            connect: data.creatureModelInfo,
          },

          creatureMovementInfos: {
            connect: data.creatureMovementInfos,
          },
        },
        select: {
          areaId: true,
          behaviourName: true,
          createdAt: true,

          creatureEquipments: {
            select: {
              id: true,
            },
          },

          creatureFormations: {
            select: {
              id: true,
            },
          },

          creatureImmunities: {
            select: {
              id: true,
            },
          },

          creatureLevelStats: {
            select: {
              id: true,
            },
          },

          creatureLoots: {
            select: {
              id: true,
            },
          },

          creatureModelInfo: {
            select: {
              id: true,
            },
          },

          creatureMovementInfos: {
            select: {
              id: true,
            },
          },

          id: true,
          mapId: true,
          modelId: true,
          name: true,
          realmId: true,
          transformId: true,
          updatedAt: true,
          zoneId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Creature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureService", "deleteCreature")
  async deleteCreature(
    @common.Param() params: CreatureWhereUniqueInput
  ): Promise<Creature | null> {
    try {
      return await this.service.deleteCreature({
        where: params,
        select: {
          areaId: true,
          behaviourName: true,
          createdAt: true,

          creatureEquipments: {
            select: {
              id: true,
            },
          },

          creatureFormations: {
            select: {
              id: true,
            },
          },

          creatureImmunities: {
            select: {
              id: true,
            },
          },

          creatureLevelStats: {
            select: {
              id: true,
            },
          },

          creatureLoots: {
            select: {
              id: true,
            },
          },

          creatureModelInfo: {
            select: {
              id: true,
            },
          },

          creatureMovementInfos: {
            select: {
              id: true,
            },
          },

          id: true,
          mapId: true,
          modelId: true,
          name: true,
          realmId: true,
          transformId: true,
          updatedAt: true,
          zoneId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
