/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Creature as PrismaCreature,
  CreatureEquipment as PrismaCreatureEquipment,
  CreatureFormation as PrismaCreatureFormation,
  CreatureImmunity as PrismaCreatureImmunity,
  CreatureLevelStat as PrismaCreatureLevelStat,
  CreatureLoot as PrismaCreatureLoot,
  CreatureModelInfo as PrismaCreatureModelInfo,
  CreatureMovementInfo as PrismaCreatureMovementInfo,
} from "@prisma/client";

export class CreatureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CreatureCountArgs, "select">): Promise<number> {
    return this.prisma.creature.count(args);
  }

  async creatures(
    args: Prisma.CreatureFindManyArgs
  ): Promise<PrismaCreature[]> {
    return this.prisma.creature.findMany(args);
  }
  async creature(
    args: Prisma.CreatureFindUniqueArgs
  ): Promise<PrismaCreature | null> {
    return this.prisma.creature.findUnique(args);
  }
  async createCreature(
    args: Prisma.CreatureCreateArgs
  ): Promise<PrismaCreature> {
    return this.prisma.creature.create(args);
  }
  async updateCreature(
    args: Prisma.CreatureUpdateArgs
  ): Promise<PrismaCreature> {
    return this.prisma.creature.update(args);
  }
  async deleteCreature(
    args: Prisma.CreatureDeleteArgs
  ): Promise<PrismaCreature> {
    return this.prisma.creature.delete(args);
  }

  async getCreatureEquipments(
    parentId: string
  ): Promise<PrismaCreatureEquipment | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureEquipments();
  }

  async getCreatureFormations(
    parentId: string
  ): Promise<PrismaCreatureFormation | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureFormations();
  }

  async getCreatureImmunities(
    parentId: string
  ): Promise<PrismaCreatureImmunity | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureImmunities();
  }

  async getCreatureLevelStats(
    parentId: string
  ): Promise<PrismaCreatureLevelStat | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureLevelStats();
  }

  async getCreatureLoots(parentId: string): Promise<PrismaCreatureLoot | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureLoots();
  }

  async getCreatureModelInfo(
    parentId: string
  ): Promise<PrismaCreatureModelInfo | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureModelInfo();
  }

  async getCreatureMovementInfos(
    parentId: string
  ): Promise<PrismaCreatureMovementInfo | null> {
    return this.prisma.creature
      .findUnique({
        where: { id: parentId },
      })
      .creatureMovementInfos();
  }
}
