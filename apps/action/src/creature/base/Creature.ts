/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsInt,
  Min,
  Max,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { CreatureEquipment } from "../../creatureEquipment/base/CreatureEquipment";
import { CreatureFormation } from "../../creatureFormation/base/CreatureFormation";
import { CreatureImmunity } from "../../creatureImmunity/base/CreatureImmunity";
import { CreatureLevelStat } from "../../creatureLevelStat/base/CreatureLevelStat";
import { CreatureLoot } from "../../creatureLoot/base/CreatureLoot";
import { CreatureModelInfo } from "../../creatureModelInfo/base/CreatureModelInfo";
import { CreatureMovementInfo } from "../../creatureMovementInfo/base/CreatureMovementInfo";

@ObjectType()
class Creature {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  areaId!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  behaviourName!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => CreatureEquipment,
  })
  @ValidateNested()
  @Type(() => CreatureEquipment)
  @IsOptional()
  creatureEquipments?: CreatureEquipment | null;

  @ApiProperty({
    required: false,
    type: () => CreatureFormation,
  })
  @ValidateNested()
  @Type(() => CreatureFormation)
  @IsOptional()
  creatureFormations?: CreatureFormation | null;

  @ApiProperty({
    required: false,
    type: () => CreatureImmunity,
  })
  @ValidateNested()
  @Type(() => CreatureImmunity)
  @IsOptional()
  creatureImmunities?: CreatureImmunity | null;

  @ApiProperty({
    required: false,
    type: () => CreatureLevelStat,
  })
  @ValidateNested()
  @Type(() => CreatureLevelStat)
  @IsOptional()
  creatureLevelStats?: CreatureLevelStat | null;

  @ApiProperty({
    required: false,
    type: () => CreatureLoot,
  })
  @ValidateNested()
  @Type(() => CreatureLoot)
  @IsOptional()
  creatureLoots?: CreatureLoot | null;

  @ApiProperty({
    required: true,
    type: () => CreatureModelInfo,
  })
  @ValidateNested()
  @Type(() => CreatureModelInfo)
  creatureModelInfo?: CreatureModelInfo;

  @ApiProperty({
    required: true,
    type: () => CreatureMovementInfo,
  })
  @ValidateNested()
  @Type(() => CreatureMovementInfo)
  creatureMovementInfos?: CreatureMovementInfo;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  mapId!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  modelId!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  realmId!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  transformId!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  zoneId!: number | null;
}

export { Creature as Creature };
