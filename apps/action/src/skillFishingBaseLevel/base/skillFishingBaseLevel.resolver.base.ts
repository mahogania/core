/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SkillFishingBaseLevel } from "./SkillFishingBaseLevel";
import { SkillFishingBaseLevelCountArgs } from "./SkillFishingBaseLevelCountArgs";
import { SkillFishingBaseLevelFindManyArgs } from "./SkillFishingBaseLevelFindManyArgs";
import { SkillFishingBaseLevelFindUniqueArgs } from "./SkillFishingBaseLevelFindUniqueArgs";
import { DeleteSkillFishingBaseLevelArgs } from "./DeleteSkillFishingBaseLevelArgs";
import { SkillFishingBaseLevelService } from "../skillFishingBaseLevel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SkillFishingBaseLevel)
export class SkillFishingBaseLevelResolverBase {
  constructor(
    protected readonly service: SkillFishingBaseLevelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SkillFishingBaseLevel",
    action: "read",
    possession: "any",
  })
  async _skillFishingBaseLevelsMeta(
    @graphql.Args() args: SkillFishingBaseLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SkillFishingBaseLevel])
  @nestAccessControl.UseRoles({
    resource: "SkillFishingBaseLevel",
    action: "read",
    possession: "any",
  })
  async skillFishingBaseLevels(
    @graphql.Args() args: SkillFishingBaseLevelFindManyArgs
  ): Promise<SkillFishingBaseLevel[]> {
    return this.service.skillFishingBaseLevels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SkillFishingBaseLevel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SkillFishingBaseLevel",
    action: "read",
    possession: "own",
  })
  async skillFishingBaseLevel(
    @graphql.Args() args: SkillFishingBaseLevelFindUniqueArgs
  ): Promise<SkillFishingBaseLevel | null> {
    const result = await this.service.skillFishingBaseLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SkillFishingBaseLevel)
  @nestAccessControl.UseRoles({
    resource: "SkillFishingBaseLevel",
    action: "delete",
    possession: "any",
  })
  async deleteSkillFishingBaseLevel(
    @graphql.Args() args: DeleteSkillFishingBaseLevelArgs
  ): Promise<SkillFishingBaseLevel | null> {
    try {
      return await this.service.deleteSkillFishingBaseLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
