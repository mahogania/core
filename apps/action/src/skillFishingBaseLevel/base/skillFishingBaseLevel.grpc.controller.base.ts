/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SkillFishingBaseLevelService } from "../skillFishingBaseLevel.service";
import { SkillFishingBaseLevelCreateInput } from "./SkillFishingBaseLevelCreateInput";
import { SkillFishingBaseLevelWhereInput } from "./SkillFishingBaseLevelWhereInput";
import { SkillFishingBaseLevelWhereUniqueInput } from "./SkillFishingBaseLevelWhereUniqueInput";
import { SkillFishingBaseLevelFindManyArgs } from "./SkillFishingBaseLevelFindManyArgs";
import { SkillFishingBaseLevelUpdateInput } from "./SkillFishingBaseLevelUpdateInput";
import { SkillFishingBaseLevel } from "./SkillFishingBaseLevel";

export class SkillFishingBaseLevelGrpcControllerBase {
  constructor(protected readonly service: SkillFishingBaseLevelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SkillFishingBaseLevel })
  @GrpcMethod("SkillFishingBaseLevelService", "createSkillFishingBaseLevel")
  async createSkillFishingBaseLevel(
    @common.Body() data: SkillFishingBaseLevelCreateInput
  ): Promise<SkillFishingBaseLevel> {
    return await this.service.createSkillFishingBaseLevel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SkillFishingBaseLevel] })
  @ApiNestedQuery(SkillFishingBaseLevelFindManyArgs)
  @GrpcMethod("SkillFishingBaseLevelService", "skillFishingBaseLevels")
  async skillFishingBaseLevels(
    @common.Req() request: Request
  ): Promise<SkillFishingBaseLevel[]> {
    const args = plainToClass(SkillFishingBaseLevelFindManyArgs, request.query);
    return this.service.skillFishingBaseLevels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SkillFishingBaseLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SkillFishingBaseLevelService", "skillFishingBaseLevel")
  async skillFishingBaseLevel(
    @common.Param() params: SkillFishingBaseLevelWhereUniqueInput
  ): Promise<SkillFishingBaseLevel | null> {
    const result = await this.service.skillFishingBaseLevel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SkillFishingBaseLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SkillFishingBaseLevelService", "updateSkillFishingBaseLevel")
  async updateSkillFishingBaseLevel(
    @common.Param() params: SkillFishingBaseLevelWhereUniqueInput,
    @common.Body() data: SkillFishingBaseLevelUpdateInput
  ): Promise<SkillFishingBaseLevel | null> {
    try {
      return await this.service.updateSkillFishingBaseLevel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SkillFishingBaseLevel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SkillFishingBaseLevelService", "deleteSkillFishingBaseLevel")
  async deleteSkillFishingBaseLevel(
    @common.Param() params: SkillFishingBaseLevelWhereUniqueInput
  ): Promise<SkillFishingBaseLevel | null> {
    try {
      return await this.service.deleteSkillFishingBaseLevel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
