/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureMovementInfo as PrismaCreatureMovementInfo,
} from "@prisma/client";

export class CreatureMovementInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureMovementInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureMovementInfo.count(args);
  }

  async creatureMovementInfos(
    args: Prisma.CreatureMovementInfoFindManyArgs
  ): Promise<PrismaCreatureMovementInfo[]> {
    return this.prisma.creatureMovementInfo.findMany(args);
  }
  async creatureMovementInfo(
    args: Prisma.CreatureMovementInfoFindUniqueArgs
  ): Promise<PrismaCreatureMovementInfo | null> {
    return this.prisma.creatureMovementInfo.findUnique(args);
  }
  async createCreatureMovementInfo(
    args: Prisma.CreatureMovementInfoCreateArgs
  ): Promise<PrismaCreatureMovementInfo> {
    return this.prisma.creatureMovementInfo.create(args);
  }
  async updateCreatureMovementInfo(
    args: Prisma.CreatureMovementInfoUpdateArgs
  ): Promise<PrismaCreatureMovementInfo> {
    return this.prisma.creatureMovementInfo.update(args);
  }
  async deleteCreatureMovementInfo(
    args: Prisma.CreatureMovementInfoDeleteArgs
  ): Promise<PrismaCreatureMovementInfo> {
    return this.prisma.creatureMovementInfo.delete(args);
  }
}
