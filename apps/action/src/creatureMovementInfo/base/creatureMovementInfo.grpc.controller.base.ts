/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureMovementInfoService } from "../creatureMovementInfo.service";
import { CreatureMovementInfoCreateInput } from "./CreatureMovementInfoCreateInput";
import { CreatureMovementInfoWhereInput } from "./CreatureMovementInfoWhereInput";
import { CreatureMovementInfoWhereUniqueInput } from "./CreatureMovementInfoWhereUniqueInput";
import { CreatureMovementInfoFindManyArgs } from "./CreatureMovementInfoFindManyArgs";
import { CreatureMovementInfoUpdateInput } from "./CreatureMovementInfoUpdateInput";
import { CreatureMovementInfo } from "./CreatureMovementInfo";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureWhereUniqueInput } from "../../creature/base/CreatureWhereUniqueInput";

export class CreatureMovementInfoGrpcControllerBase {
  constructor(protected readonly service: CreatureMovementInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureMovementInfo })
  @GrpcMethod("CreatureMovementInfoService", "createCreatureMovementInfo")
  async createCreatureMovementInfo(
    @common.Body() data: CreatureMovementInfoCreateInput
  ): Promise<CreatureMovementInfo> {
    return await this.service.createCreatureMovementInfo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        movementId: true,
        speed: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureMovementInfo] })
  @ApiNestedQuery(CreatureMovementInfoFindManyArgs)
  @GrpcMethod("CreatureMovementInfoService", "creatureMovementInfos")
  async creatureMovementInfos(
    @common.Req() request: Request
  ): Promise<CreatureMovementInfo[]> {
    const args = plainToClass(CreatureMovementInfoFindManyArgs, request.query);
    return this.service.creatureMovementInfos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        movementId: true,
        speed: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureMovementInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureMovementInfoService", "creatureMovementInfo")
  async creatureMovementInfo(
    @common.Param() params: CreatureMovementInfoWhereUniqueInput
  ): Promise<CreatureMovementInfo | null> {
    const result = await this.service.creatureMovementInfo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        movementId: true,
        speed: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureMovementInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureMovementInfoService", "updateCreatureMovementInfo")
  async updateCreatureMovementInfo(
    @common.Param() params: CreatureMovementInfoWhereUniqueInput,
    @common.Body() data: CreatureMovementInfoUpdateInput
  ): Promise<CreatureMovementInfo | null> {
    try {
      return await this.service.updateCreatureMovementInfo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          movementId: true,
          speed: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureMovementInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureMovementInfoService", "deleteCreatureMovementInfo")
  async deleteCreatureMovementInfo(
    @common.Param() params: CreatureMovementInfoWhereUniqueInput
  ): Promise<CreatureMovementInfo | null> {
    try {
      return await this.service.deleteCreatureMovementInfo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          movementId: true,
          speed: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/creatures")
  @ApiNestedQuery(CreatureFindManyArgs)
  @GrpcMethod("CreatureMovementInfoService", "findManyCreatures")
  async findManyCreatures(
    @common.Req() request: Request,
    @common.Param() params: CreatureMovementInfoWhereUniqueInput
  ): Promise<Creature[]> {
    const query = plainToClass(CreatureFindManyArgs, request.query);
    const results = await this.service.findCreatures(params.id, {
      ...query,
      select: {
        areaId: true,
        behaviourName: true,
        createdAt: true,

        creatureEquipments: {
          select: {
            id: true,
          },
        },

        creatureFormations: {
          select: {
            id: true,
          },
        },

        creatureImmunities: {
          select: {
            id: true,
          },
        },

        creatureLevelStats: {
          select: {
            id: true,
          },
        },

        creatureLoots: {
          select: {
            id: true,
          },
        },

        creatureModelInfo: {
          select: {
            id: true,
          },
        },

        creatureMovementInfos: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        modelId: true,
        name: true,
        realmId: true,
        transformId: true,
        updatedAt: true,
        zoneId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/creatures")
  @GrpcMethod("CreatureMovementInfoService", "connectCreatures")
  async connectCreatures(
    @common.Param() params: CreatureMovementInfoWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        connect: body,
      },
    };
    await this.service.updateCreatureMovementInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/creatures")
  @GrpcMethod("CreatureMovementInfoService", "updateCreatures")
  async updateCreatures(
    @common.Param() params: CreatureMovementInfoWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        set: body,
      },
    };
    await this.service.updateCreatureMovementInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/creatures")
  @GrpcMethod("CreatureMovementInfoService", "disconnectCreatures")
  async disconnectCreatures(
    @common.Param() params: CreatureMovementInfoWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        disconnect: body,
      },
    };
    await this.service.updateCreatureMovementInfo({
      where: params,
      data,
      select: { id: true },
    });
  }
}
