/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureTemplate as PrismaCreatureTemplate,
} from "@prisma/client";

export class CreatureTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureTemplate.count(args);
  }

  async creatureTemplates(
    args: Prisma.CreatureTemplateFindManyArgs
  ): Promise<PrismaCreatureTemplate[]> {
    return this.prisma.creatureTemplate.findMany(args);
  }
  async creatureTemplate(
    args: Prisma.CreatureTemplateFindUniqueArgs
  ): Promise<PrismaCreatureTemplate | null> {
    return this.prisma.creatureTemplate.findUnique(args);
  }
  async createCreatureTemplate(
    args: Prisma.CreatureTemplateCreateArgs
  ): Promise<PrismaCreatureTemplate> {
    return this.prisma.creatureTemplate.create(args);
  }
  async updateCreatureTemplate(
    args: Prisma.CreatureTemplateUpdateArgs
  ): Promise<PrismaCreatureTemplate> {
    return this.prisma.creatureTemplate.update(args);
  }
  async deleteCreatureTemplate(
    args: Prisma.CreatureTemplateDeleteArgs
  ): Promise<PrismaCreatureTemplate> {
    return this.prisma.creatureTemplate.delete(args);
  }
}
