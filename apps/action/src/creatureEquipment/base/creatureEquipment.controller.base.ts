/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { CreatureEquipmentService } from "../creatureEquipment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatureEquipmentCreateInput } from "./CreatureEquipmentCreateInput";
import { CreatureEquipment } from "./CreatureEquipment";
import { CreatureEquipmentFindManyArgs } from "./CreatureEquipmentFindManyArgs";
import { CreatureEquipmentWhereUniqueInput } from "./CreatureEquipmentWhereUniqueInput";
import { CreatureEquipmentUpdateInput } from "./CreatureEquipmentUpdateInput";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureWhereUniqueInput } from "../../creature/base/CreatureWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CreatureEquipmentControllerBase {
  constructor(
    protected readonly service: CreatureEquipmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureEquipment })
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureEquipmentCreateInput,
  })
  async createCreatureEquipment(
    @common.Body() data: CreatureEquipmentCreateInput
  ): Promise<CreatureEquipment> {
    return await this.service.createCreatureEquipment({
      data: data,
      select: {
        appereance: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        visual: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureEquipment] })
  @ApiNestedQuery(CreatureEquipmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureEquipments(
    @common.Req() request: Request
  ): Promise<CreatureEquipment[]> {
    const args = plainToClass(CreatureEquipmentFindManyArgs, request.query);
    return this.service.creatureEquipments({
      ...args,
      select: {
        appereance: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        visual: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureEquipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureEquipment(
    @common.Param() params: CreatureEquipmentWhereUniqueInput
  ): Promise<CreatureEquipment | null> {
    const result = await this.service.creatureEquipment({
      where: params,
      select: {
        appereance: true,
        createdAt: true,
        id: true,
        updatedAt: true,
        visual: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureEquipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureEquipmentUpdateInput,
  })
  async updateCreatureEquipment(
    @common.Param() params: CreatureEquipmentWhereUniqueInput,
    @common.Body() data: CreatureEquipmentUpdateInput
  ): Promise<CreatureEquipment | null> {
    try {
      return await this.service.updateCreatureEquipment({
        where: params,
        data: data,
        select: {
          appereance: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          visual: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureEquipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCreatureEquipment(
    @common.Param() params: CreatureEquipmentWhereUniqueInput
  ): Promise<CreatureEquipment | null> {
    try {
      return await this.service.deleteCreatureEquipment({
        where: params,
        select: {
          appereance: true,
          createdAt: true,
          id: true,
          updatedAt: true,
          visual: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/appereance")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: CreatureEquipment,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadAppereance(
    @common.Param()
    params: CreatureEquipmentWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<CreatureEquipment> {
    return this.service.uploadAppereance(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/appereance")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadAppereance(
    @common.Param()
    params: CreatureEquipmentWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadAppereance({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/appereance")
  @swagger.ApiOkResponse({
    type: CreatureEquipment,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteAppereance(
    @common.Param()
    params: CreatureEquipmentWhereUniqueInput
  ): Promise<CreatureEquipment> {
    return this.service.deleteAppereance({
      where: params,
    });
  }

  @common.Put(":id/visual")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: CreatureEquipment,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadVisual(
    @common.Param()
    params: CreatureEquipmentWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<CreatureEquipment> {
    return this.service.uploadVisual(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/visual")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadVisual(
    @common.Param()
    params: CreatureEquipmentWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadVisual({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/visual")
  @swagger.ApiOkResponse({
    type: CreatureEquipment,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteVisual(
    @common.Param()
    params: CreatureEquipmentWhereUniqueInput
  ): Promise<CreatureEquipment> {
    return this.service.deleteVisual({
      where: params,
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/creatures")
  @ApiNestedQuery(CreatureFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  async findCreatures(
    @common.Req() request: Request,
    @common.Param() params: CreatureEquipmentWhereUniqueInput
  ): Promise<Creature[]> {
    const query = plainToClass(CreatureFindManyArgs, request.query);
    const results = await this.service.findCreatures(params.id, {
      ...query,
      select: {
        areaId: true,
        behaviourName: true,
        createdAt: true,

        creatureEquipments: {
          select: {
            id: true,
          },
        },

        creatureFormations: {
          select: {
            id: true,
          },
        },

        creatureImmunities: {
          select: {
            id: true,
          },
        },

        creatureLevelStats: {
          select: {
            id: true,
          },
        },

        creatureLoots: {
          select: {
            id: true,
          },
        },

        creatureModelInfo: {
          select: {
            id: true,
          },
        },

        creatureMovementInfos: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        modelId: true,
        name: true,
        realmId: true,
        transformId: true,
        updatedAt: true,
        zoneId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/creatures")
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "update",
    possession: "any",
  })
  async connectCreatures(
    @common.Param() params: CreatureEquipmentWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        connect: body,
      },
    };
    await this.service.updateCreatureEquipment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/creatures")
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "update",
    possession: "any",
  })
  async updateCreatures(
    @common.Param() params: CreatureEquipmentWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        set: body,
      },
    };
    await this.service.updateCreatureEquipment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/creatures")
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "update",
    possession: "any",
  })
  async disconnectCreatures(
    @common.Param() params: CreatureEquipmentWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        disconnect: body,
      },
    };
    await this.service.updateCreatureEquipment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
