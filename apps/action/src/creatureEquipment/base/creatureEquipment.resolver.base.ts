/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureEquipment } from "./CreatureEquipment";
import { CreatureEquipmentCountArgs } from "./CreatureEquipmentCountArgs";
import { CreatureEquipmentFindManyArgs } from "./CreatureEquipmentFindManyArgs";
import { CreatureEquipmentFindUniqueArgs } from "./CreatureEquipmentFindUniqueArgs";
import { CreateCreatureEquipmentArgs } from "./CreateCreatureEquipmentArgs";
import { UpdateCreatureEquipmentArgs } from "./UpdateCreatureEquipmentArgs";
import { DeleteCreatureEquipmentArgs } from "./DeleteCreatureEquipmentArgs";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureEquipmentService } from "../creatureEquipment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureEquipment)
export class CreatureEquipmentResolverBase {
  constructor(
    protected readonly service: CreatureEquipmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "read",
    possession: "any",
  })
  async _creatureEquipmentsMeta(
    @graphql.Args() args: CreatureEquipmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureEquipment])
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "read",
    possession: "any",
  })
  async creatureEquipments(
    @graphql.Args() args: CreatureEquipmentFindManyArgs
  ): Promise<CreatureEquipment[]> {
    return this.service.creatureEquipments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureEquipment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "read",
    possession: "own",
  })
  async creatureEquipment(
    @graphql.Args() args: CreatureEquipmentFindUniqueArgs
  ): Promise<CreatureEquipment | null> {
    const result = await this.service.creatureEquipment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureEquipment)
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "create",
    possession: "any",
  })
  async createCreatureEquipment(
    @graphql.Args() args: CreateCreatureEquipmentArgs
  ): Promise<CreatureEquipment> {
    return await this.service.createCreatureEquipment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureEquipment)
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "update",
    possession: "any",
  })
  async updateCreatureEquipment(
    @graphql.Args() args: UpdateCreatureEquipmentArgs
  ): Promise<CreatureEquipment | null> {
    try {
      return await this.service.updateCreatureEquipment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureEquipment)
  @nestAccessControl.UseRoles({
    resource: "CreatureEquipment",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureEquipment(
    @graphql.Args() args: DeleteCreatureEquipmentArgs
  ): Promise<CreatureEquipment | null> {
    try {
      return await this.service.deleteCreatureEquipment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureEquipment)
  async uploadAppereance(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: CreatureEquipmentFindUniqueArgs
  ): Promise<CreatureEquipment> {
    return await this.service.uploadAppereance(args, file);
  }

  @graphql.Mutation(() => CreatureEquipment)
  async deleteAppereance(
    @graphql.Args()
    args: CreatureEquipmentFindUniqueArgs
  ): Promise<CreatureEquipment> {
    return await this.service.deleteAppereance(args);
  }

  @graphql.Mutation(() => CreatureEquipment)
  async uploadVisual(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: CreatureEquipmentFindUniqueArgs
  ): Promise<CreatureEquipment> {
    return await this.service.uploadVisual(args, file);
  }

  @graphql.Mutation(() => CreatureEquipment)
  async deleteVisual(
    @graphql.Args()
    args: CreatureEquipmentFindUniqueArgs
  ): Promise<CreatureEquipment> {
    return await this.service.deleteVisual(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Creature], { name: "creatures" })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  async findCreatures(
    @graphql.Parent() parent: CreatureEquipment,
    @graphql.Args() args: CreatureFindManyArgs
  ): Promise<Creature[]> {
    const results = await this.service.findCreatures(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
