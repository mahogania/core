/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureTemplateResistanceService } from "../creatureTemplateResistance.service";
import { CreatureTemplateResistanceCreateInput } from "./CreatureTemplateResistanceCreateInput";
import { CreatureTemplateResistanceWhereInput } from "./CreatureTemplateResistanceWhereInput";
import { CreatureTemplateResistanceWhereUniqueInput } from "./CreatureTemplateResistanceWhereUniqueInput";
import { CreatureTemplateResistanceFindManyArgs } from "./CreatureTemplateResistanceFindManyArgs";
import { CreatureTemplateResistanceUpdateInput } from "./CreatureTemplateResistanceUpdateInput";
import { CreatureTemplateResistance } from "./CreatureTemplateResistance";

export class CreatureTemplateResistanceGrpcControllerBase {
  constructor(protected readonly service: CreatureTemplateResistanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureTemplateResistance })
  @GrpcMethod(
    "CreatureTemplateResistanceService",
    "createCreatureTemplateResistance"
  )
  async createCreatureTemplateResistance(
    @common.Body() data: CreatureTemplateResistanceCreateInput
  ): Promise<CreatureTemplateResistance> {
    return await this.service.createCreatureTemplateResistance({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureTemplateResistance] })
  @ApiNestedQuery(CreatureTemplateResistanceFindManyArgs)
  @GrpcMethod(
    "CreatureTemplateResistanceService",
    "creatureTemplateResistances"
  )
  async creatureTemplateResistances(
    @common.Req() request: Request
  ): Promise<CreatureTemplateResistance[]> {
    const args = plainToClass(
      CreatureTemplateResistanceFindManyArgs,
      request.query
    );
    return this.service.creatureTemplateResistances({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateResistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTemplateResistanceService", "creatureTemplateResistance")
  async creatureTemplateResistance(
    @common.Param() params: CreatureTemplateResistanceWhereUniqueInput
  ): Promise<CreatureTemplateResistance | null> {
    const result = await this.service.creatureTemplateResistance({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateResistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "CreatureTemplateResistanceService",
    "updateCreatureTemplateResistance"
  )
  async updateCreatureTemplateResistance(
    @common.Param() params: CreatureTemplateResistanceWhereUniqueInput,
    @common.Body() data: CreatureTemplateResistanceUpdateInput
  ): Promise<CreatureTemplateResistance | null> {
    try {
      return await this.service.updateCreatureTemplateResistance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateResistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "CreatureTemplateResistanceService",
    "deleteCreatureTemplateResistance"
  )
  async deleteCreatureTemplateResistance(
    @common.Param() params: CreatureTemplateResistanceWhereUniqueInput
  ): Promise<CreatureTemplateResistance | null> {
    try {
      return await this.service.deleteCreatureTemplateResistance({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
