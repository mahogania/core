/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureTextLocaleService } from "../creatureTextLocale.service";
import { CreatureTextLocaleCreateInput } from "./CreatureTextLocaleCreateInput";
import { CreatureTextLocaleWhereInput } from "./CreatureTextLocaleWhereInput";
import { CreatureTextLocaleWhereUniqueInput } from "./CreatureTextLocaleWhereUniqueInput";
import { CreatureTextLocaleFindManyArgs } from "./CreatureTextLocaleFindManyArgs";
import { CreatureTextLocaleUpdateInput } from "./CreatureTextLocaleUpdateInput";
import { CreatureTextLocale } from "./CreatureTextLocale";

export class CreatureTextLocaleGrpcControllerBase {
  constructor(protected readonly service: CreatureTextLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureTextLocale })
  @GrpcMethod("CreatureTextLocaleService", "createCreatureTextLocale")
  async createCreatureTextLocale(
    @common.Body() data: CreatureTextLocaleCreateInput
  ): Promise<CreatureTextLocale> {
    return await this.service.createCreatureTextLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureTextLocale] })
  @ApiNestedQuery(CreatureTextLocaleFindManyArgs)
  @GrpcMethod("CreatureTextLocaleService", "creatureTextLocales")
  async creatureTextLocales(
    @common.Req() request: Request
  ): Promise<CreatureTextLocale[]> {
    const args = plainToClass(CreatureTextLocaleFindManyArgs, request.query);
    return this.service.creatureTextLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureTextLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTextLocaleService", "creatureTextLocale")
  async creatureTextLocale(
    @common.Param() params: CreatureTextLocaleWhereUniqueInput
  ): Promise<CreatureTextLocale | null> {
    const result = await this.service.creatureTextLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureTextLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTextLocaleService", "updateCreatureTextLocale")
  async updateCreatureTextLocale(
    @common.Param() params: CreatureTextLocaleWhereUniqueInput,
    @common.Body() data: CreatureTextLocaleUpdateInput
  ): Promise<CreatureTextLocale | null> {
    try {
      return await this.service.updateCreatureTextLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureTextLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTextLocaleService", "deleteCreatureTextLocale")
  async deleteCreatureTextLocale(
    @common.Param() params: CreatureTextLocaleWhereUniqueInput
  ): Promise<CreatureTextLocale | null> {
    try {
      return await this.service.deleteCreatureTextLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
