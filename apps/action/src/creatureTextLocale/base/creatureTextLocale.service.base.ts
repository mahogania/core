/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureTextLocale as PrismaCreatureTextLocale,
} from "@prisma/client";

export class CreatureTextLocaleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureTextLocaleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureTextLocale.count(args);
  }

  async creatureTextLocales(
    args: Prisma.CreatureTextLocaleFindManyArgs
  ): Promise<PrismaCreatureTextLocale[]> {
    return this.prisma.creatureTextLocale.findMany(args);
  }
  async creatureTextLocale(
    args: Prisma.CreatureTextLocaleFindUniqueArgs
  ): Promise<PrismaCreatureTextLocale | null> {
    return this.prisma.creatureTextLocale.findUnique(args);
  }
  async createCreatureTextLocale(
    args: Prisma.CreatureTextLocaleCreateArgs
  ): Promise<PrismaCreatureTextLocale> {
    return this.prisma.creatureTextLocale.create(args);
  }
  async updateCreatureTextLocale(
    args: Prisma.CreatureTextLocaleUpdateArgs
  ): Promise<PrismaCreatureTextLocale> {
    return this.prisma.creatureTextLocale.update(args);
  }
  async deleteCreatureTextLocale(
    args: Prisma.CreatureTextLocaleDeleteArgs
  ): Promise<PrismaCreatureTextLocale> {
    return this.prisma.creatureTextLocale.delete(args);
  }
}
