/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureEquipTemplate as PrismaCreatureEquipTemplate,
} from "@prisma/client";

export class CreatureEquipTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureEquipTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureEquipTemplate.count(args);
  }

  async creatureEquipTemplates(
    args: Prisma.CreatureEquipTemplateFindManyArgs
  ): Promise<PrismaCreatureEquipTemplate[]> {
    return this.prisma.creatureEquipTemplate.findMany(args);
  }
  async creatureEquipTemplate(
    args: Prisma.CreatureEquipTemplateFindUniqueArgs
  ): Promise<PrismaCreatureEquipTemplate | null> {
    return this.prisma.creatureEquipTemplate.findUnique(args);
  }
  async createCreatureEquipTemplate(
    args: Prisma.CreatureEquipTemplateCreateArgs
  ): Promise<PrismaCreatureEquipTemplate> {
    return this.prisma.creatureEquipTemplate.create(args);
  }
  async updateCreatureEquipTemplate(
    args: Prisma.CreatureEquipTemplateUpdateArgs
  ): Promise<PrismaCreatureEquipTemplate> {
    return this.prisma.creatureEquipTemplate.update(args);
  }
  async deleteCreatureEquipTemplate(
    args: Prisma.CreatureEquipTemplateDeleteArgs
  ): Promise<PrismaCreatureEquipTemplate> {
    return this.prisma.creatureEquipTemplate.delete(args);
  }
}
