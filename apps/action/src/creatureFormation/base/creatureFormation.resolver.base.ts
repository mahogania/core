/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureFormation } from "./CreatureFormation";
import { CreatureFormationCountArgs } from "./CreatureFormationCountArgs";
import { CreatureFormationFindManyArgs } from "./CreatureFormationFindManyArgs";
import { CreatureFormationFindUniqueArgs } from "./CreatureFormationFindUniqueArgs";
import { CreateCreatureFormationArgs } from "./CreateCreatureFormationArgs";
import { UpdateCreatureFormationArgs } from "./UpdateCreatureFormationArgs";
import { DeleteCreatureFormationArgs } from "./DeleteCreatureFormationArgs";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureFormationService } from "../creatureFormation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureFormation)
export class CreatureFormationResolverBase {
  constructor(
    protected readonly service: CreatureFormationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormation",
    action: "read",
    possession: "any",
  })
  async _creatureFormationsMeta(
    @graphql.Args() args: CreatureFormationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureFormation])
  @nestAccessControl.UseRoles({
    resource: "CreatureFormation",
    action: "read",
    possession: "any",
  })
  async creatureFormations(
    @graphql.Args() args: CreatureFormationFindManyArgs
  ): Promise<CreatureFormation[]> {
    return this.service.creatureFormations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureFormation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureFormation",
    action: "read",
    possession: "own",
  })
  async creatureFormation(
    @graphql.Args() args: CreatureFormationFindUniqueArgs
  ): Promise<CreatureFormation | null> {
    const result = await this.service.creatureFormation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureFormation)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormation",
    action: "create",
    possession: "any",
  })
  async createCreatureFormation(
    @graphql.Args() args: CreateCreatureFormationArgs
  ): Promise<CreatureFormation> {
    return await this.service.createCreatureFormation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureFormation)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormation",
    action: "update",
    possession: "any",
  })
  async updateCreatureFormation(
    @graphql.Args() args: UpdateCreatureFormationArgs
  ): Promise<CreatureFormation | null> {
    try {
      return await this.service.updateCreatureFormation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureFormation)
  @nestAccessControl.UseRoles({
    resource: "CreatureFormation",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureFormation(
    @graphql.Args() args: DeleteCreatureFormationArgs
  ): Promise<CreatureFormation | null> {
    try {
      return await this.service.deleteCreatureFormation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Creature], { name: "creatures" })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  async findCreatures(
    @graphql.Parent() parent: CreatureFormation,
    @graphql.Args() args: CreatureFindManyArgs
  ): Promise<Creature[]> {
    const results = await this.service.findCreatures(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
