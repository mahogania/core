/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CreatureFormation as PrismaCreatureFormation,
  Creature as PrismaCreature,
} from "@prisma/client";

export class CreatureFormationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureFormationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureFormation.count(args);
  }

  async creatureFormations(
    args: Prisma.CreatureFormationFindManyArgs
  ): Promise<PrismaCreatureFormation[]> {
    return this.prisma.creatureFormation.findMany(args);
  }
  async creatureFormation(
    args: Prisma.CreatureFormationFindUniqueArgs
  ): Promise<PrismaCreatureFormation | null> {
    return this.prisma.creatureFormation.findUnique(args);
  }
  async createCreatureFormation(
    args: Prisma.CreatureFormationCreateArgs
  ): Promise<PrismaCreatureFormation> {
    return this.prisma.creatureFormation.create(args);
  }
  async updateCreatureFormation(
    args: Prisma.CreatureFormationUpdateArgs
  ): Promise<PrismaCreatureFormation> {
    return this.prisma.creatureFormation.update(args);
  }
  async deleteCreatureFormation(
    args: Prisma.CreatureFormationDeleteArgs
  ): Promise<PrismaCreatureFormation> {
    return this.prisma.creatureFormation.delete(args);
  }

  async findCreatures(
    parentId: string,
    args: Prisma.CreatureFindManyArgs
  ): Promise<PrismaCreature[]> {
    return this.prisma.creatureFormation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .creatures(args);
  }
}
