/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureMovementOverrideService } from "../creatureMovementOverride.service";
import { CreatureMovementOverrideCreateInput } from "./CreatureMovementOverrideCreateInput";
import { CreatureMovementOverrideWhereInput } from "./CreatureMovementOverrideWhereInput";
import { CreatureMovementOverrideWhereUniqueInput } from "./CreatureMovementOverrideWhereUniqueInput";
import { CreatureMovementOverrideFindManyArgs } from "./CreatureMovementOverrideFindManyArgs";
import { CreatureMovementOverrideUpdateInput } from "./CreatureMovementOverrideUpdateInput";
import { CreatureMovementOverride } from "./CreatureMovementOverride";

export class CreatureMovementOverrideGrpcControllerBase {
  constructor(protected readonly service: CreatureMovementOverrideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureMovementOverride })
  @GrpcMethod(
    "CreatureMovementOverrideService",
    "createCreatureMovementOverride"
  )
  async createCreatureMovementOverride(
    @common.Body() data: CreatureMovementOverrideCreateInput
  ): Promise<CreatureMovementOverride> {
    return await this.service.createCreatureMovementOverride({
      data: data,
      select: {
        chase: true,
        createdAt: true,
        flight: true,
        ground: true,
        id: true,
        interactionPauseTimer: true,
        random: true,
        rooted: true,
        spawnId: true,
        swim: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureMovementOverride] })
  @ApiNestedQuery(CreatureMovementOverrideFindManyArgs)
  @GrpcMethod("CreatureMovementOverrideService", "creatureMovementOverrides")
  async creatureMovementOverrides(
    @common.Req() request: Request
  ): Promise<CreatureMovementOverride[]> {
    const args = plainToClass(
      CreatureMovementOverrideFindManyArgs,
      request.query
    );
    return this.service.creatureMovementOverrides({
      ...args,
      select: {
        chase: true,
        createdAt: true,
        flight: true,
        ground: true,
        id: true,
        interactionPauseTimer: true,
        random: true,
        rooted: true,
        spawnId: true,
        swim: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureMovementOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureMovementOverrideService", "creatureMovementOverride")
  async creatureMovementOverride(
    @common.Param() params: CreatureMovementOverrideWhereUniqueInput
  ): Promise<CreatureMovementOverride | null> {
    const result = await this.service.creatureMovementOverride({
      where: params,
      select: {
        chase: true,
        createdAt: true,
        flight: true,
        ground: true,
        id: true,
        interactionPauseTimer: true,
        random: true,
        rooted: true,
        spawnId: true,
        swim: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureMovementOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "CreatureMovementOverrideService",
    "updateCreatureMovementOverride"
  )
  async updateCreatureMovementOverride(
    @common.Param() params: CreatureMovementOverrideWhereUniqueInput,
    @common.Body() data: CreatureMovementOverrideUpdateInput
  ): Promise<CreatureMovementOverride | null> {
    try {
      return await this.service.updateCreatureMovementOverride({
        where: params,
        data: data,
        select: {
          chase: true,
          createdAt: true,
          flight: true,
          ground: true,
          id: true,
          interactionPauseTimer: true,
          random: true,
          rooted: true,
          spawnId: true,
          swim: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureMovementOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "CreatureMovementOverrideService",
    "deleteCreatureMovementOverride"
  )
  async deleteCreatureMovementOverride(
    @common.Param() params: CreatureMovementOverrideWhereUniqueInput
  ): Promise<CreatureMovementOverride | null> {
    try {
      return await this.service.deleteCreatureMovementOverride({
        where: params,
        select: {
          chase: true,
          createdAt: true,
          flight: true,
          ground: true,
          id: true,
          interactionPauseTimer: true,
          random: true,
          rooted: true,
          spawnId: true,
          swim: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
