/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureMovementOverride } from "./CreatureMovementOverride";
import { CreatureMovementOverrideCountArgs } from "./CreatureMovementOverrideCountArgs";
import { CreatureMovementOverrideFindManyArgs } from "./CreatureMovementOverrideFindManyArgs";
import { CreatureMovementOverrideFindUniqueArgs } from "./CreatureMovementOverrideFindUniqueArgs";
import { CreateCreatureMovementOverrideArgs } from "./CreateCreatureMovementOverrideArgs";
import { UpdateCreatureMovementOverrideArgs } from "./UpdateCreatureMovementOverrideArgs";
import { DeleteCreatureMovementOverrideArgs } from "./DeleteCreatureMovementOverrideArgs";
import { CreatureMovementOverrideService } from "../creatureMovementOverride.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureMovementOverride)
export class CreatureMovementOverrideResolverBase {
  constructor(
    protected readonly service: CreatureMovementOverrideService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureMovementOverride",
    action: "read",
    possession: "any",
  })
  async _creatureMovementOverridesMeta(
    @graphql.Args() args: CreatureMovementOverrideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureMovementOverride])
  @nestAccessControl.UseRoles({
    resource: "CreatureMovementOverride",
    action: "read",
    possession: "any",
  })
  async creatureMovementOverrides(
    @graphql.Args() args: CreatureMovementOverrideFindManyArgs
  ): Promise<CreatureMovementOverride[]> {
    return this.service.creatureMovementOverrides(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureMovementOverride, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureMovementOverride",
    action: "read",
    possession: "own",
  })
  async creatureMovementOverride(
    @graphql.Args() args: CreatureMovementOverrideFindUniqueArgs
  ): Promise<CreatureMovementOverride | null> {
    const result = await this.service.creatureMovementOverride(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureMovementOverride)
  @nestAccessControl.UseRoles({
    resource: "CreatureMovementOverride",
    action: "create",
    possession: "any",
  })
  async createCreatureMovementOverride(
    @graphql.Args() args: CreateCreatureMovementOverrideArgs
  ): Promise<CreatureMovementOverride> {
    return await this.service.createCreatureMovementOverride({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureMovementOverride)
  @nestAccessControl.UseRoles({
    resource: "CreatureMovementOverride",
    action: "update",
    possession: "any",
  })
  async updateCreatureMovementOverride(
    @graphql.Args() args: UpdateCreatureMovementOverrideArgs
  ): Promise<CreatureMovementOverride | null> {
    try {
      return await this.service.updateCreatureMovementOverride({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureMovementOverride)
  @nestAccessControl.UseRoles({
    resource: "CreatureMovementOverride",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureMovementOverride(
    @graphql.Args() args: DeleteCreatureMovementOverrideArgs
  ): Promise<CreatureMovementOverride | null> {
    try {
      return await this.service.deleteCreatureMovementOverride(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
