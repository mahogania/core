/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CreatureImmunityService } from "../creatureImmunity.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatureImmunityCreateInput } from "./CreatureImmunityCreateInput";
import { CreatureImmunity } from "./CreatureImmunity";
import { CreatureImmunityFindManyArgs } from "./CreatureImmunityFindManyArgs";
import { CreatureImmunityWhereUniqueInput } from "./CreatureImmunityWhereUniqueInput";
import { CreatureImmunityUpdateInput } from "./CreatureImmunityUpdateInput";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureWhereUniqueInput } from "../../creature/base/CreatureWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CreatureImmunityControllerBase {
  constructor(
    protected readonly service: CreatureImmunityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureImmunity })
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureImmunityCreateInput,
  })
  async createCreatureImmunity(
    @common.Body() data: CreatureImmunityCreateInput
  ): Promise<CreatureImmunity> {
    return await this.service.createCreatureImmunity({
      data: data,
      select: {
        auras: true,
        comment: true,
        createdAt: true,
        dispelMask: true,
        effects: true,
        id: true,
        mechanicMask: true,
        schoolMask: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureImmunity] })
  @ApiNestedQuery(CreatureImmunityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureImmunities(
    @common.Req() request: Request
  ): Promise<CreatureImmunity[]> {
    const args = plainToClass(CreatureImmunityFindManyArgs, request.query);
    return this.service.creatureImmunities({
      ...args,
      select: {
        auras: true,
        comment: true,
        createdAt: true,
        dispelMask: true,
        effects: true,
        id: true,
        mechanicMask: true,
        schoolMask: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureImmunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureImmunity(
    @common.Param() params: CreatureImmunityWhereUniqueInput
  ): Promise<CreatureImmunity | null> {
    const result = await this.service.creatureImmunity({
      where: params,
      select: {
        auras: true,
        comment: true,
        createdAt: true,
        dispelMask: true,
        effects: true,
        id: true,
        mechanicMask: true,
        schoolMask: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureImmunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureImmunityUpdateInput,
  })
  async updateCreatureImmunity(
    @common.Param() params: CreatureImmunityWhereUniqueInput,
    @common.Body() data: CreatureImmunityUpdateInput
  ): Promise<CreatureImmunity | null> {
    try {
      return await this.service.updateCreatureImmunity({
        where: params,
        data: data,
        select: {
          auras: true,
          comment: true,
          createdAt: true,
          dispelMask: true,
          effects: true,
          id: true,
          mechanicMask: true,
          schoolMask: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureImmunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCreatureImmunity(
    @common.Param() params: CreatureImmunityWhereUniqueInput
  ): Promise<CreatureImmunity | null> {
    try {
      return await this.service.deleteCreatureImmunity({
        where: params,
        select: {
          auras: true,
          comment: true,
          createdAt: true,
          dispelMask: true,
          effects: true,
          id: true,
          mechanicMask: true,
          schoolMask: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/creatures")
  @ApiNestedQuery(CreatureFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  async findCreatures(
    @common.Req() request: Request,
    @common.Param() params: CreatureImmunityWhereUniqueInput
  ): Promise<Creature[]> {
    const query = plainToClass(CreatureFindManyArgs, request.query);
    const results = await this.service.findCreatures(params.id, {
      ...query,
      select: {
        areaId: true,
        behaviourName: true,
        createdAt: true,

        creatureEquipments: {
          select: {
            id: true,
          },
        },

        creatureFormations: {
          select: {
            id: true,
          },
        },

        creatureImmunities: {
          select: {
            id: true,
          },
        },

        creatureLevelStats: {
          select: {
            id: true,
          },
        },

        creatureLoots: {
          select: {
            id: true,
          },
        },

        creatureModelInfo: {
          select: {
            id: true,
          },
        },

        creatureMovementInfos: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        modelId: true,
        name: true,
        realmId: true,
        transformId: true,
        updatedAt: true,
        zoneId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/creatures")
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "update",
    possession: "any",
  })
  async connectCreatures(
    @common.Param() params: CreatureImmunityWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        connect: body,
      },
    };
    await this.service.updateCreatureImmunity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/creatures")
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "update",
    possession: "any",
  })
  async updateCreatures(
    @common.Param() params: CreatureImmunityWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        set: body,
      },
    };
    await this.service.updateCreatureImmunity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/creatures")
  @nestAccessControl.UseRoles({
    resource: "CreatureImmunity",
    action: "update",
    possession: "any",
  })
  async disconnectCreatures(
    @common.Param() params: CreatureImmunityWhereUniqueInput,
    @common.Body() body: CreatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creatures: {
        disconnect: body,
      },
    };
    await this.service.updateCreatureImmunity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
