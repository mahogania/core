/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CreatureAddonService } from "../creatureAddon.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreatureAddonCreateInput } from "./CreatureAddonCreateInput";
import { CreatureAddon } from "./CreatureAddon";
import { CreatureAddonFindManyArgs } from "./CreatureAddonFindManyArgs";
import { CreatureAddonWhereUniqueInput } from "./CreatureAddonWhereUniqueInput";
import { CreatureAddonUpdateInput } from "./CreatureAddonUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CreatureAddonControllerBase {
  constructor(
    protected readonly service: CreatureAddonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureAddon })
  @nestAccessControl.UseRoles({
    resource: "CreatureAddon",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureAddonCreateInput,
  })
  async createCreatureAddon(
    @common.Body() data: CreatureAddonCreateInput
  ): Promise<CreatureAddon> {
    return await this.service.createCreatureAddon({
      data: data,
      select: {
        aiAnimKit: true,
        animTier: true,
        auras: true,
        createdAt: true,
        emote: true,
        guid: true,
        id: true,
        meleeAnimKit: true,
        mount: true,
        mountCreatureId: true,
        movementAnimKit: true,
        pathId: true,
        pvPFlags: true,
        sheathState: true,
        standState: true,
        updatedAt: true,
        visFlags: true,
        visibilityDistanceType: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureAddon] })
  @ApiNestedQuery(CreatureAddonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CreatureAddon",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureAddons(
    @common.Req() request: Request
  ): Promise<CreatureAddon[]> {
    const args = plainToClass(CreatureAddonFindManyArgs, request.query);
    return this.service.creatureAddons({
      ...args,
      select: {
        aiAnimKit: true,
        animTier: true,
        auras: true,
        createdAt: true,
        emote: true,
        guid: true,
        id: true,
        meleeAnimKit: true,
        mount: true,
        mountCreatureId: true,
        movementAnimKit: true,
        pathId: true,
        pvPFlags: true,
        sheathState: true,
        standState: true,
        updatedAt: true,
        visFlags: true,
        visibilityDistanceType: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureAddon",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async creatureAddon(
    @common.Param() params: CreatureAddonWhereUniqueInput
  ): Promise<CreatureAddon | null> {
    const result = await this.service.creatureAddon({
      where: params,
      select: {
        aiAnimKit: true,
        animTier: true,
        auras: true,
        createdAt: true,
        emote: true,
        guid: true,
        id: true,
        meleeAnimKit: true,
        mount: true,
        mountCreatureId: true,
        movementAnimKit: true,
        pathId: true,
        pvPFlags: true,
        sheathState: true,
        standState: true,
        updatedAt: true,
        visFlags: true,
        visibilityDistanceType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureAddon",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CreatureAddonUpdateInput,
  })
  async updateCreatureAddon(
    @common.Param() params: CreatureAddonWhereUniqueInput,
    @common.Body() data: CreatureAddonUpdateInput
  ): Promise<CreatureAddon | null> {
    try {
      return await this.service.updateCreatureAddon({
        where: params,
        data: data,
        select: {
          aiAnimKit: true,
          animTier: true,
          auras: true,
          createdAt: true,
          emote: true,
          guid: true,
          id: true,
          meleeAnimKit: true,
          mount: true,
          mountCreatureId: true,
          movementAnimKit: true,
          pathId: true,
          pvPFlags: true,
          sheathState: true,
          standState: true,
          updatedAt: true,
          visFlags: true,
          visibilityDistanceType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CreatureAddon",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCreatureAddon(
    @common.Param() params: CreatureAddonWhereUniqueInput
  ): Promise<CreatureAddon | null> {
    try {
      return await this.service.deleteCreatureAddon({
        where: params,
        select: {
          aiAnimKit: true,
          animTier: true,
          auras: true,
          createdAt: true,
          emote: true,
          guid: true,
          id: true,
          meleeAnimKit: true,
          mount: true,
          mountCreatureId: true,
          movementAnimKit: true,
          pathId: true,
          pvPFlags: true,
          sheathState: true,
          standState: true,
          updatedAt: true,
          visFlags: true,
          visibilityDistanceType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
