/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureAddonService } from "../creatureAddon.service";
import { CreatureAddonCreateInput } from "./CreatureAddonCreateInput";
import { CreatureAddonWhereInput } from "./CreatureAddonWhereInput";
import { CreatureAddonWhereUniqueInput } from "./CreatureAddonWhereUniqueInput";
import { CreatureAddonFindManyArgs } from "./CreatureAddonFindManyArgs";
import { CreatureAddonUpdateInput } from "./CreatureAddonUpdateInput";
import { CreatureAddon } from "./CreatureAddon";

export class CreatureAddonGrpcControllerBase {
  constructor(protected readonly service: CreatureAddonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureAddon })
  @GrpcMethod("CreatureAddonService", "createCreatureAddon")
  async createCreatureAddon(
    @common.Body() data: CreatureAddonCreateInput
  ): Promise<CreatureAddon> {
    return await this.service.createCreatureAddon({
      data: data,
      select: {
        aiAnimKit: true,
        animTier: true,
        auras: true,
        createdAt: true,
        emote: true,
        guid: true,
        id: true,
        meleeAnimKit: true,
        mount: true,
        mountCreatureId: true,
        movementAnimKit: true,
        pathId: true,
        pvPFlags: true,
        sheathState: true,
        standState: true,
        updatedAt: true,
        visFlags: true,
        visibilityDistanceType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureAddon] })
  @ApiNestedQuery(CreatureAddonFindManyArgs)
  @GrpcMethod("CreatureAddonService", "creatureAddons")
  async creatureAddons(
    @common.Req() request: Request
  ): Promise<CreatureAddon[]> {
    const args = plainToClass(CreatureAddonFindManyArgs, request.query);
    return this.service.creatureAddons({
      ...args,
      select: {
        aiAnimKit: true,
        animTier: true,
        auras: true,
        createdAt: true,
        emote: true,
        guid: true,
        id: true,
        meleeAnimKit: true,
        mount: true,
        mountCreatureId: true,
        movementAnimKit: true,
        pathId: true,
        pvPFlags: true,
        sheathState: true,
        standState: true,
        updatedAt: true,
        visFlags: true,
        visibilityDistanceType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureAddonService", "creatureAddon")
  async creatureAddon(
    @common.Param() params: CreatureAddonWhereUniqueInput
  ): Promise<CreatureAddon | null> {
    const result = await this.service.creatureAddon({
      where: params,
      select: {
        aiAnimKit: true,
        animTier: true,
        auras: true,
        createdAt: true,
        emote: true,
        guid: true,
        id: true,
        meleeAnimKit: true,
        mount: true,
        mountCreatureId: true,
        movementAnimKit: true,
        pathId: true,
        pvPFlags: true,
        sheathState: true,
        standState: true,
        updatedAt: true,
        visFlags: true,
        visibilityDistanceType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureAddonService", "updateCreatureAddon")
  async updateCreatureAddon(
    @common.Param() params: CreatureAddonWhereUniqueInput,
    @common.Body() data: CreatureAddonUpdateInput
  ): Promise<CreatureAddon | null> {
    try {
      return await this.service.updateCreatureAddon({
        where: params,
        data: data,
        select: {
          aiAnimKit: true,
          animTier: true,
          auras: true,
          createdAt: true,
          emote: true,
          guid: true,
          id: true,
          meleeAnimKit: true,
          mount: true,
          mountCreatureId: true,
          movementAnimKit: true,
          pathId: true,
          pvPFlags: true,
          sheathState: true,
          standState: true,
          updatedAt: true,
          visFlags: true,
          visibilityDistanceType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureAddonService", "deleteCreatureAddon")
  async deleteCreatureAddon(
    @common.Param() params: CreatureAddonWhereUniqueInput
  ): Promise<CreatureAddon | null> {
    try {
      return await this.service.deleteCreatureAddon({
        where: params,
        select: {
          aiAnimKit: true,
          animTier: true,
          auras: true,
          createdAt: true,
          emote: true,
          guid: true,
          id: true,
          meleeAnimKit: true,
          mount: true,
          mountCreatureId: true,
          movementAnimKit: true,
          pathId: true,
          pvPFlags: true,
          sheathState: true,
          standState: true,
          updatedAt: true,
          visFlags: true,
          visibilityDistanceType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
