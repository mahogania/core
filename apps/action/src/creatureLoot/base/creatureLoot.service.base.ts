/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreatureLoot as PrismaCreatureLoot,
  Creature as PrismaCreature,
} from "@prisma/client";

export class CreatureLootServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreatureLootCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creatureLoot.count(args);
  }

  async creatureLoots(
    args: Prisma.CreatureLootFindManyArgs
  ): Promise<PrismaCreatureLoot[]> {
    return this.prisma.creatureLoot.findMany(args);
  }
  async creatureLoot(
    args: Prisma.CreatureLootFindUniqueArgs
  ): Promise<PrismaCreatureLoot | null> {
    return this.prisma.creatureLoot.findUnique(args);
  }
  async createCreatureLoot(
    args: Prisma.CreatureLootCreateArgs
  ): Promise<PrismaCreatureLoot> {
    return this.prisma.creatureLoot.create(args);
  }
  async updateCreatureLoot(
    args: Prisma.CreatureLootUpdateArgs
  ): Promise<PrismaCreatureLoot> {
    return this.prisma.creatureLoot.update(args);
  }
  async deleteCreatureLoot(
    args: Prisma.CreatureLootDeleteArgs
  ): Promise<PrismaCreatureLoot> {
    return this.prisma.creatureLoot.delete(args);
  }

  async findCreatures(
    parentId: string,
    args: Prisma.CreatureFindManyArgs
  ): Promise<PrismaCreature[]> {
    return this.prisma.creatureLoot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .creatures(args);
  }
}
