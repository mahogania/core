/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SpellEffect as PrismaSpellEffect } from "@prisma/client";

export class SpellEffectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpellEffectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.spellEffect.count(args);
  }

  async spellEffects(
    args: Prisma.SpellEffectFindManyArgs
  ): Promise<PrismaSpellEffect[]> {
    return this.prisma.spellEffect.findMany(args);
  }
  async spellEffect(
    args: Prisma.SpellEffectFindUniqueArgs
  ): Promise<PrismaSpellEffect | null> {
    return this.prisma.spellEffect.findUnique(args);
  }
  async createSpellEffect(
    args: Prisma.SpellEffectCreateArgs
  ): Promise<PrismaSpellEffect> {
    return this.prisma.spellEffect.create(args);
  }
  async updateSpellEffect(
    args: Prisma.SpellEffectUpdateArgs
  ): Promise<PrismaSpellEffect> {
    return this.prisma.spellEffect.update(args);
  }
  async deleteSpellEffect(
    args: Prisma.SpellEffectDeleteArgs
  ): Promise<PrismaSpellEffect> {
    return this.prisma.spellEffect.delete(args);
  }
}
