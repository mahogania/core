/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SpellEffectService } from "../spellEffect.service";
import { SpellEffectCreateInput } from "./SpellEffectCreateInput";
import { SpellEffectWhereInput } from "./SpellEffectWhereInput";
import { SpellEffectWhereUniqueInput } from "./SpellEffectWhereUniqueInput";
import { SpellEffectFindManyArgs } from "./SpellEffectFindManyArgs";
import { SpellEffectUpdateInput } from "./SpellEffectUpdateInput";
import { SpellEffect } from "./SpellEffect";

export class SpellEffectGrpcControllerBase {
  constructor(protected readonly service: SpellEffectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SpellEffect })
  @GrpcMethod("SpellEffectService", "createSpellEffect")
  async createSpellEffect(
    @common.Body() data: SpellEffectCreateInput
  ): Promise<SpellEffect> {
    return await this.service.createSpellEffect({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SpellEffect] })
  @ApiNestedQuery(SpellEffectFindManyArgs)
  @GrpcMethod("SpellEffectService", "spellEffects")
  async spellEffects(@common.Req() request: Request): Promise<SpellEffect[]> {
    const args = plainToClass(SpellEffectFindManyArgs, request.query);
    return this.service.spellEffects({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SpellEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SpellEffectService", "spellEffect")
  async spellEffect(
    @common.Param() params: SpellEffectWhereUniqueInput
  ): Promise<SpellEffect | null> {
    const result = await this.service.spellEffect({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SpellEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SpellEffectService", "updateSpellEffect")
  async updateSpellEffect(
    @common.Param() params: SpellEffectWhereUniqueInput,
    @common.Body() data: SpellEffectUpdateInput
  ): Promise<SpellEffect | null> {
    try {
      return await this.service.updateSpellEffect({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SpellEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SpellEffectService", "deleteSpellEffect")
  async deleteSpellEffect(
    @common.Param() params: SpellEffectWhereUniqueInput
  ): Promise<SpellEffect | null> {
    try {
      return await this.service.deleteSpellEffect({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
