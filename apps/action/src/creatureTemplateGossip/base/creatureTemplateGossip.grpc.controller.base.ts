/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CreatureTemplateGossipService } from "../creatureTemplateGossip.service";
import { CreatureTemplateGossipCreateInput } from "./CreatureTemplateGossipCreateInput";
import { CreatureTemplateGossipWhereInput } from "./CreatureTemplateGossipWhereInput";
import { CreatureTemplateGossipWhereUniqueInput } from "./CreatureTemplateGossipWhereUniqueInput";
import { CreatureTemplateGossipFindManyArgs } from "./CreatureTemplateGossipFindManyArgs";
import { CreatureTemplateGossipUpdateInput } from "./CreatureTemplateGossipUpdateInput";
import { CreatureTemplateGossip } from "./CreatureTemplateGossip";

export class CreatureTemplateGossipGrpcControllerBase {
  constructor(protected readonly service: CreatureTemplateGossipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreatureTemplateGossip })
  @GrpcMethod("CreatureTemplateGossipService", "createCreatureTemplateGossip")
  async createCreatureTemplateGossip(
    @common.Body() data: CreatureTemplateGossipCreateInput
  ): Promise<CreatureTemplateGossip> {
    return await this.service.createCreatureTemplateGossip({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreatureTemplateGossip] })
  @ApiNestedQuery(CreatureTemplateGossipFindManyArgs)
  @GrpcMethod("CreatureTemplateGossipService", "creatureTemplateGossips")
  async creatureTemplateGossips(
    @common.Req() request: Request
  ): Promise<CreatureTemplateGossip[]> {
    const args = plainToClass(
      CreatureTemplateGossipFindManyArgs,
      request.query
    );
    return this.service.creatureTemplateGossips({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateGossip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTemplateGossipService", "creatureTemplateGossip")
  async creatureTemplateGossip(
    @common.Param() params: CreatureTemplateGossipWhereUniqueInput
  ): Promise<CreatureTemplateGossip | null> {
    const result = await this.service.creatureTemplateGossip({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateGossip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTemplateGossipService", "updateCreatureTemplateGossip")
  async updateCreatureTemplateGossip(
    @common.Param() params: CreatureTemplateGossipWhereUniqueInput,
    @common.Body() data: CreatureTemplateGossipUpdateInput
  ): Promise<CreatureTemplateGossip | null> {
    try {
      return await this.service.updateCreatureTemplateGossip({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreatureTemplateGossip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CreatureTemplateGossipService", "deleteCreatureTemplateGossip")
  async deleteCreatureTemplateGossip(
    @common.Param() params: CreatureTemplateGossipWhereUniqueInput
  ): Promise<CreatureTemplateGossip | null> {
    try {
      return await this.service.deleteCreatureTemplateGossip({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
