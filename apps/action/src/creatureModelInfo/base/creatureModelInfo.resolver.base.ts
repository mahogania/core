/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatureModelInfo } from "./CreatureModelInfo";
import { CreatureModelInfoCountArgs } from "./CreatureModelInfoCountArgs";
import { CreatureModelInfoFindManyArgs } from "./CreatureModelInfoFindManyArgs";
import { CreatureModelInfoFindUniqueArgs } from "./CreatureModelInfoFindUniqueArgs";
import { CreateCreatureModelInfoArgs } from "./CreateCreatureModelInfoArgs";
import { UpdateCreatureModelInfoArgs } from "./UpdateCreatureModelInfoArgs";
import { DeleteCreatureModelInfoArgs } from "./DeleteCreatureModelInfoArgs";
import { CreatureFindManyArgs } from "../../creature/base/CreatureFindManyArgs";
import { Creature } from "../../creature/base/Creature";
import { CreatureModelInfoService } from "../creatureModelInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CreatureModelInfo)
export class CreatureModelInfoResolverBase {
  constructor(
    protected readonly service: CreatureModelInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CreatureModelInfo",
    action: "read",
    possession: "any",
  })
  async _creatureModelInfosMeta(
    @graphql.Args() args: CreatureModelInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CreatureModelInfo])
  @nestAccessControl.UseRoles({
    resource: "CreatureModelInfo",
    action: "read",
    possession: "any",
  })
  async creatureModelInfos(
    @graphql.Args() args: CreatureModelInfoFindManyArgs
  ): Promise<CreatureModelInfo[]> {
    return this.service.creatureModelInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CreatureModelInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CreatureModelInfo",
    action: "read",
    possession: "own",
  })
  async creatureModelInfo(
    @graphql.Args() args: CreatureModelInfoFindUniqueArgs
  ): Promise<CreatureModelInfo | null> {
    const result = await this.service.creatureModelInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureModelInfo)
  @nestAccessControl.UseRoles({
    resource: "CreatureModelInfo",
    action: "create",
    possession: "any",
  })
  async createCreatureModelInfo(
    @graphql.Args() args: CreateCreatureModelInfoArgs
  ): Promise<CreatureModelInfo> {
    return await this.service.createCreatureModelInfo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CreatureModelInfo)
  @nestAccessControl.UseRoles({
    resource: "CreatureModelInfo",
    action: "update",
    possession: "any",
  })
  async updateCreatureModelInfo(
    @graphql.Args() args: UpdateCreatureModelInfoArgs
  ): Promise<CreatureModelInfo | null> {
    try {
      return await this.service.updateCreatureModelInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreatureModelInfo)
  @nestAccessControl.UseRoles({
    resource: "CreatureModelInfo",
    action: "delete",
    possession: "any",
  })
  async deleteCreatureModelInfo(
    @graphql.Args() args: DeleteCreatureModelInfoArgs
  ): Promise<CreatureModelInfo | null> {
    try {
      return await this.service.deleteCreatureModelInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Creature], { name: "creatures" })
  @nestAccessControl.UseRoles({
    resource: "Creature",
    action: "read",
    possession: "any",
  })
  async findCreatures(
    @graphql.Parent() parent: CreatureModelInfo,
    @graphql.Args() args: CreatureFindManyArgs
  ): Promise<Creature[]> {
    const results = await this.service.findCreatures(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
