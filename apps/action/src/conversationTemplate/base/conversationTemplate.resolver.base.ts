/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ConversationTemplate } from "./ConversationTemplate";
import { ConversationTemplateCountArgs } from "./ConversationTemplateCountArgs";
import { ConversationTemplateFindManyArgs } from "./ConversationTemplateFindManyArgs";
import { ConversationTemplateFindUniqueArgs } from "./ConversationTemplateFindUniqueArgs";
import { CreateConversationTemplateArgs } from "./CreateConversationTemplateArgs";
import { UpdateConversationTemplateArgs } from "./UpdateConversationTemplateArgs";
import { DeleteConversationTemplateArgs } from "./DeleteConversationTemplateArgs";
import { ConversationTemplateService } from "../conversationTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ConversationTemplate)
export class ConversationTemplateResolverBase {
  constructor(
    protected readonly service: ConversationTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ConversationTemplate",
    action: "read",
    possession: "any",
  })
  async _conversationTemplatesMeta(
    @graphql.Args() args: ConversationTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ConversationTemplate])
  @nestAccessControl.UseRoles({
    resource: "ConversationTemplate",
    action: "read",
    possession: "any",
  })
  async conversationTemplates(
    @graphql.Args() args: ConversationTemplateFindManyArgs
  ): Promise<ConversationTemplate[]> {
    return this.service.conversationTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ConversationTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ConversationTemplate",
    action: "read",
    possession: "own",
  })
  async conversationTemplate(
    @graphql.Args() args: ConversationTemplateFindUniqueArgs
  ): Promise<ConversationTemplate | null> {
    const result = await this.service.conversationTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationTemplate)
  @nestAccessControl.UseRoles({
    resource: "ConversationTemplate",
    action: "create",
    possession: "any",
  })
  async createConversationTemplate(
    @graphql.Args() args: CreateConversationTemplateArgs
  ): Promise<ConversationTemplate> {
    return await this.service.createConversationTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ConversationTemplate)
  @nestAccessControl.UseRoles({
    resource: "ConversationTemplate",
    action: "update",
    possession: "any",
  })
  async updateConversationTemplate(
    @graphql.Args() args: UpdateConversationTemplateArgs
  ): Promise<ConversationTemplate | null> {
    try {
      return await this.service.updateConversationTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConversationTemplate)
  @nestAccessControl.UseRoles({
    resource: "ConversationTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteConversationTemplate(
    @graphql.Args() args: DeleteConversationTemplateArgs
  ): Promise<ConversationTemplate | null> {
    try {
      return await this.service.deleteConversationTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
