/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ConversationTemplate as PrismaConversationTemplate,
} from "@prisma/client";

export class ConversationTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationTemplate.count(args);
  }

  async conversationTemplates(
    args: Prisma.ConversationTemplateFindManyArgs
  ): Promise<PrismaConversationTemplate[]> {
    return this.prisma.conversationTemplate.findMany(args);
  }
  async conversationTemplate(
    args: Prisma.ConversationTemplateFindUniqueArgs
  ): Promise<PrismaConversationTemplate | null> {
    return this.prisma.conversationTemplate.findUnique(args);
  }
  async createConversationTemplate(
    args: Prisma.ConversationTemplateCreateArgs
  ): Promise<PrismaConversationTemplate> {
    return this.prisma.conversationTemplate.create(args);
  }
  async updateConversationTemplate(
    args: Prisma.ConversationTemplateUpdateArgs
  ): Promise<PrismaConversationTemplate> {
    return this.prisma.conversationTemplate.update(args);
  }
  async deleteConversationTemplate(
    args: Prisma.ConversationTemplateDeleteArgs
  ): Promise<PrismaConversationTemplate> {
    return this.prisma.conversationTemplate.delete(args);
  }
}
