/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ConversationTemplateService } from "../conversationTemplate.service";
import { ConversationTemplateCreateInput } from "./ConversationTemplateCreateInput";
import { ConversationTemplateWhereInput } from "./ConversationTemplateWhereInput";
import { ConversationTemplateWhereUniqueInput } from "./ConversationTemplateWhereUniqueInput";
import { ConversationTemplateFindManyArgs } from "./ConversationTemplateFindManyArgs";
import { ConversationTemplateUpdateInput } from "./ConversationTemplateUpdateInput";
import { ConversationTemplate } from "./ConversationTemplate";

export class ConversationTemplateGrpcControllerBase {
  constructor(protected readonly service: ConversationTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConversationTemplate })
  @GrpcMethod("ConversationTemplateService", "createConversationTemplate")
  async createConversationTemplate(
    @common.Body() data: ConversationTemplateCreateInput
  ): Promise<ConversationTemplate> {
    return await this.service.createConversationTemplate({
      data: data,
      select: {
        createdAt: true,
        firstLineId: true,
        flags: true,
        id: true,
        scriptName: true,
        textureKitId: true,
        updatedAt: true,
        verifiedBuild: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConversationTemplate] })
  @ApiNestedQuery(ConversationTemplateFindManyArgs)
  @GrpcMethod("ConversationTemplateService", "conversationTemplates")
  async conversationTemplates(
    @common.Req() request: Request
  ): Promise<ConversationTemplate[]> {
    const args = plainToClass(ConversationTemplateFindManyArgs, request.query);
    return this.service.conversationTemplates({
      ...args,
      select: {
        createdAt: true,
        firstLineId: true,
        flags: true,
        id: true,
        scriptName: true,
        textureKitId: true,
        updatedAt: true,
        verifiedBuild: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConversationTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ConversationTemplateService", "conversationTemplate")
  async conversationTemplate(
    @common.Param() params: ConversationTemplateWhereUniqueInput
  ): Promise<ConversationTemplate | null> {
    const result = await this.service.conversationTemplate({
      where: params,
      select: {
        createdAt: true,
        firstLineId: true,
        flags: true,
        id: true,
        scriptName: true,
        textureKitId: true,
        updatedAt: true,
        verifiedBuild: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConversationTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ConversationTemplateService", "updateConversationTemplate")
  async updateConversationTemplate(
    @common.Param() params: ConversationTemplateWhereUniqueInput,
    @common.Body() data: ConversationTemplateUpdateInput
  ): Promise<ConversationTemplate | null> {
    try {
      return await this.service.updateConversationTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          firstLineId: true,
          flags: true,
          id: true,
          scriptName: true,
          textureKitId: true,
          updatedAt: true,
          verifiedBuild: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConversationTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ConversationTemplateService", "deleteConversationTemplate")
  async deleteConversationTemplate(
    @common.Param() params: ConversationTemplateWhereUniqueInput
  ): Promise<ConversationTemplate | null> {
    try {
      return await this.service.deleteConversationTemplate({
        where: params,
        select: {
          createdAt: true,
          firstLineId: true,
          flags: true,
          id: true,
          scriptName: true,
          textureKitId: true,
          updatedAt: true,
          verifiedBuild: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
