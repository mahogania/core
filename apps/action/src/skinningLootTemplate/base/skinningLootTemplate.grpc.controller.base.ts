/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { SkinningLootTemplateService } from "../skinningLootTemplate.service";
import { SkinningLootTemplateCreateInput } from "./SkinningLootTemplateCreateInput";
import { SkinningLootTemplateWhereInput } from "./SkinningLootTemplateWhereInput";
import { SkinningLootTemplateWhereUniqueInput } from "./SkinningLootTemplateWhereUniqueInput";
import { SkinningLootTemplateFindManyArgs } from "./SkinningLootTemplateFindManyArgs";
import { SkinningLootTemplateUpdateInput } from "./SkinningLootTemplateUpdateInput";
import { SkinningLootTemplate } from "./SkinningLootTemplate";

export class SkinningLootTemplateGrpcControllerBase {
  constructor(protected readonly service: SkinningLootTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SkinningLootTemplate })
  @GrpcMethod("SkinningLootTemplateService", "createSkinningLootTemplate")
  async createSkinningLootTemplate(
    @common.Body() data: SkinningLootTemplateCreateInput
  ): Promise<SkinningLootTemplate> {
    return await this.service.createSkinningLootTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SkinningLootTemplate] })
  @ApiNestedQuery(SkinningLootTemplateFindManyArgs)
  @GrpcMethod("SkinningLootTemplateService", "skinningLootTemplates")
  async skinningLootTemplates(
    @common.Req() request: Request
  ): Promise<SkinningLootTemplate[]> {
    const args = plainToClass(SkinningLootTemplateFindManyArgs, request.query);
    return this.service.skinningLootTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SkinningLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SkinningLootTemplateService", "skinningLootTemplate")
  async skinningLootTemplate(
    @common.Param() params: SkinningLootTemplateWhereUniqueInput
  ): Promise<SkinningLootTemplate | null> {
    const result = await this.service.skinningLootTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SkinningLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SkinningLootTemplateService", "updateSkinningLootTemplate")
  async updateSkinningLootTemplate(
    @common.Param() params: SkinningLootTemplateWhereUniqueInput,
    @common.Body() data: SkinningLootTemplateUpdateInput
  ): Promise<SkinningLootTemplate | null> {
    try {
      return await this.service.updateSkinningLootTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SkinningLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("SkinningLootTemplateService", "deleteSkinningLootTemplate")
  async deleteSkinningLootTemplate(
    @common.Param() params: SkinningLootTemplateWhereUniqueInput
  ): Promise<SkinningLootTemplate | null> {
    try {
      return await this.service.deleteSkinningLootTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
