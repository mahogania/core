/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DashboardChartSource } from "./DashboardChartSource";
import { DashboardChartSourceCountArgs } from "./DashboardChartSourceCountArgs";
import { DashboardChartSourceFindManyArgs } from "./DashboardChartSourceFindManyArgs";
import { DashboardChartSourceFindUniqueArgs } from "./DashboardChartSourceFindUniqueArgs";
import { CreateDashboardChartSourceArgs } from "./CreateDashboardChartSourceArgs";
import { UpdateDashboardChartSourceArgs } from "./UpdateDashboardChartSourceArgs";
import { DeleteDashboardChartSourceArgs } from "./DeleteDashboardChartSourceArgs";
import { DashboardChartSourceService } from "../dashboardChartSource.service";
@graphql.Resolver(() => DashboardChartSource)
export class DashboardChartSourceResolverBase {
  constructor(protected readonly service: DashboardChartSourceService) {}

  async _dashboardChartSourcesMeta(
    @graphql.Args() args: DashboardChartSourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DashboardChartSource])
  async dashboardChartSources(
    @graphql.Args() args: DashboardChartSourceFindManyArgs
  ): Promise<DashboardChartSource[]> {
    return this.service.dashboardChartSources(args);
  }

  @graphql.Query(() => DashboardChartSource, { nullable: true })
  async dashboardChartSource(
    @graphql.Args() args: DashboardChartSourceFindUniqueArgs
  ): Promise<DashboardChartSource | null> {
    const result = await this.service.dashboardChartSource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DashboardChartSource)
  async createDashboardChartSource(
    @graphql.Args() args: CreateDashboardChartSourceArgs
  ): Promise<DashboardChartSource> {
    return await this.service.createDashboardChartSource({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DashboardChartSource)
  async updateDashboardChartSource(
    @graphql.Args() args: UpdateDashboardChartSourceArgs
  ): Promise<DashboardChartSource | null> {
    try {
      return await this.service.updateDashboardChartSource({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DashboardChartSource)
  async deleteDashboardChartSource(
    @graphql.Args() args: DeleteDashboardChartSourceArgs
  ): Promise<DashboardChartSource | null> {
    try {
      return await this.service.deleteDashboardChartSource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
