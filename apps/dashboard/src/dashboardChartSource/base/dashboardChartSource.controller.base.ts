/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardChartSourceService } from "../dashboardChartSource.service";
import { DashboardChartSourceCreateInput } from "./DashboardChartSourceCreateInput";
import { DashboardChartSource } from "./DashboardChartSource";
import { DashboardChartSourceFindManyArgs } from "./DashboardChartSourceFindManyArgs";
import { DashboardChartSourceWhereUniqueInput } from "./DashboardChartSourceWhereUniqueInput";
import { DashboardChartSourceUpdateInput } from "./DashboardChartSourceUpdateInput";

export class DashboardChartSourceControllerBase {
  constructor(protected readonly service: DashboardChartSourceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DashboardChartSource })
  async createDashboardChartSource(
    @common.Body() data: DashboardChartSourceCreateInput
  ): Promise<DashboardChartSource> {
    return await this.service.createDashboardChartSource({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        owner: true,
        sourceName: true,
        timeseries: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DashboardChartSource] })
  @ApiNestedQuery(DashboardChartSourceFindManyArgs)
  async dashboardChartSources(
    @common.Req() request: Request
  ): Promise<DashboardChartSource[]> {
    const args = plainToClass(DashboardChartSourceFindManyArgs, request.query);
    return this.service.dashboardChartSources({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        owner: true,
        sourceName: true,
        timeseries: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartSource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboardChartSource(
    @common.Param() params: DashboardChartSourceWhereUniqueInput
  ): Promise<DashboardChartSource | null> {
    const result = await this.service.dashboardChartSource({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        owner: true,
        sourceName: true,
        timeseries: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartSource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboardChartSource(
    @common.Param() params: DashboardChartSourceWhereUniqueInput,
    @common.Body() data: DashboardChartSourceUpdateInput
  ): Promise<DashboardChartSource | null> {
    try {
      return await this.service.updateDashboardChartSource({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          owner: true,
          sourceName: true,
          timeseries: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartSource })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboardChartSource(
    @common.Param() params: DashboardChartSourceWhereUniqueInput
  ): Promise<DashboardChartSource | null> {
    try {
      return await this.service.deleteDashboardChartSource({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          owner: true,
          sourceName: true,
          timeseries: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
