/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DashboardChart as PrismaDashboardChart } from "@prisma/client";

export class DashboardChartServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DashboardChartCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dashboardChart.count(args);
  }

  async dashboardCharts(
    args: Prisma.DashboardChartFindManyArgs
  ): Promise<PrismaDashboardChart[]> {
    return this.prisma.dashboardChart.findMany(args);
  }
  async dashboardChart(
    args: Prisma.DashboardChartFindUniqueArgs
  ): Promise<PrismaDashboardChart | null> {
    return this.prisma.dashboardChart.findUnique(args);
  }
  async createDashboardChart(
    args: Prisma.DashboardChartCreateArgs
  ): Promise<PrismaDashboardChart> {
    return this.prisma.dashboardChart.create(args);
  }
  async updateDashboardChart(
    args: Prisma.DashboardChartUpdateArgs
  ): Promise<PrismaDashboardChart> {
    return this.prisma.dashboardChart.update(args);
  }
  async deleteDashboardChart(
    args: Prisma.DashboardChartDeleteArgs
  ): Promise<PrismaDashboardChart> {
    return this.prisma.dashboardChart.delete(args);
  }
}
