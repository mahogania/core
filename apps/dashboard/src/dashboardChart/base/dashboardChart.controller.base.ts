/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardChartService } from "../dashboardChart.service";
import { DashboardChartCreateInput } from "./DashboardChartCreateInput";
import { DashboardChart } from "./DashboardChart";
import { DashboardChartFindManyArgs } from "./DashboardChartFindManyArgs";
import { DashboardChartWhereUniqueInput } from "./DashboardChartWhereUniqueInput";
import { DashboardChartUpdateInput } from "./DashboardChartUpdateInput";

export class DashboardChartControllerBase {
  constructor(protected readonly service: DashboardChartService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DashboardChart })
  async createDashboardChart(
    @common.Body() data: DashboardChartCreateInput
  ): Promise<DashboardChart> {
    return await this.service.createDashboardChart({
      data: data,
      select: {
        aggregateFunctionBasedOn: true,
        basedOn: true,
        chartName: true,
        chartType: true,
        color: true,
        createdAt: true,
        creation: true,
        customOptions: true,
        docstatus: true,
        documentType: true,
        dynamicFiltersJson: true,
        filtersJson: true,
        fromDate: true,
        groupByBasedOn: true,
        groupByType: true,
        heatmapYear: true,
        id: true,
        idx: true,
        isPublic: true,
        isStandard: true,
        lastSyncedOn: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        numberOfGroups: true,
        owner: true,
        parentDocumentType: true,
        reportName: true,
        source: true,
        timeInterval: true,
        timeseries: true,
        timespan: true,
        toDate: true,
        typeField: true,
        updatedAt: true,
        useReportChart: true,
        valueBasedOn: true,
        xField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DashboardChart] })
  @ApiNestedQuery(DashboardChartFindManyArgs)
  async dashboardCharts(
    @common.Req() request: Request
  ): Promise<DashboardChart[]> {
    const args = plainToClass(DashboardChartFindManyArgs, request.query);
    return this.service.dashboardCharts({
      ...args,
      select: {
        aggregateFunctionBasedOn: true,
        basedOn: true,
        chartName: true,
        chartType: true,
        color: true,
        createdAt: true,
        creation: true,
        customOptions: true,
        docstatus: true,
        documentType: true,
        dynamicFiltersJson: true,
        filtersJson: true,
        fromDate: true,
        groupByBasedOn: true,
        groupByType: true,
        heatmapYear: true,
        id: true,
        idx: true,
        isPublic: true,
        isStandard: true,
        lastSyncedOn: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        numberOfGroups: true,
        owner: true,
        parentDocumentType: true,
        reportName: true,
        source: true,
        timeInterval: true,
        timeseries: true,
        timespan: true,
        toDate: true,
        typeField: true,
        updatedAt: true,
        useReportChart: true,
        valueBasedOn: true,
        xField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DashboardChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboardChart(
    @common.Param() params: DashboardChartWhereUniqueInput
  ): Promise<DashboardChart | null> {
    const result = await this.service.dashboardChart({
      where: params,
      select: {
        aggregateFunctionBasedOn: true,
        basedOn: true,
        chartName: true,
        chartType: true,
        color: true,
        createdAt: true,
        creation: true,
        customOptions: true,
        docstatus: true,
        documentType: true,
        dynamicFiltersJson: true,
        filtersJson: true,
        fromDate: true,
        groupByBasedOn: true,
        groupByType: true,
        heatmapYear: true,
        id: true,
        idx: true,
        isPublic: true,
        isStandard: true,
        lastSyncedOn: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        numberOfGroups: true,
        owner: true,
        parentDocumentType: true,
        reportName: true,
        source: true,
        timeInterval: true,
        timeseries: true,
        timespan: true,
        toDate: true,
        typeField: true,
        updatedAt: true,
        useReportChart: true,
        valueBasedOn: true,
        xField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DashboardChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboardChart(
    @common.Param() params: DashboardChartWhereUniqueInput,
    @common.Body() data: DashboardChartUpdateInput
  ): Promise<DashboardChart | null> {
    try {
      return await this.service.updateDashboardChart({
        where: params,
        data: data,
        select: {
          aggregateFunctionBasedOn: true,
          basedOn: true,
          chartName: true,
          chartType: true,
          color: true,
          createdAt: true,
          creation: true,
          customOptions: true,
          docstatus: true,
          documentType: true,
          dynamicFiltersJson: true,
          filtersJson: true,
          fromDate: true,
          groupByBasedOn: true,
          groupByType: true,
          heatmapYear: true,
          id: true,
          idx: true,
          isPublic: true,
          isStandard: true,
          lastSyncedOn: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          numberOfGroups: true,
          owner: true,
          parentDocumentType: true,
          reportName: true,
          source: true,
          timeInterval: true,
          timeseries: true,
          timespan: true,
          toDate: true,
          typeField: true,
          updatedAt: true,
          useReportChart: true,
          valueBasedOn: true,
          xField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DashboardChart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboardChart(
    @common.Param() params: DashboardChartWhereUniqueInput
  ): Promise<DashboardChart | null> {
    try {
      return await this.service.deleteDashboardChart({
        where: params,
        select: {
          aggregateFunctionBasedOn: true,
          basedOn: true,
          chartName: true,
          chartType: true,
          color: true,
          createdAt: true,
          creation: true,
          customOptions: true,
          docstatus: true,
          documentType: true,
          dynamicFiltersJson: true,
          filtersJson: true,
          fromDate: true,
          groupByBasedOn: true,
          groupByType: true,
          heatmapYear: true,
          id: true,
          idx: true,
          isPublic: true,
          isStandard: true,
          lastSyncedOn: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          numberOfGroups: true,
          owner: true,
          parentDocumentType: true,
          reportName: true,
          source: true,
          timeInterval: true,
          timeseries: true,
          timespan: true,
          toDate: true,
          typeField: true,
          updatedAt: true,
          useReportChart: true,
          valueBasedOn: true,
          xField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
