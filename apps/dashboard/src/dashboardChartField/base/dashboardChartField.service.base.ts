/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DashboardChartField as PrismaDashboardChartField,
} from "@prisma/client";

export class DashboardChartFieldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DashboardChartFieldCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dashboardChartField.count(args);
  }

  async dashboardChartFields(
    args: Prisma.DashboardChartFieldFindManyArgs
  ): Promise<PrismaDashboardChartField[]> {
    return this.prisma.dashboardChartField.findMany(args);
  }
  async dashboardChartField(
    args: Prisma.DashboardChartFieldFindUniqueArgs
  ): Promise<PrismaDashboardChartField | null> {
    return this.prisma.dashboardChartField.findUnique(args);
  }
  async createDashboardChartField(
    args: Prisma.DashboardChartFieldCreateArgs
  ): Promise<PrismaDashboardChartField> {
    return this.prisma.dashboardChartField.create(args);
  }
  async updateDashboardChartField(
    args: Prisma.DashboardChartFieldUpdateArgs
  ): Promise<PrismaDashboardChartField> {
    return this.prisma.dashboardChartField.update(args);
  }
  async deleteDashboardChartField(
    args: Prisma.DashboardChartFieldDeleteArgs
  ): Promise<PrismaDashboardChartField> {
    return this.prisma.dashboardChartField.delete(args);
  }
}
