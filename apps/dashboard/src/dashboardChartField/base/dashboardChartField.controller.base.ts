/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardChartFieldService } from "../dashboardChartField.service";
import { DashboardChartFieldCreateInput } from "./DashboardChartFieldCreateInput";
import { DashboardChartField } from "./DashboardChartField";
import { DashboardChartFieldFindManyArgs } from "./DashboardChartFieldFindManyArgs";
import { DashboardChartFieldWhereUniqueInput } from "./DashboardChartFieldWhereUniqueInput";
import { DashboardChartFieldUpdateInput } from "./DashboardChartFieldUpdateInput";

export class DashboardChartFieldControllerBase {
  constructor(protected readonly service: DashboardChartFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DashboardChartField })
  async createDashboardChartField(
    @common.Body() data: DashboardChartFieldCreateInput
  ): Promise<DashboardChartField> {
    return await this.service.createDashboardChartField({
      data: data,
      select: {
        color: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        yField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DashboardChartField] })
  @ApiNestedQuery(DashboardChartFieldFindManyArgs)
  async dashboardChartFields(
    @common.Req() request: Request
  ): Promise<DashboardChartField[]> {
    const args = plainToClass(DashboardChartFieldFindManyArgs, request.query);
    return this.service.dashboardChartFields({
      ...args,
      select: {
        color: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        yField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboardChartField(
    @common.Param() params: DashboardChartFieldWhereUniqueInput
  ): Promise<DashboardChartField | null> {
    const result = await this.service.dashboardChartField({
      where: params,
      select: {
        color: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        yField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboardChartField(
    @common.Param() params: DashboardChartFieldWhereUniqueInput,
    @common.Body() data: DashboardChartFieldUpdateInput
  ): Promise<DashboardChartField | null> {
    try {
      return await this.service.updateDashboardChartField({
        where: params,
        data: data,
        select: {
          color: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          yField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboardChartField(
    @common.Param() params: DashboardChartFieldWhereUniqueInput
  ): Promise<DashboardChartField | null> {
    try {
      return await this.service.deleteDashboardChartField({
        where: params,
        select: {
          color: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          yField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
