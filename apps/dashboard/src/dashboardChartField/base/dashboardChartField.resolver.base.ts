/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DashboardChartField } from "./DashboardChartField";
import { DashboardChartFieldCountArgs } from "./DashboardChartFieldCountArgs";
import { DashboardChartFieldFindManyArgs } from "./DashboardChartFieldFindManyArgs";
import { DashboardChartFieldFindUniqueArgs } from "./DashboardChartFieldFindUniqueArgs";
import { CreateDashboardChartFieldArgs } from "./CreateDashboardChartFieldArgs";
import { UpdateDashboardChartFieldArgs } from "./UpdateDashboardChartFieldArgs";
import { DeleteDashboardChartFieldArgs } from "./DeleteDashboardChartFieldArgs";
import { DashboardChartFieldService } from "../dashboardChartField.service";
@graphql.Resolver(() => DashboardChartField)
export class DashboardChartFieldResolverBase {
  constructor(protected readonly service: DashboardChartFieldService) {}

  async _dashboardChartFieldsMeta(
    @graphql.Args() args: DashboardChartFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DashboardChartField])
  async dashboardChartFields(
    @graphql.Args() args: DashboardChartFieldFindManyArgs
  ): Promise<DashboardChartField[]> {
    return this.service.dashboardChartFields(args);
  }

  @graphql.Query(() => DashboardChartField, { nullable: true })
  async dashboardChartField(
    @graphql.Args() args: DashboardChartFieldFindUniqueArgs
  ): Promise<DashboardChartField | null> {
    const result = await this.service.dashboardChartField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DashboardChartField)
  async createDashboardChartField(
    @graphql.Args() args: CreateDashboardChartFieldArgs
  ): Promise<DashboardChartField> {
    return await this.service.createDashboardChartField({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DashboardChartField)
  async updateDashboardChartField(
    @graphql.Args() args: UpdateDashboardChartFieldArgs
  ): Promise<DashboardChartField | null> {
    try {
      return await this.service.updateDashboardChartField({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DashboardChartField)
  async deleteDashboardChartField(
    @graphql.Args() args: DeleteDashboardChartFieldArgs
  ): Promise<DashboardChartField | null> {
    try {
      return await this.service.deleteDashboardChartField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
