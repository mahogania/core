/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardChartLinkService } from "../dashboardChartLink.service";
import { DashboardChartLinkCreateInput } from "./DashboardChartLinkCreateInput";
import { DashboardChartLink } from "./DashboardChartLink";
import { DashboardChartLinkFindManyArgs } from "./DashboardChartLinkFindManyArgs";
import { DashboardChartLinkWhereUniqueInput } from "./DashboardChartLinkWhereUniqueInput";
import { DashboardChartLinkUpdateInput } from "./DashboardChartLinkUpdateInput";

export class DashboardChartLinkControllerBase {
  constructor(protected readonly service: DashboardChartLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DashboardChartLink })
  async createDashboardChartLink(
    @common.Body() data: DashboardChartLinkCreateInput
  ): Promise<DashboardChartLink> {
    return await this.service.createDashboardChartLink({
      data: data,
      select: {
        chart: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DashboardChartLink] })
  @ApiNestedQuery(DashboardChartLinkFindManyArgs)
  async dashboardChartLinks(
    @common.Req() request: Request
  ): Promise<DashboardChartLink[]> {
    const args = plainToClass(DashboardChartLinkFindManyArgs, request.query);
    return this.service.dashboardChartLinks({
      ...args,
      select: {
        chart: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboardChartLink(
    @common.Param() params: DashboardChartLinkWhereUniqueInput
  ): Promise<DashboardChartLink | null> {
    const result = await this.service.dashboardChartLink({
      where: params,
      select: {
        chart: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        width: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboardChartLink(
    @common.Param() params: DashboardChartLinkWhereUniqueInput,
    @common.Body() data: DashboardChartLinkUpdateInput
  ): Promise<DashboardChartLink | null> {
    try {
      return await this.service.updateDashboardChartLink({
        where: params,
        data: data,
        select: {
          chart: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DashboardChartLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboardChartLink(
    @common.Param() params: DashboardChartLinkWhereUniqueInput
  ): Promise<DashboardChartLink | null> {
    try {
      return await this.service.deleteDashboardChartLink({
        where: params,
        select: {
          chart: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
