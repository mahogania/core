/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DashboardChartLink } from "./DashboardChartLink";
import { DashboardChartLinkCountArgs } from "./DashboardChartLinkCountArgs";
import { DashboardChartLinkFindManyArgs } from "./DashboardChartLinkFindManyArgs";
import { DashboardChartLinkFindUniqueArgs } from "./DashboardChartLinkFindUniqueArgs";
import { CreateDashboardChartLinkArgs } from "./CreateDashboardChartLinkArgs";
import { UpdateDashboardChartLinkArgs } from "./UpdateDashboardChartLinkArgs";
import { DeleteDashboardChartLinkArgs } from "./DeleteDashboardChartLinkArgs";
import { DashboardChartLinkService } from "../dashboardChartLink.service";
@graphql.Resolver(() => DashboardChartLink)
export class DashboardChartLinkResolverBase {
  constructor(protected readonly service: DashboardChartLinkService) {}

  async _dashboardChartLinksMeta(
    @graphql.Args() args: DashboardChartLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DashboardChartLink])
  async dashboardChartLinks(
    @graphql.Args() args: DashboardChartLinkFindManyArgs
  ): Promise<DashboardChartLink[]> {
    return this.service.dashboardChartLinks(args);
  }

  @graphql.Query(() => DashboardChartLink, { nullable: true })
  async dashboardChartLink(
    @graphql.Args() args: DashboardChartLinkFindUniqueArgs
  ): Promise<DashboardChartLink | null> {
    const result = await this.service.dashboardChartLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DashboardChartLink)
  async createDashboardChartLink(
    @graphql.Args() args: CreateDashboardChartLinkArgs
  ): Promise<DashboardChartLink> {
    return await this.service.createDashboardChartLink({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DashboardChartLink)
  async updateDashboardChartLink(
    @graphql.Args() args: UpdateDashboardChartLinkArgs
  ): Promise<DashboardChartLink | null> {
    try {
      return await this.service.updateDashboardChartLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DashboardChartLink)
  async deleteDashboardChartLink(
    @graphql.Args() args: DeleteDashboardChartLinkArgs
  ): Promise<DashboardChartLink | null> {
    try {
      return await this.service.deleteDashboardChartLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
