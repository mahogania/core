/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestTemplateLocaleService } from "../questTemplateLocale.service";
import { QuestTemplateLocaleCreateInput } from "./QuestTemplateLocaleCreateInput";
import { QuestTemplateLocaleWhereInput } from "./QuestTemplateLocaleWhereInput";
import { QuestTemplateLocaleWhereUniqueInput } from "./QuestTemplateLocaleWhereUniqueInput";
import { QuestTemplateLocaleFindManyArgs } from "./QuestTemplateLocaleFindManyArgs";
import { QuestTemplateLocaleUpdateInput } from "./QuestTemplateLocaleUpdateInput";
import { QuestTemplateLocale } from "./QuestTemplateLocale";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestTemplateWhereUniqueInput } from "../../questTemplate/base/QuestTemplateWhereUniqueInput";

export class QuestTemplateLocaleGrpcControllerBase {
  constructor(protected readonly service: QuestTemplateLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestTemplateLocale })
  @GrpcMethod("QuestTemplateLocaleService", "createQuestTemplateLocale")
  async createQuestTemplateLocale(
    @common.Body() data: QuestTemplateLocaleCreateInput
  ): Promise<QuestTemplateLocale> {
    return await this.service.createQuestTemplateLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestTemplateLocale] })
  @ApiNestedQuery(QuestTemplateLocaleFindManyArgs)
  @GrpcMethod("QuestTemplateLocaleService", "questTemplateLocales")
  async questTemplateLocales(
    @common.Req() request: Request
  ): Promise<QuestTemplateLocale[]> {
    const args = plainToClass(QuestTemplateLocaleFindManyArgs, request.query);
    return this.service.questTemplateLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestTemplateLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestTemplateLocaleService", "questTemplateLocale")
  async questTemplateLocale(
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput
  ): Promise<QuestTemplateLocale | null> {
    const result = await this.service.questTemplateLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestTemplateLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestTemplateLocaleService", "updateQuestTemplateLocale")
  async updateQuestTemplateLocale(
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput,
    @common.Body() data: QuestTemplateLocaleUpdateInput
  ): Promise<QuestTemplateLocale | null> {
    try {
      return await this.service.updateQuestTemplateLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestTemplateLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestTemplateLocaleService", "deleteQuestTemplateLocale")
  async deleteQuestTemplateLocale(
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput
  ): Promise<QuestTemplateLocale | null> {
    try {
      return await this.service.deleteQuestTemplateLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questTemplates")
  @ApiNestedQuery(QuestTemplateFindManyArgs)
  @GrpcMethod("QuestTemplateLocaleService", "findManyQuestTemplates")
  async findManyQuestTemplates(
    @common.Req() request: Request,
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput
  ): Promise<QuestTemplate[]> {
    const query = plainToClass(QuestTemplateFindManyArgs, request.query);
    const results = await this.service.findQuestTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questMails: {
          select: {
            id: true,
          },
        },

        questObjectives: {
          select: {
            id: true,
          },
        },

        questOfferRewards: {
          select: {
            id: true,
          },
        },

        questPools: {
          select: {
            id: true,
          },
        },

        questRequestItems: {
          select: {
            id: true,
          },
        },

        questTemplateLocale: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questTemplates")
  @GrpcMethod("QuestTemplateLocaleService", "connectQuestTemplates")
  async connectQuestTemplates(
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        connect: body,
      },
    };
    await this.service.updateQuestTemplateLocale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questTemplates")
  @GrpcMethod("QuestTemplateLocaleService", "updateQuestTemplates")
  async updateQuestTemplates(
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        set: body,
      },
    };
    await this.service.updateQuestTemplateLocale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questTemplates")
  @GrpcMethod("QuestTemplateLocaleService", "disconnectQuestTemplates")
  async disconnectQuestTemplates(
    @common.Param() params: QuestTemplateLocaleWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateQuestTemplateLocale({
      where: params,
      data,
      select: { id: true },
    });
  }
}
