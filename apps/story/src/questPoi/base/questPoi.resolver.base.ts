/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestPoi } from "./QuestPoi";
import { QuestPoiCountArgs } from "./QuestPoiCountArgs";
import { QuestPoiFindManyArgs } from "./QuestPoiFindManyArgs";
import { QuestPoiFindUniqueArgs } from "./QuestPoiFindUniqueArgs";
import { CreateQuestPoiArgs } from "./CreateQuestPoiArgs";
import { UpdateQuestPoiArgs } from "./UpdateQuestPoiArgs";
import { DeleteQuestPoiArgs } from "./DeleteQuestPoiArgs";
import { PointOfInterest } from "../../pointOfInterest/base/PointOfInterest";
import { QuestRegion } from "../../questRegion/base/QuestRegion";
import { QuestPoiService } from "../questPoi.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestPoi)
export class QuestPoiResolverBase {
  constructor(
    protected readonly service: QuestPoiService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "read",
    possession: "any",
  })
  async _questPoisMeta(
    @graphql.Args() args: QuestPoiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestPoi])
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "read",
    possession: "any",
  })
  async questPois(
    @graphql.Args() args: QuestPoiFindManyArgs
  ): Promise<QuestPoi[]> {
    return this.service.questPois(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestPoi, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "read",
    possession: "own",
  })
  async questPoi(
    @graphql.Args() args: QuestPoiFindUniqueArgs
  ): Promise<QuestPoi | null> {
    const result = await this.service.questPoi(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestPoi)
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "create",
    possession: "any",
  })
  async createQuestPoi(
    @graphql.Args() args: CreateQuestPoiArgs
  ): Promise<QuestPoi> {
    return await this.service.createQuestPoi({
      ...args,
      data: {
        ...args.data,

        pointOfInterest: {
          connect: args.data.pointOfInterest,
        },

        questPoi: args.data.questPoi
          ? {
              connect: args.data.questPoi,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestPoi)
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "update",
    possession: "any",
  })
  async updateQuestPoi(
    @graphql.Args() args: UpdateQuestPoiArgs
  ): Promise<QuestPoi | null> {
    try {
      return await this.service.updateQuestPoi({
        ...args,
        data: {
          ...args.data,

          pointOfInterest: {
            connect: args.data.pointOfInterest,
          },

          questPoi: args.data.questPoi
            ? {
                connect: args.data.questPoi,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestPoi)
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "delete",
    possession: "any",
  })
  async deleteQuestPoi(
    @graphql.Args() args: DeleteQuestPoiArgs
  ): Promise<QuestPoi | null> {
    try {
      return await this.service.deleteQuestPoi(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PointOfInterest, {
    nullable: true,
    name: "pointOfInterest",
  })
  @nestAccessControl.UseRoles({
    resource: "PointOfInterest",
    action: "read",
    possession: "any",
  })
  async getPointOfInterest(
    @graphql.Parent() parent: QuestPoi
  ): Promise<PointOfInterest | null> {
    const result = await this.service.getPointOfInterest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestRegion, {
    nullable: true,
    name: "questPoi",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "read",
    possession: "any",
  })
  async getQuestPoi(
    @graphql.Parent() parent: QuestPoi
  ): Promise<QuestRegion | null> {
    const result = await this.service.getQuestPoi(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
