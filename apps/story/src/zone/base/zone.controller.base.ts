/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ZoneService } from "../zone.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ZoneCreateInput } from "./ZoneCreateInput";
import { Zone } from "./Zone";
import { ZoneFindManyArgs } from "./ZoneFindManyArgs";
import { ZoneWhereUniqueInput } from "./ZoneWhereUniqueInput";
import { ZoneUpdateInput } from "./ZoneUpdateInput";
import { AreaFindManyArgs } from "../../area/base/AreaFindManyArgs";
import { Area } from "../../area/base/Area";
import { AreaWhereUniqueInput } from "../../area/base/AreaWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ZoneControllerBase {
  constructor(
    protected readonly service: ZoneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Zone })
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ZoneCreateInput,
  })
  async createZone(@common.Body() data: ZoneCreateInput): Promise<Zone> {
    return await this.service.createZone({
      data: {
        ...data,

        map: data.map
          ? {
              connect: data.map,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        map: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Zone] })
  @ApiNestedQuery(ZoneFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async zones(@common.Req() request: Request): Promise<Zone[]> {
    const args = plainToClass(ZoneFindManyArgs, request.query);
    return this.service.zones({
      ...args,
      select: {
        createdAt: true,
        id: true,

        map: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Zone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async zone(
    @common.Param() params: ZoneWhereUniqueInput
  ): Promise<Zone | null> {
    const result = await this.service.zone({
      where: params,
      select: {
        createdAt: true,
        id: true,

        map: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Zone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ZoneUpdateInput,
  })
  async updateZone(
    @common.Param() params: ZoneWhereUniqueInput,
    @common.Body() data: ZoneUpdateInput
  ): Promise<Zone | null> {
    try {
      return await this.service.updateZone({
        where: params,
        data: {
          ...data,

          map: data.map
            ? {
                connect: data.map,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          map: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Zone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteZone(
    @common.Param() params: ZoneWhereUniqueInput
  ): Promise<Zone | null> {
    try {
      return await this.service.deleteZone({
        where: params,
        select: {
          createdAt: true,
          id: true,

          map: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/areas")
  @ApiNestedQuery(AreaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "read",
    possession: "any",
  })
  async findAreas(
    @common.Req() request: Request,
    @common.Param() params: ZoneWhereUniqueInput
  ): Promise<Area[]> {
    const query = plainToClass(AreaFindManyArgs, request.query);
    const results = await this.service.findAreas(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        zone: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/areas")
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "update",
    possession: "any",
  })
  async connectAreas(
    @common.Param() params: ZoneWhereUniqueInput,
    @common.Body() body: AreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areas: {
        connect: body,
      },
    };
    await this.service.updateZone({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/areas")
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "update",
    possession: "any",
  })
  async updateAreas(
    @common.Param() params: ZoneWhereUniqueInput,
    @common.Body() body: AreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areas: {
        set: body,
      },
    };
    await this.service.updateZone({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/areas")
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "update",
    possession: "any",
  })
  async disconnectAreas(
    @common.Param() params: ZoneWhereUniqueInput,
    @common.Body() body: AreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areas: {
        disconnect: body,
      },
    };
    await this.service.updateZone({
      where: params,
      data,
      select: { id: true },
    });
  }
}
