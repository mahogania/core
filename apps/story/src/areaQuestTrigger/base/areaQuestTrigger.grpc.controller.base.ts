/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AreaQuestTriggerService } from "../areaQuestTrigger.service";
import { AreaQuestTriggerCreateInput } from "./AreaQuestTriggerCreateInput";
import { AreaQuestTriggerWhereInput } from "./AreaQuestTriggerWhereInput";
import { AreaQuestTriggerWhereUniqueInput } from "./AreaQuestTriggerWhereUniqueInput";
import { AreaQuestTriggerFindManyArgs } from "./AreaQuestTriggerFindManyArgs";
import { AreaQuestTriggerUpdateInput } from "./AreaQuestTriggerUpdateInput";
import { AreaQuestTrigger } from "./AreaQuestTrigger";

export class AreaQuestTriggerGrpcControllerBase {
  constructor(protected readonly service: AreaQuestTriggerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AreaQuestTrigger })
  @GrpcMethod("AreaQuestTriggerService", "createAreaQuestTrigger")
  async createAreaQuestTrigger(
    @common.Body() data: AreaQuestTriggerCreateInput
  ): Promise<AreaQuestTrigger> {
    return await this.service.createAreaQuestTrigger({
      data: {
        ...data,

        area: data.area
          ? {
              connect: data.area,
            }
          : undefined,

        quest: data.quest
          ? {
              connect: data.quest,
            }
          : undefined,
      },
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AreaQuestTrigger] })
  @ApiNestedQuery(AreaQuestTriggerFindManyArgs)
  @GrpcMethod("AreaQuestTriggerService", "areaQuestTriggers")
  async areaQuestTriggers(
    @common.Req() request: Request
  ): Promise<AreaQuestTrigger[]> {
    const args = plainToClass(AreaQuestTriggerFindManyArgs, request.query);
    return this.service.areaQuestTriggers({
      ...args,
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AreaQuestTrigger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaQuestTriggerService", "areaQuestTrigger")
  async areaQuestTrigger(
    @common.Param() params: AreaQuestTriggerWhereUniqueInput
  ): Promise<AreaQuestTrigger | null> {
    const result = await this.service.areaQuestTrigger({
      where: params,
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AreaQuestTrigger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaQuestTriggerService", "updateAreaQuestTrigger")
  async updateAreaQuestTrigger(
    @common.Param() params: AreaQuestTriggerWhereUniqueInput,
    @common.Body() data: AreaQuestTriggerUpdateInput
  ): Promise<AreaQuestTrigger | null> {
    try {
      return await this.service.updateAreaQuestTrigger({
        where: params,
        data: {
          ...data,

          area: data.area
            ? {
                connect: data.area,
              }
            : undefined,

          quest: data.quest
            ? {
                connect: data.quest,
              }
            : undefined,
        },
        select: {
          area: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          quest: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AreaQuestTrigger })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaQuestTriggerService", "deleteAreaQuestTrigger")
  async deleteAreaQuestTrigger(
    @common.Param() params: AreaQuestTriggerWhereUniqueInput
  ): Promise<AreaQuestTrigger | null> {
    try {
      return await this.service.deleteAreaQuestTrigger({
        where: params,
        select: {
          area: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          quest: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
