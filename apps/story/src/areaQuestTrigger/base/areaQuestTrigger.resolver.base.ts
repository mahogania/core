/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaQuestTrigger } from "./AreaQuestTrigger";
import { AreaQuestTriggerCountArgs } from "./AreaQuestTriggerCountArgs";
import { AreaQuestTriggerFindManyArgs } from "./AreaQuestTriggerFindManyArgs";
import { AreaQuestTriggerFindUniqueArgs } from "./AreaQuestTriggerFindUniqueArgs";
import { CreateAreaQuestTriggerArgs } from "./CreateAreaQuestTriggerArgs";
import { UpdateAreaQuestTriggerArgs } from "./UpdateAreaQuestTriggerArgs";
import { DeleteAreaQuestTriggerArgs } from "./DeleteAreaQuestTriggerArgs";
import { Area } from "../../area/base/Area";
import { Quest } from "../../quest/base/Quest";
import { AreaQuestTriggerService } from "../areaQuestTrigger.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaQuestTrigger)
export class AreaQuestTriggerResolverBase {
  constructor(
    protected readonly service: AreaQuestTriggerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "read",
    possession: "any",
  })
  async _areaQuestTriggersMeta(
    @graphql.Args() args: AreaQuestTriggerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaQuestTrigger])
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "read",
    possession: "any",
  })
  async areaQuestTriggers(
    @graphql.Args() args: AreaQuestTriggerFindManyArgs
  ): Promise<AreaQuestTrigger[]> {
    return this.service.areaQuestTriggers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaQuestTrigger, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "read",
    possession: "own",
  })
  async areaQuestTrigger(
    @graphql.Args() args: AreaQuestTriggerFindUniqueArgs
  ): Promise<AreaQuestTrigger | null> {
    const result = await this.service.areaQuestTrigger(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaQuestTrigger)
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "create",
    possession: "any",
  })
  async createAreaQuestTrigger(
    @graphql.Args() args: CreateAreaQuestTriggerArgs
  ): Promise<AreaQuestTrigger> {
    return await this.service.createAreaQuestTrigger({
      ...args,
      data: {
        ...args.data,

        area: args.data.area
          ? {
              connect: args.data.area,
            }
          : undefined,

        quest: args.data.quest
          ? {
              connect: args.data.quest,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaQuestTrigger)
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "update",
    possession: "any",
  })
  async updateAreaQuestTrigger(
    @graphql.Args() args: UpdateAreaQuestTriggerArgs
  ): Promise<AreaQuestTrigger | null> {
    try {
      return await this.service.updateAreaQuestTrigger({
        ...args,
        data: {
          ...args.data,

          area: args.data.area
            ? {
                connect: args.data.area,
              }
            : undefined,

          quest: args.data.quest
            ? {
                connect: args.data.quest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaQuestTrigger)
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "delete",
    possession: "any",
  })
  async deleteAreaQuestTrigger(
    @graphql.Args() args: DeleteAreaQuestTriggerArgs
  ): Promise<AreaQuestTrigger | null> {
    try {
      return await this.service.deleteAreaQuestTrigger(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Area, {
    nullable: true,
    name: "area",
  })
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "read",
    possession: "any",
  })
  async getArea(
    @graphql.Parent() parent: AreaQuestTrigger
  ): Promise<Area | null> {
    const result = await this.service.getArea(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Quest, {
    nullable: true,
    name: "quest",
  })
  @nestAccessControl.UseRoles({
    resource: "Quest",
    action: "read",
    possession: "any",
  })
  async getQuest(
    @graphql.Parent() parent: AreaQuestTrigger
  ): Promise<Quest | null> {
    const result = await this.service.getQuest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
