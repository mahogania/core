/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QuestCueEffect as PrismaQuestCueEffect,
  Quest as PrismaQuest,
} from "@prisma/client";

export class QuestCueEffectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestCueEffectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questCueEffect.count(args);
  }

  async questCueEffects(
    args: Prisma.QuestCueEffectFindManyArgs
  ): Promise<PrismaQuestCueEffect[]> {
    return this.prisma.questCueEffect.findMany(args);
  }
  async questCueEffect(
    args: Prisma.QuestCueEffectFindUniqueArgs
  ): Promise<PrismaQuestCueEffect | null> {
    return this.prisma.questCueEffect.findUnique(args);
  }
  async createQuestCueEffect(
    args: Prisma.QuestCueEffectCreateArgs
  ): Promise<PrismaQuestCueEffect> {
    return this.prisma.questCueEffect.create(args);
  }
  async updateQuestCueEffect(
    args: Prisma.QuestCueEffectUpdateArgs
  ): Promise<PrismaQuestCueEffect> {
    return this.prisma.questCueEffect.update(args);
  }
  async deleteQuestCueEffect(
    args: Prisma.QuestCueEffectDeleteArgs
  ): Promise<PrismaQuestCueEffect> {
    return this.prisma.questCueEffect.delete(args);
  }

  async findQuests(
    parentId: string,
    args: Prisma.QuestFindManyArgs
  ): Promise<PrismaQuest[]> {
    return this.prisma.questCueEffect
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .quests(args);
  }
}
