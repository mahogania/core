/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestCueEffect } from "./QuestCueEffect";
import { QuestCueEffectCountArgs } from "./QuestCueEffectCountArgs";
import { QuestCueEffectFindManyArgs } from "./QuestCueEffectFindManyArgs";
import { QuestCueEffectFindUniqueArgs } from "./QuestCueEffectFindUniqueArgs";
import { CreateQuestCueEffectArgs } from "./CreateQuestCueEffectArgs";
import { UpdateQuestCueEffectArgs } from "./UpdateQuestCueEffectArgs";
import { DeleteQuestCueEffectArgs } from "./DeleteQuestCueEffectArgs";
import { QuestFindManyArgs } from "../../quest/base/QuestFindManyArgs";
import { Quest } from "../../quest/base/Quest";
import { QuestCueEffectService } from "../questCueEffect.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestCueEffect)
export class QuestCueEffectResolverBase {
  constructor(
    protected readonly service: QuestCueEffectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestCueEffect",
    action: "read",
    possession: "any",
  })
  async _questCueEffectsMeta(
    @graphql.Args() args: QuestCueEffectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestCueEffect])
  @nestAccessControl.UseRoles({
    resource: "QuestCueEffect",
    action: "read",
    possession: "any",
  })
  async questCueEffects(
    @graphql.Args() args: QuestCueEffectFindManyArgs
  ): Promise<QuestCueEffect[]> {
    return this.service.questCueEffects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestCueEffect, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestCueEffect",
    action: "read",
    possession: "own",
  })
  async questCueEffect(
    @graphql.Args() args: QuestCueEffectFindUniqueArgs
  ): Promise<QuestCueEffect | null> {
    const result = await this.service.questCueEffect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestCueEffect)
  @nestAccessControl.UseRoles({
    resource: "QuestCueEffect",
    action: "create",
    possession: "any",
  })
  async createQuestCueEffect(
    @graphql.Args() args: CreateQuestCueEffectArgs
  ): Promise<QuestCueEffect> {
    return await this.service.createQuestCueEffect({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestCueEffect)
  @nestAccessControl.UseRoles({
    resource: "QuestCueEffect",
    action: "update",
    possession: "any",
  })
  async updateQuestCueEffect(
    @graphql.Args() args: UpdateQuestCueEffectArgs
  ): Promise<QuestCueEffect | null> {
    try {
      return await this.service.updateQuestCueEffect({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestCueEffect)
  @nestAccessControl.UseRoles({
    resource: "QuestCueEffect",
    action: "delete",
    possession: "any",
  })
  async deleteQuestCueEffect(
    @graphql.Args() args: DeleteQuestCueEffectArgs
  ): Promise<QuestCueEffect | null> {
    try {
      return await this.service.deleteQuestCueEffect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Quest], { name: "quests" })
  @nestAccessControl.UseRoles({
    resource: "Quest",
    action: "read",
    possession: "any",
  })
  async findQuests(
    @graphql.Parent() parent: QuestCueEffect,
    @graphql.Args() args: QuestFindManyArgs
  ): Promise<Quest[]> {
    const results = await this.service.findQuests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
