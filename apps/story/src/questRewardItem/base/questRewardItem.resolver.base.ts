/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestRewardItem } from "./QuestRewardItem";
import { QuestRewardItemCountArgs } from "./QuestRewardItemCountArgs";
import { QuestRewardItemFindManyArgs } from "./QuestRewardItemFindManyArgs";
import { QuestRewardItemFindUniqueArgs } from "./QuestRewardItemFindUniqueArgs";
import { CreateQuestRewardItemArgs } from "./CreateQuestRewardItemArgs";
import { UpdateQuestRewardItemArgs } from "./UpdateQuestRewardItemArgs";
import { DeleteQuestRewardItemArgs } from "./DeleteQuestRewardItemArgs";
import { QuestOfferRewardFindManyArgs } from "../../questOfferReward/base/QuestOfferRewardFindManyArgs";
import { QuestOfferReward } from "../../questOfferReward/base/QuestOfferReward";
import { QuestRewardItemService } from "../questRewardItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestRewardItem)
export class QuestRewardItemResolverBase {
  constructor(
    protected readonly service: QuestRewardItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardItem",
    action: "read",
    possession: "any",
  })
  async _questRewardItemsMeta(
    @graphql.Args() args: QuestRewardItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestRewardItem])
  @nestAccessControl.UseRoles({
    resource: "QuestRewardItem",
    action: "read",
    possession: "any",
  })
  async questRewardItems(
    @graphql.Args() args: QuestRewardItemFindManyArgs
  ): Promise<QuestRewardItem[]> {
    return this.service.questRewardItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestRewardItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestRewardItem",
    action: "read",
    possession: "own",
  })
  async questRewardItem(
    @graphql.Args() args: QuestRewardItemFindUniqueArgs
  ): Promise<QuestRewardItem | null> {
    const result = await this.service.questRewardItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestRewardItem)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardItem",
    action: "create",
    possession: "any",
  })
  async createQuestRewardItem(
    @graphql.Args() args: CreateQuestRewardItemArgs
  ): Promise<QuestRewardItem> {
    return await this.service.createQuestRewardItem({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestRewardItem)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardItem",
    action: "update",
    possession: "any",
  })
  async updateQuestRewardItem(
    @graphql.Args() args: UpdateQuestRewardItemArgs
  ): Promise<QuestRewardItem | null> {
    try {
      return await this.service.updateQuestRewardItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestRewardItem)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardItem",
    action: "delete",
    possession: "any",
  })
  async deleteQuestRewardItem(
    @graphql.Args() args: DeleteQuestRewardItemArgs
  ): Promise<QuestRewardItem | null> {
    try {
      return await this.service.deleteQuestRewardItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestOfferReward], { name: "questOfferRewards" })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "read",
    possession: "any",
  })
  async findQuestOfferRewards(
    @graphql.Parent() parent: QuestRewardItem,
    @graphql.Args() args: QuestOfferRewardFindManyArgs
  ): Promise<QuestOfferReward[]> {
    const results = await this.service.findQuestOfferRewards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
