/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QuestGreetingService } from "../questGreeting.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestGreetingCreateInput } from "./QuestGreetingCreateInput";
import { QuestGreeting } from "./QuestGreeting";
import { QuestGreetingFindManyArgs } from "./QuestGreetingFindManyArgs";
import { QuestGreetingWhereUniqueInput } from "./QuestGreetingWhereUniqueInput";
import { QuestGreetingUpdateInput } from "./QuestGreetingUpdateInput";
import { QuestGreetingLocaleFindManyArgs } from "../../questGreetingLocale/base/QuestGreetingLocaleFindManyArgs";
import { QuestGreetingLocale } from "../../questGreetingLocale/base/QuestGreetingLocale";
import { QuestGreetingLocaleWhereUniqueInput } from "../../questGreetingLocale/base/QuestGreetingLocaleWhereUniqueInput";
import { QuestFindManyArgs } from "../../quest/base/QuestFindManyArgs";
import { Quest } from "../../quest/base/Quest";
import { QuestWhereUniqueInput } from "../../quest/base/QuestWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QuestGreetingControllerBase {
  constructor(
    protected readonly service: QuestGreetingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestGreeting })
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestGreetingCreateInput,
  })
  async createQuestGreeting(
    @common.Body() data: QuestGreetingCreateInput
  ): Promise<QuestGreeting> {
    return await this.service.createQuestGreeting({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestGreeting] })
  @ApiNestedQuery(QuestGreetingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questGreetings(
    @common.Req() request: Request
  ): Promise<QuestGreeting[]> {
    const args = plainToClass(QuestGreetingFindManyArgs, request.query);
    return this.service.questGreetings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestGreeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questGreeting(
    @common.Param() params: QuestGreetingWhereUniqueInput
  ): Promise<QuestGreeting | null> {
    const result = await this.service.questGreeting({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestGreeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestGreetingUpdateInput,
  })
  async updateQuestGreeting(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() data: QuestGreetingUpdateInput
  ): Promise<QuestGreeting | null> {
    try {
      return await this.service.updateQuestGreeting({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestGreeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQuestGreeting(
    @common.Param() params: QuestGreetingWhereUniqueInput
  ): Promise<QuestGreeting | null> {
    try {
      return await this.service.deleteQuestGreeting({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questGreetingLocales")
  @ApiNestedQuery(QuestGreetingLocaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "read",
    possession: "any",
  })
  async findQuestGreetingLocales(
    @common.Req() request: Request,
    @common.Param() params: QuestGreetingWhereUniqueInput
  ): Promise<QuestGreetingLocale[]> {
    const query = plainToClass(QuestGreetingLocaleFindManyArgs, request.query);
    const results = await this.service.findQuestGreetingLocales(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questGreeting: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questGreetingLocales")
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  async connectQuestGreetingLocales(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() body: QuestGreetingLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questGreetingLocales: {
        connect: body,
      },
    };
    await this.service.updateQuestGreeting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questGreetingLocales")
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  async updateQuestGreetingLocales(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() body: QuestGreetingLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questGreetingLocales: {
        set: body,
      },
    };
    await this.service.updateQuestGreeting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questGreetingLocales")
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  async disconnectQuestGreetingLocales(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() body: QuestGreetingLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questGreetingLocales: {
        disconnect: body,
      },
    };
    await this.service.updateQuestGreeting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/quests")
  @ApiNestedQuery(QuestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Quest",
    action: "read",
    possession: "any",
  })
  async findQuests(
    @common.Req() request: Request,
    @common.Param() params: QuestGreetingWhereUniqueInput
  ): Promise<Quest[]> {
    const query = plainToClass(QuestFindManyArgs, request.query);
    const results = await this.service.findQuests(params.id, {
      ...query,
      select: {
        createdAt: true,

        epic: {
          select: {
            id: true,
          },
        },

        id: true,

        questCueEffects: {
          select: {
            id: true,
          },
        },

        questDetails: {
          select: {
            id: true,
          },
        },

        questGreeting: {
          select: {
            id: true,
          },
        },

        questTemplate: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/quests")
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  async connectQuests(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() body: QuestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quests: {
        connect: body,
      },
    };
    await this.service.updateQuestGreeting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/quests")
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  async updateQuests(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() body: QuestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quests: {
        set: body,
      },
    };
    await this.service.updateQuestGreeting({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/quests")
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "update",
    possession: "any",
  })
  async disconnectQuests(
    @common.Param() params: QuestGreetingWhereUniqueInput,
    @common.Body() body: QuestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quests: {
        disconnect: body,
      },
    };
    await this.service.updateQuestGreeting({
      where: params,
      data,
      select: { id: true },
    });
  }
}
