/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestRewardSpell } from "./QuestRewardSpell";
import { QuestRewardSpellCountArgs } from "./QuestRewardSpellCountArgs";
import { QuestRewardSpellFindManyArgs } from "./QuestRewardSpellFindManyArgs";
import { QuestRewardSpellFindUniqueArgs } from "./QuestRewardSpellFindUniqueArgs";
import { CreateQuestRewardSpellArgs } from "./CreateQuestRewardSpellArgs";
import { UpdateQuestRewardSpellArgs } from "./UpdateQuestRewardSpellArgs";
import { DeleteQuestRewardSpellArgs } from "./DeleteQuestRewardSpellArgs";
import { QuestOfferRewardFindManyArgs } from "../../questOfferReward/base/QuestOfferRewardFindManyArgs";
import { QuestOfferReward } from "../../questOfferReward/base/QuestOfferReward";
import { QuestRewardSpellService } from "../questRewardSpell.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestRewardSpell)
export class QuestRewardSpellResolverBase {
  constructor(
    protected readonly service: QuestRewardSpellService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardSpell",
    action: "read",
    possession: "any",
  })
  async _questRewardSpellsMeta(
    @graphql.Args() args: QuestRewardSpellCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestRewardSpell])
  @nestAccessControl.UseRoles({
    resource: "QuestRewardSpell",
    action: "read",
    possession: "any",
  })
  async questRewardSpells(
    @graphql.Args() args: QuestRewardSpellFindManyArgs
  ): Promise<QuestRewardSpell[]> {
    return this.service.questRewardSpells(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestRewardSpell, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestRewardSpell",
    action: "read",
    possession: "own",
  })
  async questRewardSpell(
    @graphql.Args() args: QuestRewardSpellFindUniqueArgs
  ): Promise<QuestRewardSpell | null> {
    const result = await this.service.questRewardSpell(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestRewardSpell)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardSpell",
    action: "create",
    possession: "any",
  })
  async createQuestRewardSpell(
    @graphql.Args() args: CreateQuestRewardSpellArgs
  ): Promise<QuestRewardSpell> {
    return await this.service.createQuestRewardSpell({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestRewardSpell)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardSpell",
    action: "update",
    possession: "any",
  })
  async updateQuestRewardSpell(
    @graphql.Args() args: UpdateQuestRewardSpellArgs
  ): Promise<QuestRewardSpell | null> {
    try {
      return await this.service.updateQuestRewardSpell({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestRewardSpell)
  @nestAccessControl.UseRoles({
    resource: "QuestRewardSpell",
    action: "delete",
    possession: "any",
  })
  async deleteQuestRewardSpell(
    @graphql.Args() args: DeleteQuestRewardSpellArgs
  ): Promise<QuestRewardSpell | null> {
    try {
      return await this.service.deleteQuestRewardSpell(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestOfferReward], { name: "questOfferRewards" })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "read",
    possession: "any",
  })
  async findQuestOfferRewards(
    @graphql.Parent() parent: QuestRewardSpell,
    @graphql.Args() args: QuestOfferRewardFindManyArgs
  ): Promise<QuestOfferReward[]> {
    const results = await this.service.findQuestOfferRewards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
