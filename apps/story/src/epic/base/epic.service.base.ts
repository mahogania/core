/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Epic as PrismaEpic,
  Quest as PrismaQuest,
} from "@prisma/client";

export class EpicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EpicCountArgs, "select">): Promise<number> {
    return this.prisma.epic.count(args);
  }

  async epics(args: Prisma.EpicFindManyArgs): Promise<PrismaEpic[]> {
    return this.prisma.epic.findMany(args);
  }
  async epic(args: Prisma.EpicFindUniqueArgs): Promise<PrismaEpic | null> {
    return this.prisma.epic.findUnique(args);
  }
  async createEpic(args: Prisma.EpicCreateArgs): Promise<PrismaEpic> {
    return this.prisma.epic.create(args);
  }
  async updateEpic(args: Prisma.EpicUpdateArgs): Promise<PrismaEpic> {
    return this.prisma.epic.update(args);
  }
  async deleteEpic(args: Prisma.EpicDeleteArgs): Promise<PrismaEpic> {
    return this.prisma.epic.delete(args);
  }

  async findQuests(
    parentId: string,
    args: Prisma.QuestFindManyArgs
  ): Promise<PrismaQuest[]> {
    return this.prisma.epic
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .quests(args);
  }
}
