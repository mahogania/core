/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Epic } from "./Epic";
import { EpicCountArgs } from "./EpicCountArgs";
import { EpicFindManyArgs } from "./EpicFindManyArgs";
import { EpicFindUniqueArgs } from "./EpicFindUniqueArgs";
import { CreateEpicArgs } from "./CreateEpicArgs";
import { UpdateEpicArgs } from "./UpdateEpicArgs";
import { DeleteEpicArgs } from "./DeleteEpicArgs";
import { QuestFindManyArgs } from "../../quest/base/QuestFindManyArgs";
import { Quest } from "../../quest/base/Quest";
import { EpicService } from "../epic.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Epic)
export class EpicResolverBase {
  constructor(
    protected readonly service: EpicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "read",
    possession: "any",
  })
  async _epicsMeta(
    @graphql.Args() args: EpicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Epic])
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "read",
    possession: "any",
  })
  async epics(@graphql.Args() args: EpicFindManyArgs): Promise<Epic[]> {
    return this.service.epics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Epic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "read",
    possession: "own",
  })
  async epic(@graphql.Args() args: EpicFindUniqueArgs): Promise<Epic | null> {
    const result = await this.service.epic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Epic)
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "create",
    possession: "any",
  })
  async createEpic(@graphql.Args() args: CreateEpicArgs): Promise<Epic> {
    return await this.service.createEpic({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Epic)
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "update",
    possession: "any",
  })
  async updateEpic(@graphql.Args() args: UpdateEpicArgs): Promise<Epic | null> {
    try {
      return await this.service.updateEpic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Epic)
  @nestAccessControl.UseRoles({
    resource: "Epic",
    action: "delete",
    possession: "any",
  })
  async deleteEpic(@graphql.Args() args: DeleteEpicArgs): Promise<Epic | null> {
    try {
      return await this.service.deleteEpic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Quest], { name: "quests" })
  @nestAccessControl.UseRoles({
    resource: "Quest",
    action: "read",
    possession: "any",
  })
  async findQuests(
    @graphql.Parent() parent: Epic,
    @graphql.Args() args: QuestFindManyArgs
  ): Promise<Quest[]> {
    const results = await this.service.findQuests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
