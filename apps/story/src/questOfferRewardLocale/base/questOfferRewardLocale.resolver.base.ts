/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestOfferRewardLocale } from "./QuestOfferRewardLocale";
import { QuestOfferRewardLocaleCountArgs } from "./QuestOfferRewardLocaleCountArgs";
import { QuestOfferRewardLocaleFindManyArgs } from "./QuestOfferRewardLocaleFindManyArgs";
import { QuestOfferRewardLocaleFindUniqueArgs } from "./QuestOfferRewardLocaleFindUniqueArgs";
import { CreateQuestOfferRewardLocaleArgs } from "./CreateQuestOfferRewardLocaleArgs";
import { UpdateQuestOfferRewardLocaleArgs } from "./UpdateQuestOfferRewardLocaleArgs";
import { DeleteQuestOfferRewardLocaleArgs } from "./DeleteQuestOfferRewardLocaleArgs";
import { QuestOfferReward } from "../../questOfferReward/base/QuestOfferReward";
import { QuestOfferRewardLocaleService } from "../questOfferRewardLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestOfferRewardLocale)
export class QuestOfferRewardLocaleResolverBase {
  constructor(
    protected readonly service: QuestOfferRewardLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "read",
    possession: "any",
  })
  async _questOfferRewardLocalesMeta(
    @graphql.Args() args: QuestOfferRewardLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestOfferRewardLocale])
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "read",
    possession: "any",
  })
  async questOfferRewardLocales(
    @graphql.Args() args: QuestOfferRewardLocaleFindManyArgs
  ): Promise<QuestOfferRewardLocale[]> {
    return this.service.questOfferRewardLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestOfferRewardLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "read",
    possession: "own",
  })
  async questOfferRewardLocale(
    @graphql.Args() args: QuestOfferRewardLocaleFindUniqueArgs
  ): Promise<QuestOfferRewardLocale | null> {
    const result = await this.service.questOfferRewardLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestOfferRewardLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "create",
    possession: "any",
  })
  async createQuestOfferRewardLocale(
    @graphql.Args() args: CreateQuestOfferRewardLocaleArgs
  ): Promise<QuestOfferRewardLocale> {
    return await this.service.createQuestOfferRewardLocale({
      ...args,
      data: {
        ...args.data,

        questOfferReward: args.data.questOfferReward
          ? {
              connect: args.data.questOfferReward,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestOfferRewardLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "update",
    possession: "any",
  })
  async updateQuestOfferRewardLocale(
    @graphql.Args() args: UpdateQuestOfferRewardLocaleArgs
  ): Promise<QuestOfferRewardLocale | null> {
    try {
      return await this.service.updateQuestOfferRewardLocale({
        ...args,
        data: {
          ...args.data,

          questOfferReward: args.data.questOfferReward
            ? {
                connect: args.data.questOfferReward,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestOfferRewardLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "delete",
    possession: "any",
  })
  async deleteQuestOfferRewardLocale(
    @graphql.Args() args: DeleteQuestOfferRewardLocaleArgs
  ): Promise<QuestOfferRewardLocale | null> {
    try {
      return await this.service.deleteQuestOfferRewardLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestOfferReward, {
    nullable: true,
    name: "questOfferReward",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "read",
    possession: "any",
  })
  async getQuestOfferReward(
    @graphql.Parent() parent: QuestOfferRewardLocale
  ): Promise<QuestOfferReward | null> {
    const result = await this.service.getQuestOfferReward(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
