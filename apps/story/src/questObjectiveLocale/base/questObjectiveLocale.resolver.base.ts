/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestObjectiveLocale } from "./QuestObjectiveLocale";
import { QuestObjectiveLocaleCountArgs } from "./QuestObjectiveLocaleCountArgs";
import { QuestObjectiveLocaleFindManyArgs } from "./QuestObjectiveLocaleFindManyArgs";
import { QuestObjectiveLocaleFindUniqueArgs } from "./QuestObjectiveLocaleFindUniqueArgs";
import { CreateQuestObjectiveLocaleArgs } from "./CreateQuestObjectiveLocaleArgs";
import { UpdateQuestObjectiveLocaleArgs } from "./UpdateQuestObjectiveLocaleArgs";
import { DeleteQuestObjectiveLocaleArgs } from "./DeleteQuestObjectiveLocaleArgs";
import { QuestObjectiveFindManyArgs } from "../../questObjective/base/QuestObjectiveFindManyArgs";
import { QuestObjective } from "../../questObjective/base/QuestObjective";
import { QuestObjectiveLocaleService } from "../questObjectiveLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestObjectiveLocale)
export class QuestObjectiveLocaleResolverBase {
  constructor(
    protected readonly service: QuestObjectiveLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "read",
    possession: "any",
  })
  async _questObjectiveLocalesMeta(
    @graphql.Args() args: QuestObjectiveLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestObjectiveLocale])
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "read",
    possession: "any",
  })
  async questObjectiveLocales(
    @graphql.Args() args: QuestObjectiveLocaleFindManyArgs
  ): Promise<QuestObjectiveLocale[]> {
    return this.service.questObjectiveLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestObjectiveLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "read",
    possession: "own",
  })
  async questObjectiveLocale(
    @graphql.Args() args: QuestObjectiveLocaleFindUniqueArgs
  ): Promise<QuestObjectiveLocale | null> {
    const result = await this.service.questObjectiveLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestObjectiveLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "create",
    possession: "any",
  })
  async createQuestObjectiveLocale(
    @graphql.Args() args: CreateQuestObjectiveLocaleArgs
  ): Promise<QuestObjectiveLocale> {
    return await this.service.createQuestObjectiveLocale({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestObjectiveLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "update",
    possession: "any",
  })
  async updateQuestObjectiveLocale(
    @graphql.Args() args: UpdateQuestObjectiveLocaleArgs
  ): Promise<QuestObjectiveLocale | null> {
    try {
      return await this.service.updateQuestObjectiveLocale({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestObjectiveLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "delete",
    possession: "any",
  })
  async deleteQuestObjectiveLocale(
    @graphql.Args() args: DeleteQuestObjectiveLocaleArgs
  ): Promise<QuestObjectiveLocale | null> {
    try {
      return await this.service.deleteQuestObjectiveLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestObjective], { name: "questObjectives" })
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "read",
    possession: "any",
  })
  async findQuestObjectives(
    @graphql.Parent() parent: QuestObjectiveLocale,
    @graphql.Args() args: QuestObjectiveFindManyArgs
  ): Promise<QuestObjective[]> {
    const results = await this.service.findQuestObjectives(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
