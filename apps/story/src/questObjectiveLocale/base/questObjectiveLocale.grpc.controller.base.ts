/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestObjectiveLocaleService } from "../questObjectiveLocale.service";
import { QuestObjectiveLocaleCreateInput } from "./QuestObjectiveLocaleCreateInput";
import { QuestObjectiveLocaleWhereInput } from "./QuestObjectiveLocaleWhereInput";
import { QuestObjectiveLocaleWhereUniqueInput } from "./QuestObjectiveLocaleWhereUniqueInput";
import { QuestObjectiveLocaleFindManyArgs } from "./QuestObjectiveLocaleFindManyArgs";
import { QuestObjectiveLocaleUpdateInput } from "./QuestObjectiveLocaleUpdateInput";
import { QuestObjectiveLocale } from "./QuestObjectiveLocale";
import { QuestObjectiveFindManyArgs } from "../../questObjective/base/QuestObjectiveFindManyArgs";
import { QuestObjective } from "../../questObjective/base/QuestObjective";
import { QuestObjectiveWhereUniqueInput } from "../../questObjective/base/QuestObjectiveWhereUniqueInput";

export class QuestObjectiveLocaleGrpcControllerBase {
  constructor(protected readonly service: QuestObjectiveLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestObjectiveLocale })
  @GrpcMethod("QuestObjectiveLocaleService", "createQuestObjectiveLocale")
  async createQuestObjectiveLocale(
    @common.Body() data: QuestObjectiveLocaleCreateInput
  ): Promise<QuestObjectiveLocale> {
    return await this.service.createQuestObjectiveLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestObjectiveLocale] })
  @ApiNestedQuery(QuestObjectiveLocaleFindManyArgs)
  @GrpcMethod("QuestObjectiveLocaleService", "questObjectiveLocales")
  async questObjectiveLocales(
    @common.Req() request: Request
  ): Promise<QuestObjectiveLocale[]> {
    const args = plainToClass(QuestObjectiveLocaleFindManyArgs, request.query);
    return this.service.questObjectiveLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectiveLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectiveLocaleService", "questObjectiveLocale")
  async questObjectiveLocale(
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput
  ): Promise<QuestObjectiveLocale | null> {
    const result = await this.service.questObjectiveLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectiveLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectiveLocaleService", "updateQuestObjectiveLocale")
  async updateQuestObjectiveLocale(
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput,
    @common.Body() data: QuestObjectiveLocaleUpdateInput
  ): Promise<QuestObjectiveLocale | null> {
    try {
      return await this.service.updateQuestObjectiveLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectiveLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectiveLocaleService", "deleteQuestObjectiveLocale")
  async deleteQuestObjectiveLocale(
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput
  ): Promise<QuestObjectiveLocale | null> {
    try {
      return await this.service.deleteQuestObjectiveLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questObjectives")
  @ApiNestedQuery(QuestObjectiveFindManyArgs)
  @GrpcMethod("QuestObjectiveLocaleService", "findManyQuestObjectives")
  async findManyQuestObjectives(
    @common.Req() request: Request,
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput
  ): Promise<QuestObjective[]> {
    const query = plainToClass(QuestObjectiveFindManyArgs, request.query);
    const results = await this.service.findQuestObjectives(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questObjectiveCompletionEffects: {
          select: {
            id: true,
          },
        },

        questObjectiveLocales: {
          select: {
            id: true,
          },
        },

        questPois: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questObjectives")
  @GrpcMethod("QuestObjectiveLocaleService", "connectQuestObjectives")
  async connectQuestObjectives(
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput,
    @common.Body() body: QuestObjectiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questObjectives: {
        connect: body,
      },
    };
    await this.service.updateQuestObjectiveLocale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questObjectives")
  @GrpcMethod("QuestObjectiveLocaleService", "updateQuestObjectives")
  async updateQuestObjectives(
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput,
    @common.Body() body: QuestObjectiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questObjectives: {
        set: body,
      },
    };
    await this.service.updateQuestObjectiveLocale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questObjectives")
  @GrpcMethod("QuestObjectiveLocaleService", "disconnectQuestObjectives")
  async disconnectQuestObjectives(
    @common.Param() params: QuestObjectiveLocaleWhereUniqueInput,
    @common.Body() body: QuestObjectiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questObjectives: {
        disconnect: body,
      },
    };
    await this.service.updateQuestObjectiveLocale({
      where: params,
      data,
      select: { id: true },
    });
  }
}
