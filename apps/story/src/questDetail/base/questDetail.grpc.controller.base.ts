/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestDetailService } from "../questDetail.service";
import { QuestDetailCreateInput } from "./QuestDetailCreateInput";
import { QuestDetailWhereInput } from "./QuestDetailWhereInput";
import { QuestDetailWhereUniqueInput } from "./QuestDetailWhereUniqueInput";
import { QuestDetailFindManyArgs } from "./QuestDetailFindManyArgs";
import { QuestDetailUpdateInput } from "./QuestDetailUpdateInput";
import { QuestDetail } from "./QuestDetail";
import { QuestFindManyArgs } from "../../quest/base/QuestFindManyArgs";
import { Quest } from "../../quest/base/Quest";
import { QuestWhereUniqueInput } from "../../quest/base/QuestWhereUniqueInput";

export class QuestDetailGrpcControllerBase {
  constructor(protected readonly service: QuestDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestDetail })
  @GrpcMethod("QuestDetailService", "createQuestDetail")
  async createQuestDetail(
    @common.Body() data: QuestDetailCreateInput
  ): Promise<QuestDetail> {
    return await this.service.createQuestDetail({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestDetail] })
  @ApiNestedQuery(QuestDetailFindManyArgs)
  @GrpcMethod("QuestDetailService", "questDetails")
  async questDetails(@common.Req() request: Request): Promise<QuestDetail[]> {
    const args = plainToClass(QuestDetailFindManyArgs, request.query);
    return this.service.questDetails({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestDetailService", "questDetail")
  async questDetail(
    @common.Param() params: QuestDetailWhereUniqueInput
  ): Promise<QuestDetail | null> {
    const result = await this.service.questDetail({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestDetailService", "updateQuestDetail")
  async updateQuestDetail(
    @common.Param() params: QuestDetailWhereUniqueInput,
    @common.Body() data: QuestDetailUpdateInput
  ): Promise<QuestDetail | null> {
    try {
      return await this.service.updateQuestDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestDetailService", "deleteQuestDetail")
  async deleteQuestDetail(
    @common.Param() params: QuestDetailWhereUniqueInput
  ): Promise<QuestDetail | null> {
    try {
      return await this.service.deleteQuestDetail({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/quests")
  @ApiNestedQuery(QuestFindManyArgs)
  @GrpcMethod("QuestDetailService", "findManyQuests")
  async findManyQuests(
    @common.Req() request: Request,
    @common.Param() params: QuestDetailWhereUniqueInput
  ): Promise<Quest[]> {
    const query = plainToClass(QuestFindManyArgs, request.query);
    const results = await this.service.findQuests(params.id, {
      ...query,
      select: {
        createdAt: true,

        epic: {
          select: {
            id: true,
          },
        },

        id: true,

        questCueEffects: {
          select: {
            id: true,
          },
        },

        questDetails: {
          select: {
            id: true,
          },
        },

        questGreeting: {
          select: {
            id: true,
          },
        },

        questTemplate: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/quests")
  @GrpcMethod("QuestDetailService", "connectQuests")
  async connectQuests(
    @common.Param() params: QuestDetailWhereUniqueInput,
    @common.Body() body: QuestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quests: {
        connect: body,
      },
    };
    await this.service.updateQuestDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/quests")
  @GrpcMethod("QuestDetailService", "updateQuests")
  async updateQuests(
    @common.Param() params: QuestDetailWhereUniqueInput,
    @common.Body() body: QuestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quests: {
        set: body,
      },
    };
    await this.service.updateQuestDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/quests")
  @GrpcMethod("QuestDetailService", "disconnectQuests")
  async disconnectQuests(
    @common.Param() params: QuestDetailWhereUniqueInput,
    @common.Body() body: QuestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quests: {
        disconnect: body,
      },
    };
    await this.service.updateQuestDetail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
