/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestDetail } from "./QuestDetail";
import { QuestDetailCountArgs } from "./QuestDetailCountArgs";
import { QuestDetailFindManyArgs } from "./QuestDetailFindManyArgs";
import { QuestDetailFindUniqueArgs } from "./QuestDetailFindUniqueArgs";
import { CreateQuestDetailArgs } from "./CreateQuestDetailArgs";
import { UpdateQuestDetailArgs } from "./UpdateQuestDetailArgs";
import { DeleteQuestDetailArgs } from "./DeleteQuestDetailArgs";
import { QuestFindManyArgs } from "../../quest/base/QuestFindManyArgs";
import { Quest } from "../../quest/base/Quest";
import { QuestDetailService } from "../questDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestDetail)
export class QuestDetailResolverBase {
  constructor(
    protected readonly service: QuestDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestDetail",
    action: "read",
    possession: "any",
  })
  async _questDetailsMeta(
    @graphql.Args() args: QuestDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestDetail])
  @nestAccessControl.UseRoles({
    resource: "QuestDetail",
    action: "read",
    possession: "any",
  })
  async questDetails(
    @graphql.Args() args: QuestDetailFindManyArgs
  ): Promise<QuestDetail[]> {
    return this.service.questDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestDetail",
    action: "read",
    possession: "own",
  })
  async questDetail(
    @graphql.Args() args: QuestDetailFindUniqueArgs
  ): Promise<QuestDetail | null> {
    const result = await this.service.questDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestDetail)
  @nestAccessControl.UseRoles({
    resource: "QuestDetail",
    action: "create",
    possession: "any",
  })
  async createQuestDetail(
    @graphql.Args() args: CreateQuestDetailArgs
  ): Promise<QuestDetail> {
    return await this.service.createQuestDetail({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestDetail)
  @nestAccessControl.UseRoles({
    resource: "QuestDetail",
    action: "update",
    possession: "any",
  })
  async updateQuestDetail(
    @graphql.Args() args: UpdateQuestDetailArgs
  ): Promise<QuestDetail | null> {
    try {
      return await this.service.updateQuestDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestDetail)
  @nestAccessControl.UseRoles({
    resource: "QuestDetail",
    action: "delete",
    possession: "any",
  })
  async deleteQuestDetail(
    @graphql.Args() args: DeleteQuestDetailArgs
  ): Promise<QuestDetail | null> {
    try {
      return await this.service.deleteQuestDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Quest], { name: "quests" })
  @nestAccessControl.UseRoles({
    resource: "Quest",
    action: "read",
    possession: "any",
  })
  async findQuests(
    @graphql.Parent() parent: QuestDetail,
    @graphql.Args() args: QuestFindManyArgs
  ): Promise<Quest[]> {
    const results = await this.service.findQuests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
