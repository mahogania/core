/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestOfferReward as PrismaQuestOfferReward,
  QuestOfferRewardConditional as PrismaQuestOfferRewardConditional,
  QuestOfferRewardLocale as PrismaQuestOfferRewardLocale,
  QuestTemplate as PrismaQuestTemplate,
  QuestRewardItem as PrismaQuestRewardItem,
  QuestRewardSpell as PrismaQuestRewardSpell,
} from "@prisma/client";

export class QuestOfferRewardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestOfferRewardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questOfferReward.count(args);
  }

  async questOfferRewards(
    args: Prisma.QuestOfferRewardFindManyArgs
  ): Promise<PrismaQuestOfferReward[]> {
    return this.prisma.questOfferReward.findMany(args);
  }
  async questOfferReward(
    args: Prisma.QuestOfferRewardFindUniqueArgs
  ): Promise<PrismaQuestOfferReward | null> {
    return this.prisma.questOfferReward.findUnique(args);
  }
  async createQuestOfferReward(
    args: Prisma.QuestOfferRewardCreateArgs
  ): Promise<PrismaQuestOfferReward> {
    return this.prisma.questOfferReward.create(args);
  }
  async updateQuestOfferReward(
    args: Prisma.QuestOfferRewardUpdateArgs
  ): Promise<PrismaQuestOfferReward> {
    return this.prisma.questOfferReward.update(args);
  }
  async deleteQuestOfferReward(
    args: Prisma.QuestOfferRewardDeleteArgs
  ): Promise<PrismaQuestOfferReward> {
    return this.prisma.questOfferReward.delete(args);
  }

  async findQuestOfferRewardConditionals(
    parentId: string,
    args: Prisma.QuestOfferRewardConditionalFindManyArgs
  ): Promise<PrismaQuestOfferRewardConditional[]> {
    return this.prisma.questOfferReward
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questOfferRewardConditionals(args);
  }

  async findQuestOfferRewardLocales(
    parentId: string,
    args: Prisma.QuestOfferRewardLocaleFindManyArgs
  ): Promise<PrismaQuestOfferRewardLocale[]> {
    return this.prisma.questOfferReward
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questOfferRewardLocales(args);
  }

  async findQuestTemplates(
    parentId: string,
    args: Prisma.QuestTemplateFindManyArgs
  ): Promise<PrismaQuestTemplate[]> {
    return this.prisma.questOfferReward
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questTemplates(args);
  }

  async getQuestRewardItem(
    parentId: string
  ): Promise<PrismaQuestRewardItem | null> {
    return this.prisma.questOfferReward
      .findUnique({
        where: { id: parentId },
      })
      .questRewardItem();
  }

  async getQuestRewardSpell(
    parentId: string
  ): Promise<PrismaQuestRewardSpell | null> {
    return this.prisma.questOfferReward
      .findUnique({
        where: { id: parentId },
      })
      .questRewardSpell();
  }
}
