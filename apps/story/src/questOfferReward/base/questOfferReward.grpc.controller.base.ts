/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestOfferRewardService } from "../questOfferReward.service";
import { QuestOfferRewardCreateInput } from "./QuestOfferRewardCreateInput";
import { QuestOfferRewardWhereInput } from "./QuestOfferRewardWhereInput";
import { QuestOfferRewardWhereUniqueInput } from "./QuestOfferRewardWhereUniqueInput";
import { QuestOfferRewardFindManyArgs } from "./QuestOfferRewardFindManyArgs";
import { QuestOfferRewardUpdateInput } from "./QuestOfferRewardUpdateInput";
import { QuestOfferReward } from "./QuestOfferReward";
import { QuestOfferRewardConditionalFindManyArgs } from "../../questOfferRewardConditional/base/QuestOfferRewardConditionalFindManyArgs";
import { QuestOfferRewardConditional } from "../../questOfferRewardConditional/base/QuestOfferRewardConditional";
import { QuestOfferRewardConditionalWhereUniqueInput } from "../../questOfferRewardConditional/base/QuestOfferRewardConditionalWhereUniqueInput";
import { QuestOfferRewardLocaleFindManyArgs } from "../../questOfferRewardLocale/base/QuestOfferRewardLocaleFindManyArgs";
import { QuestOfferRewardLocale } from "../../questOfferRewardLocale/base/QuestOfferRewardLocale";
import { QuestOfferRewardLocaleWhereUniqueInput } from "../../questOfferRewardLocale/base/QuestOfferRewardLocaleWhereUniqueInput";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestTemplateWhereUniqueInput } from "../../questTemplate/base/QuestTemplateWhereUniqueInput";

export class QuestOfferRewardGrpcControllerBase {
  constructor(protected readonly service: QuestOfferRewardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestOfferReward })
  @GrpcMethod("QuestOfferRewardService", "createQuestOfferReward")
  async createQuestOfferReward(
    @common.Body() data: QuestOfferRewardCreateInput
  ): Promise<QuestOfferReward> {
    return await this.service.createQuestOfferReward({
      data: {
        ...data,

        questRewardItem: data.questRewardItem
          ? {
              connect: data.questRewardItem,
            }
          : undefined,

        questRewardSpell: data.questRewardSpell
          ? {
              connect: data.questRewardSpell,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        questRewardItem: {
          select: {
            id: true,
          },
        },

        questRewardSpell: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestOfferReward] })
  @ApiNestedQuery(QuestOfferRewardFindManyArgs)
  @GrpcMethod("QuestOfferRewardService", "questOfferRewards")
  async questOfferRewards(
    @common.Req() request: Request
  ): Promise<QuestOfferReward[]> {
    const args = plainToClass(QuestOfferRewardFindManyArgs, request.query);
    return this.service.questOfferRewards({
      ...args,
      select: {
        createdAt: true,
        id: true,

        questRewardItem: {
          select: {
            id: true,
          },
        },

        questRewardSpell: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestOfferReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestOfferRewardService", "questOfferReward")
  async questOfferReward(
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferReward | null> {
    const result = await this.service.questOfferReward({
      where: params,
      select: {
        createdAt: true,
        id: true,

        questRewardItem: {
          select: {
            id: true,
          },
        },

        questRewardSpell: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestOfferReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestOfferRewardService", "updateQuestOfferReward")
  async updateQuestOfferReward(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() data: QuestOfferRewardUpdateInput
  ): Promise<QuestOfferReward | null> {
    try {
      return await this.service.updateQuestOfferReward({
        where: params,
        data: {
          ...data,

          questRewardItem: data.questRewardItem
            ? {
                connect: data.questRewardItem,
              }
            : undefined,

          questRewardSpell: data.questRewardSpell
            ? {
                connect: data.questRewardSpell,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          questRewardItem: {
            select: {
              id: true,
            },
          },

          questRewardSpell: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestOfferReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestOfferRewardService", "deleteQuestOfferReward")
  async deleteQuestOfferReward(
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferReward | null> {
    try {
      return await this.service.deleteQuestOfferReward({
        where: params,
        select: {
          createdAt: true,
          id: true,

          questRewardItem: {
            select: {
              id: true,
            },
          },

          questRewardSpell: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questOfferRewardConditionals")
  @ApiNestedQuery(QuestOfferRewardConditionalFindManyArgs)
  @GrpcMethod("QuestOfferRewardService", "findManyQuestOfferRewardConditionals")
  async findManyQuestOfferRewardConditionals(
    @common.Req() request: Request,
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferRewardConditional[]> {
    const query = plainToClass(
      QuestOfferRewardConditionalFindManyArgs,
      request.query
    );
    const results = await this.service.findQuestOfferRewardConditionals(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,

          questOfferReward: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questOfferRewardConditionals")
  @GrpcMethod("QuestOfferRewardService", "connectQuestOfferRewardConditionals")
  async connectQuestOfferRewardConditionals(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardConditionals: {
        connect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questOfferRewardConditionals")
  @GrpcMethod("QuestOfferRewardService", "updateQuestOfferRewardConditionals")
  async updateQuestOfferRewardConditionals(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardConditionals: {
        set: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questOfferRewardConditionals")
  @GrpcMethod(
    "QuestOfferRewardService",
    "disconnectQuestOfferRewardConditionals"
  )
  async disconnectQuestOfferRewardConditionals(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardConditionals: {
        disconnect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/questOfferRewardLocales")
  @ApiNestedQuery(QuestOfferRewardLocaleFindManyArgs)
  @GrpcMethod("QuestOfferRewardService", "findManyQuestOfferRewardLocales")
  async findManyQuestOfferRewardLocales(
    @common.Req() request: Request,
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferRewardLocale[]> {
    const query = plainToClass(
      QuestOfferRewardLocaleFindManyArgs,
      request.query
    );
    const results = await this.service.findQuestOfferRewardLocales(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questOfferReward: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questOfferRewardLocales")
  @GrpcMethod("QuestOfferRewardService", "connectQuestOfferRewardLocales")
  async connectQuestOfferRewardLocales(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardLocales: {
        connect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questOfferRewardLocales")
  @GrpcMethod("QuestOfferRewardService", "updateQuestOfferRewardLocales")
  async updateQuestOfferRewardLocales(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardLocales: {
        set: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questOfferRewardLocales")
  @GrpcMethod("QuestOfferRewardService", "disconnectQuestOfferRewardLocales")
  async disconnectQuestOfferRewardLocales(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardLocales: {
        disconnect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/questTemplates")
  @ApiNestedQuery(QuestTemplateFindManyArgs)
  @GrpcMethod("QuestOfferRewardService", "findManyQuestTemplates")
  async findManyQuestTemplates(
    @common.Req() request: Request,
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestTemplate[]> {
    const query = plainToClass(QuestTemplateFindManyArgs, request.query);
    const results = await this.service.findQuestTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questMails: {
          select: {
            id: true,
          },
        },

        questObjectives: {
          select: {
            id: true,
          },
        },

        questOfferRewards: {
          select: {
            id: true,
          },
        },

        questPools: {
          select: {
            id: true,
          },
        },

        questRequestItems: {
          select: {
            id: true,
          },
        },

        questTemplateLocale: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questTemplates")
  @GrpcMethod("QuestOfferRewardService", "connectQuestTemplates")
  async connectQuestTemplates(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        connect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questTemplates")
  @GrpcMethod("QuestOfferRewardService", "updateQuestTemplates")
  async updateQuestTemplates(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        set: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questTemplates")
  @GrpcMethod("QuestOfferRewardService", "disconnectQuestTemplates")
  async disconnectQuestTemplates(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }
}
