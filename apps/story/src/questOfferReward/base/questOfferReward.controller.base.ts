/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QuestOfferRewardService } from "../questOfferReward.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestOfferRewardCreateInput } from "./QuestOfferRewardCreateInput";
import { QuestOfferReward } from "./QuestOfferReward";
import { QuestOfferRewardFindManyArgs } from "./QuestOfferRewardFindManyArgs";
import { QuestOfferRewardWhereUniqueInput } from "./QuestOfferRewardWhereUniqueInput";
import { QuestOfferRewardUpdateInput } from "./QuestOfferRewardUpdateInput";
import { QuestOfferRewardConditionalFindManyArgs } from "../../questOfferRewardConditional/base/QuestOfferRewardConditionalFindManyArgs";
import { QuestOfferRewardConditional } from "../../questOfferRewardConditional/base/QuestOfferRewardConditional";
import { QuestOfferRewardConditionalWhereUniqueInput } from "../../questOfferRewardConditional/base/QuestOfferRewardConditionalWhereUniqueInput";
import { QuestOfferRewardLocaleFindManyArgs } from "../../questOfferRewardLocale/base/QuestOfferRewardLocaleFindManyArgs";
import { QuestOfferRewardLocale } from "../../questOfferRewardLocale/base/QuestOfferRewardLocale";
import { QuestOfferRewardLocaleWhereUniqueInput } from "../../questOfferRewardLocale/base/QuestOfferRewardLocaleWhereUniqueInput";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestTemplateWhereUniqueInput } from "../../questTemplate/base/QuestTemplateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QuestOfferRewardControllerBase {
  constructor(
    protected readonly service: QuestOfferRewardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestOfferReward })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestOfferRewardCreateInput,
  })
  async createQuestOfferReward(
    @common.Body() data: QuestOfferRewardCreateInput
  ): Promise<QuestOfferReward> {
    return await this.service.createQuestOfferReward({
      data: {
        ...data,

        questRewardItem: data.questRewardItem
          ? {
              connect: data.questRewardItem,
            }
          : undefined,

        questRewardSpell: data.questRewardSpell
          ? {
              connect: data.questRewardSpell,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        questRewardItem: {
          select: {
            id: true,
          },
        },

        questRewardSpell: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestOfferReward] })
  @ApiNestedQuery(QuestOfferRewardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questOfferRewards(
    @common.Req() request: Request
  ): Promise<QuestOfferReward[]> {
    const args = plainToClass(QuestOfferRewardFindManyArgs, request.query);
    return this.service.questOfferRewards({
      ...args,
      select: {
        createdAt: true,
        id: true,

        questRewardItem: {
          select: {
            id: true,
          },
        },

        questRewardSpell: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestOfferReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questOfferReward(
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferReward | null> {
    const result = await this.service.questOfferReward({
      where: params,
      select: {
        createdAt: true,
        id: true,

        questRewardItem: {
          select: {
            id: true,
          },
        },

        questRewardSpell: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestOfferReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestOfferRewardUpdateInput,
  })
  async updateQuestOfferReward(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() data: QuestOfferRewardUpdateInput
  ): Promise<QuestOfferReward | null> {
    try {
      return await this.service.updateQuestOfferReward({
        where: params,
        data: {
          ...data,

          questRewardItem: data.questRewardItem
            ? {
                connect: data.questRewardItem,
              }
            : undefined,

          questRewardSpell: data.questRewardSpell
            ? {
                connect: data.questRewardSpell,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          questRewardItem: {
            select: {
              id: true,
            },
          },

          questRewardSpell: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestOfferReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQuestOfferReward(
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferReward | null> {
    try {
      return await this.service.deleteQuestOfferReward({
        where: params,
        select: {
          createdAt: true,
          id: true,

          questRewardItem: {
            select: {
              id: true,
            },
          },

          questRewardSpell: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questOfferRewardConditionals")
  @ApiNestedQuery(QuestOfferRewardConditionalFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardConditional",
    action: "read",
    possession: "any",
  })
  async findQuestOfferRewardConditionals(
    @common.Req() request: Request,
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferRewardConditional[]> {
    const query = plainToClass(
      QuestOfferRewardConditionalFindManyArgs,
      request.query
    );
    const results = await this.service.findQuestOfferRewardConditionals(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,

          questOfferReward: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questOfferRewardConditionals")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async connectQuestOfferRewardConditionals(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardConditionals: {
        connect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questOfferRewardConditionals")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async updateQuestOfferRewardConditionals(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardConditionals: {
        set: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questOfferRewardConditionals")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async disconnectQuestOfferRewardConditionals(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardConditionals: {
        disconnect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questOfferRewardLocales")
  @ApiNestedQuery(QuestOfferRewardLocaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestOfferRewardLocale",
    action: "read",
    possession: "any",
  })
  async findQuestOfferRewardLocales(
    @common.Req() request: Request,
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestOfferRewardLocale[]> {
    const query = plainToClass(
      QuestOfferRewardLocaleFindManyArgs,
      request.query
    );
    const results = await this.service.findQuestOfferRewardLocales(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questOfferReward: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questOfferRewardLocales")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async connectQuestOfferRewardLocales(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardLocales: {
        connect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questOfferRewardLocales")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async updateQuestOfferRewardLocales(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardLocales: {
        set: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questOfferRewardLocales")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async disconnectQuestOfferRewardLocales(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestOfferRewardLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questOfferRewardLocales: {
        disconnect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questTemplates")
  @ApiNestedQuery(QuestTemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestTemplate",
    action: "read",
    possession: "any",
  })
  async findQuestTemplates(
    @common.Req() request: Request,
    @common.Param() params: QuestOfferRewardWhereUniqueInput
  ): Promise<QuestTemplate[]> {
    const query = plainToClass(QuestTemplateFindManyArgs, request.query);
    const results = await this.service.findQuestTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questMails: {
          select: {
            id: true,
          },
        },

        questObjectives: {
          select: {
            id: true,
          },
        },

        questOfferRewards: {
          select: {
            id: true,
          },
        },

        questPools: {
          select: {
            id: true,
          },
        },

        questRequestItems: {
          select: {
            id: true,
          },
        },

        questTemplateLocale: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questTemplates")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async connectQuestTemplates(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        connect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questTemplates")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async updateQuestTemplates(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        set: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questTemplates")
  @nestAccessControl.UseRoles({
    resource: "QuestOfferReward",
    action: "update",
    possession: "any",
  })
  async disconnectQuestTemplates(
    @common.Param() params: QuestOfferRewardWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateQuestOfferReward({
      where: params,
      data,
      select: { id: true },
    });
  }
}
