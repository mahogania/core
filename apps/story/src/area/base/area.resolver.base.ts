/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Area } from "./Area";
import { AreaCountArgs } from "./AreaCountArgs";
import { AreaFindManyArgs } from "./AreaFindManyArgs";
import { AreaFindUniqueArgs } from "./AreaFindUniqueArgs";
import { CreateAreaArgs } from "./CreateAreaArgs";
import { UpdateAreaArgs } from "./UpdateAreaArgs";
import { DeleteAreaArgs } from "./DeleteAreaArgs";
import { AreaQuestTriggerFindManyArgs } from "../../areaQuestTrigger/base/AreaQuestTriggerFindManyArgs";
import { AreaQuestTrigger } from "../../areaQuestTrigger/base/AreaQuestTrigger";
import { AreaScenarioTriggerFindManyArgs } from "../../areaScenarioTrigger/base/AreaScenarioTriggerFindManyArgs";
import { AreaScenarioTrigger } from "../../areaScenarioTrigger/base/AreaScenarioTrigger";
import { AreaTeleportTriggerFindManyArgs } from "../../areaTeleportTrigger/base/AreaTeleportTriggerFindManyArgs";
import { AreaTeleportTrigger } from "../../areaTeleportTrigger/base/AreaTeleportTrigger";
import { AreaService } from "../area.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Area)
export class AreaResolverBase {
  constructor(
    protected readonly service: AreaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "read",
    possession: "any",
  })
  async _areasMeta(
    @graphql.Args() args: AreaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Area])
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "read",
    possession: "any",
  })
  async areas(@graphql.Args() args: AreaFindManyArgs): Promise<Area[]> {
    return this.service.areas(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Area, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "read",
    possession: "own",
  })
  async area(@graphql.Args() args: AreaFindUniqueArgs): Promise<Area | null> {
    const result = await this.service.area(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Area)
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "create",
    possession: "any",
  })
  async createArea(@graphql.Args() args: CreateAreaArgs): Promise<Area> {
    return await this.service.createArea({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Area)
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "update",
    possession: "any",
  })
  async updateArea(@graphql.Args() args: UpdateAreaArgs): Promise<Area | null> {
    try {
      return await this.service.updateArea({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Area)
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "delete",
    possession: "any",
  })
  async deleteArea(@graphql.Args() args: DeleteAreaArgs): Promise<Area | null> {
    try {
      return await this.service.deleteArea(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AreaQuestTrigger], { name: "areaQuestTriggers" })
  @nestAccessControl.UseRoles({
    resource: "AreaQuestTrigger",
    action: "read",
    possession: "any",
  })
  async findAreaQuestTriggers(
    @graphql.Parent() parent: Area,
    @graphql.Args() args: AreaQuestTriggerFindManyArgs
  ): Promise<AreaQuestTrigger[]> {
    const results = await this.service.findAreaQuestTriggers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AreaScenarioTrigger], {
    name: "areaScenarioTriggers",
  })
  @nestAccessControl.UseRoles({
    resource: "AreaScenarioTrigger",
    action: "read",
    possession: "any",
  })
  async findAreaScenarioTriggers(
    @graphql.Parent() parent: Area,
    @graphql.Args() args: AreaScenarioTriggerFindManyArgs
  ): Promise<AreaScenarioTrigger[]> {
    const results = await this.service.findAreaScenarioTriggers(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AreaTeleportTrigger], {
    name: "areaTeleportTriggers",
  })
  @nestAccessControl.UseRoles({
    resource: "AreaTeleportTrigger",
    action: "read",
    possession: "any",
  })
  async findAreaTeleportTriggers(
    @graphql.Parent() parent: Area,
    @graphql.Args() args: AreaTeleportTriggerFindManyArgs
  ): Promise<AreaTeleportTrigger[]> {
    const results = await this.service.findAreaTeleportTriggers(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
