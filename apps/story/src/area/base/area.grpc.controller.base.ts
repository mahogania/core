/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AreaService } from "../area.service";
import { AreaCreateInput } from "./AreaCreateInput";
import { AreaWhereInput } from "./AreaWhereInput";
import { AreaWhereUniqueInput } from "./AreaWhereUniqueInput";
import { AreaFindManyArgs } from "./AreaFindManyArgs";
import { AreaUpdateInput } from "./AreaUpdateInput";
import { Area } from "./Area";
import { AreaQuestTriggerFindManyArgs } from "../../areaQuestTrigger/base/AreaQuestTriggerFindManyArgs";
import { AreaQuestTrigger } from "../../areaQuestTrigger/base/AreaQuestTrigger";
import { AreaQuestTriggerWhereUniqueInput } from "../../areaQuestTrigger/base/AreaQuestTriggerWhereUniqueInput";
import { AreaScenarioTriggerFindManyArgs } from "../../areaScenarioTrigger/base/AreaScenarioTriggerFindManyArgs";
import { AreaScenarioTrigger } from "../../areaScenarioTrigger/base/AreaScenarioTrigger";
import { AreaScenarioTriggerWhereUniqueInput } from "../../areaScenarioTrigger/base/AreaScenarioTriggerWhereUniqueInput";
import { AreaTeleportTriggerFindManyArgs } from "../../areaTeleportTrigger/base/AreaTeleportTriggerFindManyArgs";
import { AreaTeleportTrigger } from "../../areaTeleportTrigger/base/AreaTeleportTrigger";
import { AreaTeleportTriggerWhereUniqueInput } from "../../areaTeleportTrigger/base/AreaTeleportTriggerWhereUniqueInput";

export class AreaGrpcControllerBase {
  constructor(protected readonly service: AreaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Area })
  @GrpcMethod("AreaService", "createArea")
  async createArea(@common.Body() data: AreaCreateInput): Promise<Area> {
    return await this.service.createArea({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Area] })
  @ApiNestedQuery(AreaFindManyArgs)
  @GrpcMethod("AreaService", "areas")
  async areas(@common.Req() request: Request): Promise<Area[]> {
    const args = plainToClass(AreaFindManyArgs, request.query);
    return this.service.areas({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Area })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaService", "area")
  async area(
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<Area | null> {
    const result = await this.service.area({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Area })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaService", "updateArea")
  async updateArea(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() data: AreaUpdateInput
  ): Promise<Area | null> {
    try {
      return await this.service.updateArea({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Area })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaService", "deleteArea")
  async deleteArea(
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<Area | null> {
    try {
      return await this.service.deleteArea({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/areaQuestTriggers")
  @ApiNestedQuery(AreaQuestTriggerFindManyArgs)
  @GrpcMethod("AreaService", "findManyAreaQuestTriggers")
  async findManyAreaQuestTriggers(
    @common.Req() request: Request,
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<AreaQuestTrigger[]> {
    const query = plainToClass(AreaQuestTriggerFindManyArgs, request.query);
    const results = await this.service.findAreaQuestTriggers(params.id, {
      ...query,
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/areaQuestTriggers")
  @GrpcMethod("AreaService", "connectAreaQuestTriggers")
  async connectAreaQuestTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaQuestTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaQuestTriggers: {
        connect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/areaQuestTriggers")
  @GrpcMethod("AreaService", "updateAreaQuestTriggers")
  async updateAreaQuestTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaQuestTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaQuestTriggers: {
        set: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/areaQuestTriggers")
  @GrpcMethod("AreaService", "disconnectAreaQuestTriggers")
  async disconnectAreaQuestTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaQuestTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaQuestTriggers: {
        disconnect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/areaScenarioTriggers")
  @ApiNestedQuery(AreaScenarioTriggerFindManyArgs)
  @GrpcMethod("AreaService", "findManyAreaScenarioTriggers")
  async findManyAreaScenarioTriggers(
    @common.Req() request: Request,
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<AreaScenarioTrigger[]> {
    const query = plainToClass(AreaScenarioTriggerFindManyArgs, request.query);
    const results = await this.service.findAreaScenarioTriggers(params.id, {
      ...query,
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        scenario: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/areaScenarioTriggers")
  @GrpcMethod("AreaService", "connectAreaScenarioTriggers")
  async connectAreaScenarioTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaScenarioTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaScenarioTriggers: {
        connect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/areaScenarioTriggers")
  @GrpcMethod("AreaService", "updateAreaScenarioTriggers")
  async updateAreaScenarioTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaScenarioTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaScenarioTriggers: {
        set: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/areaScenarioTriggers")
  @GrpcMethod("AreaService", "disconnectAreaScenarioTriggers")
  async disconnectAreaScenarioTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaScenarioTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaScenarioTriggers: {
        disconnect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/areaTeleportTriggers")
  @ApiNestedQuery(AreaTeleportTriggerFindManyArgs)
  @GrpcMethod("AreaService", "findManyAreaTeleportTriggers")
  async findManyAreaTeleportTriggers(
    @common.Req() request: Request,
    @common.Param() params: AreaWhereUniqueInput
  ): Promise<AreaTeleportTrigger[]> {
    const query = plainToClass(AreaTeleportTriggerFindManyArgs, request.query);
    const results = await this.service.findAreaTeleportTriggers(params.id, {
      ...query,
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        portal: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/areaTeleportTriggers")
  @GrpcMethod("AreaService", "connectAreaTeleportTriggers")
  async connectAreaTeleportTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaTeleportTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaTeleportTriggers: {
        connect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/areaTeleportTriggers")
  @GrpcMethod("AreaService", "updateAreaTeleportTriggers")
  async updateAreaTeleportTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaTeleportTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaTeleportTriggers: {
        set: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/areaTeleportTriggers")
  @GrpcMethod("AreaService", "disconnectAreaTeleportTriggers")
  async disconnectAreaTeleportTriggers(
    @common.Param() params: AreaWhereUniqueInput,
    @common.Body() body: AreaTeleportTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaTeleportTriggers: {
        disconnect: body,
      },
    };
    await this.service.updateArea({
      where: params,
      data,
      select: { id: true },
    });
  }
}
