/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestRequestItemConditional as PrismaQuestRequestItemConditional,
  QuestRequestItem as PrismaQuestRequestItem,
} from "@prisma/client";

export class QuestRequestItemConditionalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestRequestItemConditionalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questRequestItemConditional.count(args);
  }

  async questRequestItemConditionals(
    args: Prisma.QuestRequestItemConditionalFindManyArgs
  ): Promise<PrismaQuestRequestItemConditional[]> {
    return this.prisma.questRequestItemConditional.findMany(args);
  }
  async questRequestItemConditional(
    args: Prisma.QuestRequestItemConditionalFindUniqueArgs
  ): Promise<PrismaQuestRequestItemConditional | null> {
    return this.prisma.questRequestItemConditional.findUnique(args);
  }
  async createQuestRequestItemConditional(
    args: Prisma.QuestRequestItemConditionalCreateArgs
  ): Promise<PrismaQuestRequestItemConditional> {
    return this.prisma.questRequestItemConditional.create(args);
  }
  async updateQuestRequestItemConditional(
    args: Prisma.QuestRequestItemConditionalUpdateArgs
  ): Promise<PrismaQuestRequestItemConditional> {
    return this.prisma.questRequestItemConditional.update(args);
  }
  async deleteQuestRequestItemConditional(
    args: Prisma.QuestRequestItemConditionalDeleteArgs
  ): Promise<PrismaQuestRequestItemConditional> {
    return this.prisma.questRequestItemConditional.delete(args);
  }

  async getQuestRequestItem(
    parentId: string
  ): Promise<PrismaQuestRequestItem | null> {
    return this.prisma.questRequestItemConditional
      .findUnique({
        where: { id: parentId },
      })
      .questRequestItem();
  }
}
