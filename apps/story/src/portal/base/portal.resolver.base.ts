/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Portal } from "./Portal";
import { PortalCountArgs } from "./PortalCountArgs";
import { PortalFindManyArgs } from "./PortalFindManyArgs";
import { PortalFindUniqueArgs } from "./PortalFindUniqueArgs";
import { CreatePortalArgs } from "./CreatePortalArgs";
import { UpdatePortalArgs } from "./UpdatePortalArgs";
import { DeletePortalArgs } from "./DeletePortalArgs";
import { AreaTeleportTriggerFindManyArgs } from "../../areaTeleportTrigger/base/AreaTeleportTriggerFindManyArgs";
import { AreaTeleportTrigger } from "../../areaTeleportTrigger/base/AreaTeleportTrigger";
import { PortalService } from "../portal.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Portal)
export class PortalResolverBase {
  constructor(
    protected readonly service: PortalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Portal",
    action: "read",
    possession: "any",
  })
  async _portalsMeta(
    @graphql.Args() args: PortalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Portal])
  @nestAccessControl.UseRoles({
    resource: "Portal",
    action: "read",
    possession: "any",
  })
  async portals(@graphql.Args() args: PortalFindManyArgs): Promise<Portal[]> {
    return this.service.portals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Portal, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Portal",
    action: "read",
    possession: "own",
  })
  async portal(
    @graphql.Args() args: PortalFindUniqueArgs
  ): Promise<Portal | null> {
    const result = await this.service.portal(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Portal)
  @nestAccessControl.UseRoles({
    resource: "Portal",
    action: "create",
    possession: "any",
  })
  async createPortal(@graphql.Args() args: CreatePortalArgs): Promise<Portal> {
    return await this.service.createPortal({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Portal)
  @nestAccessControl.UseRoles({
    resource: "Portal",
    action: "update",
    possession: "any",
  })
  async updatePortal(
    @graphql.Args() args: UpdatePortalArgs
  ): Promise<Portal | null> {
    try {
      return await this.service.updatePortal({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Portal)
  @nestAccessControl.UseRoles({
    resource: "Portal",
    action: "delete",
    possession: "any",
  })
  async deletePortal(
    @graphql.Args() args: DeletePortalArgs
  ): Promise<Portal | null> {
    try {
      return await this.service.deletePortal(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AreaTeleportTrigger], {
    name: "areaTeleportTriggers",
  })
  @nestAccessControl.UseRoles({
    resource: "AreaTeleportTrigger",
    action: "read",
    possession: "any",
  })
  async findAreaTeleportTriggers(
    @graphql.Parent() parent: Portal,
    @graphql.Args() args: AreaTeleportTriggerFindManyArgs
  ): Promise<AreaTeleportTrigger[]> {
    const results = await this.service.findAreaTeleportTriggers(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
