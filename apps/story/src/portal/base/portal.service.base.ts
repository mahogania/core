/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Portal as PrismaPortal,
  AreaTeleportTrigger as PrismaAreaTeleportTrigger,
} from "@prisma/client";

export class PortalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PortalCountArgs, "select">): Promise<number> {
    return this.prisma.portal.count(args);
  }

  async portals(args: Prisma.PortalFindManyArgs): Promise<PrismaPortal[]> {
    return this.prisma.portal.findMany(args);
  }
  async portal(
    args: Prisma.PortalFindUniqueArgs
  ): Promise<PrismaPortal | null> {
    return this.prisma.portal.findUnique(args);
  }
  async createPortal(args: Prisma.PortalCreateArgs): Promise<PrismaPortal> {
    return this.prisma.portal.create(args);
  }
  async updatePortal(args: Prisma.PortalUpdateArgs): Promise<PrismaPortal> {
    return this.prisma.portal.update(args);
  }
  async deletePortal(args: Prisma.PortalDeleteArgs): Promise<PrismaPortal> {
    return this.prisma.portal.delete(args);
  }

  async findAreaTeleportTriggers(
    parentId: string,
    args: Prisma.AreaTeleportTriggerFindManyArgs
  ): Promise<PrismaAreaTeleportTrigger[]> {
    return this.prisma.portal
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .areaTeleportTriggers(args);
  }
}
