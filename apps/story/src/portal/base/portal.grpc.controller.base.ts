/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PortalService } from "../portal.service";
import { PortalCreateInput } from "./PortalCreateInput";
import { PortalWhereInput } from "./PortalWhereInput";
import { PortalWhereUniqueInput } from "./PortalWhereUniqueInput";
import { PortalFindManyArgs } from "./PortalFindManyArgs";
import { PortalUpdateInput } from "./PortalUpdateInput";
import { Portal } from "./Portal";
import { AreaTeleportTriggerFindManyArgs } from "../../areaTeleportTrigger/base/AreaTeleportTriggerFindManyArgs";
import { AreaTeleportTrigger } from "../../areaTeleportTrigger/base/AreaTeleportTrigger";
import { AreaTeleportTriggerWhereUniqueInput } from "../../areaTeleportTrigger/base/AreaTeleportTriggerWhereUniqueInput";

export class PortalGrpcControllerBase {
  constructor(protected readonly service: PortalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Portal })
  @GrpcMethod("PortalService", "createPortal")
  async createPortal(@common.Body() data: PortalCreateInput): Promise<Portal> {
    return await this.service.createPortal({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Portal] })
  @ApiNestedQuery(PortalFindManyArgs)
  @GrpcMethod("PortalService", "portals")
  async portals(@common.Req() request: Request): Promise<Portal[]> {
    const args = plainToClass(PortalFindManyArgs, request.query);
    return this.service.portals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Portal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PortalService", "portal")
  async portal(
    @common.Param() params: PortalWhereUniqueInput
  ): Promise<Portal | null> {
    const result = await this.service.portal({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Portal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PortalService", "updatePortal")
  async updatePortal(
    @common.Param() params: PortalWhereUniqueInput,
    @common.Body() data: PortalUpdateInput
  ): Promise<Portal | null> {
    try {
      return await this.service.updatePortal({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Portal })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PortalService", "deletePortal")
  async deletePortal(
    @common.Param() params: PortalWhereUniqueInput
  ): Promise<Portal | null> {
    try {
      return await this.service.deletePortal({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/areaTeleportTriggers")
  @ApiNestedQuery(AreaTeleportTriggerFindManyArgs)
  @GrpcMethod("PortalService", "findManyAreaTeleportTriggers")
  async findManyAreaTeleportTriggers(
    @common.Req() request: Request,
    @common.Param() params: PortalWhereUniqueInput
  ): Promise<AreaTeleportTrigger[]> {
    const query = plainToClass(AreaTeleportTriggerFindManyArgs, request.query);
    const results = await this.service.findAreaTeleportTriggers(params.id, {
      ...query,
      select: {
        area: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        portal: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/areaTeleportTriggers")
  @GrpcMethod("PortalService", "connectAreaTeleportTriggers")
  async connectAreaTeleportTriggers(
    @common.Param() params: PortalWhereUniqueInput,
    @common.Body() body: AreaTeleportTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaTeleportTriggers: {
        connect: body,
      },
    };
    await this.service.updatePortal({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/areaTeleportTriggers")
  @GrpcMethod("PortalService", "updateAreaTeleportTriggers")
  async updateAreaTeleportTriggers(
    @common.Param() params: PortalWhereUniqueInput,
    @common.Body() body: AreaTeleportTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaTeleportTriggers: {
        set: body,
      },
    };
    await this.service.updatePortal({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/areaTeleportTriggers")
  @GrpcMethod("PortalService", "disconnectAreaTeleportTriggers")
  async disconnectAreaTeleportTriggers(
    @common.Param() params: PortalWhereUniqueInput,
    @common.Body() body: AreaTeleportTriggerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areaTeleportTriggers: {
        disconnect: body,
      },
    };
    await this.service.updatePortal({
      where: params,
      data,
      select: { id: true },
    });
  }
}
