/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestRegion as PrismaQuestRegion,
  QuestObjective as PrismaQuestObjective,
  QuestPoi as PrismaQuestPoi,
} from "@prisma/client";

export class QuestRegionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestRegionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questRegion.count(args);
  }

  async questRegions(
    args: Prisma.QuestRegionFindManyArgs
  ): Promise<PrismaQuestRegion[]> {
    return this.prisma.questRegion.findMany(args);
  }
  async questRegion(
    args: Prisma.QuestRegionFindUniqueArgs
  ): Promise<PrismaQuestRegion | null> {
    return this.prisma.questRegion.findUnique(args);
  }
  async createQuestRegion(
    args: Prisma.QuestRegionCreateArgs
  ): Promise<PrismaQuestRegion> {
    return this.prisma.questRegion.create(args);
  }
  async updateQuestRegion(
    args: Prisma.QuestRegionUpdateArgs
  ): Promise<PrismaQuestRegion> {
    return this.prisma.questRegion.update(args);
  }
  async deleteQuestRegion(
    args: Prisma.QuestRegionDeleteArgs
  ): Promise<PrismaQuestRegion> {
    return this.prisma.questRegion.delete(args);
  }

  async findQuestObjectives(
    parentId: string,
    args: Prisma.QuestObjectiveFindManyArgs
  ): Promise<PrismaQuestObjective[]> {
    return this.prisma.questRegion
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questObjectives(args);
  }

  async findQuestPoiPoints(
    parentId: string,
    args: Prisma.QuestPoiFindManyArgs
  ): Promise<PrismaQuestPoi[]> {
    return this.prisma.questRegion
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questPoiPoints(args);
  }
}
