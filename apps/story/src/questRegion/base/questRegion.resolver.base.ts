/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestRegion } from "./QuestRegion";
import { QuestRegionCountArgs } from "./QuestRegionCountArgs";
import { QuestRegionFindManyArgs } from "./QuestRegionFindManyArgs";
import { QuestRegionFindUniqueArgs } from "./QuestRegionFindUniqueArgs";
import { CreateQuestRegionArgs } from "./CreateQuestRegionArgs";
import { UpdateQuestRegionArgs } from "./UpdateQuestRegionArgs";
import { DeleteQuestRegionArgs } from "./DeleteQuestRegionArgs";
import { QuestObjectiveFindManyArgs } from "../../questObjective/base/QuestObjectiveFindManyArgs";
import { QuestObjective } from "../../questObjective/base/QuestObjective";
import { QuestPoiFindManyArgs } from "../../questPoi/base/QuestPoiFindManyArgs";
import { QuestPoi } from "../../questPoi/base/QuestPoi";
import { QuestRegionService } from "../questRegion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestRegion)
export class QuestRegionResolverBase {
  constructor(
    protected readonly service: QuestRegionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "read",
    possession: "any",
  })
  async _questRegionsMeta(
    @graphql.Args() args: QuestRegionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestRegion])
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "read",
    possession: "any",
  })
  async questRegions(
    @graphql.Args() args: QuestRegionFindManyArgs
  ): Promise<QuestRegion[]> {
    return this.service.questRegions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestRegion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "read",
    possession: "own",
  })
  async questRegion(
    @graphql.Args() args: QuestRegionFindUniqueArgs
  ): Promise<QuestRegion | null> {
    const result = await this.service.questRegion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestRegion)
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "create",
    possession: "any",
  })
  async createQuestRegion(
    @graphql.Args() args: CreateQuestRegionArgs
  ): Promise<QuestRegion> {
    return await this.service.createQuestRegion({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestRegion)
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "update",
    possession: "any",
  })
  async updateQuestRegion(
    @graphql.Args() args: UpdateQuestRegionArgs
  ): Promise<QuestRegion | null> {
    try {
      return await this.service.updateQuestRegion({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestRegion)
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "delete",
    possession: "any",
  })
  async deleteQuestRegion(
    @graphql.Args() args: DeleteQuestRegionArgs
  ): Promise<QuestRegion | null> {
    try {
      return await this.service.deleteQuestRegion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestObjective], { name: "questObjectives" })
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "read",
    possession: "any",
  })
  async findQuestObjectives(
    @graphql.Parent() parent: QuestRegion,
    @graphql.Args() args: QuestObjectiveFindManyArgs
  ): Promise<QuestObjective[]> {
    const results = await this.service.findQuestObjectives(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestPoi], { name: "questPoiPoints" })
  @nestAccessControl.UseRoles({
    resource: "QuestPoi",
    action: "read",
    possession: "any",
  })
  async findQuestPoiPoints(
    @graphql.Parent() parent: QuestRegion,
    @graphql.Args() args: QuestPoiFindManyArgs
  ): Promise<QuestPoi[]> {
    const results = await this.service.findQuestPoiPoints(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
