/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PointOfInterestService } from "../pointOfInterest.service";
import { PointOfInterestCreateInput } from "./PointOfInterestCreateInput";
import { PointOfInterestWhereInput } from "./PointOfInterestWhereInput";
import { PointOfInterestWhereUniqueInput } from "./PointOfInterestWhereUniqueInput";
import { PointOfInterestFindManyArgs } from "./PointOfInterestFindManyArgs";
import { PointOfInterestUpdateInput } from "./PointOfInterestUpdateInput";
import { PointOfInterest } from "./PointOfInterest";
import { PointsOfInterestLocaleFindManyArgs } from "../../pointsOfInterestLocale/base/PointsOfInterestLocaleFindManyArgs";
import { PointsOfInterestLocale } from "../../pointsOfInterestLocale/base/PointsOfInterestLocale";
import { PointsOfInterestLocaleWhereUniqueInput } from "../../pointsOfInterestLocale/base/PointsOfInterestLocaleWhereUniqueInput";
import { QuestPoiFindManyArgs } from "../../questPoi/base/QuestPoiFindManyArgs";
import { QuestPoi } from "../../questPoi/base/QuestPoi";
import { QuestPoiWhereUniqueInput } from "../../questPoi/base/QuestPoiWhereUniqueInput";

export class PointOfInterestGrpcControllerBase {
  constructor(protected readonly service: PointOfInterestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PointOfInterest })
  @GrpcMethod("PointOfInterestService", "createPointOfInterest")
  async createPointOfInterest(
    @common.Body() data: PointOfInterestCreateInput
  ): Promise<PointOfInterest> {
    return await this.service.createPointOfInterest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PointOfInterest] })
  @ApiNestedQuery(PointOfInterestFindManyArgs)
  @GrpcMethod("PointOfInterestService", "pointOfInterests")
  async pointOfInterests(
    @common.Req() request: Request
  ): Promise<PointOfInterest[]> {
    const args = plainToClass(PointOfInterestFindManyArgs, request.query);
    return this.service.pointOfInterests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PointOfInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PointOfInterestService", "pointOfInterest")
  async pointOfInterest(
    @common.Param() params: PointOfInterestWhereUniqueInput
  ): Promise<PointOfInterest | null> {
    const result = await this.service.pointOfInterest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PointOfInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PointOfInterestService", "updatePointOfInterest")
  async updatePointOfInterest(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() data: PointOfInterestUpdateInput
  ): Promise<PointOfInterest | null> {
    try {
      return await this.service.updatePointOfInterest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PointOfInterest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PointOfInterestService", "deletePointOfInterest")
  async deletePointOfInterest(
    @common.Param() params: PointOfInterestWhereUniqueInput
  ): Promise<PointOfInterest | null> {
    try {
      return await this.service.deletePointOfInterest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/pointsOfInterestLocales")
  @ApiNestedQuery(PointsOfInterestLocaleFindManyArgs)
  @GrpcMethod("PointOfInterestService", "findManyPointsOfInterestLocales")
  async findManyPointsOfInterestLocales(
    @common.Req() request: Request,
    @common.Param() params: PointOfInterestWhereUniqueInput
  ): Promise<PointsOfInterestLocale[]> {
    const query = plainToClass(
      PointsOfInterestLocaleFindManyArgs,
      request.query
    );
    const results = await this.service.findPointsOfInterestLocales(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        pointsOfInterest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/pointsOfInterestLocales")
  @GrpcMethod("PointOfInterestService", "connectPointsOfInterestLocales")
  async connectPointsOfInterestLocales(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() body: PointsOfInterestLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pointsOfInterestLocales: {
        connect: body,
      },
    };
    await this.service.updatePointOfInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/pointsOfInterestLocales")
  @GrpcMethod("PointOfInterestService", "updatePointsOfInterestLocales")
  async updatePointsOfInterestLocales(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() body: PointsOfInterestLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pointsOfInterestLocales: {
        set: body,
      },
    };
    await this.service.updatePointOfInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/pointsOfInterestLocales")
  @GrpcMethod("PointOfInterestService", "disconnectPointsOfInterestLocales")
  async disconnectPointsOfInterestLocales(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() body: PointsOfInterestLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pointsOfInterestLocales: {
        disconnect: body,
      },
    };
    await this.service.updatePointOfInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/questPoiPoints")
  @ApiNestedQuery(QuestPoiFindManyArgs)
  @GrpcMethod("PointOfInterestService", "findManyQuestPoiPoints")
  async findManyQuestPoiPoints(
    @common.Req() request: Request,
    @common.Param() params: PointOfInterestWhereUniqueInput
  ): Promise<QuestPoi[]> {
    const query = plainToClass(QuestPoiFindManyArgs, request.query);
    const results = await this.service.findQuestPoiPoints(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        pointOfInterest: {
          select: {
            id: true,
          },
        },

        questPoi: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questPoiPoints")
  @GrpcMethod("PointOfInterestService", "connectQuestPoiPoints")
  async connectQuestPoiPoints(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() body: QuestPoiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPoiPoints: {
        connect: body,
      },
    };
    await this.service.updatePointOfInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questPoiPoints")
  @GrpcMethod("PointOfInterestService", "updateQuestPoiPoints")
  async updateQuestPoiPoints(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() body: QuestPoiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPoiPoints: {
        set: body,
      },
    };
    await this.service.updatePointOfInterest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questPoiPoints")
  @GrpcMethod("PointOfInterestService", "disconnectQuestPoiPoints")
  async disconnectQuestPoiPoints(
    @common.Param() params: PointOfInterestWhereUniqueInput,
    @common.Body() body: QuestPoiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPoiPoints: {
        disconnect: body,
      },
    };
    await this.service.updatePointOfInterest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
