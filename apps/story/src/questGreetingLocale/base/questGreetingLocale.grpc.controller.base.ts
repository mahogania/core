/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestGreetingLocaleService } from "../questGreetingLocale.service";
import { QuestGreetingLocaleCreateInput } from "./QuestGreetingLocaleCreateInput";
import { QuestGreetingLocaleWhereInput } from "./QuestGreetingLocaleWhereInput";
import { QuestGreetingLocaleWhereUniqueInput } from "./QuestGreetingLocaleWhereUniqueInput";
import { QuestGreetingLocaleFindManyArgs } from "./QuestGreetingLocaleFindManyArgs";
import { QuestGreetingLocaleUpdateInput } from "./QuestGreetingLocaleUpdateInput";
import { QuestGreetingLocale } from "./QuestGreetingLocale";

export class QuestGreetingLocaleGrpcControllerBase {
  constructor(protected readonly service: QuestGreetingLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestGreetingLocale })
  @GrpcMethod("QuestGreetingLocaleService", "createQuestGreetingLocale")
  async createQuestGreetingLocale(
    @common.Body() data: QuestGreetingLocaleCreateInput
  ): Promise<QuestGreetingLocale> {
    return await this.service.createQuestGreetingLocale({
      data: {
        ...data,

        questGreeting: data.questGreeting
          ? {
              connect: data.questGreeting,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        questGreeting: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestGreetingLocale] })
  @ApiNestedQuery(QuestGreetingLocaleFindManyArgs)
  @GrpcMethod("QuestGreetingLocaleService", "questGreetingLocales")
  async questGreetingLocales(
    @common.Req() request: Request
  ): Promise<QuestGreetingLocale[]> {
    const args = plainToClass(QuestGreetingLocaleFindManyArgs, request.query);
    return this.service.questGreetingLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,

        questGreeting: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestGreetingLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestGreetingLocaleService", "questGreetingLocale")
  async questGreetingLocale(
    @common.Param() params: QuestGreetingLocaleWhereUniqueInput
  ): Promise<QuestGreetingLocale | null> {
    const result = await this.service.questGreetingLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,

        questGreeting: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestGreetingLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestGreetingLocaleService", "updateQuestGreetingLocale")
  async updateQuestGreetingLocale(
    @common.Param() params: QuestGreetingLocaleWhereUniqueInput,
    @common.Body() data: QuestGreetingLocaleUpdateInput
  ): Promise<QuestGreetingLocale | null> {
    try {
      return await this.service.updateQuestGreetingLocale({
        where: params,
        data: {
          ...data,

          questGreeting: data.questGreeting
            ? {
                connect: data.questGreeting,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          questGreeting: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestGreetingLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestGreetingLocaleService", "deleteQuestGreetingLocale")
  async deleteQuestGreetingLocale(
    @common.Param() params: QuestGreetingLocaleWhereUniqueInput
  ): Promise<QuestGreetingLocale | null> {
    try {
      return await this.service.deleteQuestGreetingLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,

          questGreeting: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
