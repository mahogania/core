/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestGreetingLocale } from "./QuestGreetingLocale";
import { QuestGreetingLocaleCountArgs } from "./QuestGreetingLocaleCountArgs";
import { QuestGreetingLocaleFindManyArgs } from "./QuestGreetingLocaleFindManyArgs";
import { QuestGreetingLocaleFindUniqueArgs } from "./QuestGreetingLocaleFindUniqueArgs";
import { CreateQuestGreetingLocaleArgs } from "./CreateQuestGreetingLocaleArgs";
import { UpdateQuestGreetingLocaleArgs } from "./UpdateQuestGreetingLocaleArgs";
import { DeleteQuestGreetingLocaleArgs } from "./DeleteQuestGreetingLocaleArgs";
import { QuestGreeting } from "../../questGreeting/base/QuestGreeting";
import { QuestGreetingLocaleService } from "../questGreetingLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestGreetingLocale)
export class QuestGreetingLocaleResolverBase {
  constructor(
    protected readonly service: QuestGreetingLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "read",
    possession: "any",
  })
  async _questGreetingLocalesMeta(
    @graphql.Args() args: QuestGreetingLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestGreetingLocale])
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "read",
    possession: "any",
  })
  async questGreetingLocales(
    @graphql.Args() args: QuestGreetingLocaleFindManyArgs
  ): Promise<QuestGreetingLocale[]> {
    return this.service.questGreetingLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestGreetingLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "read",
    possession: "own",
  })
  async questGreetingLocale(
    @graphql.Args() args: QuestGreetingLocaleFindUniqueArgs
  ): Promise<QuestGreetingLocale | null> {
    const result = await this.service.questGreetingLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestGreetingLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "create",
    possession: "any",
  })
  async createQuestGreetingLocale(
    @graphql.Args() args: CreateQuestGreetingLocaleArgs
  ): Promise<QuestGreetingLocale> {
    return await this.service.createQuestGreetingLocale({
      ...args,
      data: {
        ...args.data,

        questGreeting: args.data.questGreeting
          ? {
              connect: args.data.questGreeting,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestGreetingLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "update",
    possession: "any",
  })
  async updateQuestGreetingLocale(
    @graphql.Args() args: UpdateQuestGreetingLocaleArgs
  ): Promise<QuestGreetingLocale | null> {
    try {
      return await this.service.updateQuestGreetingLocale({
        ...args,
        data: {
          ...args.data,

          questGreeting: args.data.questGreeting
            ? {
                connect: args.data.questGreeting,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestGreetingLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestGreetingLocale",
    action: "delete",
    possession: "any",
  })
  async deleteQuestGreetingLocale(
    @graphql.Args() args: DeleteQuestGreetingLocaleArgs
  ): Promise<QuestGreetingLocale | null> {
    try {
      return await this.service.deleteQuestGreetingLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestGreeting, {
    nullable: true,
    name: "questGreeting",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "read",
    possession: "any",
  })
  async getQuestGreeting(
    @graphql.Parent() parent: QuestGreetingLocale
  ): Promise<QuestGreeting | null> {
    const result = await this.service.getQuestGreeting(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
