/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestCompletionConditionalService } from "../questCompletionConditional.service";
import { QuestCompletionConditionalCreateInput } from "./QuestCompletionConditionalCreateInput";
import { QuestCompletionConditionalWhereInput } from "./QuestCompletionConditionalWhereInput";
import { QuestCompletionConditionalWhereUniqueInput } from "./QuestCompletionConditionalWhereUniqueInput";
import { QuestCompletionConditionalFindManyArgs } from "./QuestCompletionConditionalFindManyArgs";
import { QuestCompletionConditionalUpdateInput } from "./QuestCompletionConditionalUpdateInput";
import { QuestCompletionConditional } from "./QuestCompletionConditional";

export class QuestCompletionConditionalGrpcControllerBase {
  constructor(protected readonly service: QuestCompletionConditionalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestCompletionConditional })
  @GrpcMethod(
    "QuestCompletionConditionalService",
    "createQuestCompletionConditional"
  )
  async createQuestCompletionConditional(
    @common.Body() data: QuestCompletionConditionalCreateInput
  ): Promise<QuestCompletionConditional> {
    return await this.service.createQuestCompletionConditional({
      data: {
        ...data,

        quest: {
          connect: data.quest,
        },
      },
      select: {
        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestCompletionConditional] })
  @ApiNestedQuery(QuestCompletionConditionalFindManyArgs)
  @GrpcMethod(
    "QuestCompletionConditionalService",
    "questCompletionConditionals"
  )
  async questCompletionConditionals(
    @common.Req() request: Request
  ): Promise<QuestCompletionConditional[]> {
    const args = plainToClass(
      QuestCompletionConditionalFindManyArgs,
      request.query
    );
    return this.service.questCompletionConditionals({
      ...args,
      select: {
        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestCompletionConditional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestCompletionConditionalService", "questCompletionConditional")
  async questCompletionConditional(
    @common.Param() params: QuestCompletionConditionalWhereUniqueInput
  ): Promise<QuestCompletionConditional | null> {
    const result = await this.service.questCompletionConditional({
      where: params,
      select: {
        createdAt: true,
        id: true,

        quest: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestCompletionConditional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "QuestCompletionConditionalService",
    "updateQuestCompletionConditional"
  )
  async updateQuestCompletionConditional(
    @common.Param() params: QuestCompletionConditionalWhereUniqueInput,
    @common.Body() data: QuestCompletionConditionalUpdateInput
  ): Promise<QuestCompletionConditional | null> {
    try {
      return await this.service.updateQuestCompletionConditional({
        where: params,
        data: {
          ...data,

          quest: {
            connect: data.quest,
          },
        },
        select: {
          createdAt: true,
          id: true,

          quest: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestCompletionConditional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "QuestCompletionConditionalService",
    "deleteQuestCompletionConditional"
  )
  async deleteQuestCompletionConditional(
    @common.Param() params: QuestCompletionConditionalWhereUniqueInput
  ): Promise<QuestCompletionConditional | null> {
    try {
      return await this.service.deleteQuestCompletionConditional({
        where: params,
        select: {
          createdAt: true,
          id: true,

          quest: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
