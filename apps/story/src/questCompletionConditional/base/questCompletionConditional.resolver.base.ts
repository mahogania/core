/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestCompletionConditional } from "./QuestCompletionConditional";
import { QuestCompletionConditionalCountArgs } from "./QuestCompletionConditionalCountArgs";
import { QuestCompletionConditionalFindManyArgs } from "./QuestCompletionConditionalFindManyArgs";
import { QuestCompletionConditionalFindUniqueArgs } from "./QuestCompletionConditionalFindUniqueArgs";
import { CreateQuestCompletionConditionalArgs } from "./CreateQuestCompletionConditionalArgs";
import { UpdateQuestCompletionConditionalArgs } from "./UpdateQuestCompletionConditionalArgs";
import { DeleteQuestCompletionConditionalArgs } from "./DeleteQuestCompletionConditionalArgs";
import { Quest } from "../../quest/base/Quest";
import { QuestCompletionConditionalService } from "../questCompletionConditional.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestCompletionConditional)
export class QuestCompletionConditionalResolverBase {
  constructor(
    protected readonly service: QuestCompletionConditionalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestCompletionConditional",
    action: "read",
    possession: "any",
  })
  async _questCompletionConditionalsMeta(
    @graphql.Args() args: QuestCompletionConditionalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestCompletionConditional])
  @nestAccessControl.UseRoles({
    resource: "QuestCompletionConditional",
    action: "read",
    possession: "any",
  })
  async questCompletionConditionals(
    @graphql.Args() args: QuestCompletionConditionalFindManyArgs
  ): Promise<QuestCompletionConditional[]> {
    return this.service.questCompletionConditionals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestCompletionConditional, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestCompletionConditional",
    action: "read",
    possession: "own",
  })
  async questCompletionConditional(
    @graphql.Args() args: QuestCompletionConditionalFindUniqueArgs
  ): Promise<QuestCompletionConditional | null> {
    const result = await this.service.questCompletionConditional(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestCompletionConditional)
  @nestAccessControl.UseRoles({
    resource: "QuestCompletionConditional",
    action: "create",
    possession: "any",
  })
  async createQuestCompletionConditional(
    @graphql.Args() args: CreateQuestCompletionConditionalArgs
  ): Promise<QuestCompletionConditional> {
    return await this.service.createQuestCompletionConditional({
      ...args,
      data: {
        ...args.data,

        quest: {
          connect: args.data.quest,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestCompletionConditional)
  @nestAccessControl.UseRoles({
    resource: "QuestCompletionConditional",
    action: "update",
    possession: "any",
  })
  async updateQuestCompletionConditional(
    @graphql.Args() args: UpdateQuestCompletionConditionalArgs
  ): Promise<QuestCompletionConditional | null> {
    try {
      return await this.service.updateQuestCompletionConditional({
        ...args,
        data: {
          ...args.data,

          quest: {
            connect: args.data.quest,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestCompletionConditional)
  @nestAccessControl.UseRoles({
    resource: "QuestCompletionConditional",
    action: "delete",
    possession: "any",
  })
  async deleteQuestCompletionConditional(
    @graphql.Args() args: DeleteQuestCompletionConditionalArgs
  ): Promise<QuestCompletionConditional | null> {
    try {
      return await this.service.deleteQuestCompletionConditional(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Quest, {
    nullable: true,
    name: "quest",
  })
  @nestAccessControl.UseRoles({
    resource: "Quest",
    action: "read",
    possession: "any",
  })
  async getQuest(
    @graphql.Parent() parent: QuestCompletionConditional
  ): Promise<Quest | null> {
    const result = await this.service.getQuest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
