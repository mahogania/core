/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestPool } from "./QuestPool";
import { QuestPoolCountArgs } from "./QuestPoolCountArgs";
import { QuestPoolFindManyArgs } from "./QuestPoolFindManyArgs";
import { QuestPoolFindUniqueArgs } from "./QuestPoolFindUniqueArgs";
import { CreateQuestPoolArgs } from "./CreateQuestPoolArgs";
import { UpdateQuestPoolArgs } from "./UpdateQuestPoolArgs";
import { DeleteQuestPoolArgs } from "./DeleteQuestPoolArgs";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { Pool } from "../../pool/base/Pool";
import { QuestPoolMember } from "../../questPoolMember/base/QuestPoolMember";
import { QuestPoolService } from "../questPool.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestPool)
export class QuestPoolResolverBase {
  constructor(
    protected readonly service: QuestPoolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestPool",
    action: "read",
    possession: "any",
  })
  async _questPoolsMeta(
    @graphql.Args() args: QuestPoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestPool])
  @nestAccessControl.UseRoles({
    resource: "QuestPool",
    action: "read",
    possession: "any",
  })
  async questPools(
    @graphql.Args() args: QuestPoolFindManyArgs
  ): Promise<QuestPool[]> {
    return this.service.questPools(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestPool, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestPool",
    action: "read",
    possession: "own",
  })
  async questPool(
    @graphql.Args() args: QuestPoolFindUniqueArgs
  ): Promise<QuestPool | null> {
    const result = await this.service.questPool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestPool)
  @nestAccessControl.UseRoles({
    resource: "QuestPool",
    action: "create",
    possession: "any",
  })
  async createQuestPool(
    @graphql.Args() args: CreateQuestPoolArgs
  ): Promise<QuestPool> {
    return await this.service.createQuestPool({
      ...args,
      data: {
        ...args.data,

        pool: {
          connect: args.data.pool,
        },

        questPoolMembers: args.data.questPoolMembers
          ? {
              connect: args.data.questPoolMembers,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestPool)
  @nestAccessControl.UseRoles({
    resource: "QuestPool",
    action: "update",
    possession: "any",
  })
  async updateQuestPool(
    @graphql.Args() args: UpdateQuestPoolArgs
  ): Promise<QuestPool | null> {
    try {
      return await this.service.updateQuestPool({
        ...args,
        data: {
          ...args.data,

          pool: {
            connect: args.data.pool,
          },

          questPoolMembers: args.data.questPoolMembers
            ? {
                connect: args.data.questPoolMembers,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestPool)
  @nestAccessControl.UseRoles({
    resource: "QuestPool",
    action: "delete",
    possession: "any",
  })
  async deleteQuestPool(
    @graphql.Args() args: DeleteQuestPoolArgs
  ): Promise<QuestPool | null> {
    try {
      return await this.service.deleteQuestPool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestTemplate], { name: "questTemplates" })
  @nestAccessControl.UseRoles({
    resource: "QuestTemplate",
    action: "read",
    possession: "any",
  })
  async findQuestTemplates(
    @graphql.Parent() parent: QuestPool,
    @graphql.Args() args: QuestTemplateFindManyArgs
  ): Promise<QuestTemplate[]> {
    const results = await this.service.findQuestTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Pool, {
    nullable: true,
    name: "pool",
  })
  @nestAccessControl.UseRoles({
    resource: "Pool",
    action: "read",
    possession: "any",
  })
  async getPool(@graphql.Parent() parent: QuestPool): Promise<Pool | null> {
    const result = await this.service.getPool(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestPoolMember, {
    nullable: true,
    name: "questPoolMembers",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestPoolMember",
    action: "read",
    possession: "any",
  })
  async getQuestPoolMembers(
    @graphql.Parent() parent: QuestPool
  ): Promise<QuestPoolMember | null> {
    const result = await this.service.getQuestPoolMembers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
