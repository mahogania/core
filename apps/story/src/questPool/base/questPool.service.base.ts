/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestPool as PrismaQuestPool,
  QuestTemplate as PrismaQuestTemplate,
  Pool as PrismaPool,
  QuestPoolMember as PrismaQuestPoolMember,
} from "@prisma/client";

export class QuestPoolServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestPoolCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questPool.count(args);
  }

  async questPools(
    args: Prisma.QuestPoolFindManyArgs
  ): Promise<PrismaQuestPool[]> {
    return this.prisma.questPool.findMany(args);
  }
  async questPool(
    args: Prisma.QuestPoolFindUniqueArgs
  ): Promise<PrismaQuestPool | null> {
    return this.prisma.questPool.findUnique(args);
  }
  async createQuestPool(
    args: Prisma.QuestPoolCreateArgs
  ): Promise<PrismaQuestPool> {
    return this.prisma.questPool.create(args);
  }
  async updateQuestPool(
    args: Prisma.QuestPoolUpdateArgs
  ): Promise<PrismaQuestPool> {
    return this.prisma.questPool.update(args);
  }
  async deleteQuestPool(
    args: Prisma.QuestPoolDeleteArgs
  ): Promise<PrismaQuestPool> {
    return this.prisma.questPool.delete(args);
  }

  async findQuestTemplates(
    parentId: string,
    args: Prisma.QuestTemplateFindManyArgs
  ): Promise<PrismaQuestTemplate[]> {
    return this.prisma.questPool
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questTemplates(args);
  }

  async getPool(parentId: string): Promise<PrismaPool | null> {
    return this.prisma.questPool
      .findUnique({
        where: { id: parentId },
      })
      .pool();
  }

  async getQuestPoolMembers(
    parentId: string
  ): Promise<PrismaQuestPoolMember | null> {
    return this.prisma.questPool
      .findUnique({
        where: { id: parentId },
      })
      .questPoolMembers();
  }
}
