/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ScenarioPoiService } from "../scenarioPoi.service";
import { ScenarioPoiCreateInput } from "./ScenarioPoiCreateInput";
import { ScenarioPoiWhereInput } from "./ScenarioPoiWhereInput";
import { ScenarioPoiWhereUniqueInput } from "./ScenarioPoiWhereUniqueInput";
import { ScenarioPoiFindManyArgs } from "./ScenarioPoiFindManyArgs";
import { ScenarioPoiUpdateInput } from "./ScenarioPoiUpdateInput";
import { ScenarioPoi } from "./ScenarioPoi";
import { ScenarioRegionFindManyArgs } from "../../scenarioRegion/base/ScenarioRegionFindManyArgs";
import { ScenarioRegion } from "../../scenarioRegion/base/ScenarioRegion";
import { ScenarioRegionWhereUniqueInput } from "../../scenarioRegion/base/ScenarioRegionWhereUniqueInput";

export class ScenarioPoiGrpcControllerBase {
  constructor(protected readonly service: ScenarioPoiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScenarioPoi })
  @GrpcMethod("ScenarioPoiService", "createScenarioPoi")
  async createScenarioPoi(
    @common.Body() data: ScenarioPoiCreateInput
  ): Promise<ScenarioPoi> {
    return await this.service.createScenarioPoi({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScenarioPoi] })
  @ApiNestedQuery(ScenarioPoiFindManyArgs)
  @GrpcMethod("ScenarioPoiService", "scenarioPois")
  async scenarioPois(@common.Req() request: Request): Promise<ScenarioPoi[]> {
    const args = plainToClass(ScenarioPoiFindManyArgs, request.query);
    return this.service.scenarioPois({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScenarioPoi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScenarioPoiService", "scenarioPoi")
  async scenarioPoi(
    @common.Param() params: ScenarioPoiWhereUniqueInput
  ): Promise<ScenarioPoi | null> {
    const result = await this.service.scenarioPoi({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScenarioPoi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScenarioPoiService", "updateScenarioPoi")
  async updateScenarioPoi(
    @common.Param() params: ScenarioPoiWhereUniqueInput,
    @common.Body() data: ScenarioPoiUpdateInput
  ): Promise<ScenarioPoi | null> {
    try {
      return await this.service.updateScenarioPoi({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScenarioPoi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScenarioPoiService", "deleteScenarioPoi")
  async deleteScenarioPoi(
    @common.Param() params: ScenarioPoiWhereUniqueInput
  ): Promise<ScenarioPoi | null> {
    try {
      return await this.service.deleteScenarioPoi({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/scenarioRegions")
  @ApiNestedQuery(ScenarioRegionFindManyArgs)
  @GrpcMethod("ScenarioPoiService", "findManyScenarioRegions")
  async findManyScenarioRegions(
    @common.Req() request: Request,
    @common.Param() params: ScenarioPoiWhereUniqueInput
  ): Promise<ScenarioRegion[]> {
    const query = plainToClass(ScenarioRegionFindManyArgs, request.query);
    const results = await this.service.findScenarioRegions(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        scenarioPois: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scenarioRegions")
  @GrpcMethod("ScenarioPoiService", "connectScenarioRegions")
  async connectScenarioRegions(
    @common.Param() params: ScenarioPoiWhereUniqueInput,
    @common.Body() body: ScenarioRegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scenarioRegions: {
        connect: body,
      },
    };
    await this.service.updateScenarioPoi({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scenarioRegions")
  @GrpcMethod("ScenarioPoiService", "updateScenarioRegions")
  async updateScenarioRegions(
    @common.Param() params: ScenarioPoiWhereUniqueInput,
    @common.Body() body: ScenarioRegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scenarioRegions: {
        set: body,
      },
    };
    await this.service.updateScenarioPoi({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scenarioRegions")
  @GrpcMethod("ScenarioPoiService", "disconnectScenarioRegions")
  async disconnectScenarioRegions(
    @common.Param() params: ScenarioPoiWhereUniqueInput,
    @common.Body() body: ScenarioRegionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scenarioRegions: {
        disconnect: body,
      },
    };
    await this.service.updateScenarioPoi({
      where: params,
      data,
      select: { id: true },
    });
  }
}
