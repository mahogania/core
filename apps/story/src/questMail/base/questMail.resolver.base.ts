/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestMail } from "./QuestMail";
import { QuestMailCountArgs } from "./QuestMailCountArgs";
import { QuestMailFindManyArgs } from "./QuestMailFindManyArgs";
import { QuestMailFindUniqueArgs } from "./QuestMailFindUniqueArgs";
import { CreateQuestMailArgs } from "./CreateQuestMailArgs";
import { UpdateQuestMailArgs } from "./UpdateQuestMailArgs";
import { DeleteQuestMailArgs } from "./DeleteQuestMailArgs";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestMailService } from "../questMail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestMail)
export class QuestMailResolverBase {
  constructor(
    protected readonly service: QuestMailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "read",
    possession: "any",
  })
  async _questMailsMeta(
    @graphql.Args() args: QuestMailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestMail])
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "read",
    possession: "any",
  })
  async questMails(
    @graphql.Args() args: QuestMailFindManyArgs
  ): Promise<QuestMail[]> {
    return this.service.questMails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestMail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "read",
    possession: "own",
  })
  async questMail(
    @graphql.Args() args: QuestMailFindUniqueArgs
  ): Promise<QuestMail | null> {
    const result = await this.service.questMail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestMail)
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "create",
    possession: "any",
  })
  async createQuestMail(
    @graphql.Args() args: CreateQuestMailArgs
  ): Promise<QuestMail> {
    return await this.service.createQuestMail({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestMail)
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "update",
    possession: "any",
  })
  async updateQuestMail(
    @graphql.Args() args: UpdateQuestMailArgs
  ): Promise<QuestMail | null> {
    try {
      return await this.service.updateQuestMail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestMail)
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "delete",
    possession: "any",
  })
  async deleteQuestMail(
    @graphql.Args() args: DeleteQuestMailArgs
  ): Promise<QuestMail | null> {
    try {
      return await this.service.deleteQuestMail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestTemplate], { name: "questTemplates" })
  @nestAccessControl.UseRoles({
    resource: "QuestTemplate",
    action: "read",
    possession: "any",
  })
  async findQuestTemplates(
    @graphql.Parent() parent: QuestMail,
    @graphql.Args() args: QuestTemplateFindManyArgs
  ): Promise<QuestTemplate[]> {
    const results = await this.service.findQuestTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
