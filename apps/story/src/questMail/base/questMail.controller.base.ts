/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QuestMailService } from "../questMail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestMailCreateInput } from "./QuestMailCreateInput";
import { QuestMail } from "./QuestMail";
import { QuestMailFindManyArgs } from "./QuestMailFindManyArgs";
import { QuestMailWhereUniqueInput } from "./QuestMailWhereUniqueInput";
import { QuestMailUpdateInput } from "./QuestMailUpdateInput";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestTemplateWhereUniqueInput } from "../../questTemplate/base/QuestTemplateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QuestMailControllerBase {
  constructor(
    protected readonly service: QuestMailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestMail })
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestMailCreateInput,
  })
  async createQuestMail(
    @common.Body() data: QuestMailCreateInput
  ): Promise<QuestMail> {
    return await this.service.createQuestMail({
      data: data,
      select: {
        createdAt: true,
        decription: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestMail] })
  @ApiNestedQuery(QuestMailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questMails(@common.Req() request: Request): Promise<QuestMail[]> {
    const args = plainToClass(QuestMailFindManyArgs, request.query);
    return this.service.questMails({
      ...args,
      select: {
        createdAt: true,
        decription: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestMail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questMail(
    @common.Param() params: QuestMailWhereUniqueInput
  ): Promise<QuestMail | null> {
    const result = await this.service.questMail({
      where: params,
      select: {
        createdAt: true,
        decription: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestMail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestMailUpdateInput,
  })
  async updateQuestMail(
    @common.Param() params: QuestMailWhereUniqueInput,
    @common.Body() data: QuestMailUpdateInput
  ): Promise<QuestMail | null> {
    try {
      return await this.service.updateQuestMail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          decription: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestMail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQuestMail(
    @common.Param() params: QuestMailWhereUniqueInput
  ): Promise<QuestMail | null> {
    try {
      return await this.service.deleteQuestMail({
        where: params,
        select: {
          createdAt: true,
          decription: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questTemplates")
  @ApiNestedQuery(QuestTemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestTemplate",
    action: "read",
    possession: "any",
  })
  async findQuestTemplates(
    @common.Req() request: Request,
    @common.Param() params: QuestMailWhereUniqueInput
  ): Promise<QuestTemplate[]> {
    const query = plainToClass(QuestTemplateFindManyArgs, request.query);
    const results = await this.service.findQuestTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questMails: {
          select: {
            id: true,
          },
        },

        questObjectives: {
          select: {
            id: true,
          },
        },

        questOfferRewards: {
          select: {
            id: true,
          },
        },

        questPools: {
          select: {
            id: true,
          },
        },

        questRequestItems: {
          select: {
            id: true,
          },
        },

        questTemplateLocale: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questTemplates")
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "update",
    possession: "any",
  })
  async connectQuestTemplates(
    @common.Param() params: QuestMailWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        connect: body,
      },
    };
    await this.service.updateQuestMail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questTemplates")
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "update",
    possession: "any",
  })
  async updateQuestTemplates(
    @common.Param() params: QuestMailWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        set: body,
      },
    };
    await this.service.updateQuestMail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questTemplates")
  @nestAccessControl.UseRoles({
    resource: "QuestMail",
    action: "update",
    possession: "any",
  })
  async disconnectQuestTemplates(
    @common.Param() params: QuestMailWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateQuestMail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
