/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QuestMail as PrismaQuestMail,
  QuestTemplate as PrismaQuestTemplate,
} from "@prisma/client";

export class QuestMailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestMailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questMail.count(args);
  }

  async questMails(
    args: Prisma.QuestMailFindManyArgs
  ): Promise<PrismaQuestMail[]> {
    return this.prisma.questMail.findMany(args);
  }
  async questMail(
    args: Prisma.QuestMailFindUniqueArgs
  ): Promise<PrismaQuestMail | null> {
    return this.prisma.questMail.findUnique(args);
  }
  async createQuestMail(
    args: Prisma.QuestMailCreateArgs
  ): Promise<PrismaQuestMail> {
    return this.prisma.questMail.create(args);
  }
  async updateQuestMail(
    args: Prisma.QuestMailUpdateArgs
  ): Promise<PrismaQuestMail> {
    return this.prisma.questMail.update(args);
  }
  async deleteQuestMail(
    args: Prisma.QuestMailDeleteArgs
  ): Promise<PrismaQuestMail> {
    return this.prisma.questMail.delete(args);
  }

  async findQuestTemplates(
    parentId: string,
    args: Prisma.QuestTemplateFindManyArgs
  ): Promise<PrismaQuestTemplate[]> {
    return this.prisma.questMail
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questTemplates(args);
  }
}
