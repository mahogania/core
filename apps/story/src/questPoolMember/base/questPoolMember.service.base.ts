/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestPoolMember as PrismaQuestPoolMember,
  QuestPool as PrismaQuestPool,
  PoolMember as PrismaPoolMember,
} from "@prisma/client";

export class QuestPoolMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestPoolMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questPoolMember.count(args);
  }

  async questPoolMembers(
    args: Prisma.QuestPoolMemberFindManyArgs
  ): Promise<PrismaQuestPoolMember[]> {
    return this.prisma.questPoolMember.findMany(args);
  }
  async questPoolMember(
    args: Prisma.QuestPoolMemberFindUniqueArgs
  ): Promise<PrismaQuestPoolMember | null> {
    return this.prisma.questPoolMember.findUnique(args);
  }
  async createQuestPoolMember(
    args: Prisma.QuestPoolMemberCreateArgs
  ): Promise<PrismaQuestPoolMember> {
    return this.prisma.questPoolMember.create(args);
  }
  async updateQuestPoolMember(
    args: Prisma.QuestPoolMemberUpdateArgs
  ): Promise<PrismaQuestPoolMember> {
    return this.prisma.questPoolMember.update(args);
  }
  async deleteQuestPoolMember(
    args: Prisma.QuestPoolMemberDeleteArgs
  ): Promise<PrismaQuestPoolMember> {
    return this.prisma.questPoolMember.delete(args);
  }

  async findQuestPoolTemplates(
    parentId: string,
    args: Prisma.QuestPoolFindManyArgs
  ): Promise<PrismaQuestPool[]> {
    return this.prisma.questPoolMember
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questPoolTemplates(args);
  }

  async getPoolMember(parentId: string): Promise<PrismaPoolMember | null> {
    return this.prisma.questPoolMember
      .findUnique({
        where: { id: parentId },
      })
      .poolMember();
  }
}
