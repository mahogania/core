/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SceneTemplate as PrismaSceneTemplate,
  Scenario as PrismaScenario,
} from "@prisma/client";

export class SceneTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SceneTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sceneTemplate.count(args);
  }

  async sceneTemplates(
    args: Prisma.SceneTemplateFindManyArgs
  ): Promise<PrismaSceneTemplate[]> {
    return this.prisma.sceneTemplate.findMany(args);
  }
  async sceneTemplate(
    args: Prisma.SceneTemplateFindUniqueArgs
  ): Promise<PrismaSceneTemplate | null> {
    return this.prisma.sceneTemplate.findUnique(args);
  }
  async createSceneTemplate(
    args: Prisma.SceneTemplateCreateArgs
  ): Promise<PrismaSceneTemplate> {
    return this.prisma.sceneTemplate.create(args);
  }
  async updateSceneTemplate(
    args: Prisma.SceneTemplateUpdateArgs
  ): Promise<PrismaSceneTemplate> {
    return this.prisma.sceneTemplate.update(args);
  }
  async deleteSceneTemplate(
    args: Prisma.SceneTemplateDeleteArgs
  ): Promise<PrismaSceneTemplate> {
    return this.prisma.sceneTemplate.delete(args);
  }

  async findScenarios(
    parentId: string,
    args: Prisma.ScenarioFindManyArgs
  ): Promise<PrismaScenario[]> {
    return this.prisma.sceneTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scenarios(args);
  }
}
