/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SceneTemplate } from "./SceneTemplate";
import { SceneTemplateCountArgs } from "./SceneTemplateCountArgs";
import { SceneTemplateFindManyArgs } from "./SceneTemplateFindManyArgs";
import { SceneTemplateFindUniqueArgs } from "./SceneTemplateFindUniqueArgs";
import { CreateSceneTemplateArgs } from "./CreateSceneTemplateArgs";
import { UpdateSceneTemplateArgs } from "./UpdateSceneTemplateArgs";
import { DeleteSceneTemplateArgs } from "./DeleteSceneTemplateArgs";
import { ScenarioFindManyArgs } from "../../scenario/base/ScenarioFindManyArgs";
import { Scenario } from "../../scenario/base/Scenario";
import { SceneTemplateService } from "../sceneTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SceneTemplate)
export class SceneTemplateResolverBase {
  constructor(
    protected readonly service: SceneTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SceneTemplate",
    action: "read",
    possession: "any",
  })
  async _sceneTemplatesMeta(
    @graphql.Args() args: SceneTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SceneTemplate])
  @nestAccessControl.UseRoles({
    resource: "SceneTemplate",
    action: "read",
    possession: "any",
  })
  async sceneTemplates(
    @graphql.Args() args: SceneTemplateFindManyArgs
  ): Promise<SceneTemplate[]> {
    return this.service.sceneTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SceneTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SceneTemplate",
    action: "read",
    possession: "own",
  })
  async sceneTemplate(
    @graphql.Args() args: SceneTemplateFindUniqueArgs
  ): Promise<SceneTemplate | null> {
    const result = await this.service.sceneTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SceneTemplate)
  @nestAccessControl.UseRoles({
    resource: "SceneTemplate",
    action: "create",
    possession: "any",
  })
  async createSceneTemplate(
    @graphql.Args() args: CreateSceneTemplateArgs
  ): Promise<SceneTemplate> {
    return await this.service.createSceneTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SceneTemplate)
  @nestAccessControl.UseRoles({
    resource: "SceneTemplate",
    action: "update",
    possession: "any",
  })
  async updateSceneTemplate(
    @graphql.Args() args: UpdateSceneTemplateArgs
  ): Promise<SceneTemplate | null> {
    try {
      return await this.service.updateSceneTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SceneTemplate)
  @nestAccessControl.UseRoles({
    resource: "SceneTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteSceneTemplate(
    @graphql.Args() args: DeleteSceneTemplateArgs
  ): Promise<SceneTemplate | null> {
    try {
      return await this.service.deleteSceneTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Scenario], { name: "scenarios" })
  @nestAccessControl.UseRoles({
    resource: "Scenario",
    action: "read",
    possession: "any",
  })
  async findScenarios(
    @graphql.Parent() parent: SceneTemplate,
    @graphql.Args() args: ScenarioFindManyArgs
  ): Promise<Scenario[]> {
    const results = await this.service.findScenarios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
