/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QuestObjectiveCompletionEffectService } from "../questObjectiveCompletionEffect.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestObjectiveCompletionEffectCreateInput } from "./QuestObjectiveCompletionEffectCreateInput";
import { QuestObjectiveCompletionEffect } from "./QuestObjectiveCompletionEffect";
import { QuestObjectiveCompletionEffectFindManyArgs } from "./QuestObjectiveCompletionEffectFindManyArgs";
import { QuestObjectiveCompletionEffectWhereUniqueInput } from "./QuestObjectiveCompletionEffectWhereUniqueInput";
import { QuestObjectiveCompletionEffectUpdateInput } from "./QuestObjectiveCompletionEffectUpdateInput";
import { QuestObjectiveFindManyArgs } from "../../questObjective/base/QuestObjectiveFindManyArgs";
import { QuestObjective } from "../../questObjective/base/QuestObjective";
import { QuestObjectiveWhereUniqueInput } from "../../questObjective/base/QuestObjectiveWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QuestObjectiveCompletionEffectControllerBase {
  constructor(
    protected readonly service: QuestObjectiveCompletionEffectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestObjectiveCompletionEffect })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestObjectiveCompletionEffectCreateInput,
  })
  async createQuestObjectiveCompletionEffect(
    @common.Body() data: QuestObjectiveCompletionEffectCreateInput
  ): Promise<QuestObjectiveCompletionEffect> {
    return await this.service.createQuestObjectiveCompletionEffect({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestObjectiveCompletionEffect] })
  @ApiNestedQuery(QuestObjectiveCompletionEffectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questObjectiveCompletionEffects(
    @common.Req() request: Request
  ): Promise<QuestObjectiveCompletionEffect[]> {
    const args = plainToClass(
      QuestObjectiveCompletionEffectFindManyArgs,
      request.query
    );
    return this.service.questObjectiveCompletionEffects({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectiveCompletionEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questObjectiveCompletionEffect(
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput
  ): Promise<QuestObjectiveCompletionEffect | null> {
    const result = await this.service.questObjectiveCompletionEffect({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectiveCompletionEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestObjectiveCompletionEffectUpdateInput,
  })
  async updateQuestObjectiveCompletionEffect(
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput,
    @common.Body() data: QuestObjectiveCompletionEffectUpdateInput
  ): Promise<QuestObjectiveCompletionEffect | null> {
    try {
      return await this.service.updateQuestObjectiveCompletionEffect({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectiveCompletionEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQuestObjectiveCompletionEffect(
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput
  ): Promise<QuestObjectiveCompletionEffect | null> {
    try {
      return await this.service.deleteQuestObjectiveCompletionEffect({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/questObjectives")
  @ApiNestedQuery(QuestObjectiveFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "read",
    possession: "any",
  })
  async findQuestObjectives(
    @common.Req() request: Request,
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput
  ): Promise<QuestObjective[]> {
    const query = plainToClass(QuestObjectiveFindManyArgs, request.query);
    const results = await this.service.findQuestObjectives(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questObjectiveCompletionEffects: {
          select: {
            id: true,
          },
        },

        questObjectiveLocales: {
          select: {
            id: true,
          },
        },

        questPois: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questObjectives")
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "update",
    possession: "any",
  })
  async connectQuestObjectives(
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput,
    @common.Body() body: QuestObjectiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questObjectives: {
        connect: body,
      },
    };
    await this.service.updateQuestObjectiveCompletionEffect({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questObjectives")
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "update",
    possession: "any",
  })
  async updateQuestObjectives(
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput,
    @common.Body() body: QuestObjectiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questObjectives: {
        set: body,
      },
    };
    await this.service.updateQuestObjectiveCompletionEffect({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questObjectives")
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "update",
    possession: "any",
  })
  async disconnectQuestObjectives(
    @common.Param() params: QuestObjectiveCompletionEffectWhereUniqueInput,
    @common.Body() body: QuestObjectiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questObjectives: {
        disconnect: body,
      },
    };
    await this.service.updateQuestObjectiveCompletionEffect({
      where: params,
      data,
      select: { id: true },
    });
  }
}
