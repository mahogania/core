/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestObjectiveCompletionEffect as PrismaQuestObjectiveCompletionEffect,
  QuestObjective as PrismaQuestObjective,
} from "@prisma/client";

export class QuestObjectiveCompletionEffectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestObjectiveCompletionEffectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questObjectiveCompletionEffect.count(args);
  }

  async questObjectiveCompletionEffects(
    args: Prisma.QuestObjectiveCompletionEffectFindManyArgs
  ): Promise<PrismaQuestObjectiveCompletionEffect[]> {
    return this.prisma.questObjectiveCompletionEffect.findMany(args);
  }
  async questObjectiveCompletionEffect(
    args: Prisma.QuestObjectiveCompletionEffectFindUniqueArgs
  ): Promise<PrismaQuestObjectiveCompletionEffect | null> {
    return this.prisma.questObjectiveCompletionEffect.findUnique(args);
  }
  async createQuestObjectiveCompletionEffect(
    args: Prisma.QuestObjectiveCompletionEffectCreateArgs
  ): Promise<PrismaQuestObjectiveCompletionEffect> {
    return this.prisma.questObjectiveCompletionEffect.create(args);
  }
  async updateQuestObjectiveCompletionEffect(
    args: Prisma.QuestObjectiveCompletionEffectUpdateArgs
  ): Promise<PrismaQuestObjectiveCompletionEffect> {
    return this.prisma.questObjectiveCompletionEffect.update(args);
  }
  async deleteQuestObjectiveCompletionEffect(
    args: Prisma.QuestObjectiveCompletionEffectDeleteArgs
  ): Promise<PrismaQuestObjectiveCompletionEffect> {
    return this.prisma.questObjectiveCompletionEffect.delete(args);
  }

  async findQuestObjectives(
    parentId: string,
    args: Prisma.QuestObjectiveFindManyArgs
  ): Promise<PrismaQuestObjective[]> {
    return this.prisma.questObjectiveCompletionEffect
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questObjectives(args);
  }
}
