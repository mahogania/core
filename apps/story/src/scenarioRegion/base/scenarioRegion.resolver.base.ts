/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ScenarioRegion } from "./ScenarioRegion";
import { ScenarioRegionCountArgs } from "./ScenarioRegionCountArgs";
import { ScenarioRegionFindManyArgs } from "./ScenarioRegionFindManyArgs";
import { ScenarioRegionFindUniqueArgs } from "./ScenarioRegionFindUniqueArgs";
import { CreateScenarioRegionArgs } from "./CreateScenarioRegionArgs";
import { UpdateScenarioRegionArgs } from "./UpdateScenarioRegionArgs";
import { DeleteScenarioRegionArgs } from "./DeleteScenarioRegionArgs";
import { ScenarioFindManyArgs } from "../../scenario/base/ScenarioFindManyArgs";
import { Scenario } from "../../scenario/base/Scenario";
import { ScenarioPoi } from "../../scenarioPoi/base/ScenarioPoi";
import { ScenarioRegionService } from "../scenarioRegion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScenarioRegion)
export class ScenarioRegionResolverBase {
  constructor(
    protected readonly service: ScenarioRegionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScenarioRegion",
    action: "read",
    possession: "any",
  })
  async _scenarioRegionsMeta(
    @graphql.Args() args: ScenarioRegionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScenarioRegion])
  @nestAccessControl.UseRoles({
    resource: "ScenarioRegion",
    action: "read",
    possession: "any",
  })
  async scenarioRegions(
    @graphql.Args() args: ScenarioRegionFindManyArgs
  ): Promise<ScenarioRegion[]> {
    return this.service.scenarioRegions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScenarioRegion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScenarioRegion",
    action: "read",
    possession: "own",
  })
  async scenarioRegion(
    @graphql.Args() args: ScenarioRegionFindUniqueArgs
  ): Promise<ScenarioRegion | null> {
    const result = await this.service.scenarioRegion(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScenarioRegion)
  @nestAccessControl.UseRoles({
    resource: "ScenarioRegion",
    action: "create",
    possession: "any",
  })
  async createScenarioRegion(
    @graphql.Args() args: CreateScenarioRegionArgs
  ): Promise<ScenarioRegion> {
    return await this.service.createScenarioRegion({
      ...args,
      data: {
        ...args.data,

        scenarioPois: args.data.scenarioPois
          ? {
              connect: args.data.scenarioPois,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScenarioRegion)
  @nestAccessControl.UseRoles({
    resource: "ScenarioRegion",
    action: "update",
    possession: "any",
  })
  async updateScenarioRegion(
    @graphql.Args() args: UpdateScenarioRegionArgs
  ): Promise<ScenarioRegion | null> {
    try {
      return await this.service.updateScenarioRegion({
        ...args,
        data: {
          ...args.data,

          scenarioPois: args.data.scenarioPois
            ? {
                connect: args.data.scenarioPois,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScenarioRegion)
  @nestAccessControl.UseRoles({
    resource: "ScenarioRegion",
    action: "delete",
    possession: "any",
  })
  async deleteScenarioRegion(
    @graphql.Args() args: DeleteScenarioRegionArgs
  ): Promise<ScenarioRegion | null> {
    try {
      return await this.service.deleteScenarioRegion(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Scenario], { name: "scenarios" })
  @nestAccessControl.UseRoles({
    resource: "Scenario",
    action: "read",
    possession: "any",
  })
  async findScenarios(
    @graphql.Parent() parent: ScenarioRegion,
    @graphql.Args() args: ScenarioFindManyArgs
  ): Promise<Scenario[]> {
    const results = await this.service.findScenarios(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ScenarioPoi, {
    nullable: true,
    name: "scenarioPois",
  })
  @nestAccessControl.UseRoles({
    resource: "ScenarioPoi",
    action: "read",
    possession: "any",
  })
  async getScenarioPois(
    @graphql.Parent() parent: ScenarioRegion
  ): Promise<ScenarioPoi | null> {
    const result = await this.service.getScenarioPois(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
