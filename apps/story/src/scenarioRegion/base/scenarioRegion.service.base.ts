/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ScenarioRegion as PrismaScenarioRegion,
  Scenario as PrismaScenario,
  ScenarioPoi as PrismaScenarioPoi,
} from "@prisma/client";

export class ScenarioRegionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScenarioRegionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scenarioRegion.count(args);
  }

  async scenarioRegions(
    args: Prisma.ScenarioRegionFindManyArgs
  ): Promise<PrismaScenarioRegion[]> {
    return this.prisma.scenarioRegion.findMany(args);
  }
  async scenarioRegion(
    args: Prisma.ScenarioRegionFindUniqueArgs
  ): Promise<PrismaScenarioRegion | null> {
    return this.prisma.scenarioRegion.findUnique(args);
  }
  async createScenarioRegion(
    args: Prisma.ScenarioRegionCreateArgs
  ): Promise<PrismaScenarioRegion> {
    return this.prisma.scenarioRegion.create(args);
  }
  async updateScenarioRegion(
    args: Prisma.ScenarioRegionUpdateArgs
  ): Promise<PrismaScenarioRegion> {
    return this.prisma.scenarioRegion.update(args);
  }
  async deleteScenarioRegion(
    args: Prisma.ScenarioRegionDeleteArgs
  ): Promise<PrismaScenarioRegion> {
    return this.prisma.scenarioRegion.delete(args);
  }

  async findScenarios(
    parentId: string,
    args: Prisma.ScenarioFindManyArgs
  ): Promise<PrismaScenario[]> {
    return this.prisma.scenarioRegion
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scenarios(args);
  }

  async getScenarioPois(parentId: string): Promise<PrismaScenarioPoi | null> {
    return this.prisma.scenarioRegion
      .findUnique({
        where: { id: parentId },
      })
      .scenarioPois();
  }
}
