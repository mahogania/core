/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestRequestItemService } from "../questRequestItem.service";
import { QuestRequestItemCreateInput } from "./QuestRequestItemCreateInput";
import { QuestRequestItemWhereInput } from "./QuestRequestItemWhereInput";
import { QuestRequestItemWhereUniqueInput } from "./QuestRequestItemWhereUniqueInput";
import { QuestRequestItemFindManyArgs } from "./QuestRequestItemFindManyArgs";
import { QuestRequestItemUpdateInput } from "./QuestRequestItemUpdateInput";
import { QuestRequestItem } from "./QuestRequestItem";
import { QuestRequestItemConditionalFindManyArgs } from "../../questRequestItemConditional/base/QuestRequestItemConditionalFindManyArgs";
import { QuestRequestItemConditional } from "../../questRequestItemConditional/base/QuestRequestItemConditional";
import { QuestRequestItemConditionalWhereUniqueInput } from "../../questRequestItemConditional/base/QuestRequestItemConditionalWhereUniqueInput";
import { QuestRequestItemsLocaleFindManyArgs } from "../../questRequestItemsLocale/base/QuestRequestItemsLocaleFindManyArgs";
import { QuestRequestItemsLocale } from "../../questRequestItemsLocale/base/QuestRequestItemsLocale";
import { QuestRequestItemsLocaleWhereUniqueInput } from "../../questRequestItemsLocale/base/QuestRequestItemsLocaleWhereUniqueInput";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestTemplateWhereUniqueInput } from "../../questTemplate/base/QuestTemplateWhereUniqueInput";

export class QuestRequestItemGrpcControllerBase {
  constructor(protected readonly service: QuestRequestItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestRequestItem })
  @GrpcMethod("QuestRequestItemService", "createQuestRequestItem")
  async createQuestRequestItem(
    @common.Body() data: QuestRequestItemCreateInput
  ): Promise<QuestRequestItem> {
    return await this.service.createQuestRequestItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestRequestItem] })
  @ApiNestedQuery(QuestRequestItemFindManyArgs)
  @GrpcMethod("QuestRequestItemService", "questRequestItems")
  async questRequestItems(
    @common.Req() request: Request
  ): Promise<QuestRequestItem[]> {
    const args = plainToClass(QuestRequestItemFindManyArgs, request.query);
    return this.service.questRequestItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestRequestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestRequestItemService", "questRequestItem")
  async questRequestItem(
    @common.Param() params: QuestRequestItemWhereUniqueInput
  ): Promise<QuestRequestItem | null> {
    const result = await this.service.questRequestItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestRequestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestRequestItemService", "updateQuestRequestItem")
  async updateQuestRequestItem(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() data: QuestRequestItemUpdateInput
  ): Promise<QuestRequestItem | null> {
    try {
      return await this.service.updateQuestRequestItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestRequestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestRequestItemService", "deleteQuestRequestItem")
  async deleteQuestRequestItem(
    @common.Param() params: QuestRequestItemWhereUniqueInput
  ): Promise<QuestRequestItem | null> {
    try {
      return await this.service.deleteQuestRequestItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questRequestItemConditionals")
  @ApiNestedQuery(QuestRequestItemConditionalFindManyArgs)
  @GrpcMethod("QuestRequestItemService", "findManyQuestRequestItemConditionals")
  async findManyQuestRequestItemConditionals(
    @common.Req() request: Request,
    @common.Param() params: QuestRequestItemWhereUniqueInput
  ): Promise<QuestRequestItemConditional[]> {
    const query = plainToClass(
      QuestRequestItemConditionalFindManyArgs,
      request.query
    );
    const results = await this.service.findQuestRequestItemConditionals(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,

          questRequestItem: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questRequestItemConditionals")
  @GrpcMethod("QuestRequestItemService", "connectQuestRequestItemConditionals")
  async connectQuestRequestItemConditionals(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestRequestItemConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questRequestItemConditionals: {
        connect: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questRequestItemConditionals")
  @GrpcMethod("QuestRequestItemService", "updateQuestRequestItemConditionals")
  async updateQuestRequestItemConditionals(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestRequestItemConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questRequestItemConditionals: {
        set: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questRequestItemConditionals")
  @GrpcMethod(
    "QuestRequestItemService",
    "disconnectQuestRequestItemConditionals"
  )
  async disconnectQuestRequestItemConditionals(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestRequestItemConditionalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questRequestItemConditionals: {
        disconnect: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/questRequestItemsLocales")
  @ApiNestedQuery(QuestRequestItemsLocaleFindManyArgs)
  @GrpcMethod("QuestRequestItemService", "findManyQuestRequestItemsLocales")
  async findManyQuestRequestItemsLocales(
    @common.Req() request: Request,
    @common.Param() params: QuestRequestItemWhereUniqueInput
  ): Promise<QuestRequestItemsLocale[]> {
    const query = plainToClass(
      QuestRequestItemsLocaleFindManyArgs,
      request.query
    );
    const results = await this.service.findQuestRequestItemsLocales(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questRequestItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questRequestItemsLocales")
  @GrpcMethod("QuestRequestItemService", "connectQuestRequestItemsLocales")
  async connectQuestRequestItemsLocales(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestRequestItemsLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questRequestItemsLocales: {
        connect: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questRequestItemsLocales")
  @GrpcMethod("QuestRequestItemService", "updateQuestRequestItemsLocales")
  async updateQuestRequestItemsLocales(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestRequestItemsLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questRequestItemsLocales: {
        set: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questRequestItemsLocales")
  @GrpcMethod("QuestRequestItemService", "disconnectQuestRequestItemsLocales")
  async disconnectQuestRequestItemsLocales(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestRequestItemsLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questRequestItemsLocales: {
        disconnect: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/questTemplates")
  @ApiNestedQuery(QuestTemplateFindManyArgs)
  @GrpcMethod("QuestRequestItemService", "findManyQuestTemplates")
  async findManyQuestTemplates(
    @common.Req() request: Request,
    @common.Param() params: QuestRequestItemWhereUniqueInput
  ): Promise<QuestTemplate[]> {
    const query = plainToClass(QuestTemplateFindManyArgs, request.query);
    const results = await this.service.findQuestTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questMails: {
          select: {
            id: true,
          },
        },

        questObjectives: {
          select: {
            id: true,
          },
        },

        questOfferRewards: {
          select: {
            id: true,
          },
        },

        questPools: {
          select: {
            id: true,
          },
        },

        questRequestItems: {
          select: {
            id: true,
          },
        },

        questTemplateLocale: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questTemplates")
  @GrpcMethod("QuestRequestItemService", "connectQuestTemplates")
  async connectQuestTemplates(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        connect: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questTemplates")
  @GrpcMethod("QuestRequestItemService", "updateQuestTemplates")
  async updateQuestTemplates(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        set: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questTemplates")
  @GrpcMethod("QuestRequestItemService", "disconnectQuestTemplates")
  async disconnectQuestTemplates(
    @common.Param() params: QuestRequestItemWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateQuestRequestItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
