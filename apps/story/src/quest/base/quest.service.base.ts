/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Quest as PrismaQuest,
  AreaQuestTrigger as PrismaAreaQuestTrigger,
  QuestCompletionConditional as PrismaQuestCompletionConditional,
  QuestDescriptionConditional as PrismaQuestDescriptionConditional,
  Epic as PrismaEpic,
  QuestCueEffect as PrismaQuestCueEffect,
  QuestDetail as PrismaQuestDetail,
  QuestGreeting as PrismaQuestGreeting,
  QuestTemplate as PrismaQuestTemplate,
  User as PrismaUser,
} from "@prisma/client";

export class QuestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QuestCountArgs, "select">): Promise<number> {
    return this.prisma.quest.count(args);
  }

  async quests(args: Prisma.QuestFindManyArgs): Promise<PrismaQuest[]> {
    return this.prisma.quest.findMany(args);
  }
  async quest(args: Prisma.QuestFindUniqueArgs): Promise<PrismaQuest | null> {
    return this.prisma.quest.findUnique(args);
  }
  async createQuest(args: Prisma.QuestCreateArgs): Promise<PrismaQuest> {
    return this.prisma.quest.create(args);
  }
  async updateQuest(args: Prisma.QuestUpdateArgs): Promise<PrismaQuest> {
    return this.prisma.quest.update(args);
  }
  async deleteQuest(args: Prisma.QuestDeleteArgs): Promise<PrismaQuest> {
    return this.prisma.quest.delete(args);
  }

  async findAreaQuestTriggers(
    parentId: string,
    args: Prisma.AreaQuestTriggerFindManyArgs
  ): Promise<PrismaAreaQuestTrigger[]> {
    return this.prisma.quest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .areaQuestTriggers(args);
  }

  async findQuestCompletionConditionals(
    parentId: string,
    args: Prisma.QuestCompletionConditionalFindManyArgs
  ): Promise<PrismaQuestCompletionConditional[]> {
    return this.prisma.quest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questCompletionConditionals(args);
  }

  async findQuestDescriptionConditionals(
    parentId: string,
    args: Prisma.QuestDescriptionConditionalFindManyArgs
  ): Promise<PrismaQuestDescriptionConditional[]> {
    return this.prisma.quest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questDescriptionConditionals(args);
  }

  async getEpic(parentId: string): Promise<PrismaEpic | null> {
    return this.prisma.quest
      .findUnique({
        where: { id: parentId },
      })
      .epic();
  }

  async getQuestCueEffects(
    parentId: string
  ): Promise<PrismaQuestCueEffect | null> {
    return this.prisma.quest
      .findUnique({
        where: { id: parentId },
      })
      .questCueEffects();
  }

  async getQuestDetails(parentId: string): Promise<PrismaQuestDetail | null> {
    return this.prisma.quest
      .findUnique({
        where: { id: parentId },
      })
      .questDetails();
  }

  async getQuestGreeting(
    parentId: string
  ): Promise<PrismaQuestGreeting | null> {
    return this.prisma.quest
      .findUnique({
        where: { id: parentId },
      })
      .questGreeting();
  }

  async getQuestTemplate(
    parentId: string
  ): Promise<PrismaQuestTemplate | null> {
    return this.prisma.quest
      .findUnique({
        where: { id: parentId },
      })
      .questTemplate();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.quest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
