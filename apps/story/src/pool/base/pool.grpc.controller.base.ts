/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PoolService } from "../pool.service";
import { PoolCreateInput } from "./PoolCreateInput";
import { PoolWhereInput } from "./PoolWhereInput";
import { PoolWhereUniqueInput } from "./PoolWhereUniqueInput";
import { PoolFindManyArgs } from "./PoolFindManyArgs";
import { PoolUpdateInput } from "./PoolUpdateInput";
import { Pool } from "./Pool";
import { QuestPoolFindManyArgs } from "../../questPool/base/QuestPoolFindManyArgs";
import { QuestPool } from "../../questPool/base/QuestPool";
import { QuestPoolWhereUniqueInput } from "../../questPool/base/QuestPoolWhereUniqueInput";

export class PoolGrpcControllerBase {
  constructor(protected readonly service: PoolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pool })
  @GrpcMethod("PoolService", "createPool")
  async createPool(@common.Body() data: PoolCreateInput): Promise<Pool> {
    return await this.service.createPool({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pool] })
  @ApiNestedQuery(PoolFindManyArgs)
  @GrpcMethod("PoolService", "pools")
  async pools(@common.Req() request: Request): Promise<Pool[]> {
    const args = plainToClass(PoolFindManyArgs, request.query);
    return this.service.pools({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PoolService", "pool")
  async pool(
    @common.Param() params: PoolWhereUniqueInput
  ): Promise<Pool | null> {
    const result = await this.service.pool({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PoolService", "updatePool")
  async updatePool(
    @common.Param() params: PoolWhereUniqueInput,
    @common.Body() data: PoolUpdateInput
  ): Promise<Pool | null> {
    try {
      return await this.service.updatePool({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PoolService", "deletePool")
  async deletePool(
    @common.Param() params: PoolWhereUniqueInput
  ): Promise<Pool | null> {
    try {
      return await this.service.deletePool({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questPool")
  @ApiNestedQuery(QuestPoolFindManyArgs)
  @GrpcMethod("PoolService", "findManyQuestPool")
  async findManyQuestPool(
    @common.Req() request: Request,
    @common.Param() params: PoolWhereUniqueInput
  ): Promise<QuestPool[]> {
    const query = plainToClass(QuestPoolFindManyArgs, request.query);
    const results = await this.service.findQuestPool(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        pool: {
          select: {
            id: true,
          },
        },

        questPoolMembers: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questPool")
  @GrpcMethod("PoolService", "connectQuestPool")
  async connectQuestPool(
    @common.Param() params: PoolWhereUniqueInput,
    @common.Body() body: QuestPoolWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPool: {
        connect: body,
      },
    };
    await this.service.updatePool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questPool")
  @GrpcMethod("PoolService", "updateQuestPool")
  async updateQuestPool(
    @common.Param() params: PoolWhereUniqueInput,
    @common.Body() body: QuestPoolWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPool: {
        set: body,
      },
    };
    await this.service.updatePool({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questPool")
  @GrpcMethod("PoolService", "disconnectQuestPool")
  async disconnectQuestPool(
    @common.Param() params: PoolWhereUniqueInput,
    @common.Body() body: QuestPoolWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPool: {
        disconnect: body,
      },
    };
    await this.service.updatePool({
      where: params,
      data,
      select: { id: true },
    });
  }
}
