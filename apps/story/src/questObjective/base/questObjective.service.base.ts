/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestObjective as PrismaQuestObjective,
  QuestTemplate as PrismaQuestTemplate,
  QuestObjectiveCompletionEffect as PrismaQuestObjectiveCompletionEffect,
  QuestObjectiveLocale as PrismaQuestObjectiveLocale,
  QuestRegion as PrismaQuestRegion,
} from "@prisma/client";

export class QuestObjectiveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestObjectiveCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questObjective.count(args);
  }

  async questObjectives(
    args: Prisma.QuestObjectiveFindManyArgs
  ): Promise<PrismaQuestObjective[]> {
    return this.prisma.questObjective.findMany(args);
  }
  async questObjective(
    args: Prisma.QuestObjectiveFindUniqueArgs
  ): Promise<PrismaQuestObjective | null> {
    return this.prisma.questObjective.findUnique(args);
  }
  async createQuestObjective(
    args: Prisma.QuestObjectiveCreateArgs
  ): Promise<PrismaQuestObjective> {
    return this.prisma.questObjective.create(args);
  }
  async updateQuestObjective(
    args: Prisma.QuestObjectiveUpdateArgs
  ): Promise<PrismaQuestObjective> {
    return this.prisma.questObjective.update(args);
  }
  async deleteQuestObjective(
    args: Prisma.QuestObjectiveDeleteArgs
  ): Promise<PrismaQuestObjective> {
    return this.prisma.questObjective.delete(args);
  }

  async findQuestTemplates(
    parentId: string,
    args: Prisma.QuestTemplateFindManyArgs
  ): Promise<PrismaQuestTemplate[]> {
    return this.prisma.questObjective
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questTemplates(args);
  }

  async getQuestObjectiveCompletionEffects(
    parentId: string
  ): Promise<PrismaQuestObjectiveCompletionEffect | null> {
    return this.prisma.questObjective
      .findUnique({
        where: { id: parentId },
      })
      .questObjectiveCompletionEffects();
  }

  async getQuestObjectiveLocales(
    parentId: string
  ): Promise<PrismaQuestObjectiveLocale | null> {
    return this.prisma.questObjective
      .findUnique({
        where: { id: parentId },
      })
      .questObjectiveLocales();
  }

  async getQuestPois(parentId: string): Promise<PrismaQuestRegion | null> {
    return this.prisma.questObjective
      .findUnique({
        where: { id: parentId },
      })
      .questPois();
  }
}
