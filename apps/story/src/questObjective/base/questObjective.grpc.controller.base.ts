/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestObjectiveService } from "../questObjective.service";
import { QuestObjectiveCreateInput } from "./QuestObjectiveCreateInput";
import { QuestObjectiveWhereInput } from "./QuestObjectiveWhereInput";
import { QuestObjectiveWhereUniqueInput } from "./QuestObjectiveWhereUniqueInput";
import { QuestObjectiveFindManyArgs } from "./QuestObjectiveFindManyArgs";
import { QuestObjectiveUpdateInput } from "./QuestObjectiveUpdateInput";
import { QuestObjective } from "./QuestObjective";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestTemplateWhereUniqueInput } from "../../questTemplate/base/QuestTemplateWhereUniqueInput";

export class QuestObjectiveGrpcControllerBase {
  constructor(protected readonly service: QuestObjectiveService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestObjective })
  @GrpcMethod("QuestObjectiveService", "createQuestObjective")
  async createQuestObjective(
    @common.Body() data: QuestObjectiveCreateInput
  ): Promise<QuestObjective> {
    return await this.service.createQuestObjective({
      data: {
        ...data,

        questObjectiveCompletionEffects: data.questObjectiveCompletionEffects
          ? {
              connect: data.questObjectiveCompletionEffects,
            }
          : undefined,

        questObjectiveLocales: data.questObjectiveLocales
          ? {
              connect: data.questObjectiveLocales,
            }
          : undefined,

        questPois: data.questPois
          ? {
              connect: data.questPois,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        questObjectiveCompletionEffects: {
          select: {
            id: true,
          },
        },

        questObjectiveLocales: {
          select: {
            id: true,
          },
        },

        questPois: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestObjective] })
  @ApiNestedQuery(QuestObjectiveFindManyArgs)
  @GrpcMethod("QuestObjectiveService", "questObjectives")
  async questObjectives(
    @common.Req() request: Request
  ): Promise<QuestObjective[]> {
    const args = plainToClass(QuestObjectiveFindManyArgs, request.query);
    return this.service.questObjectives({
      ...args,
      select: {
        createdAt: true,
        id: true,

        questObjectiveCompletionEffects: {
          select: {
            id: true,
          },
        },

        questObjectiveLocales: {
          select: {
            id: true,
          },
        },

        questPois: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestObjective })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectiveService", "questObjective")
  async questObjective(
    @common.Param() params: QuestObjectiveWhereUniqueInput
  ): Promise<QuestObjective | null> {
    const result = await this.service.questObjective({
      where: params,
      select: {
        createdAt: true,
        id: true,

        questObjectiveCompletionEffects: {
          select: {
            id: true,
          },
        },

        questObjectiveLocales: {
          select: {
            id: true,
          },
        },

        questPois: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestObjective })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectiveService", "updateQuestObjective")
  async updateQuestObjective(
    @common.Param() params: QuestObjectiveWhereUniqueInput,
    @common.Body() data: QuestObjectiveUpdateInput
  ): Promise<QuestObjective | null> {
    try {
      return await this.service.updateQuestObjective({
        where: params,
        data: {
          ...data,

          questObjectiveCompletionEffects: data.questObjectiveCompletionEffects
            ? {
                connect: data.questObjectiveCompletionEffects,
              }
            : undefined,

          questObjectiveLocales: data.questObjectiveLocales
            ? {
                connect: data.questObjectiveLocales,
              }
            : undefined,

          questPois: data.questPois
            ? {
                connect: data.questPois,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          questObjectiveCompletionEffects: {
            select: {
              id: true,
            },
          },

          questObjectiveLocales: {
            select: {
              id: true,
            },
          },

          questPois: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestObjective })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectiveService", "deleteQuestObjective")
  async deleteQuestObjective(
    @common.Param() params: QuestObjectiveWhereUniqueInput
  ): Promise<QuestObjective | null> {
    try {
      return await this.service.deleteQuestObjective({
        where: params,
        select: {
          createdAt: true,
          id: true,

          questObjectiveCompletionEffects: {
            select: {
              id: true,
            },
          },

          questObjectiveLocales: {
            select: {
              id: true,
            },
          },

          questPois: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questTemplates")
  @ApiNestedQuery(QuestTemplateFindManyArgs)
  @GrpcMethod("QuestObjectiveService", "findManyQuestTemplates")
  async findManyQuestTemplates(
    @common.Req() request: Request,
    @common.Param() params: QuestObjectiveWhereUniqueInput
  ): Promise<QuestTemplate[]> {
    const query = plainToClass(QuestTemplateFindManyArgs, request.query);
    const results = await this.service.findQuestTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        questMails: {
          select: {
            id: true,
          },
        },

        questObjectives: {
          select: {
            id: true,
          },
        },

        questOfferRewards: {
          select: {
            id: true,
          },
        },

        questPools: {
          select: {
            id: true,
          },
        },

        questRequestItems: {
          select: {
            id: true,
          },
        },

        questTemplateLocale: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questTemplates")
  @GrpcMethod("QuestObjectiveService", "connectQuestTemplates")
  async connectQuestTemplates(
    @common.Param() params: QuestObjectiveWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        connect: body,
      },
    };
    await this.service.updateQuestObjective({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questTemplates")
  @GrpcMethod("QuestObjectiveService", "updateQuestTemplates")
  async updateQuestTemplates(
    @common.Param() params: QuestObjectiveWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        set: body,
      },
    };
    await this.service.updateQuestObjective({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questTemplates")
  @GrpcMethod("QuestObjectiveService", "disconnectQuestTemplates")
  async disconnectQuestTemplates(
    @common.Param() params: QuestObjectiveWhereUniqueInput,
    @common.Body() body: QuestTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateQuestObjective({
      where: params,
      data,
      select: { id: true },
    });
  }
}
