/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestObjective } from "./QuestObjective";
import { QuestObjectiveCountArgs } from "./QuestObjectiveCountArgs";
import { QuestObjectiveFindManyArgs } from "./QuestObjectiveFindManyArgs";
import { QuestObjectiveFindUniqueArgs } from "./QuestObjectiveFindUniqueArgs";
import { CreateQuestObjectiveArgs } from "./CreateQuestObjectiveArgs";
import { UpdateQuestObjectiveArgs } from "./UpdateQuestObjectiveArgs";
import { DeleteQuestObjectiveArgs } from "./DeleteQuestObjectiveArgs";
import { QuestTemplateFindManyArgs } from "../../questTemplate/base/QuestTemplateFindManyArgs";
import { QuestTemplate } from "../../questTemplate/base/QuestTemplate";
import { QuestObjectiveCompletionEffect } from "../../questObjectiveCompletionEffect/base/QuestObjectiveCompletionEffect";
import { QuestObjectiveLocale } from "../../questObjectiveLocale/base/QuestObjectiveLocale";
import { QuestRegion } from "../../questRegion/base/QuestRegion";
import { QuestObjectiveService } from "../questObjective.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestObjective)
export class QuestObjectiveResolverBase {
  constructor(
    protected readonly service: QuestObjectiveService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "read",
    possession: "any",
  })
  async _questObjectivesMeta(
    @graphql.Args() args: QuestObjectiveCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestObjective])
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "read",
    possession: "any",
  })
  async questObjectives(
    @graphql.Args() args: QuestObjectiveFindManyArgs
  ): Promise<QuestObjective[]> {
    return this.service.questObjectives(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestObjective, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "read",
    possession: "own",
  })
  async questObjective(
    @graphql.Args() args: QuestObjectiveFindUniqueArgs
  ): Promise<QuestObjective | null> {
    const result = await this.service.questObjective(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestObjective)
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "create",
    possession: "any",
  })
  async createQuestObjective(
    @graphql.Args() args: CreateQuestObjectiveArgs
  ): Promise<QuestObjective> {
    return await this.service.createQuestObjective({
      ...args,
      data: {
        ...args.data,

        questObjectiveCompletionEffects: args.data
          .questObjectiveCompletionEffects
          ? {
              connect: args.data.questObjectiveCompletionEffects,
            }
          : undefined,

        questObjectiveLocales: args.data.questObjectiveLocales
          ? {
              connect: args.data.questObjectiveLocales,
            }
          : undefined,

        questPois: args.data.questPois
          ? {
              connect: args.data.questPois,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestObjective)
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "update",
    possession: "any",
  })
  async updateQuestObjective(
    @graphql.Args() args: UpdateQuestObjectiveArgs
  ): Promise<QuestObjective | null> {
    try {
      return await this.service.updateQuestObjective({
        ...args,
        data: {
          ...args.data,

          questObjectiveCompletionEffects: args.data
            .questObjectiveCompletionEffects
            ? {
                connect: args.data.questObjectiveCompletionEffects,
              }
            : undefined,

          questObjectiveLocales: args.data.questObjectiveLocales
            ? {
                connect: args.data.questObjectiveLocales,
              }
            : undefined,

          questPois: args.data.questPois
            ? {
                connect: args.data.questPois,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestObjective)
  @nestAccessControl.UseRoles({
    resource: "QuestObjective",
    action: "delete",
    possession: "any",
  })
  async deleteQuestObjective(
    @graphql.Args() args: DeleteQuestObjectiveArgs
  ): Promise<QuestObjective | null> {
    try {
      return await this.service.deleteQuestObjective(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestTemplate], { name: "questTemplates" })
  @nestAccessControl.UseRoles({
    resource: "QuestTemplate",
    action: "read",
    possession: "any",
  })
  async findQuestTemplates(
    @graphql.Parent() parent: QuestObjective,
    @graphql.Args() args: QuestTemplateFindManyArgs
  ): Promise<QuestTemplate[]> {
    const results = await this.service.findQuestTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestObjectiveCompletionEffect, {
    nullable: true,
    name: "questObjectiveCompletionEffects",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveCompletionEffect",
    action: "read",
    possession: "any",
  })
  async getQuestObjectiveCompletionEffects(
    @graphql.Parent() parent: QuestObjective
  ): Promise<QuestObjectiveCompletionEffect | null> {
    const result = await this.service.getQuestObjectiveCompletionEffects(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestObjectiveLocale, {
    nullable: true,
    name: "questObjectiveLocales",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectiveLocale",
    action: "read",
    possession: "any",
  })
  async getQuestObjectiveLocales(
    @graphql.Parent() parent: QuestObjective
  ): Promise<QuestObjectiveLocale | null> {
    const result = await this.service.getQuestObjectiveLocales(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => QuestRegion, {
    nullable: true,
    name: "questPois",
  })
  @nestAccessControl.UseRoles({
    resource: "QuestRegion",
    action: "read",
    possession: "any",
  })
  async getQuestPois(
    @graphql.Parent() parent: QuestObjective
  ): Promise<QuestRegion | null> {
    const result = await this.service.getQuestPois(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
