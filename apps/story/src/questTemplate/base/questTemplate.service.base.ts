/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestTemplate as PrismaQuestTemplate,
  Quest as PrismaQuest,
  QuestMail as PrismaQuestMail,
  QuestObjective as PrismaQuestObjective,
  QuestOfferReward as PrismaQuestOfferReward,
  QuestPool as PrismaQuestPool,
  QuestRequestItem as PrismaQuestRequestItem,
  QuestTemplateLocale as PrismaQuestTemplateLocale,
} from "@prisma/client";

export class QuestTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questTemplate.count(args);
  }

  async questTemplates(
    args: Prisma.QuestTemplateFindManyArgs
  ): Promise<PrismaQuestTemplate[]> {
    return this.prisma.questTemplate.findMany(args);
  }
  async questTemplate(
    args: Prisma.QuestTemplateFindUniqueArgs
  ): Promise<PrismaQuestTemplate | null> {
    return this.prisma.questTemplate.findUnique(args);
  }
  async createQuestTemplate(
    args: Prisma.QuestTemplateCreateArgs
  ): Promise<PrismaQuestTemplate> {
    return this.prisma.questTemplate.create(args);
  }
  async updateQuestTemplate(
    args: Prisma.QuestTemplateUpdateArgs
  ): Promise<PrismaQuestTemplate> {
    return this.prisma.questTemplate.update(args);
  }
  async deleteQuestTemplate(
    args: Prisma.QuestTemplateDeleteArgs
  ): Promise<PrismaQuestTemplate> {
    return this.prisma.questTemplate.delete(args);
  }

  async findQuests(
    parentId: string,
    args: Prisma.QuestFindManyArgs
  ): Promise<PrismaQuest[]> {
    return this.prisma.questTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .quests(args);
  }

  async getQuestMails(parentId: string): Promise<PrismaQuestMail | null> {
    return this.prisma.questTemplate
      .findUnique({
        where: { id: parentId },
      })
      .questMails();
  }

  async getQuestObjectives(
    parentId: string
  ): Promise<PrismaQuestObjective | null> {
    return this.prisma.questTemplate
      .findUnique({
        where: { id: parentId },
      })
      .questObjectives();
  }

  async getQuestOfferRewards(
    parentId: string
  ): Promise<PrismaQuestOfferReward | null> {
    return this.prisma.questTemplate
      .findUnique({
        where: { id: parentId },
      })
      .questOfferRewards();
  }

  async getQuestPools(parentId: string): Promise<PrismaQuestPool | null> {
    return this.prisma.questTemplate
      .findUnique({
        where: { id: parentId },
      })
      .questPools();
  }

  async getQuestRequestItems(
    parentId: string
  ): Promise<PrismaQuestRequestItem | null> {
    return this.prisma.questTemplate
      .findUnique({
        where: { id: parentId },
      })
      .questRequestItems();
  }

  async getQuestTemplateLocale(
    parentId: string
  ): Promise<PrismaQuestTemplateLocale | null> {
    return this.prisma.questTemplate
      .findUnique({
        where: { id: parentId },
      })
      .questTemplateLocale();
  }
}
