/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PoolMember } from "./PoolMember";
import { PoolMemberCountArgs } from "./PoolMemberCountArgs";
import { PoolMemberFindManyArgs } from "./PoolMemberFindManyArgs";
import { PoolMemberFindUniqueArgs } from "./PoolMemberFindUniqueArgs";
import { CreatePoolMemberArgs } from "./CreatePoolMemberArgs";
import { UpdatePoolMemberArgs } from "./UpdatePoolMemberArgs";
import { DeletePoolMemberArgs } from "./DeletePoolMemberArgs";
import { QuestPoolMemberFindManyArgs } from "../../questPoolMember/base/QuestPoolMemberFindManyArgs";
import { QuestPoolMember } from "../../questPoolMember/base/QuestPoolMember";
import { PoolMemberService } from "../poolMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PoolMember)
export class PoolMemberResolverBase {
  constructor(
    protected readonly service: PoolMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PoolMember",
    action: "read",
    possession: "any",
  })
  async _poolMembersMeta(
    @graphql.Args() args: PoolMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PoolMember])
  @nestAccessControl.UseRoles({
    resource: "PoolMember",
    action: "read",
    possession: "any",
  })
  async poolMembers(
    @graphql.Args() args: PoolMemberFindManyArgs
  ): Promise<PoolMember[]> {
    return this.service.poolMembers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PoolMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoolMember",
    action: "read",
    possession: "own",
  })
  async poolMember(
    @graphql.Args() args: PoolMemberFindUniqueArgs
  ): Promise<PoolMember | null> {
    const result = await this.service.poolMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoolMember)
  @nestAccessControl.UseRoles({
    resource: "PoolMember",
    action: "create",
    possession: "any",
  })
  async createPoolMember(
    @graphql.Args() args: CreatePoolMemberArgs
  ): Promise<PoolMember> {
    return await this.service.createPoolMember({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoolMember)
  @nestAccessControl.UseRoles({
    resource: "PoolMember",
    action: "update",
    possession: "any",
  })
  async updatePoolMember(
    @graphql.Args() args: UpdatePoolMemberArgs
  ): Promise<PoolMember | null> {
    try {
      return await this.service.updatePoolMember({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoolMember)
  @nestAccessControl.UseRoles({
    resource: "PoolMember",
    action: "delete",
    possession: "any",
  })
  async deletePoolMember(
    @graphql.Args() args: DeletePoolMemberArgs
  ): Promise<PoolMember | null> {
    try {
      return await this.service.deletePoolMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestPoolMember], { name: "questPoolMembers" })
  @nestAccessControl.UseRoles({
    resource: "QuestPoolMember",
    action: "read",
    possession: "any",
  })
  async findQuestPoolMembers(
    @graphql.Parent() parent: PoolMember,
    @graphql.Args() args: QuestPoolMemberFindManyArgs
  ): Promise<QuestPoolMember[]> {
    const results = await this.service.findQuestPoolMembers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
