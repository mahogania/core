/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PoolMember as PrismaPoolMember,
  QuestPoolMember as PrismaQuestPoolMember,
} from "@prisma/client";

export class PoolMemberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PoolMemberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.poolMember.count(args);
  }

  async poolMembers(
    args: Prisma.PoolMemberFindManyArgs
  ): Promise<PrismaPoolMember[]> {
    return this.prisma.poolMember.findMany(args);
  }
  async poolMember(
    args: Prisma.PoolMemberFindUniqueArgs
  ): Promise<PrismaPoolMember | null> {
    return this.prisma.poolMember.findUnique(args);
  }
  async createPoolMember(
    args: Prisma.PoolMemberCreateArgs
  ): Promise<PrismaPoolMember> {
    return this.prisma.poolMember.create(args);
  }
  async updatePoolMember(
    args: Prisma.PoolMemberUpdateArgs
  ): Promise<PrismaPoolMember> {
    return this.prisma.poolMember.update(args);
  }
  async deletePoolMember(
    args: Prisma.PoolMemberDeleteArgs
  ): Promise<PrismaPoolMember> {
    return this.prisma.poolMember.delete(args);
  }

  async findQuestPoolMembers(
    parentId: string,
    args: Prisma.QuestPoolMemberFindManyArgs
  ): Promise<PrismaQuestPoolMember[]> {
    return this.prisma.poolMember
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questPoolMembers(args);
  }
}
