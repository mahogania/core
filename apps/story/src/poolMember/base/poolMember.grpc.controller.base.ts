/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PoolMemberService } from "../poolMember.service";
import { PoolMemberCreateInput } from "./PoolMemberCreateInput";
import { PoolMemberWhereInput } from "./PoolMemberWhereInput";
import { PoolMemberWhereUniqueInput } from "./PoolMemberWhereUniqueInput";
import { PoolMemberFindManyArgs } from "./PoolMemberFindManyArgs";
import { PoolMemberUpdateInput } from "./PoolMemberUpdateInput";
import { PoolMember } from "./PoolMember";
import { QuestPoolMemberFindManyArgs } from "../../questPoolMember/base/QuestPoolMemberFindManyArgs";
import { QuestPoolMember } from "../../questPoolMember/base/QuestPoolMember";
import { QuestPoolMemberWhereUniqueInput } from "../../questPoolMember/base/QuestPoolMemberWhereUniqueInput";

export class PoolMemberGrpcControllerBase {
  constructor(protected readonly service: PoolMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PoolMember })
  @GrpcMethod("PoolMemberService", "createPoolMember")
  async createPoolMember(
    @common.Body() data: PoolMemberCreateInput
  ): Promise<PoolMember> {
    return await this.service.createPoolMember({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PoolMember] })
  @ApiNestedQuery(PoolMemberFindManyArgs)
  @GrpcMethod("PoolMemberService", "poolMembers")
  async poolMembers(@common.Req() request: Request): Promise<PoolMember[]> {
    const args = plainToClass(PoolMemberFindManyArgs, request.query);
    return this.service.poolMembers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PoolMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PoolMemberService", "poolMember")
  async poolMember(
    @common.Param() params: PoolMemberWhereUniqueInput
  ): Promise<PoolMember | null> {
    const result = await this.service.poolMember({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PoolMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PoolMemberService", "updatePoolMember")
  async updatePoolMember(
    @common.Param() params: PoolMemberWhereUniqueInput,
    @common.Body() data: PoolMemberUpdateInput
  ): Promise<PoolMember | null> {
    try {
      return await this.service.updatePoolMember({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PoolMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PoolMemberService", "deletePoolMember")
  async deletePoolMember(
    @common.Param() params: PoolMemberWhereUniqueInput
  ): Promise<PoolMember | null> {
    try {
      return await this.service.deletePoolMember({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questPoolMembers")
  @ApiNestedQuery(QuestPoolMemberFindManyArgs)
  @GrpcMethod("PoolMemberService", "findManyQuestPoolMembers")
  async findManyQuestPoolMembers(
    @common.Req() request: Request,
    @common.Param() params: PoolMemberWhereUniqueInput
  ): Promise<QuestPoolMember[]> {
    const query = plainToClass(QuestPoolMemberFindManyArgs, request.query);
    const results = await this.service.findQuestPoolMembers(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        poolMember: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questPoolMembers")
  @GrpcMethod("PoolMemberService", "connectQuestPoolMembers")
  async connectQuestPoolMembers(
    @common.Param() params: PoolMemberWhereUniqueInput,
    @common.Body() body: QuestPoolMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPoolMembers: {
        connect: body,
      },
    };
    await this.service.updatePoolMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questPoolMembers")
  @GrpcMethod("PoolMemberService", "updateQuestPoolMembers")
  async updateQuestPoolMembers(
    @common.Param() params: PoolMemberWhereUniqueInput,
    @common.Body() body: QuestPoolMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPoolMembers: {
        set: body,
      },
    };
    await this.service.updatePoolMember({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questPoolMembers")
  @GrpcMethod("PoolMemberService", "disconnectQuestPoolMembers")
  async disconnectQuestPoolMembers(
    @common.Param() params: PoolMemberWhereUniqueInput,
    @common.Body() body: QuestPoolMemberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questPoolMembers: {
        disconnect: body,
      },
    };
    await this.service.updatePoolMember({
      where: params,
      data,
      select: { id: true },
    });
  }
}
