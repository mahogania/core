/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailAccount } from "./EmailAccount";
import { EmailAccountCountArgs } from "./EmailAccountCountArgs";
import { EmailAccountFindManyArgs } from "./EmailAccountFindManyArgs";
import { EmailAccountFindUniqueArgs } from "./EmailAccountFindUniqueArgs";
import { CreateEmailAccountArgs } from "./CreateEmailAccountArgs";
import { UpdateEmailAccountArgs } from "./UpdateEmailAccountArgs";
import { DeleteEmailAccountArgs } from "./DeleteEmailAccountArgs";
import { EmailAccountService } from "../emailAccount.service";
@graphql.Resolver(() => EmailAccount)
export class EmailAccountResolverBase {
  constructor(protected readonly service: EmailAccountService) {}

  async _emailAccountsMeta(
    @graphql.Args() args: EmailAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailAccount])
  async emailAccounts(
    @graphql.Args() args: EmailAccountFindManyArgs
  ): Promise<EmailAccount[]> {
    return this.service.emailAccounts(args);
  }

  @graphql.Query(() => EmailAccount, { nullable: true })
  async emailAccount(
    @graphql.Args() args: EmailAccountFindUniqueArgs
  ): Promise<EmailAccount | null> {
    const result = await this.service.emailAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailAccount)
  async createEmailAccount(
    @graphql.Args() args: CreateEmailAccountArgs
  ): Promise<EmailAccount> {
    return await this.service.createEmailAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailAccount)
  async updateEmailAccount(
    @graphql.Args() args: UpdateEmailAccountArgs
  ): Promise<EmailAccount | null> {
    try {
      return await this.service.updateEmailAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailAccount)
  async deleteEmailAccount(
    @graphql.Args() args: DeleteEmailAccountArgs
  ): Promise<EmailAccount | null> {
    try {
      return await this.service.deleteEmailAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
