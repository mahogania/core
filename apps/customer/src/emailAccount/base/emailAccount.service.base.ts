/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailAccount as PrismaEmailAccount } from "@prisma/client";

export class EmailAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailAccount.count(args);
  }

  async emailAccounts(
    args: Prisma.EmailAccountFindManyArgs
  ): Promise<PrismaEmailAccount[]> {
    return this.prisma.emailAccount.findMany(args);
  }
  async emailAccount(
    args: Prisma.EmailAccountFindUniqueArgs
  ): Promise<PrismaEmailAccount | null> {
    return this.prisma.emailAccount.findUnique(args);
  }
  async createEmailAccount(
    args: Prisma.EmailAccountCreateArgs
  ): Promise<PrismaEmailAccount> {
    return this.prisma.emailAccount.create(args);
  }
  async updateEmailAccount(
    args: Prisma.EmailAccountUpdateArgs
  ): Promise<PrismaEmailAccount> {
    return this.prisma.emailAccount.update(args);
  }
  async deleteEmailAccount(
    args: Prisma.EmailAccountDeleteArgs
  ): Promise<PrismaEmailAccount> {
    return this.prisma.emailAccount.delete(args);
  }
}
