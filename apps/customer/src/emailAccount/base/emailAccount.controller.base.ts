/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailAccountService } from "../emailAccount.service";
import { EmailAccountCreateInput } from "./EmailAccountCreateInput";
import { EmailAccount } from "./EmailAccount";
import { EmailAccountFindManyArgs } from "./EmailAccountFindManyArgs";
import { EmailAccountWhereUniqueInput } from "./EmailAccountWhereUniqueInput";
import { EmailAccountUpdateInput } from "./EmailAccountUpdateInput";

export class EmailAccountControllerBase {
  constructor(protected readonly service: EmailAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailAccount })
  async createEmailAccount(
    @common.Body() data: EmailAccountCreateInput
  ): Promise<EmailAccount> {
    return await this.service.createEmailAccount({
      data: data,
      select: {
        addSignature: true,
        alwaysUseAccountEmailIdAsSender: true,
        alwaysUseAccountNameAsSenderName: true,
        appendEmailsToSentFolder: true,
        appendTo: true,
        asciiEncodePassword: true,
        attachmentLimit: true,
        authMethod: true,
        autoReplyMessage: true,
        awaitingPassword: true,
        brandLogo: true,
        connectedApp: true,
        connectedUser: true,
        createContact: true,
        createdAt: true,
        creation: true,
        defaultIncoming: true,
        defaultOutgoing: true,
        docstatus: true,
        domain: true,
        emailAccountName: true,
        emailId: true,
        emailServer: true,
        emailSyncOption: true,
        enableAutoReply: true,
        enableAutomaticLinking: true,
        enableIncoming: true,
        enableOutgoing: true,
        footer: true,
        id: true,
        idx: true,
        incomingPort: true,
        initialSyncCount: true,
        loginId: true,
        loginIdIsDifferent: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noFailed: true,
        noSmtpAuthentication: true,
        notifyIfUnreplied: true,
        owner: true,
        password: true,
        sendNotificationTo: true,
        sendUnsubscribeMessage: true,
        service: true,
        signature: true,
        smtpPort: true,
        smtpServer: true,
        trackEmailStatus: true,
        uidnext: true,
        uidvalidity: true,
        unrepliedForMins: true,
        updatedAt: true,
        useImap: true,
        useSsl: true,
        useSslForOutgoing: true,
        useStarttls: true,
        useTls: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailAccount] })
  @ApiNestedQuery(EmailAccountFindManyArgs)
  async emailAccounts(@common.Req() request: Request): Promise<EmailAccount[]> {
    const args = plainToClass(EmailAccountFindManyArgs, request.query);
    return this.service.emailAccounts({
      ...args,
      select: {
        addSignature: true,
        alwaysUseAccountEmailIdAsSender: true,
        alwaysUseAccountNameAsSenderName: true,
        appendEmailsToSentFolder: true,
        appendTo: true,
        asciiEncodePassword: true,
        attachmentLimit: true,
        authMethod: true,
        autoReplyMessage: true,
        awaitingPassword: true,
        brandLogo: true,
        connectedApp: true,
        connectedUser: true,
        createContact: true,
        createdAt: true,
        creation: true,
        defaultIncoming: true,
        defaultOutgoing: true,
        docstatus: true,
        domain: true,
        emailAccountName: true,
        emailId: true,
        emailServer: true,
        emailSyncOption: true,
        enableAutoReply: true,
        enableAutomaticLinking: true,
        enableIncoming: true,
        enableOutgoing: true,
        footer: true,
        id: true,
        idx: true,
        incomingPort: true,
        initialSyncCount: true,
        loginId: true,
        loginIdIsDifferent: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noFailed: true,
        noSmtpAuthentication: true,
        notifyIfUnreplied: true,
        owner: true,
        password: true,
        sendNotificationTo: true,
        sendUnsubscribeMessage: true,
        service: true,
        signature: true,
        smtpPort: true,
        smtpServer: true,
        trackEmailStatus: true,
        uidnext: true,
        uidvalidity: true,
        unrepliedForMins: true,
        updatedAt: true,
        useImap: true,
        useSsl: true,
        useSslForOutgoing: true,
        useStarttls: true,
        useTls: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailAccount(
    @common.Param() params: EmailAccountWhereUniqueInput
  ): Promise<EmailAccount | null> {
    const result = await this.service.emailAccount({
      where: params,
      select: {
        addSignature: true,
        alwaysUseAccountEmailIdAsSender: true,
        alwaysUseAccountNameAsSenderName: true,
        appendEmailsToSentFolder: true,
        appendTo: true,
        asciiEncodePassword: true,
        attachmentLimit: true,
        authMethod: true,
        autoReplyMessage: true,
        awaitingPassword: true,
        brandLogo: true,
        connectedApp: true,
        connectedUser: true,
        createContact: true,
        createdAt: true,
        creation: true,
        defaultIncoming: true,
        defaultOutgoing: true,
        docstatus: true,
        domain: true,
        emailAccountName: true,
        emailId: true,
        emailServer: true,
        emailSyncOption: true,
        enableAutoReply: true,
        enableAutomaticLinking: true,
        enableIncoming: true,
        enableOutgoing: true,
        footer: true,
        id: true,
        idx: true,
        incomingPort: true,
        initialSyncCount: true,
        loginId: true,
        loginIdIsDifferent: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noFailed: true,
        noSmtpAuthentication: true,
        notifyIfUnreplied: true,
        owner: true,
        password: true,
        sendNotificationTo: true,
        sendUnsubscribeMessage: true,
        service: true,
        signature: true,
        smtpPort: true,
        smtpServer: true,
        trackEmailStatus: true,
        uidnext: true,
        uidvalidity: true,
        unrepliedForMins: true,
        updatedAt: true,
        useImap: true,
        useSsl: true,
        useSslForOutgoing: true,
        useStarttls: true,
        useTls: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailAccount(
    @common.Param() params: EmailAccountWhereUniqueInput,
    @common.Body() data: EmailAccountUpdateInput
  ): Promise<EmailAccount | null> {
    try {
      return await this.service.updateEmailAccount({
        where: params,
        data: data,
        select: {
          addSignature: true,
          alwaysUseAccountEmailIdAsSender: true,
          alwaysUseAccountNameAsSenderName: true,
          appendEmailsToSentFolder: true,
          appendTo: true,
          asciiEncodePassword: true,
          attachmentLimit: true,
          authMethod: true,
          autoReplyMessage: true,
          awaitingPassword: true,
          brandLogo: true,
          connectedApp: true,
          connectedUser: true,
          createContact: true,
          createdAt: true,
          creation: true,
          defaultIncoming: true,
          defaultOutgoing: true,
          docstatus: true,
          domain: true,
          emailAccountName: true,
          emailId: true,
          emailServer: true,
          emailSyncOption: true,
          enableAutoReply: true,
          enableAutomaticLinking: true,
          enableIncoming: true,
          enableOutgoing: true,
          footer: true,
          id: true,
          idx: true,
          incomingPort: true,
          initialSyncCount: true,
          loginId: true,
          loginIdIsDifferent: true,
          modified: true,
          modifiedBy: true,
          name: true,
          noFailed: true,
          noSmtpAuthentication: true,
          notifyIfUnreplied: true,
          owner: true,
          password: true,
          sendNotificationTo: true,
          sendUnsubscribeMessage: true,
          service: true,
          signature: true,
          smtpPort: true,
          smtpServer: true,
          trackEmailStatus: true,
          uidnext: true,
          uidvalidity: true,
          unrepliedForMins: true,
          updatedAt: true,
          useImap: true,
          useSsl: true,
          useSslForOutgoing: true,
          useStarttls: true,
          useTls: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailAccount(
    @common.Param() params: EmailAccountWhereUniqueInput
  ): Promise<EmailAccount | null> {
    try {
      return await this.service.deleteEmailAccount({
        where: params,
        select: {
          addSignature: true,
          alwaysUseAccountEmailIdAsSender: true,
          alwaysUseAccountNameAsSenderName: true,
          appendEmailsToSentFolder: true,
          appendTo: true,
          asciiEncodePassword: true,
          attachmentLimit: true,
          authMethod: true,
          autoReplyMessage: true,
          awaitingPassword: true,
          brandLogo: true,
          connectedApp: true,
          connectedUser: true,
          createContact: true,
          createdAt: true,
          creation: true,
          defaultIncoming: true,
          defaultOutgoing: true,
          docstatus: true,
          domain: true,
          emailAccountName: true,
          emailId: true,
          emailServer: true,
          emailSyncOption: true,
          enableAutoReply: true,
          enableAutomaticLinking: true,
          enableIncoming: true,
          enableOutgoing: true,
          footer: true,
          id: true,
          idx: true,
          incomingPort: true,
          initialSyncCount: true,
          loginId: true,
          loginIdIsDifferent: true,
          modified: true,
          modifiedBy: true,
          name: true,
          noFailed: true,
          noSmtpAuthentication: true,
          notifyIfUnreplied: true,
          owner: true,
          password: true,
          sendNotificationTo: true,
          sendUnsubscribeMessage: true,
          service: true,
          signature: true,
          smtpPort: true,
          smtpServer: true,
          trackEmailStatus: true,
          uidnext: true,
          uidvalidity: true,
          unrepliedForMins: true,
          updatedAt: true,
          useImap: true,
          useSsl: true,
          useSslForOutgoing: true,
          useStarttls: true,
          useTls: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
