/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContactEmail as PrismaContactEmail } from "@prisma/client";

export class ContactEmailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContactEmailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contactEmail.count(args);
  }

  async contactEmails(
    args: Prisma.ContactEmailFindManyArgs
  ): Promise<PrismaContactEmail[]> {
    return this.prisma.contactEmail.findMany(args);
  }
  async contactEmail(
    args: Prisma.ContactEmailFindUniqueArgs
  ): Promise<PrismaContactEmail | null> {
    return this.prisma.contactEmail.findUnique(args);
  }
  async createContactEmail(
    args: Prisma.ContactEmailCreateArgs
  ): Promise<PrismaContactEmail> {
    return this.prisma.contactEmail.create(args);
  }
  async updateContactEmail(
    args: Prisma.ContactEmailUpdateArgs
  ): Promise<PrismaContactEmail> {
    return this.prisma.contactEmail.update(args);
  }
  async deleteContactEmail(
    args: Prisma.ContactEmailDeleteArgs
  ): Promise<PrismaContactEmail> {
    return this.prisma.contactEmail.delete(args);
  }
}
