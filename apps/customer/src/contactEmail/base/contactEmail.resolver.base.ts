/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactEmail } from "./ContactEmail";
import { ContactEmailCountArgs } from "./ContactEmailCountArgs";
import { ContactEmailFindManyArgs } from "./ContactEmailFindManyArgs";
import { ContactEmailFindUniqueArgs } from "./ContactEmailFindUniqueArgs";
import { CreateContactEmailArgs } from "./CreateContactEmailArgs";
import { UpdateContactEmailArgs } from "./UpdateContactEmailArgs";
import { DeleteContactEmailArgs } from "./DeleteContactEmailArgs";
import { ContactEmailService } from "../contactEmail.service";
@graphql.Resolver(() => ContactEmail)
export class ContactEmailResolverBase {
  constructor(protected readonly service: ContactEmailService) {}

  async _contactEmailsMeta(
    @graphql.Args() args: ContactEmailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactEmail])
  async contactEmails(
    @graphql.Args() args: ContactEmailFindManyArgs
  ): Promise<ContactEmail[]> {
    return this.service.contactEmails(args);
  }

  @graphql.Query(() => ContactEmail, { nullable: true })
  async contactEmail(
    @graphql.Args() args: ContactEmailFindUniqueArgs
  ): Promise<ContactEmail | null> {
    const result = await this.service.contactEmail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactEmail)
  async createContactEmail(
    @graphql.Args() args: CreateContactEmailArgs
  ): Promise<ContactEmail> {
    return await this.service.createContactEmail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContactEmail)
  async updateContactEmail(
    @graphql.Args() args: UpdateContactEmailArgs
  ): Promise<ContactEmail | null> {
    try {
      return await this.service.updateContactEmail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactEmail)
  async deleteContactEmail(
    @graphql.Args() args: DeleteContactEmailArgs
  ): Promise<ContactEmail | null> {
    try {
      return await this.service.deleteContactEmail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
