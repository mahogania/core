/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommunicationMediumTimeslotService } from "../communicationMediumTimeslot.service";
import { CommunicationMediumTimeslotCreateInput } from "./CommunicationMediumTimeslotCreateInput";
import { CommunicationMediumTimeslot } from "./CommunicationMediumTimeslot";
import { CommunicationMediumTimeslotFindManyArgs } from "./CommunicationMediumTimeslotFindManyArgs";
import { CommunicationMediumTimeslotWhereUniqueInput } from "./CommunicationMediumTimeslotWhereUniqueInput";
import { CommunicationMediumTimeslotUpdateInput } from "./CommunicationMediumTimeslotUpdateInput";

export class CommunicationMediumTimeslotControllerBase {
  constructor(protected readonly service: CommunicationMediumTimeslotService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommunicationMediumTimeslot })
  async createCommunicationMediumTimeslot(
    @common.Body() data: CommunicationMediumTimeslotCreateInput
  ): Promise<CommunicationMediumTimeslot> {
    return await this.service.createCommunicationMediumTimeslot({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        dayOfWeek: true,
        docstatus: true,
        employeeGroup: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        toTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommunicationMediumTimeslot] })
  @ApiNestedQuery(CommunicationMediumTimeslotFindManyArgs)
  async communicationMediumTimeslots(
    @common.Req() request: Request
  ): Promise<CommunicationMediumTimeslot[]> {
    const args = plainToClass(
      CommunicationMediumTimeslotFindManyArgs,
      request.query
    );
    return this.service.communicationMediumTimeslots({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        dayOfWeek: true,
        docstatus: true,
        employeeGroup: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        toTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommunicationMediumTimeslot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async communicationMediumTimeslot(
    @common.Param() params: CommunicationMediumTimeslotWhereUniqueInput
  ): Promise<CommunicationMediumTimeslot | null> {
    const result = await this.service.communicationMediumTimeslot({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        dayOfWeek: true,
        docstatus: true,
        employeeGroup: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        toTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommunicationMediumTimeslot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommunicationMediumTimeslot(
    @common.Param() params: CommunicationMediumTimeslotWhereUniqueInput,
    @common.Body() data: CommunicationMediumTimeslotUpdateInput
  ): Promise<CommunicationMediumTimeslot | null> {
    try {
      return await this.service.updateCommunicationMediumTimeslot({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          dayOfWeek: true,
          docstatus: true,
          employeeGroup: true,
          fromTime: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          toTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommunicationMediumTimeslot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommunicationMediumTimeslot(
    @common.Param() params: CommunicationMediumTimeslotWhereUniqueInput
  ): Promise<CommunicationMediumTimeslot | null> {
    try {
      return await this.service.deleteCommunicationMediumTimeslot({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          dayOfWeek: true,
          docstatus: true,
          employeeGroup: true,
          fromTime: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          toTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
