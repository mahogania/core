/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailQueueRecipientService } from "../emailQueueRecipient.service";
import { EmailQueueRecipientCreateInput } from "./EmailQueueRecipientCreateInput";
import { EmailQueueRecipient } from "./EmailQueueRecipient";
import { EmailQueueRecipientFindManyArgs } from "./EmailQueueRecipientFindManyArgs";
import { EmailQueueRecipientWhereUniqueInput } from "./EmailQueueRecipientWhereUniqueInput";
import { EmailQueueRecipientUpdateInput } from "./EmailQueueRecipientUpdateInput";

export class EmailQueueRecipientControllerBase {
  constructor(protected readonly service: EmailQueueRecipientService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailQueueRecipient })
  async createEmailQueueRecipient(
    @common.Body() data: EmailQueueRecipientCreateInput
  ): Promise<EmailQueueRecipient> {
    return await this.service.createEmailQueueRecipient({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        errorField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        recipient: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailQueueRecipient] })
  @ApiNestedQuery(EmailQueueRecipientFindManyArgs)
  async emailQueueRecipients(
    @common.Req() request: Request
  ): Promise<EmailQueueRecipient[]> {
    const args = plainToClass(EmailQueueRecipientFindManyArgs, request.query);
    return this.service.emailQueueRecipients({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        errorField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        recipient: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailQueueRecipient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailQueueRecipient(
    @common.Param() params: EmailQueueRecipientWhereUniqueInput
  ): Promise<EmailQueueRecipient | null> {
    const result = await this.service.emailQueueRecipient({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        errorField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        recipient: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailQueueRecipient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailQueueRecipient(
    @common.Param() params: EmailQueueRecipientWhereUniqueInput,
    @common.Body() data: EmailQueueRecipientUpdateInput
  ): Promise<EmailQueueRecipient | null> {
    try {
      return await this.service.updateEmailQueueRecipient({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          errorField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          recipient: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailQueueRecipient })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailQueueRecipient(
    @common.Param() params: EmailQueueRecipientWhereUniqueInput
  ): Promise<EmailQueueRecipient | null> {
    try {
      return await this.service.deleteEmailQueueRecipient({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          errorField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          recipient: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
