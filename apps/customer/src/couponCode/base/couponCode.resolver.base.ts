/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CouponCode } from "./CouponCode";
import { CouponCodeCountArgs } from "./CouponCodeCountArgs";
import { CouponCodeFindManyArgs } from "./CouponCodeFindManyArgs";
import { CouponCodeFindUniqueArgs } from "./CouponCodeFindUniqueArgs";
import { CreateCouponCodeArgs } from "./CreateCouponCodeArgs";
import { UpdateCouponCodeArgs } from "./UpdateCouponCodeArgs";
import { DeleteCouponCodeArgs } from "./DeleteCouponCodeArgs";
import { CouponCodeService } from "../couponCode.service";
@graphql.Resolver(() => CouponCode)
export class CouponCodeResolverBase {
  constructor(protected readonly service: CouponCodeService) {}

  async _couponCodesMeta(
    @graphql.Args() args: CouponCodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CouponCode])
  async couponCodes(
    @graphql.Args() args: CouponCodeFindManyArgs
  ): Promise<CouponCode[]> {
    return this.service.couponCodes(args);
  }

  @graphql.Query(() => CouponCode, { nullable: true })
  async couponCode(
    @graphql.Args() args: CouponCodeFindUniqueArgs
  ): Promise<CouponCode | null> {
    const result = await this.service.couponCode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CouponCode)
  async createCouponCode(
    @graphql.Args() args: CreateCouponCodeArgs
  ): Promise<CouponCode> {
    return await this.service.createCouponCode({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CouponCode)
  async updateCouponCode(
    @graphql.Args() args: UpdateCouponCodeArgs
  ): Promise<CouponCode | null> {
    try {
      return await this.service.updateCouponCode({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CouponCode)
  async deleteCouponCode(
    @graphql.Args() args: DeleteCouponCodeArgs
  ): Promise<CouponCode | null> {
    try {
      return await this.service.deleteCouponCode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
