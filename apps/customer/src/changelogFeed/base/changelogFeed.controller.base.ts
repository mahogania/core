/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChangelogFeedService } from "../changelogFeed.service";
import { ChangelogFeedCreateInput } from "./ChangelogFeedCreateInput";
import { ChangelogFeed } from "./ChangelogFeed";
import { ChangelogFeedFindManyArgs } from "./ChangelogFeedFindManyArgs";
import { ChangelogFeedWhereUniqueInput } from "./ChangelogFeedWhereUniqueInput";
import { ChangelogFeedUpdateInput } from "./ChangelogFeedUpdateInput";

export class ChangelogFeedControllerBase {
  constructor(protected readonly service: ChangelogFeedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChangelogFeed })
  async createChangelogFeed(
    @common.Body() data: ChangelogFeedCreateInput
  ): Promise<ChangelogFeed> {
    return await this.service.createChangelogFeed({
      data: data,
      select: {
        appName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        link: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        postingTimestamp: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChangelogFeed] })
  @ApiNestedQuery(ChangelogFeedFindManyArgs)
  async changelogFeeds(
    @common.Req() request: Request
  ): Promise<ChangelogFeed[]> {
    const args = plainToClass(ChangelogFeedFindManyArgs, request.query);
    return this.service.changelogFeeds({
      ...args,
      select: {
        appName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        link: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        postingTimestamp: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChangelogFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async changelogFeed(
    @common.Param() params: ChangelogFeedWhereUniqueInput
  ): Promise<ChangelogFeed | null> {
    const result = await this.service.changelogFeed({
      where: params,
      select: {
        appName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        link: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        postingTimestamp: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChangelogFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChangelogFeed(
    @common.Param() params: ChangelogFeedWhereUniqueInput,
    @common.Body() data: ChangelogFeedUpdateInput
  ): Promise<ChangelogFeed | null> {
    try {
      return await this.service.updateChangelogFeed({
        where: params,
        data: data,
        select: {
          appName: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          link: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          postingTimestamp: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChangelogFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChangelogFeed(
    @common.Param() params: ChangelogFeedWhereUniqueInput
  ): Promise<ChangelogFeed | null> {
    try {
      return await this.service.deleteChangelogFeed({
        where: params,
        select: {
          appName: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          link: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          postingTimestamp: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
