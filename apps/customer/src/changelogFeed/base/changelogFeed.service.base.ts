/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ChangelogFeed as PrismaChangelogFeed } from "@prisma/client";

export class ChangelogFeedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChangelogFeedCountArgs, "select">
  ): Promise<number> {
    return this.prisma.changelogFeed.count(args);
  }

  async changelogFeeds(
    args: Prisma.ChangelogFeedFindManyArgs
  ): Promise<PrismaChangelogFeed[]> {
    return this.prisma.changelogFeed.findMany(args);
  }
  async changelogFeed(
    args: Prisma.ChangelogFeedFindUniqueArgs
  ): Promise<PrismaChangelogFeed | null> {
    return this.prisma.changelogFeed.findUnique(args);
  }
  async createChangelogFeed(
    args: Prisma.ChangelogFeedCreateArgs
  ): Promise<PrismaChangelogFeed> {
    return this.prisma.changelogFeed.create(args);
  }
  async updateChangelogFeed(
    args: Prisma.ChangelogFeedUpdateArgs
  ): Promise<PrismaChangelogFeed> {
    return this.prisma.changelogFeed.update(args);
  }
  async deleteChangelogFeed(
    args: Prisma.ChangelogFeedDeleteArgs
  ): Promise<PrismaChangelogFeed> {
    return this.prisma.changelogFeed.delete(args);
  }
}
