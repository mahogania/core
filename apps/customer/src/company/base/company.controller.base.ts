/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanyService } from "../company.service";
import { CompanyCreateInput } from "./CompanyCreateInput";
import { Company } from "./Company";
import { CompanyFindManyArgs } from "./CompanyFindManyArgs";
import { CompanyWhereUniqueInput } from "./CompanyWhereUniqueInput";
import { CompanyUpdateInput } from "./CompanyUpdateInput";

export class CompanyControllerBase {
  constructor(protected readonly service: CompanyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Company })
  async createCompany(
    @common.Body() data: CompanyCreateInput
  ): Promise<Company> {
    return await this.service.createCompany({
      data: data,
      select: {
        abbr: true,
        accumulatedDepreciationAccount: true,
        allowAccountCreationAgainstChildCompany: true,
        assetReceivedButNotBilled: true,
        autoErrFrequency: true,
        autoExchangeRateRevaluation: true,
        bookAdvancePaymentsInSeparatePartyAccount: true,
        capitalWorkInProgressAccount: true,
        chartOfAccounts: true,
        companyDescription: true,
        companyLogo: true,
        companyName: true,
        costCenter: true,
        country: true,
        createChartOfAccountsBasedOn: true,
        createdAt: true,
        creation: true,
        creditLimit: true,
        dateOfCommencement: true,
        dateOfEstablishment: true,
        dateOfIncorporation: true,
        defaultAdvancePaidAccount: true,
        defaultAdvanceReceivedAccount: true,
        defaultBankAccount: true,
        defaultBuyingTerms: true,
        defaultCashAccount: true,
        defaultCurrency: true,
        defaultDeferredExpenseAccount: true,
        defaultDeferredRevenueAccount: true,
        defaultDiscountAccount: true,
        defaultExpenseAccount: true,
        defaultFinanceBook: true,
        defaultHolidayList: true,
        defaultInTransitWarehouse: true,
        defaultIncomeAccount: true,
        defaultInventoryAccount: true,
        defaultLetterHead: true,
        defaultOperatingCostAccount: true,
        defaultPayableAccount: true,
        defaultProvisionalAccount: true,
        defaultReceivableAccount: true,
        defaultSellingTerms: true,
        defaultWarehouseForSalesReturn: true,
        depreciationCostCenter: true,
        depreciationExpenseAccount: true,
        disposalAccount: true,
        docstatus: true,
        domain: true,
        email: true,
        enablePerpetualInventory: true,
        enableProvisionalAccountingForNonStockItems: true,
        exceptionBudgetApproverRole: true,
        exchangeGainLossAccount: true,
        existingCompany: true,
        expensesIncludedInAssetValuation: true,
        expensesIncludedInValuation: true,
        fax: true,
        id: true,
        idx: true,
        isGroup: true,
        lft: true,
        modified: true,
        modifiedBy: true,
        monthlySalesTarget: true,
        oldParent: true,
        owner: true,
        parentCompany: true,
        paymentTerms: true,
        phoneNo: true,
        reconcileOnAdvancePaymentDate: true,
        registrationDetails: true,
        rgt: true,
        roundOffAccount: true,
        roundOffCostCenter: true,
        salesMonthlyHistory: true,
        seriesForDepreciationEntry: true,
        stockAdjustmentAccount: true,
        stockReceivedButNotBilled: true,
        submitErrJv: true,
        taxId: true,
        totalMonthlySales: true,
        transactionsAnnualHistory: true,
        unrealizedExchangeGainLossAccount: true,
        unrealizedProfitLossAccount: true,
        updatedAt: true,
        website: true,
        writeOffAccount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Company] })
  @ApiNestedQuery(CompanyFindManyArgs)
  async companies(@common.Req() request: Request): Promise<Company[]> {
    const args = plainToClass(CompanyFindManyArgs, request.query);
    return this.service.companies({
      ...args,
      select: {
        abbr: true,
        accumulatedDepreciationAccount: true,
        allowAccountCreationAgainstChildCompany: true,
        assetReceivedButNotBilled: true,
        autoErrFrequency: true,
        autoExchangeRateRevaluation: true,
        bookAdvancePaymentsInSeparatePartyAccount: true,
        capitalWorkInProgressAccount: true,
        chartOfAccounts: true,
        companyDescription: true,
        companyLogo: true,
        companyName: true,
        costCenter: true,
        country: true,
        createChartOfAccountsBasedOn: true,
        createdAt: true,
        creation: true,
        creditLimit: true,
        dateOfCommencement: true,
        dateOfEstablishment: true,
        dateOfIncorporation: true,
        defaultAdvancePaidAccount: true,
        defaultAdvanceReceivedAccount: true,
        defaultBankAccount: true,
        defaultBuyingTerms: true,
        defaultCashAccount: true,
        defaultCurrency: true,
        defaultDeferredExpenseAccount: true,
        defaultDeferredRevenueAccount: true,
        defaultDiscountAccount: true,
        defaultExpenseAccount: true,
        defaultFinanceBook: true,
        defaultHolidayList: true,
        defaultInTransitWarehouse: true,
        defaultIncomeAccount: true,
        defaultInventoryAccount: true,
        defaultLetterHead: true,
        defaultOperatingCostAccount: true,
        defaultPayableAccount: true,
        defaultProvisionalAccount: true,
        defaultReceivableAccount: true,
        defaultSellingTerms: true,
        defaultWarehouseForSalesReturn: true,
        depreciationCostCenter: true,
        depreciationExpenseAccount: true,
        disposalAccount: true,
        docstatus: true,
        domain: true,
        email: true,
        enablePerpetualInventory: true,
        enableProvisionalAccountingForNonStockItems: true,
        exceptionBudgetApproverRole: true,
        exchangeGainLossAccount: true,
        existingCompany: true,
        expensesIncludedInAssetValuation: true,
        expensesIncludedInValuation: true,
        fax: true,
        id: true,
        idx: true,
        isGroup: true,
        lft: true,
        modified: true,
        modifiedBy: true,
        monthlySalesTarget: true,
        oldParent: true,
        owner: true,
        parentCompany: true,
        paymentTerms: true,
        phoneNo: true,
        reconcileOnAdvancePaymentDate: true,
        registrationDetails: true,
        rgt: true,
        roundOffAccount: true,
        roundOffCostCenter: true,
        salesMonthlyHistory: true,
        seriesForDepreciationEntry: true,
        stockAdjustmentAccount: true,
        stockReceivedButNotBilled: true,
        submitErrJv: true,
        taxId: true,
        totalMonthlySales: true,
        transactionsAnnualHistory: true,
        unrealizedExchangeGainLossAccount: true,
        unrealizedProfitLossAccount: true,
        updatedAt: true,
        website: true,
        writeOffAccount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async company(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    const result = await this.service.company({
      where: params,
      select: {
        abbr: true,
        accumulatedDepreciationAccount: true,
        allowAccountCreationAgainstChildCompany: true,
        assetReceivedButNotBilled: true,
        autoErrFrequency: true,
        autoExchangeRateRevaluation: true,
        bookAdvancePaymentsInSeparatePartyAccount: true,
        capitalWorkInProgressAccount: true,
        chartOfAccounts: true,
        companyDescription: true,
        companyLogo: true,
        companyName: true,
        costCenter: true,
        country: true,
        createChartOfAccountsBasedOn: true,
        createdAt: true,
        creation: true,
        creditLimit: true,
        dateOfCommencement: true,
        dateOfEstablishment: true,
        dateOfIncorporation: true,
        defaultAdvancePaidAccount: true,
        defaultAdvanceReceivedAccount: true,
        defaultBankAccount: true,
        defaultBuyingTerms: true,
        defaultCashAccount: true,
        defaultCurrency: true,
        defaultDeferredExpenseAccount: true,
        defaultDeferredRevenueAccount: true,
        defaultDiscountAccount: true,
        defaultExpenseAccount: true,
        defaultFinanceBook: true,
        defaultHolidayList: true,
        defaultInTransitWarehouse: true,
        defaultIncomeAccount: true,
        defaultInventoryAccount: true,
        defaultLetterHead: true,
        defaultOperatingCostAccount: true,
        defaultPayableAccount: true,
        defaultProvisionalAccount: true,
        defaultReceivableAccount: true,
        defaultSellingTerms: true,
        defaultWarehouseForSalesReturn: true,
        depreciationCostCenter: true,
        depreciationExpenseAccount: true,
        disposalAccount: true,
        docstatus: true,
        domain: true,
        email: true,
        enablePerpetualInventory: true,
        enableProvisionalAccountingForNonStockItems: true,
        exceptionBudgetApproverRole: true,
        exchangeGainLossAccount: true,
        existingCompany: true,
        expensesIncludedInAssetValuation: true,
        expensesIncludedInValuation: true,
        fax: true,
        id: true,
        idx: true,
        isGroup: true,
        lft: true,
        modified: true,
        modifiedBy: true,
        monthlySalesTarget: true,
        oldParent: true,
        owner: true,
        parentCompany: true,
        paymentTerms: true,
        phoneNo: true,
        reconcileOnAdvancePaymentDate: true,
        registrationDetails: true,
        rgt: true,
        roundOffAccount: true,
        roundOffCostCenter: true,
        salesMonthlyHistory: true,
        seriesForDepreciationEntry: true,
        stockAdjustmentAccount: true,
        stockReceivedButNotBilled: true,
        submitErrJv: true,
        taxId: true,
        totalMonthlySales: true,
        transactionsAnnualHistory: true,
        unrealizedExchangeGainLossAccount: true,
        unrealizedProfitLossAccount: true,
        updatedAt: true,
        website: true,
        writeOffAccount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompany(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() data: CompanyUpdateInput
  ): Promise<Company | null> {
    try {
      return await this.service.updateCompany({
        where: params,
        data: data,
        select: {
          abbr: true,
          accumulatedDepreciationAccount: true,
          allowAccountCreationAgainstChildCompany: true,
          assetReceivedButNotBilled: true,
          autoErrFrequency: true,
          autoExchangeRateRevaluation: true,
          bookAdvancePaymentsInSeparatePartyAccount: true,
          capitalWorkInProgressAccount: true,
          chartOfAccounts: true,
          companyDescription: true,
          companyLogo: true,
          companyName: true,
          costCenter: true,
          country: true,
          createChartOfAccountsBasedOn: true,
          createdAt: true,
          creation: true,
          creditLimit: true,
          dateOfCommencement: true,
          dateOfEstablishment: true,
          dateOfIncorporation: true,
          defaultAdvancePaidAccount: true,
          defaultAdvanceReceivedAccount: true,
          defaultBankAccount: true,
          defaultBuyingTerms: true,
          defaultCashAccount: true,
          defaultCurrency: true,
          defaultDeferredExpenseAccount: true,
          defaultDeferredRevenueAccount: true,
          defaultDiscountAccount: true,
          defaultExpenseAccount: true,
          defaultFinanceBook: true,
          defaultHolidayList: true,
          defaultInTransitWarehouse: true,
          defaultIncomeAccount: true,
          defaultInventoryAccount: true,
          defaultLetterHead: true,
          defaultOperatingCostAccount: true,
          defaultPayableAccount: true,
          defaultProvisionalAccount: true,
          defaultReceivableAccount: true,
          defaultSellingTerms: true,
          defaultWarehouseForSalesReturn: true,
          depreciationCostCenter: true,
          depreciationExpenseAccount: true,
          disposalAccount: true,
          docstatus: true,
          domain: true,
          email: true,
          enablePerpetualInventory: true,
          enableProvisionalAccountingForNonStockItems: true,
          exceptionBudgetApproverRole: true,
          exchangeGainLossAccount: true,
          existingCompany: true,
          expensesIncludedInAssetValuation: true,
          expensesIncludedInValuation: true,
          fax: true,
          id: true,
          idx: true,
          isGroup: true,
          lft: true,
          modified: true,
          modifiedBy: true,
          monthlySalesTarget: true,
          oldParent: true,
          owner: true,
          parentCompany: true,
          paymentTerms: true,
          phoneNo: true,
          reconcileOnAdvancePaymentDate: true,
          registrationDetails: true,
          rgt: true,
          roundOffAccount: true,
          roundOffCostCenter: true,
          salesMonthlyHistory: true,
          seriesForDepreciationEntry: true,
          stockAdjustmentAccount: true,
          stockReceivedButNotBilled: true,
          submitErrJv: true,
          taxId: true,
          totalMonthlySales: true,
          transactionsAnnualHistory: true,
          unrealizedExchangeGainLossAccount: true,
          unrealizedProfitLossAccount: true,
          updatedAt: true,
          website: true,
          writeOffAccount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompany(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    try {
      return await this.service.deleteCompany({
        where: params,
        select: {
          abbr: true,
          accumulatedDepreciationAccount: true,
          allowAccountCreationAgainstChildCompany: true,
          assetReceivedButNotBilled: true,
          autoErrFrequency: true,
          autoExchangeRateRevaluation: true,
          bookAdvancePaymentsInSeparatePartyAccount: true,
          capitalWorkInProgressAccount: true,
          chartOfAccounts: true,
          companyDescription: true,
          companyLogo: true,
          companyName: true,
          costCenter: true,
          country: true,
          createChartOfAccountsBasedOn: true,
          createdAt: true,
          creation: true,
          creditLimit: true,
          dateOfCommencement: true,
          dateOfEstablishment: true,
          dateOfIncorporation: true,
          defaultAdvancePaidAccount: true,
          defaultAdvanceReceivedAccount: true,
          defaultBankAccount: true,
          defaultBuyingTerms: true,
          defaultCashAccount: true,
          defaultCurrency: true,
          defaultDeferredExpenseAccount: true,
          defaultDeferredRevenueAccount: true,
          defaultDiscountAccount: true,
          defaultExpenseAccount: true,
          defaultFinanceBook: true,
          defaultHolidayList: true,
          defaultInTransitWarehouse: true,
          defaultIncomeAccount: true,
          defaultInventoryAccount: true,
          defaultLetterHead: true,
          defaultOperatingCostAccount: true,
          defaultPayableAccount: true,
          defaultProvisionalAccount: true,
          defaultReceivableAccount: true,
          defaultSellingTerms: true,
          defaultWarehouseForSalesReturn: true,
          depreciationCostCenter: true,
          depreciationExpenseAccount: true,
          disposalAccount: true,
          docstatus: true,
          domain: true,
          email: true,
          enablePerpetualInventory: true,
          enableProvisionalAccountingForNonStockItems: true,
          exceptionBudgetApproverRole: true,
          exchangeGainLossAccount: true,
          existingCompany: true,
          expensesIncludedInAssetValuation: true,
          expensesIncludedInValuation: true,
          fax: true,
          id: true,
          idx: true,
          isGroup: true,
          lft: true,
          modified: true,
          modifiedBy: true,
          monthlySalesTarget: true,
          oldParent: true,
          owner: true,
          parentCompany: true,
          paymentTerms: true,
          phoneNo: true,
          reconcileOnAdvancePaymentDate: true,
          registrationDetails: true,
          rgt: true,
          roundOffAccount: true,
          roundOffCostCenter: true,
          salesMonthlyHistory: true,
          seriesForDepreciationEntry: true,
          stockAdjustmentAccount: true,
          stockReceivedButNotBilled: true,
          submitErrJv: true,
          taxId: true,
          totalMonthlySales: true,
          transactionsAnnualHistory: true,
          unrealizedExchangeGainLossAccount: true,
          unrealizedProfitLossAccount: true,
          updatedAt: true,
          website: true,
          writeOffAccount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
