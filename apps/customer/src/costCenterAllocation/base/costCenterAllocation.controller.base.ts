/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CostCenterAllocationService } from "../costCenterAllocation.service";
import { CostCenterAllocationCreateInput } from "./CostCenterAllocationCreateInput";
import { CostCenterAllocation } from "./CostCenterAllocation";
import { CostCenterAllocationFindManyArgs } from "./CostCenterAllocationFindManyArgs";
import { CostCenterAllocationWhereUniqueInput } from "./CostCenterAllocationWhereUniqueInput";
import { CostCenterAllocationUpdateInput } from "./CostCenterAllocationUpdateInput";

export class CostCenterAllocationControllerBase {
  constructor(protected readonly service: CostCenterAllocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CostCenterAllocation })
  async createCostCenterAllocation(
    @common.Body() data: CostCenterAllocationCreateInput
  ): Promise<CostCenterAllocation> {
    return await this.service.createCostCenterAllocation({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        mainCostCenter: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        validFrom: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CostCenterAllocation] })
  @ApiNestedQuery(CostCenterAllocationFindManyArgs)
  async costCenterAllocations(
    @common.Req() request: Request
  ): Promise<CostCenterAllocation[]> {
    const args = plainToClass(CostCenterAllocationFindManyArgs, request.query);
    return this.service.costCenterAllocations({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        mainCostCenter: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        validFrom: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CostCenterAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async costCenterAllocation(
    @common.Param() params: CostCenterAllocationWhereUniqueInput
  ): Promise<CostCenterAllocation | null> {
    const result = await this.service.costCenterAllocation({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        mainCostCenter: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        validFrom: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CostCenterAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCostCenterAllocation(
    @common.Param() params: CostCenterAllocationWhereUniqueInput,
    @common.Body() data: CostCenterAllocationUpdateInput
  ): Promise<CostCenterAllocation | null> {
    try {
      return await this.service.updateCostCenterAllocation({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          mainCostCenter: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
          validFrom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CostCenterAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCostCenterAllocation(
    @common.Param() params: CostCenterAllocationWhereUniqueInput
  ): Promise<CostCenterAllocation | null> {
    try {
      return await this.service.deleteCostCenterAllocation({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          mainCostCenter: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
          validFrom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
