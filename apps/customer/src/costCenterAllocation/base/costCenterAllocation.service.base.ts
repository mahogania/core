/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CostCenterAllocation as PrismaCostCenterAllocation,
} from "@prisma/client";

export class CostCenterAllocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CostCenterAllocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.costCenterAllocation.count(args);
  }

  async costCenterAllocations(
    args: Prisma.CostCenterAllocationFindManyArgs
  ): Promise<PrismaCostCenterAllocation[]> {
    return this.prisma.costCenterAllocation.findMany(args);
  }
  async costCenterAllocation(
    args: Prisma.CostCenterAllocationFindUniqueArgs
  ): Promise<PrismaCostCenterAllocation | null> {
    return this.prisma.costCenterAllocation.findUnique(args);
  }
  async createCostCenterAllocation(
    args: Prisma.CostCenterAllocationCreateArgs
  ): Promise<PrismaCostCenterAllocation> {
    return this.prisma.costCenterAllocation.create(args);
  }
  async updateCostCenterAllocation(
    args: Prisma.CostCenterAllocationUpdateArgs
  ): Promise<PrismaCostCenterAllocation> {
    return this.prisma.costCenterAllocation.update(args);
  }
  async deleteCostCenterAllocation(
    args: Prisma.CostCenterAllocationDeleteArgs
  ): Promise<PrismaCostCenterAllocation> {
    return this.prisma.costCenterAllocation.delete(args);
  }
}
