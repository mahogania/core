/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CostCenterAllocation } from "./CostCenterAllocation";
import { CostCenterAllocationCountArgs } from "./CostCenterAllocationCountArgs";
import { CostCenterAllocationFindManyArgs } from "./CostCenterAllocationFindManyArgs";
import { CostCenterAllocationFindUniqueArgs } from "./CostCenterAllocationFindUniqueArgs";
import { CreateCostCenterAllocationArgs } from "./CreateCostCenterAllocationArgs";
import { UpdateCostCenterAllocationArgs } from "./UpdateCostCenterAllocationArgs";
import { DeleteCostCenterAllocationArgs } from "./DeleteCostCenterAllocationArgs";
import { CostCenterAllocationService } from "../costCenterAllocation.service";
@graphql.Resolver(() => CostCenterAllocation)
export class CostCenterAllocationResolverBase {
  constructor(protected readonly service: CostCenterAllocationService) {}

  async _costCenterAllocationsMeta(
    @graphql.Args() args: CostCenterAllocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CostCenterAllocation])
  async costCenterAllocations(
    @graphql.Args() args: CostCenterAllocationFindManyArgs
  ): Promise<CostCenterAllocation[]> {
    return this.service.costCenterAllocations(args);
  }

  @graphql.Query(() => CostCenterAllocation, { nullable: true })
  async costCenterAllocation(
    @graphql.Args() args: CostCenterAllocationFindUniqueArgs
  ): Promise<CostCenterAllocation | null> {
    const result = await this.service.costCenterAllocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CostCenterAllocation)
  async createCostCenterAllocation(
    @graphql.Args() args: CreateCostCenterAllocationArgs
  ): Promise<CostCenterAllocation> {
    return await this.service.createCostCenterAllocation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CostCenterAllocation)
  async updateCostCenterAllocation(
    @graphql.Args() args: UpdateCostCenterAllocationArgs
  ): Promise<CostCenterAllocation | null> {
    try {
      return await this.service.updateCostCenterAllocation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CostCenterAllocation)
  async deleteCostCenterAllocation(
    @graphql.Args() args: DeleteCostCenterAllocationArgs
  ): Promise<CostCenterAllocation | null> {
    try {
      return await this.service.deleteCostCenterAllocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
