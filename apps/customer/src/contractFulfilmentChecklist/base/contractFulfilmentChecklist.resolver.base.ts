/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractFulfilmentChecklist } from "./ContractFulfilmentChecklist";
import { ContractFulfilmentChecklistCountArgs } from "./ContractFulfilmentChecklistCountArgs";
import { ContractFulfilmentChecklistFindManyArgs } from "./ContractFulfilmentChecklistFindManyArgs";
import { ContractFulfilmentChecklistFindUniqueArgs } from "./ContractFulfilmentChecklistFindUniqueArgs";
import { CreateContractFulfilmentChecklistArgs } from "./CreateContractFulfilmentChecklistArgs";
import { UpdateContractFulfilmentChecklistArgs } from "./UpdateContractFulfilmentChecklistArgs";
import { DeleteContractFulfilmentChecklistArgs } from "./DeleteContractFulfilmentChecklistArgs";
import { ContractFulfilmentChecklistService } from "../contractFulfilmentChecklist.service";
@graphql.Resolver(() => ContractFulfilmentChecklist)
export class ContractFulfilmentChecklistResolverBase {
  constructor(protected readonly service: ContractFulfilmentChecklistService) {}

  async _contractFulfilmentChecklistsMeta(
    @graphql.Args() args: ContractFulfilmentChecklistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractFulfilmentChecklist])
  async contractFulfilmentChecklists(
    @graphql.Args() args: ContractFulfilmentChecklistFindManyArgs
  ): Promise<ContractFulfilmentChecklist[]> {
    return this.service.contractFulfilmentChecklists(args);
  }

  @graphql.Query(() => ContractFulfilmentChecklist, { nullable: true })
  async contractFulfilmentChecklist(
    @graphql.Args() args: ContractFulfilmentChecklistFindUniqueArgs
  ): Promise<ContractFulfilmentChecklist | null> {
    const result = await this.service.contractFulfilmentChecklist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractFulfilmentChecklist)
  async createContractFulfilmentChecklist(
    @graphql.Args() args: CreateContractFulfilmentChecklistArgs
  ): Promise<ContractFulfilmentChecklist> {
    return await this.service.createContractFulfilmentChecklist({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContractFulfilmentChecklist)
  async updateContractFulfilmentChecklist(
    @graphql.Args() args: UpdateContractFulfilmentChecklistArgs
  ): Promise<ContractFulfilmentChecklist | null> {
    try {
      return await this.service.updateContractFulfilmentChecklist({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractFulfilmentChecklist)
  async deleteContractFulfilmentChecklist(
    @graphql.Args() args: DeleteContractFulfilmentChecklistArgs
  ): Promise<ContractFulfilmentChecklist | null> {
    try {
      return await this.service.deleteContractFulfilmentChecklist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
