/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClientScript as PrismaClientScript } from "@prisma/client";

export class ClientScriptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClientScriptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clientScript.count(args);
  }

  async clientScripts(
    args: Prisma.ClientScriptFindManyArgs
  ): Promise<PrismaClientScript[]> {
    return this.prisma.clientScript.findMany(args);
  }
  async clientScript(
    args: Prisma.ClientScriptFindUniqueArgs
  ): Promise<PrismaClientScript | null> {
    return this.prisma.clientScript.findUnique(args);
  }
  async createClientScript(
    args: Prisma.ClientScriptCreateArgs
  ): Promise<PrismaClientScript> {
    return this.prisma.clientScript.create(args);
  }
  async updateClientScript(
    args: Prisma.ClientScriptUpdateArgs
  ): Promise<PrismaClientScript> {
    return this.prisma.clientScript.update(args);
  }
  async deleteClientScript(
    args: Prisma.ClientScriptDeleteArgs
  ): Promise<PrismaClientScript> {
    return this.prisma.clientScript.delete(args);
  }
}
