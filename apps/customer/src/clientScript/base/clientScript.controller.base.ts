/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClientScriptService } from "../clientScript.service";
import { ClientScriptCreateInput } from "./ClientScriptCreateInput";
import { ClientScript } from "./ClientScript";
import { ClientScriptFindManyArgs } from "./ClientScriptFindManyArgs";
import { ClientScriptWhereUniqueInput } from "./ClientScriptWhereUniqueInput";
import { ClientScriptUpdateInput } from "./ClientScriptUpdateInput";

export class ClientScriptControllerBase {
  constructor(protected readonly service: ClientScriptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClientScript })
  async createClientScript(
    @common.Body() data: ClientScriptCreateInput
  ): Promise<ClientScript> {
    return await this.service.createClientScript({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        dt: true,
        enabled: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        owner: true,
        script: true,
        updatedAt: true,
        view: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClientScript] })
  @ApiNestedQuery(ClientScriptFindManyArgs)
  async clientScripts(@common.Req() request: Request): Promise<ClientScript[]> {
    const args = plainToClass(ClientScriptFindManyArgs, request.query);
    return this.service.clientScripts({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        dt: true,
        enabled: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        owner: true,
        script: true,
        updatedAt: true,
        view: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClientScript })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clientScript(
    @common.Param() params: ClientScriptWhereUniqueInput
  ): Promise<ClientScript | null> {
    const result = await this.service.clientScript({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        dt: true,
        enabled: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        owner: true,
        script: true,
        updatedAt: true,
        view: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClientScript })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClientScript(
    @common.Param() params: ClientScriptWhereUniqueInput,
    @common.Body() data: ClientScriptUpdateInput
  ): Promise<ClientScript | null> {
    try {
      return await this.service.updateClientScript({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          dt: true,
          enabled: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          owner: true,
          script: true,
          updatedAt: true,
          view: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClientScript })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClientScript(
    @common.Param() params: ClientScriptWhereUniqueInput
  ): Promise<ClientScript | null> {
    try {
      return await this.service.deleteClientScript({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          dt: true,
          enabled: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          owner: true,
          script: true,
          updatedAt: true,
          view: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
