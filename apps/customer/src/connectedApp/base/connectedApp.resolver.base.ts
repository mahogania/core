/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ConnectedApp } from "./ConnectedApp";
import { ConnectedAppCountArgs } from "./ConnectedAppCountArgs";
import { ConnectedAppFindManyArgs } from "./ConnectedAppFindManyArgs";
import { ConnectedAppFindUniqueArgs } from "./ConnectedAppFindUniqueArgs";
import { CreateConnectedAppArgs } from "./CreateConnectedAppArgs";
import { UpdateConnectedAppArgs } from "./UpdateConnectedAppArgs";
import { DeleteConnectedAppArgs } from "./DeleteConnectedAppArgs";
import { ConnectedAppService } from "../connectedApp.service";
@graphql.Resolver(() => ConnectedApp)
export class ConnectedAppResolverBase {
  constructor(protected readonly service: ConnectedAppService) {}

  async _connectedAppsMeta(
    @graphql.Args() args: ConnectedAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ConnectedApp])
  async connectedApps(
    @graphql.Args() args: ConnectedAppFindManyArgs
  ): Promise<ConnectedApp[]> {
    return this.service.connectedApps(args);
  }

  @graphql.Query(() => ConnectedApp, { nullable: true })
  async connectedApp(
    @graphql.Args() args: ConnectedAppFindUniqueArgs
  ): Promise<ConnectedApp | null> {
    const result = await this.service.connectedApp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConnectedApp)
  async createConnectedApp(
    @graphql.Args() args: CreateConnectedAppArgs
  ): Promise<ConnectedApp> {
    return await this.service.createConnectedApp({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ConnectedApp)
  async updateConnectedApp(
    @graphql.Args() args: UpdateConnectedAppArgs
  ): Promise<ConnectedApp | null> {
    try {
      return await this.service.updateConnectedApp({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ConnectedApp)
  async deleteConnectedApp(
    @graphql.Args() args: DeleteConnectedAppArgs
  ): Promise<ConnectedApp | null> {
    try {
      return await this.service.deleteConnectedApp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
