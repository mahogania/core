/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ConnectedApp as PrismaConnectedApp } from "@prisma/client";

export class ConnectedAppServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConnectedAppCountArgs, "select">
  ): Promise<number> {
    return this.prisma.connectedApp.count(args);
  }

  async connectedApps(
    args: Prisma.ConnectedAppFindManyArgs
  ): Promise<PrismaConnectedApp[]> {
    return this.prisma.connectedApp.findMany(args);
  }
  async connectedApp(
    args: Prisma.ConnectedAppFindUniqueArgs
  ): Promise<PrismaConnectedApp | null> {
    return this.prisma.connectedApp.findUnique(args);
  }
  async createConnectedApp(
    args: Prisma.ConnectedAppCreateArgs
  ): Promise<PrismaConnectedApp> {
    return this.prisma.connectedApp.create(args);
  }
  async updateConnectedApp(
    args: Prisma.ConnectedAppUpdateArgs
  ): Promise<PrismaConnectedApp> {
    return this.prisma.connectedApp.update(args);
  }
  async deleteConnectedApp(
    args: Prisma.ConnectedAppDeleteArgs
  ): Promise<PrismaConnectedApp> {
    return this.prisma.connectedApp.delete(args);
  }
}
