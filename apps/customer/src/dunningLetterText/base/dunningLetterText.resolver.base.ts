/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DunningLetterText } from "./DunningLetterText";
import { DunningLetterTextCountArgs } from "./DunningLetterTextCountArgs";
import { DunningLetterTextFindManyArgs } from "./DunningLetterTextFindManyArgs";
import { DunningLetterTextFindUniqueArgs } from "./DunningLetterTextFindUniqueArgs";
import { CreateDunningLetterTextArgs } from "./CreateDunningLetterTextArgs";
import { UpdateDunningLetterTextArgs } from "./UpdateDunningLetterTextArgs";
import { DeleteDunningLetterTextArgs } from "./DeleteDunningLetterTextArgs";
import { DunningLetterTextService } from "../dunningLetterText.service";
@graphql.Resolver(() => DunningLetterText)
export class DunningLetterTextResolverBase {
  constructor(protected readonly service: DunningLetterTextService) {}

  async _dunningLetterTextsMeta(
    @graphql.Args() args: DunningLetterTextCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DunningLetterText])
  async dunningLetterTexts(
    @graphql.Args() args: DunningLetterTextFindManyArgs
  ): Promise<DunningLetterText[]> {
    return this.service.dunningLetterTexts(args);
  }

  @graphql.Query(() => DunningLetterText, { nullable: true })
  async dunningLetterText(
    @graphql.Args() args: DunningLetterTextFindUniqueArgs
  ): Promise<DunningLetterText | null> {
    const result = await this.service.dunningLetterText(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DunningLetterText)
  async createDunningLetterText(
    @graphql.Args() args: CreateDunningLetterTextArgs
  ): Promise<DunningLetterText> {
    return await this.service.createDunningLetterText({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DunningLetterText)
  async updateDunningLetterText(
    @graphql.Args() args: UpdateDunningLetterTextArgs
  ): Promise<DunningLetterText | null> {
    try {
      return await this.service.updateDunningLetterText({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DunningLetterText)
  async deleteDunningLetterText(
    @graphql.Args() args: DeleteDunningLetterTextArgs
  ): Promise<DunningLetterText | null> {
    try {
      return await this.service.deleteDunningLetterText(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
