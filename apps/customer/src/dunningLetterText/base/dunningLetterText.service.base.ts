/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DunningLetterText as PrismaDunningLetterText,
} from "@prisma/client";

export class DunningLetterTextServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DunningLetterTextCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dunningLetterText.count(args);
  }

  async dunningLetterTexts(
    args: Prisma.DunningLetterTextFindManyArgs
  ): Promise<PrismaDunningLetterText[]> {
    return this.prisma.dunningLetterText.findMany(args);
  }
  async dunningLetterText(
    args: Prisma.DunningLetterTextFindUniqueArgs
  ): Promise<PrismaDunningLetterText | null> {
    return this.prisma.dunningLetterText.findUnique(args);
  }
  async createDunningLetterText(
    args: Prisma.DunningLetterTextCreateArgs
  ): Promise<PrismaDunningLetterText> {
    return this.prisma.dunningLetterText.create(args);
  }
  async updateDunningLetterText(
    args: Prisma.DunningLetterTextUpdateArgs
  ): Promise<PrismaDunningLetterText> {
    return this.prisma.dunningLetterText.update(args);
  }
  async deleteDunningLetterText(
    args: Prisma.DunningLetterTextDeleteArgs
  ): Promise<PrismaDunningLetterText> {
    return this.prisma.dunningLetterText.delete(args);
  }
}
