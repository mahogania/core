/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DunningLetterTextService } from "../dunningLetterText.service";
import { DunningLetterTextCreateInput } from "./DunningLetterTextCreateInput";
import { DunningLetterText } from "./DunningLetterText";
import { DunningLetterTextFindManyArgs } from "./DunningLetterTextFindManyArgs";
import { DunningLetterTextWhereUniqueInput } from "./DunningLetterTextWhereUniqueInput";
import { DunningLetterTextUpdateInput } from "./DunningLetterTextUpdateInput";

export class DunningLetterTextControllerBase {
  constructor(protected readonly service: DunningLetterTextService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DunningLetterText })
  async createDunningLetterText(
    @common.Body() data: DunningLetterTextCreateInput
  ): Promise<DunningLetterText> {
    return await this.service.createDunningLetterText({
      data: data,
      select: {
        bodyText: true,
        closingText: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefaultLanguage: true,
        language: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DunningLetterText] })
  @ApiNestedQuery(DunningLetterTextFindManyArgs)
  async dunningLetterTexts(
    @common.Req() request: Request
  ): Promise<DunningLetterText[]> {
    const args = plainToClass(DunningLetterTextFindManyArgs, request.query);
    return this.service.dunningLetterTexts({
      ...args,
      select: {
        bodyText: true,
        closingText: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefaultLanguage: true,
        language: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DunningLetterText })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dunningLetterText(
    @common.Param() params: DunningLetterTextWhereUniqueInput
  ): Promise<DunningLetterText | null> {
    const result = await this.service.dunningLetterText({
      where: params,
      select: {
        bodyText: true,
        closingText: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefaultLanguage: true,
        language: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DunningLetterText })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDunningLetterText(
    @common.Param() params: DunningLetterTextWhereUniqueInput,
    @common.Body() data: DunningLetterTextUpdateInput
  ): Promise<DunningLetterText | null> {
    try {
      return await this.service.updateDunningLetterText({
        where: params,
        data: data,
        select: {
          bodyText: true,
          closingText: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefaultLanguage: true,
          language: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DunningLetterText })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDunningLetterText(
    @common.Param() params: DunningLetterTextWhereUniqueInput
  ): Promise<DunningLetterText | null> {
    try {
      return await this.service.deleteDunningLetterText({
        where: params,
        select: {
          bodyText: true,
          closingText: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefaultLanguage: true,
          language: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
