/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CommunicationLink as PrismaCommunicationLink,
} from "@prisma/client";

export class CommunicationLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommunicationLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.communicationLink.count(args);
  }

  async communicationLinks(
    args: Prisma.CommunicationLinkFindManyArgs
  ): Promise<PrismaCommunicationLink[]> {
    return this.prisma.communicationLink.findMany(args);
  }
  async communicationLink(
    args: Prisma.CommunicationLinkFindUniqueArgs
  ): Promise<PrismaCommunicationLink | null> {
    return this.prisma.communicationLink.findUnique(args);
  }
  async createCommunicationLink(
    args: Prisma.CommunicationLinkCreateArgs
  ): Promise<PrismaCommunicationLink> {
    return this.prisma.communicationLink.create(args);
  }
  async updateCommunicationLink(
    args: Prisma.CommunicationLinkUpdateArgs
  ): Promise<PrismaCommunicationLink> {
    return this.prisma.communicationLink.update(args);
  }
  async deleteCommunicationLink(
    args: Prisma.CommunicationLinkDeleteArgs
  ): Promise<PrismaCommunicationLink> {
    return this.prisma.communicationLink.delete(args);
  }
}
