/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommunicationLinkService } from "../communicationLink.service";
import { CommunicationLinkCreateInput } from "./CommunicationLinkCreateInput";
import { CommunicationLink } from "./CommunicationLink";
import { CommunicationLinkFindManyArgs } from "./CommunicationLinkFindManyArgs";
import { CommunicationLinkWhereUniqueInput } from "./CommunicationLinkWhereUniqueInput";
import { CommunicationLinkUpdateInput } from "./CommunicationLinkUpdateInput";

export class CommunicationLinkControllerBase {
  constructor(protected readonly service: CommunicationLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommunicationLink })
  async createCommunicationLink(
    @common.Body() data: CommunicationLinkCreateInput
  ): Promise<CommunicationLink> {
    return await this.service.createCommunicationLink({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        linkDoctype: true,
        linkName: true,
        linkTitle: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommunicationLink] })
  @ApiNestedQuery(CommunicationLinkFindManyArgs)
  async communicationLinks(
    @common.Req() request: Request
  ): Promise<CommunicationLink[]> {
    const args = plainToClass(CommunicationLinkFindManyArgs, request.query);
    return this.service.communicationLinks({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        linkDoctype: true,
        linkName: true,
        linkTitle: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommunicationLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async communicationLink(
    @common.Param() params: CommunicationLinkWhereUniqueInput
  ): Promise<CommunicationLink | null> {
    const result = await this.service.communicationLink({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        linkDoctype: true,
        linkName: true,
        linkTitle: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommunicationLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommunicationLink(
    @common.Param() params: CommunicationLinkWhereUniqueInput,
    @common.Body() data: CommunicationLinkUpdateInput
  ): Promise<CommunicationLink | null> {
    try {
      return await this.service.updateCommunicationLink({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          linkDoctype: true,
          linkName: true,
          linkTitle: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommunicationLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommunicationLink(
    @common.Param() params: CommunicationLinkWhereUniqueInput
  ): Promise<CommunicationLink | null> {
    try {
      return await this.service.deleteCommunicationLink({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          linkDoctype: true,
          linkName: true,
          linkTitle: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
