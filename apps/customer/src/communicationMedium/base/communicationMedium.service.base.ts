/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CommunicationMedium as PrismaCommunicationMedium,
} from "@prisma/client";

export class CommunicationMediumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommunicationMediumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.communicationMedium.count(args);
  }

  async communicationMediums(
    args: Prisma.CommunicationMediumFindManyArgs
  ): Promise<PrismaCommunicationMedium[]> {
    return this.prisma.communicationMedium.findMany(args);
  }
  async communicationMedium(
    args: Prisma.CommunicationMediumFindUniqueArgs
  ): Promise<PrismaCommunicationMedium | null> {
    return this.prisma.communicationMedium.findUnique(args);
  }
  async createCommunicationMedium(
    args: Prisma.CommunicationMediumCreateArgs
  ): Promise<PrismaCommunicationMedium> {
    return this.prisma.communicationMedium.create(args);
  }
  async updateCommunicationMedium(
    args: Prisma.CommunicationMediumUpdateArgs
  ): Promise<PrismaCommunicationMedium> {
    return this.prisma.communicationMedium.update(args);
  }
  async deleteCommunicationMedium(
    args: Prisma.CommunicationMediumDeleteArgs
  ): Promise<PrismaCommunicationMedium> {
    return this.prisma.communicationMedium.delete(args);
  }
}
