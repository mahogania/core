/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommunicationMediumService } from "../communicationMedium.service";
import { CommunicationMediumCreateInput } from "./CommunicationMediumCreateInput";
import { CommunicationMedium } from "./CommunicationMedium";
import { CommunicationMediumFindManyArgs } from "./CommunicationMediumFindManyArgs";
import { CommunicationMediumWhereUniqueInput } from "./CommunicationMediumWhereUniqueInput";
import { CommunicationMediumUpdateInput } from "./CommunicationMediumUpdateInput";

export class CommunicationMediumControllerBase {
  constructor(protected readonly service: CommunicationMediumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommunicationMedium })
  async createCommunicationMedium(
    @common.Body() data: CommunicationMediumCreateInput
  ): Promise<CommunicationMedium> {
    return await this.service.createCommunicationMedium({
      data: data,
      select: {
        catchAll: true,
        communicationChannel: true,
        communicationMediumType: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        provider: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommunicationMedium] })
  @ApiNestedQuery(CommunicationMediumFindManyArgs)
  async communicationMediums(
    @common.Req() request: Request
  ): Promise<CommunicationMedium[]> {
    const args = plainToClass(CommunicationMediumFindManyArgs, request.query);
    return this.service.communicationMediums({
      ...args,
      select: {
        catchAll: true,
        communicationChannel: true,
        communicationMediumType: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        provider: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommunicationMedium })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async communicationMedium(
    @common.Param() params: CommunicationMediumWhereUniqueInput
  ): Promise<CommunicationMedium | null> {
    const result = await this.service.communicationMedium({
      where: params,
      select: {
        catchAll: true,
        communicationChannel: true,
        communicationMediumType: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        provider: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommunicationMedium })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommunicationMedium(
    @common.Param() params: CommunicationMediumWhereUniqueInput,
    @common.Body() data: CommunicationMediumUpdateInput
  ): Promise<CommunicationMedium | null> {
    try {
      return await this.service.updateCommunicationMedium({
        where: params,
        data: data,
        select: {
          catchAll: true,
          communicationChannel: true,
          communicationMediumType: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          provider: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommunicationMedium })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommunicationMedium(
    @common.Param() params: CommunicationMediumWhereUniqueInput
  ): Promise<CommunicationMedium | null> {
    try {
      return await this.service.deleteCommunicationMedium({
        where: params,
        select: {
          catchAll: true,
          communicationChannel: true,
          communicationMediumType: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          provider: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
