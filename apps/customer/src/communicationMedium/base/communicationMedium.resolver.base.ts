/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommunicationMedium } from "./CommunicationMedium";
import { CommunicationMediumCountArgs } from "./CommunicationMediumCountArgs";
import { CommunicationMediumFindManyArgs } from "./CommunicationMediumFindManyArgs";
import { CommunicationMediumFindUniqueArgs } from "./CommunicationMediumFindUniqueArgs";
import { CreateCommunicationMediumArgs } from "./CreateCommunicationMediumArgs";
import { UpdateCommunicationMediumArgs } from "./UpdateCommunicationMediumArgs";
import { DeleteCommunicationMediumArgs } from "./DeleteCommunicationMediumArgs";
import { CommunicationMediumService } from "../communicationMedium.service";
@graphql.Resolver(() => CommunicationMedium)
export class CommunicationMediumResolverBase {
  constructor(protected readonly service: CommunicationMediumService) {}

  async _communicationMediumsMeta(
    @graphql.Args() args: CommunicationMediumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommunicationMedium])
  async communicationMediums(
    @graphql.Args() args: CommunicationMediumFindManyArgs
  ): Promise<CommunicationMedium[]> {
    return this.service.communicationMediums(args);
  }

  @graphql.Query(() => CommunicationMedium, { nullable: true })
  async communicationMedium(
    @graphql.Args() args: CommunicationMediumFindUniqueArgs
  ): Promise<CommunicationMedium | null> {
    const result = await this.service.communicationMedium(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommunicationMedium)
  async createCommunicationMedium(
    @graphql.Args() args: CreateCommunicationMediumArgs
  ): Promise<CommunicationMedium> {
    return await this.service.createCommunicationMedium({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CommunicationMedium)
  async updateCommunicationMedium(
    @graphql.Args() args: UpdateCommunicationMediumArgs
  ): Promise<CommunicationMedium | null> {
    try {
      return await this.service.updateCommunicationMedium({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommunicationMedium)
  async deleteCommunicationMedium(
    @graphql.Args() args: DeleteCommunicationMediumArgs
  ): Promise<CommunicationMedium | null> {
    try {
      return await this.service.deleteCommunicationMedium(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
