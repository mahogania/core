/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailDigestRecipient } from "./EmailDigestRecipient";
import { EmailDigestRecipientCountArgs } from "./EmailDigestRecipientCountArgs";
import { EmailDigestRecipientFindManyArgs } from "./EmailDigestRecipientFindManyArgs";
import { EmailDigestRecipientFindUniqueArgs } from "./EmailDigestRecipientFindUniqueArgs";
import { CreateEmailDigestRecipientArgs } from "./CreateEmailDigestRecipientArgs";
import { UpdateEmailDigestRecipientArgs } from "./UpdateEmailDigestRecipientArgs";
import { DeleteEmailDigestRecipientArgs } from "./DeleteEmailDigestRecipientArgs";
import { EmailDigestRecipientService } from "../emailDigestRecipient.service";
@graphql.Resolver(() => EmailDigestRecipient)
export class EmailDigestRecipientResolverBase {
  constructor(protected readonly service: EmailDigestRecipientService) {}

  async _emailDigestRecipientsMeta(
    @graphql.Args() args: EmailDigestRecipientCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailDigestRecipient])
  async emailDigestRecipients(
    @graphql.Args() args: EmailDigestRecipientFindManyArgs
  ): Promise<EmailDigestRecipient[]> {
    return this.service.emailDigestRecipients(args);
  }

  @graphql.Query(() => EmailDigestRecipient, { nullable: true })
  async emailDigestRecipient(
    @graphql.Args() args: EmailDigestRecipientFindUniqueArgs
  ): Promise<EmailDigestRecipient | null> {
    const result = await this.service.emailDigestRecipient(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailDigestRecipient)
  async createEmailDigestRecipient(
    @graphql.Args() args: CreateEmailDigestRecipientArgs
  ): Promise<EmailDigestRecipient> {
    return await this.service.createEmailDigestRecipient({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailDigestRecipient)
  async updateEmailDigestRecipient(
    @graphql.Args() args: UpdateEmailDigestRecipientArgs
  ): Promise<EmailDigestRecipient | null> {
    try {
      return await this.service.updateEmailDigestRecipient({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailDigestRecipient)
  async deleteEmailDigestRecipient(
    @graphql.Args() args: DeleteEmailDigestRecipientArgs
  ): Promise<EmailDigestRecipient | null> {
    try {
      return await this.service.deleteEmailDigestRecipient(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
