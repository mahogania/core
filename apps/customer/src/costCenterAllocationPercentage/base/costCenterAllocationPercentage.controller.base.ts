/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CostCenterAllocationPercentageService } from "../costCenterAllocationPercentage.service";
import { CostCenterAllocationPercentageCreateInput } from "./CostCenterAllocationPercentageCreateInput";
import { CostCenterAllocationPercentage } from "./CostCenterAllocationPercentage";
import { CostCenterAllocationPercentageFindManyArgs } from "./CostCenterAllocationPercentageFindManyArgs";
import { CostCenterAllocationPercentageWhereUniqueInput } from "./CostCenterAllocationPercentageWhereUniqueInput";
import { CostCenterAllocationPercentageUpdateInput } from "./CostCenterAllocationPercentageUpdateInput";

export class CostCenterAllocationPercentageControllerBase {
  constructor(
    protected readonly service: CostCenterAllocationPercentageService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CostCenterAllocationPercentage })
  async createCostCenterAllocationPercentage(
    @common.Body() data: CostCenterAllocationPercentageCreateInput
  ): Promise<CostCenterAllocationPercentage> {
    return await this.service.createCostCenterAllocationPercentage({
      data: data,
      select: {
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        percentage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CostCenterAllocationPercentage] })
  @ApiNestedQuery(CostCenterAllocationPercentageFindManyArgs)
  async costCenterAllocationPercentages(
    @common.Req() request: Request
  ): Promise<CostCenterAllocationPercentage[]> {
    const args = plainToClass(
      CostCenterAllocationPercentageFindManyArgs,
      request.query
    );
    return this.service.costCenterAllocationPercentages({
      ...args,
      select: {
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        percentage: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CostCenterAllocationPercentage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async costCenterAllocationPercentage(
    @common.Param() params: CostCenterAllocationPercentageWhereUniqueInput
  ): Promise<CostCenterAllocationPercentage | null> {
    const result = await this.service.costCenterAllocationPercentage({
      where: params,
      select: {
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        percentage: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CostCenterAllocationPercentage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCostCenterAllocationPercentage(
    @common.Param() params: CostCenterAllocationPercentageWhereUniqueInput,
    @common.Body() data: CostCenterAllocationPercentageUpdateInput
  ): Promise<CostCenterAllocationPercentage | null> {
    try {
      return await this.service.updateCostCenterAllocationPercentage({
        where: params,
        data: data,
        select: {
          costCenter: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          percentage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CostCenterAllocationPercentage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCostCenterAllocationPercentage(
    @common.Param() params: CostCenterAllocationPercentageWhereUniqueInput
  ): Promise<CostCenterAllocationPercentage | null> {
    try {
      return await this.service.deleteCostCenterAllocationPercentage({
        where: params,
        select: {
          costCenter: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          percentage: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
