/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CostCenterAllocationPercentage } from "./CostCenterAllocationPercentage";
import { CostCenterAllocationPercentageCountArgs } from "./CostCenterAllocationPercentageCountArgs";
import { CostCenterAllocationPercentageFindManyArgs } from "./CostCenterAllocationPercentageFindManyArgs";
import { CostCenterAllocationPercentageFindUniqueArgs } from "./CostCenterAllocationPercentageFindUniqueArgs";
import { CreateCostCenterAllocationPercentageArgs } from "./CreateCostCenterAllocationPercentageArgs";
import { UpdateCostCenterAllocationPercentageArgs } from "./UpdateCostCenterAllocationPercentageArgs";
import { DeleteCostCenterAllocationPercentageArgs } from "./DeleteCostCenterAllocationPercentageArgs";
import { CostCenterAllocationPercentageService } from "../costCenterAllocationPercentage.service";
@graphql.Resolver(() => CostCenterAllocationPercentage)
export class CostCenterAllocationPercentageResolverBase {
  constructor(
    protected readonly service: CostCenterAllocationPercentageService
  ) {}

  async _costCenterAllocationPercentagesMeta(
    @graphql.Args() args: CostCenterAllocationPercentageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CostCenterAllocationPercentage])
  async costCenterAllocationPercentages(
    @graphql.Args() args: CostCenterAllocationPercentageFindManyArgs
  ): Promise<CostCenterAllocationPercentage[]> {
    return this.service.costCenterAllocationPercentages(args);
  }

  @graphql.Query(() => CostCenterAllocationPercentage, { nullable: true })
  async costCenterAllocationPercentage(
    @graphql.Args() args: CostCenterAllocationPercentageFindUniqueArgs
  ): Promise<CostCenterAllocationPercentage | null> {
    const result = await this.service.costCenterAllocationPercentage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CostCenterAllocationPercentage)
  async createCostCenterAllocationPercentage(
    @graphql.Args() args: CreateCostCenterAllocationPercentageArgs
  ): Promise<CostCenterAllocationPercentage> {
    return await this.service.createCostCenterAllocationPercentage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CostCenterAllocationPercentage)
  async updateCostCenterAllocationPercentage(
    @graphql.Args() args: UpdateCostCenterAllocationPercentageArgs
  ): Promise<CostCenterAllocationPercentage | null> {
    try {
      return await this.service.updateCostCenterAllocationPercentage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CostCenterAllocationPercentage)
  async deleteCostCenterAllocationPercentage(
    @graphql.Args() args: DeleteCostCenterAllocationPercentageArgs
  ): Promise<CostCenterAllocationPercentage | null> {
    try {
      return await this.service.deleteCostCenterAllocationPercentage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
