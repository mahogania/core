/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomizeFormFieldService } from "../customizeFormField.service";
import { CustomizeFormFieldCreateInput } from "./CustomizeFormFieldCreateInput";
import { CustomizeFormField } from "./CustomizeFormField";
import { CustomizeFormFieldFindManyArgs } from "./CustomizeFormFieldFindManyArgs";
import { CustomizeFormFieldWhereUniqueInput } from "./CustomizeFormFieldWhereUniqueInput";
import { CustomizeFormFieldUpdateInput } from "./CustomizeFormFieldUpdateInput";

export class CustomizeFormFieldControllerBase {
  constructor(protected readonly service: CustomizeFormFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomizeFormField })
  async createCustomizeFormField(
    @common.Body() data: CustomizeFormFieldCreateInput
  ): Promise<CustomizeFormField> {
    return await this.service.createCustomizeFormField({
      data: data,
      select: {
        allowBulkEdit: true,
        allowInQuickEntry: true,
        allowOnSubmit: true,
        bold: true,
        collapsible: true,
        collapsibleDependsOn: true,
        columns: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        dependsOn: true,
        description: true,
        docstatus: true,
        fetchFrom: true,
        fetchIfEmpty: true,
        fieldname: true,
        fieldtype: true,
        hidden: true,
        hideBorder: true,
        hideDays: true,
        hideSeconds: true,
        id: true,
        idx: true,
        ignoreUserPermissions: true,
        ignoreXssFilter: true,
        inFilter: true,
        inGlobalSearch: true,
        inListView: true,
        inPreview: true,
        inStandardFilter: true,
        isCustomField: true,
        isSystemGenerated: true,
        isVirtual: true,
        label: true,
        length: true,
        linkFilters: true,
        mandatoryDependsOn: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noCopy: true,
        nonNegative: true,
        options: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        permlevel: true,
        precision: true,
        printHide: true,
        printHideIfNoValue: true,
        printWidth: true,
        readOnly: true,
        readOnlyDependsOn: true,
        rememberLastSelectedValue: true,
        reportHide: true,
        reqd: true,
        showDashboard: true,
        sortOptions: true,
        translatable: true,
        unique: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomizeFormField] })
  @ApiNestedQuery(CustomizeFormFieldFindManyArgs)
  async customizeFormFields(
    @common.Req() request: Request
  ): Promise<CustomizeFormField[]> {
    const args = plainToClass(CustomizeFormFieldFindManyArgs, request.query);
    return this.service.customizeFormFields({
      ...args,
      select: {
        allowBulkEdit: true,
        allowInQuickEntry: true,
        allowOnSubmit: true,
        bold: true,
        collapsible: true,
        collapsibleDependsOn: true,
        columns: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        dependsOn: true,
        description: true,
        docstatus: true,
        fetchFrom: true,
        fetchIfEmpty: true,
        fieldname: true,
        fieldtype: true,
        hidden: true,
        hideBorder: true,
        hideDays: true,
        hideSeconds: true,
        id: true,
        idx: true,
        ignoreUserPermissions: true,
        ignoreXssFilter: true,
        inFilter: true,
        inGlobalSearch: true,
        inListView: true,
        inPreview: true,
        inStandardFilter: true,
        isCustomField: true,
        isSystemGenerated: true,
        isVirtual: true,
        label: true,
        length: true,
        linkFilters: true,
        mandatoryDependsOn: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noCopy: true,
        nonNegative: true,
        options: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        permlevel: true,
        precision: true,
        printHide: true,
        printHideIfNoValue: true,
        printWidth: true,
        readOnly: true,
        readOnlyDependsOn: true,
        rememberLastSelectedValue: true,
        reportHide: true,
        reqd: true,
        showDashboard: true,
        sortOptions: true,
        translatable: true,
        unique: true,
        updatedAt: true,
        width: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomizeFormField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customizeFormField(
    @common.Param() params: CustomizeFormFieldWhereUniqueInput
  ): Promise<CustomizeFormField | null> {
    const result = await this.service.customizeFormField({
      where: params,
      select: {
        allowBulkEdit: true,
        allowInQuickEntry: true,
        allowOnSubmit: true,
        bold: true,
        collapsible: true,
        collapsibleDependsOn: true,
        columns: true,
        createdAt: true,
        creation: true,
        defaultField: true,
        dependsOn: true,
        description: true,
        docstatus: true,
        fetchFrom: true,
        fetchIfEmpty: true,
        fieldname: true,
        fieldtype: true,
        hidden: true,
        hideBorder: true,
        hideDays: true,
        hideSeconds: true,
        id: true,
        idx: true,
        ignoreUserPermissions: true,
        ignoreXssFilter: true,
        inFilter: true,
        inGlobalSearch: true,
        inListView: true,
        inPreview: true,
        inStandardFilter: true,
        isCustomField: true,
        isSystemGenerated: true,
        isVirtual: true,
        label: true,
        length: true,
        linkFilters: true,
        mandatoryDependsOn: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noCopy: true,
        nonNegative: true,
        options: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        permlevel: true,
        precision: true,
        printHide: true,
        printHideIfNoValue: true,
        printWidth: true,
        readOnly: true,
        readOnlyDependsOn: true,
        rememberLastSelectedValue: true,
        reportHide: true,
        reqd: true,
        showDashboard: true,
        sortOptions: true,
        translatable: true,
        unique: true,
        updatedAt: true,
        width: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomizeFormField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomizeFormField(
    @common.Param() params: CustomizeFormFieldWhereUniqueInput,
    @common.Body() data: CustomizeFormFieldUpdateInput
  ): Promise<CustomizeFormField | null> {
    try {
      return await this.service.updateCustomizeFormField({
        where: params,
        data: data,
        select: {
          allowBulkEdit: true,
          allowInQuickEntry: true,
          allowOnSubmit: true,
          bold: true,
          collapsible: true,
          collapsibleDependsOn: true,
          columns: true,
          createdAt: true,
          creation: true,
          defaultField: true,
          dependsOn: true,
          description: true,
          docstatus: true,
          fetchFrom: true,
          fetchIfEmpty: true,
          fieldname: true,
          fieldtype: true,
          hidden: true,
          hideBorder: true,
          hideDays: true,
          hideSeconds: true,
          id: true,
          idx: true,
          ignoreUserPermissions: true,
          ignoreXssFilter: true,
          inFilter: true,
          inGlobalSearch: true,
          inListView: true,
          inPreview: true,
          inStandardFilter: true,
          isCustomField: true,
          isSystemGenerated: true,
          isVirtual: true,
          label: true,
          length: true,
          linkFilters: true,
          mandatoryDependsOn: true,
          modified: true,
          modifiedBy: true,
          name: true,
          noCopy: true,
          nonNegative: true,
          options: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          permlevel: true,
          precision: true,
          printHide: true,
          printHideIfNoValue: true,
          printWidth: true,
          readOnly: true,
          readOnlyDependsOn: true,
          rememberLastSelectedValue: true,
          reportHide: true,
          reqd: true,
          showDashboard: true,
          sortOptions: true,
          translatable: true,
          unique: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomizeFormField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomizeFormField(
    @common.Param() params: CustomizeFormFieldWhereUniqueInput
  ): Promise<CustomizeFormField | null> {
    try {
      return await this.service.deleteCustomizeFormField({
        where: params,
        select: {
          allowBulkEdit: true,
          allowInQuickEntry: true,
          allowOnSubmit: true,
          bold: true,
          collapsible: true,
          collapsibleDependsOn: true,
          columns: true,
          createdAt: true,
          creation: true,
          defaultField: true,
          dependsOn: true,
          description: true,
          docstatus: true,
          fetchFrom: true,
          fetchIfEmpty: true,
          fieldname: true,
          fieldtype: true,
          hidden: true,
          hideBorder: true,
          hideDays: true,
          hideSeconds: true,
          id: true,
          idx: true,
          ignoreUserPermissions: true,
          ignoreXssFilter: true,
          inFilter: true,
          inGlobalSearch: true,
          inListView: true,
          inPreview: true,
          inStandardFilter: true,
          isCustomField: true,
          isSystemGenerated: true,
          isVirtual: true,
          label: true,
          length: true,
          linkFilters: true,
          mandatoryDependsOn: true,
          modified: true,
          modifiedBy: true,
          name: true,
          noCopy: true,
          nonNegative: true,
          options: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          permlevel: true,
          precision: true,
          printHide: true,
          printHideIfNoValue: true,
          printWidth: true,
          readOnly: true,
          readOnlyDependsOn: true,
          rememberLastSelectedValue: true,
          reportHide: true,
          reqd: true,
          showDashboard: true,
          sortOptions: true,
          translatable: true,
          unique: true,
          updatedAt: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
