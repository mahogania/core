/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomizeFormField as PrismaCustomizeFormField,
} from "@prisma/client";

export class CustomizeFormFieldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomizeFormFieldCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customizeFormField.count(args);
  }

  async customizeFormFields(
    args: Prisma.CustomizeFormFieldFindManyArgs
  ): Promise<PrismaCustomizeFormField[]> {
    return this.prisma.customizeFormField.findMany(args);
  }
  async customizeFormField(
    args: Prisma.CustomizeFormFieldFindUniqueArgs
  ): Promise<PrismaCustomizeFormField | null> {
    return this.prisma.customizeFormField.findUnique(args);
  }
  async createCustomizeFormField(
    args: Prisma.CustomizeFormFieldCreateArgs
  ): Promise<PrismaCustomizeFormField> {
    return this.prisma.customizeFormField.create(args);
  }
  async updateCustomizeFormField(
    args: Prisma.CustomizeFormFieldUpdateArgs
  ): Promise<PrismaCustomizeFormField> {
    return this.prisma.customizeFormField.update(args);
  }
  async deleteCustomizeFormField(
    args: Prisma.CustomizeFormFieldDeleteArgs
  ): Promise<PrismaCustomizeFormField> {
    return this.prisma.customizeFormField.delete(args);
  }
}
