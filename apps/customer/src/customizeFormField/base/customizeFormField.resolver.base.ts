/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomizeFormField } from "./CustomizeFormField";
import { CustomizeFormFieldCountArgs } from "./CustomizeFormFieldCountArgs";
import { CustomizeFormFieldFindManyArgs } from "./CustomizeFormFieldFindManyArgs";
import { CustomizeFormFieldFindUniqueArgs } from "./CustomizeFormFieldFindUniqueArgs";
import { CreateCustomizeFormFieldArgs } from "./CreateCustomizeFormFieldArgs";
import { UpdateCustomizeFormFieldArgs } from "./UpdateCustomizeFormFieldArgs";
import { DeleteCustomizeFormFieldArgs } from "./DeleteCustomizeFormFieldArgs";
import { CustomizeFormFieldService } from "../customizeFormField.service";
@graphql.Resolver(() => CustomizeFormField)
export class CustomizeFormFieldResolverBase {
  constructor(protected readonly service: CustomizeFormFieldService) {}

  async _customizeFormFieldsMeta(
    @graphql.Args() args: CustomizeFormFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomizeFormField])
  async customizeFormFields(
    @graphql.Args() args: CustomizeFormFieldFindManyArgs
  ): Promise<CustomizeFormField[]> {
    return this.service.customizeFormFields(args);
  }

  @graphql.Query(() => CustomizeFormField, { nullable: true })
  async customizeFormField(
    @graphql.Args() args: CustomizeFormFieldFindUniqueArgs
  ): Promise<CustomizeFormField | null> {
    const result = await this.service.customizeFormField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomizeFormField)
  async createCustomizeFormField(
    @graphql.Args() args: CreateCustomizeFormFieldArgs
  ): Promise<CustomizeFormField> {
    return await this.service.createCustomizeFormField({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomizeFormField)
  async updateCustomizeFormField(
    @graphql.Args() args: UpdateCustomizeFormFieldArgs
  ): Promise<CustomizeFormField | null> {
    try {
      return await this.service.updateCustomizeFormField({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomizeFormField)
  async deleteCustomizeFormField(
    @graphql.Args() args: DeleteCustomizeFormFieldArgs
  ): Promise<CustomizeFormField | null> {
    try {
      return await this.service.deleteCustomizeFormField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
