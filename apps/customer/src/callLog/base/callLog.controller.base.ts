/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CallLogService } from "../callLog.service";
import { CallLogCreateInput } from "./CallLogCreateInput";
import { CallLog } from "./CallLog";
import { CallLogFindManyArgs } from "./CallLogFindManyArgs";
import { CallLogWhereUniqueInput } from "./CallLogWhereUniqueInput";
import { CallLogUpdateInput } from "./CallLogUpdateInput";

export class CallLogControllerBase {
  constructor(protected readonly service: CallLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CallLog })
  async createCallLog(
    @common.Body() data: CallLogCreateInput
  ): Promise<CallLog> {
    return await this.service.createCallLog({
      data: data,
      select: {
        callReceivedBy: true,
        callType: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        duration: true,
        employeeUserId: true,
        endTime: true,
        fromField: true,
        id: true,
        idx: true,
        medium: true,
        modified: true,
        modifiedBy: true,
        originalId: true,
        owner: true,
        recordingUrl: true,
        startTime: true,
        status: true,
        summary: true,
        to: true,
        typeOfCall: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CallLog] })
  @ApiNestedQuery(CallLogFindManyArgs)
  async callLogs(@common.Req() request: Request): Promise<CallLog[]> {
    const args = plainToClass(CallLogFindManyArgs, request.query);
    return this.service.callLogs({
      ...args,
      select: {
        callReceivedBy: true,
        callType: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        duration: true,
        employeeUserId: true,
        endTime: true,
        fromField: true,
        id: true,
        idx: true,
        medium: true,
        modified: true,
        modifiedBy: true,
        originalId: true,
        owner: true,
        recordingUrl: true,
        startTime: true,
        status: true,
        summary: true,
        to: true,
        typeOfCall: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CallLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async callLog(
    @common.Param() params: CallLogWhereUniqueInput
  ): Promise<CallLog | null> {
    const result = await this.service.callLog({
      where: params,
      select: {
        callReceivedBy: true,
        callType: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        duration: true,
        employeeUserId: true,
        endTime: true,
        fromField: true,
        id: true,
        idx: true,
        medium: true,
        modified: true,
        modifiedBy: true,
        originalId: true,
        owner: true,
        recordingUrl: true,
        startTime: true,
        status: true,
        summary: true,
        to: true,
        typeOfCall: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CallLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCallLog(
    @common.Param() params: CallLogWhereUniqueInput,
    @common.Body() data: CallLogUpdateInput
  ): Promise<CallLog | null> {
    try {
      return await this.service.updateCallLog({
        where: params,
        data: data,
        select: {
          callReceivedBy: true,
          callType: true,
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          duration: true,
          employeeUserId: true,
          endTime: true,
          fromField: true,
          id: true,
          idx: true,
          medium: true,
          modified: true,
          modifiedBy: true,
          originalId: true,
          owner: true,
          recordingUrl: true,
          startTime: true,
          status: true,
          summary: true,
          to: true,
          typeOfCall: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CallLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCallLog(
    @common.Param() params: CallLogWhereUniqueInput
  ): Promise<CallLog | null> {
    try {
      return await this.service.deleteCallLog({
        where: params,
        select: {
          callReceivedBy: true,
          callType: true,
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          duration: true,
          employeeUserId: true,
          endTime: true,
          fromField: true,
          id: true,
          idx: true,
          medium: true,
          modified: true,
          modifiedBy: true,
          originalId: true,
          owner: true,
          recordingUrl: true,
          startTime: true,
          status: true,
          summary: true,
          to: true,
          typeOfCall: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
