/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CalendarView } from "./CalendarView";
import { CalendarViewCountArgs } from "./CalendarViewCountArgs";
import { CalendarViewFindManyArgs } from "./CalendarViewFindManyArgs";
import { CalendarViewFindUniqueArgs } from "./CalendarViewFindUniqueArgs";
import { CreateCalendarViewArgs } from "./CreateCalendarViewArgs";
import { UpdateCalendarViewArgs } from "./UpdateCalendarViewArgs";
import { DeleteCalendarViewArgs } from "./DeleteCalendarViewArgs";
import { CalendarViewService } from "../calendarView.service";
@graphql.Resolver(() => CalendarView)
export class CalendarViewResolverBase {
  constructor(protected readonly service: CalendarViewService) {}

  async _calendarViewsMeta(
    @graphql.Args() args: CalendarViewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CalendarView])
  async calendarViews(
    @graphql.Args() args: CalendarViewFindManyArgs
  ): Promise<CalendarView[]> {
    return this.service.calendarViews(args);
  }

  @graphql.Query(() => CalendarView, { nullable: true })
  async calendarView(
    @graphql.Args() args: CalendarViewFindUniqueArgs
  ): Promise<CalendarView | null> {
    const result = await this.service.calendarView(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CalendarView)
  async createCalendarView(
    @graphql.Args() args: CreateCalendarViewArgs
  ): Promise<CalendarView> {
    return await this.service.createCalendarView({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CalendarView)
  async updateCalendarView(
    @graphql.Args() args: UpdateCalendarViewArgs
  ): Promise<CalendarView | null> {
    try {
      return await this.service.updateCalendarView({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CalendarView)
  async deleteCalendarView(
    @graphql.Args() args: DeleteCalendarViewArgs
  ): Promise<CalendarView | null> {
    try {
      return await this.service.deleteCalendarView(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
