/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CalendarViewService } from "../calendarView.service";
import { CalendarViewCreateInput } from "./CalendarViewCreateInput";
import { CalendarView } from "./CalendarView";
import { CalendarViewFindManyArgs } from "./CalendarViewFindManyArgs";
import { CalendarViewWhereUniqueInput } from "./CalendarViewWhereUniqueInput";
import { CalendarViewUpdateInput } from "./CalendarViewUpdateInput";

export class CalendarViewControllerBase {
  constructor(protected readonly service: CalendarViewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CalendarView })
  async createCalendarView(
    @common.Body() data: CalendarViewCreateInput
  ): Promise<CalendarView> {
    return await this.service.createCalendarView({
      data: data,
      select: {
        allDay: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        endDateField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        referenceDoctype: true,
        startDateField: true,
        subjectField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CalendarView] })
  @ApiNestedQuery(CalendarViewFindManyArgs)
  async calendarViews(@common.Req() request: Request): Promise<CalendarView[]> {
    const args = plainToClass(CalendarViewFindManyArgs, request.query);
    return this.service.calendarViews({
      ...args,
      select: {
        allDay: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        endDateField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        referenceDoctype: true,
        startDateField: true,
        subjectField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CalendarView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async calendarView(
    @common.Param() params: CalendarViewWhereUniqueInput
  ): Promise<CalendarView | null> {
    const result = await this.service.calendarView({
      where: params,
      select: {
        allDay: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        endDateField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        referenceDoctype: true,
        startDateField: true,
        subjectField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CalendarView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCalendarView(
    @common.Param() params: CalendarViewWhereUniqueInput,
    @common.Body() data: CalendarViewUpdateInput
  ): Promise<CalendarView | null> {
    try {
      return await this.service.updateCalendarView({
        where: params,
        data: data,
        select: {
          allDay: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          endDateField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          referenceDoctype: true,
          startDateField: true,
          subjectField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CalendarView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCalendarView(
    @common.Param() params: CalendarViewWhereUniqueInput
  ): Promise<CalendarView | null> {
    try {
      return await this.service.deleteCalendarView({
        where: params,
        select: {
          allDay: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          endDateField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          referenceDoctype: true,
          startDateField: true,
          subjectField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
