/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailCampaign } from "./EmailCampaign";
import { EmailCampaignCountArgs } from "./EmailCampaignCountArgs";
import { EmailCampaignFindManyArgs } from "./EmailCampaignFindManyArgs";
import { EmailCampaignFindUniqueArgs } from "./EmailCampaignFindUniqueArgs";
import { CreateEmailCampaignArgs } from "./CreateEmailCampaignArgs";
import { UpdateEmailCampaignArgs } from "./UpdateEmailCampaignArgs";
import { DeleteEmailCampaignArgs } from "./DeleteEmailCampaignArgs";
import { EmailCampaignService } from "../emailCampaign.service";
@graphql.Resolver(() => EmailCampaign)
export class EmailCampaignResolverBase {
  constructor(protected readonly service: EmailCampaignService) {}

  async _emailCampaignsMeta(
    @graphql.Args() args: EmailCampaignCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailCampaign])
  async emailCampaigns(
    @graphql.Args() args: EmailCampaignFindManyArgs
  ): Promise<EmailCampaign[]> {
    return this.service.emailCampaigns(args);
  }

  @graphql.Query(() => EmailCampaign, { nullable: true })
  async emailCampaign(
    @graphql.Args() args: EmailCampaignFindUniqueArgs
  ): Promise<EmailCampaign | null> {
    const result = await this.service.emailCampaign(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailCampaign)
  async createEmailCampaign(
    @graphql.Args() args: CreateEmailCampaignArgs
  ): Promise<EmailCampaign> {
    return await this.service.createEmailCampaign({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailCampaign)
  async updateEmailCampaign(
    @graphql.Args() args: UpdateEmailCampaignArgs
  ): Promise<EmailCampaign | null> {
    try {
      return await this.service.updateEmailCampaign({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailCampaign)
  async deleteEmailCampaign(
    @graphql.Args() args: DeleteEmailCampaignArgs
  ): Promise<EmailCampaign | null> {
    try {
      return await this.service.deleteEmailCampaign(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
