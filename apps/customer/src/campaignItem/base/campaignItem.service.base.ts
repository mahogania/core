/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CampaignItem as PrismaCampaignItem } from "@prisma/client";

export class CampaignItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CampaignItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.campaignItem.count(args);
  }

  async campaignItems(
    args: Prisma.CampaignItemFindManyArgs
  ): Promise<PrismaCampaignItem[]> {
    return this.prisma.campaignItem.findMany(args);
  }
  async campaignItem(
    args: Prisma.CampaignItemFindUniqueArgs
  ): Promise<PrismaCampaignItem | null> {
    return this.prisma.campaignItem.findUnique(args);
  }
  async createCampaignItem(
    args: Prisma.CampaignItemCreateArgs
  ): Promise<PrismaCampaignItem> {
    return this.prisma.campaignItem.create(args);
  }
  async updateCampaignItem(
    args: Prisma.CampaignItemUpdateArgs
  ): Promise<PrismaCampaignItem> {
    return this.prisma.campaignItem.update(args);
  }
  async deleteCampaignItem(
    args: Prisma.CampaignItemDeleteArgs
  ): Promise<PrismaCampaignItem> {
    return this.prisma.campaignItem.delete(args);
  }
}
