/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampaignItemService } from "../campaignItem.service";
import { CampaignItemCreateInput } from "./CampaignItemCreateInput";
import { CampaignItem } from "./CampaignItem";
import { CampaignItemFindManyArgs } from "./CampaignItemFindManyArgs";
import { CampaignItemWhereUniqueInput } from "./CampaignItemWhereUniqueInput";
import { CampaignItemUpdateInput } from "./CampaignItemUpdateInput";

export class CampaignItemControllerBase {
  constructor(protected readonly service: CampaignItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CampaignItem })
  async createCampaignItem(
    @common.Body() data: CampaignItemCreateInput
  ): Promise<CampaignItem> {
    return await this.service.createCampaignItem({
      data: data,
      select: {
        campaign: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CampaignItem] })
  @ApiNestedQuery(CampaignItemFindManyArgs)
  async campaignItems(@common.Req() request: Request): Promise<CampaignItem[]> {
    const args = plainToClass(CampaignItemFindManyArgs, request.query);
    return this.service.campaignItems({
      ...args,
      select: {
        campaign: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CampaignItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campaignItem(
    @common.Param() params: CampaignItemWhereUniqueInput
  ): Promise<CampaignItem | null> {
    const result = await this.service.campaignItem({
      where: params,
      select: {
        campaign: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CampaignItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampaignItem(
    @common.Param() params: CampaignItemWhereUniqueInput,
    @common.Body() data: CampaignItemUpdateInput
  ): Promise<CampaignItem | null> {
    try {
      return await this.service.updateCampaignItem({
        where: params,
        data: data,
        select: {
          campaign: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CampaignItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampaignItem(
    @common.Param() params: CampaignItemWhereUniqueInput
  ): Promise<CampaignItem | null> {
    try {
      return await this.service.deleteCampaignItem({
        where: params,
        select: {
          campaign: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
