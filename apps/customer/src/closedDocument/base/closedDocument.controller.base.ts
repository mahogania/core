/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClosedDocumentService } from "../closedDocument.service";
import { ClosedDocumentCreateInput } from "./ClosedDocumentCreateInput";
import { ClosedDocument } from "./ClosedDocument";
import { ClosedDocumentFindManyArgs } from "./ClosedDocumentFindManyArgs";
import { ClosedDocumentWhereUniqueInput } from "./ClosedDocumentWhereUniqueInput";
import { ClosedDocumentUpdateInput } from "./ClosedDocumentUpdateInput";

export class ClosedDocumentControllerBase {
  constructor(protected readonly service: ClosedDocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClosedDocument })
  async createClosedDocument(
    @common.Body() data: ClosedDocumentCreateInput
  ): Promise<ClosedDocument> {
    return await this.service.createClosedDocument({
      data: data,
      select: {
        closed: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        documentType: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClosedDocument] })
  @ApiNestedQuery(ClosedDocumentFindManyArgs)
  async closedDocuments(
    @common.Req() request: Request
  ): Promise<ClosedDocument[]> {
    const args = plainToClass(ClosedDocumentFindManyArgs, request.query);
    return this.service.closedDocuments({
      ...args,
      select: {
        closed: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        documentType: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClosedDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async closedDocument(
    @common.Param() params: ClosedDocumentWhereUniqueInput
  ): Promise<ClosedDocument | null> {
    const result = await this.service.closedDocument({
      where: params,
      select: {
        closed: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        documentType: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClosedDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClosedDocument(
    @common.Param() params: ClosedDocumentWhereUniqueInput,
    @common.Body() data: ClosedDocumentUpdateInput
  ): Promise<ClosedDocument | null> {
    try {
      return await this.service.updateClosedDocument({
        where: params,
        data: data,
        select: {
          closed: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          documentType: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClosedDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClosedDocument(
    @common.Param() params: ClosedDocumentWhereUniqueInput
  ): Promise<ClosedDocument | null> {
    try {
      return await this.service.deleteClosedDocument({
        where: params,
        select: {
          closed: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          documentType: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
