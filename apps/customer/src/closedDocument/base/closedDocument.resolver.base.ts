/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClosedDocument } from "./ClosedDocument";
import { ClosedDocumentCountArgs } from "./ClosedDocumentCountArgs";
import { ClosedDocumentFindManyArgs } from "./ClosedDocumentFindManyArgs";
import { ClosedDocumentFindUniqueArgs } from "./ClosedDocumentFindUniqueArgs";
import { CreateClosedDocumentArgs } from "./CreateClosedDocumentArgs";
import { UpdateClosedDocumentArgs } from "./UpdateClosedDocumentArgs";
import { DeleteClosedDocumentArgs } from "./DeleteClosedDocumentArgs";
import { ClosedDocumentService } from "../closedDocument.service";
@graphql.Resolver(() => ClosedDocument)
export class ClosedDocumentResolverBase {
  constructor(protected readonly service: ClosedDocumentService) {}

  async _closedDocumentsMeta(
    @graphql.Args() args: ClosedDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClosedDocument])
  async closedDocuments(
    @graphql.Args() args: ClosedDocumentFindManyArgs
  ): Promise<ClosedDocument[]> {
    return this.service.closedDocuments(args);
  }

  @graphql.Query(() => ClosedDocument, { nullable: true })
  async closedDocument(
    @graphql.Args() args: ClosedDocumentFindUniqueArgs
  ): Promise<ClosedDocument | null> {
    const result = await this.service.closedDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClosedDocument)
  async createClosedDocument(
    @graphql.Args() args: CreateClosedDocumentArgs
  ): Promise<ClosedDocument> {
    return await this.service.createClosedDocument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClosedDocument)
  async updateClosedDocument(
    @graphql.Args() args: UpdateClosedDocumentArgs
  ): Promise<ClosedDocument | null> {
    try {
      return await this.service.updateClosedDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClosedDocument)
  async deleteClosedDocument(
    @graphql.Args() args: DeleteClosedDocumentArgs
  ): Promise<ClosedDocument | null> {
    try {
      return await this.service.deleteClosedDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
