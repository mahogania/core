/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CashierClosing } from "./CashierClosing";
import { CashierClosingCountArgs } from "./CashierClosingCountArgs";
import { CashierClosingFindManyArgs } from "./CashierClosingFindManyArgs";
import { CashierClosingFindUniqueArgs } from "./CashierClosingFindUniqueArgs";
import { CreateCashierClosingArgs } from "./CreateCashierClosingArgs";
import { UpdateCashierClosingArgs } from "./UpdateCashierClosingArgs";
import { DeleteCashierClosingArgs } from "./DeleteCashierClosingArgs";
import { CashierClosingService } from "../cashierClosing.service";
@graphql.Resolver(() => CashierClosing)
export class CashierClosingResolverBase {
  constructor(protected readonly service: CashierClosingService) {}

  async _cashierClosingsMeta(
    @graphql.Args() args: CashierClosingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CashierClosing])
  async cashierClosings(
    @graphql.Args() args: CashierClosingFindManyArgs
  ): Promise<CashierClosing[]> {
    return this.service.cashierClosings(args);
  }

  @graphql.Query(() => CashierClosing, { nullable: true })
  async cashierClosing(
    @graphql.Args() args: CashierClosingFindUniqueArgs
  ): Promise<CashierClosing | null> {
    const result = await this.service.cashierClosing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CashierClosing)
  async createCashierClosing(
    @graphql.Args() args: CreateCashierClosingArgs
  ): Promise<CashierClosing> {
    return await this.service.createCashierClosing({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CashierClosing)
  async updateCashierClosing(
    @graphql.Args() args: UpdateCashierClosingArgs
  ): Promise<CashierClosing | null> {
    try {
      return await this.service.updateCashierClosing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CashierClosing)
  async deleteCashierClosing(
    @graphql.Args() args: DeleteCashierClosingArgs
  ): Promise<CashierClosing | null> {
    try {
      return await this.service.deleteCashierClosing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
