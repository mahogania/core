/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailGroupService } from "../emailGroup.service";
import { EmailGroupCreateInput } from "./EmailGroupCreateInput";
import { EmailGroup } from "./EmailGroup";
import { EmailGroupFindManyArgs } from "./EmailGroupFindManyArgs";
import { EmailGroupWhereUniqueInput } from "./EmailGroupWhereUniqueInput";
import { EmailGroupUpdateInput } from "./EmailGroupUpdateInput";

export class EmailGroupControllerBase {
  constructor(protected readonly service: EmailGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailGroup })
  async createEmailGroup(
    @common.Body() data: EmailGroupCreateInput
  ): Promise<EmailGroup> {
    return await this.service.createEmailGroup({
      data: data,
      select: {
        addQueryParameters: true,
        confirmationEmailTemplate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        title: true,
        totalSubscribers: true,
        updatedAt: true,
        welcomeEmailTemplate: true,
        welcomeUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailGroup] })
  @ApiNestedQuery(EmailGroupFindManyArgs)
  async emailGroups(@common.Req() request: Request): Promise<EmailGroup[]> {
    const args = plainToClass(EmailGroupFindManyArgs, request.query);
    return this.service.emailGroups({
      ...args,
      select: {
        addQueryParameters: true,
        confirmationEmailTemplate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        title: true,
        totalSubscribers: true,
        updatedAt: true,
        welcomeEmailTemplate: true,
        welcomeUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailGroup(
    @common.Param() params: EmailGroupWhereUniqueInput
  ): Promise<EmailGroup | null> {
    const result = await this.service.emailGroup({
      where: params,
      select: {
        addQueryParameters: true,
        confirmationEmailTemplate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        title: true,
        totalSubscribers: true,
        updatedAt: true,
        welcomeEmailTemplate: true,
        welcomeUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailGroup(
    @common.Param() params: EmailGroupWhereUniqueInput,
    @common.Body() data: EmailGroupUpdateInput
  ): Promise<EmailGroup | null> {
    try {
      return await this.service.updateEmailGroup({
        where: params,
        data: data,
        select: {
          addQueryParameters: true,
          confirmationEmailTemplate: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          title: true,
          totalSubscribers: true,
          updatedAt: true,
          welcomeEmailTemplate: true,
          welcomeUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailGroup(
    @common.Param() params: EmailGroupWhereUniqueInput
  ): Promise<EmailGroup | null> {
    try {
      return await this.service.deleteEmailGroup({
        where: params,
        select: {
          addQueryParameters: true,
          confirmationEmailTemplate: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          title: true,
          totalSubscribers: true,
          updatedAt: true,
          welcomeEmailTemplate: true,
          welcomeUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
