/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailGroup as PrismaEmailGroup } from "@prisma/client";

export class EmailGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailGroup.count(args);
  }

  async emailGroups(
    args: Prisma.EmailGroupFindManyArgs
  ): Promise<PrismaEmailGroup[]> {
    return this.prisma.emailGroup.findMany(args);
  }
  async emailGroup(
    args: Prisma.EmailGroupFindUniqueArgs
  ): Promise<PrismaEmailGroup | null> {
    return this.prisma.emailGroup.findUnique(args);
  }
  async createEmailGroup(
    args: Prisma.EmailGroupCreateArgs
  ): Promise<PrismaEmailGroup> {
    return this.prisma.emailGroup.create(args);
  }
  async updateEmailGroup(
    args: Prisma.EmailGroupUpdateArgs
  ): Promise<PrismaEmailGroup> {
    return this.prisma.emailGroup.update(args);
  }
  async deleteEmailGroup(
    args: Prisma.EmailGroupDeleteArgs
  ): Promise<PrismaEmailGroup> {
    return this.prisma.emailGroup.delete(args);
  }
}
