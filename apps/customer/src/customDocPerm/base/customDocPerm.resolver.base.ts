/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomDocPerm } from "./CustomDocPerm";
import { CustomDocPermCountArgs } from "./CustomDocPermCountArgs";
import { CustomDocPermFindManyArgs } from "./CustomDocPermFindManyArgs";
import { CustomDocPermFindUniqueArgs } from "./CustomDocPermFindUniqueArgs";
import { CreateCustomDocPermArgs } from "./CreateCustomDocPermArgs";
import { UpdateCustomDocPermArgs } from "./UpdateCustomDocPermArgs";
import { DeleteCustomDocPermArgs } from "./DeleteCustomDocPermArgs";
import { CustomDocPermService } from "../customDocPerm.service";
@graphql.Resolver(() => CustomDocPerm)
export class CustomDocPermResolverBase {
  constructor(protected readonly service: CustomDocPermService) {}

  async _customDocPermsMeta(
    @graphql.Args() args: CustomDocPermCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomDocPerm])
  async customDocPerms(
    @graphql.Args() args: CustomDocPermFindManyArgs
  ): Promise<CustomDocPerm[]> {
    return this.service.customDocPerms(args);
  }

  @graphql.Query(() => CustomDocPerm, { nullable: true })
  async customDocPerm(
    @graphql.Args() args: CustomDocPermFindUniqueArgs
  ): Promise<CustomDocPerm | null> {
    const result = await this.service.customDocPerm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomDocPerm)
  async createCustomDocPerm(
    @graphql.Args() args: CreateCustomDocPermArgs
  ): Promise<CustomDocPerm> {
    return await this.service.createCustomDocPerm({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomDocPerm)
  async updateCustomDocPerm(
    @graphql.Args() args: UpdateCustomDocPermArgs
  ): Promise<CustomDocPerm | null> {
    try {
      return await this.service.updateCustomDocPerm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomDocPerm)
  async deleteCustomDocPerm(
    @graphql.Args() args: DeleteCustomDocPermArgs
  ): Promise<CustomDocPerm | null> {
    try {
      return await this.service.deleteCustomDocPerm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
