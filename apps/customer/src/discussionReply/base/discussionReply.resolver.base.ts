/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiscussionReply } from "./DiscussionReply";
import { DiscussionReplyCountArgs } from "./DiscussionReplyCountArgs";
import { DiscussionReplyFindManyArgs } from "./DiscussionReplyFindManyArgs";
import { DiscussionReplyFindUniqueArgs } from "./DiscussionReplyFindUniqueArgs";
import { CreateDiscussionReplyArgs } from "./CreateDiscussionReplyArgs";
import { UpdateDiscussionReplyArgs } from "./UpdateDiscussionReplyArgs";
import { DeleteDiscussionReplyArgs } from "./DeleteDiscussionReplyArgs";
import { DiscussionReplyService } from "../discussionReply.service";
@graphql.Resolver(() => DiscussionReply)
export class DiscussionReplyResolverBase {
  constructor(protected readonly service: DiscussionReplyService) {}

  async _discussionRepliesMeta(
    @graphql.Args() args: DiscussionReplyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiscussionReply])
  async discussionReplies(
    @graphql.Args() args: DiscussionReplyFindManyArgs
  ): Promise<DiscussionReply[]> {
    return this.service.discussionReplies(args);
  }

  @graphql.Query(() => DiscussionReply, { nullable: true })
  async discussionReply(
    @graphql.Args() args: DiscussionReplyFindUniqueArgs
  ): Promise<DiscussionReply | null> {
    const result = await this.service.discussionReply(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiscussionReply)
  async createDiscussionReply(
    @graphql.Args() args: CreateDiscussionReplyArgs
  ): Promise<DiscussionReply> {
    return await this.service.createDiscussionReply({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DiscussionReply)
  async updateDiscussionReply(
    @graphql.Args() args: UpdateDiscussionReplyArgs
  ): Promise<DiscussionReply | null> {
    try {
      return await this.service.updateDiscussionReply({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiscussionReply)
  async deleteDiscussionReply(
    @graphql.Args() args: DeleteDiscussionReplyArgs
  ): Promise<DiscussionReply | null> {
    try {
      return await this.service.deleteDiscussionReply(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
