/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DiscussionReply as PrismaDiscussionReply,
} from "@prisma/client";

export class DiscussionReplyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiscussionReplyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.discussionReply.count(args);
  }

  async discussionReplies(
    args: Prisma.DiscussionReplyFindManyArgs
  ): Promise<PrismaDiscussionReply[]> {
    return this.prisma.discussionReply.findMany(args);
  }
  async discussionReply(
    args: Prisma.DiscussionReplyFindUniqueArgs
  ): Promise<PrismaDiscussionReply | null> {
    return this.prisma.discussionReply.findUnique(args);
  }
  async createDiscussionReply(
    args: Prisma.DiscussionReplyCreateArgs
  ): Promise<PrismaDiscussionReply> {
    return this.prisma.discussionReply.create(args);
  }
  async updateDiscussionReply(
    args: Prisma.DiscussionReplyUpdateArgs
  ): Promise<PrismaDiscussionReply> {
    return this.prisma.discussionReply.update(args);
  }
  async deleteDiscussionReply(
    args: Prisma.DiscussionReplyDeleteArgs
  ): Promise<PrismaDiscussionReply> {
    return this.prisma.discussionReply.delete(args);
  }
}
