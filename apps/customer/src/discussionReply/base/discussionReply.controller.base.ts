/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiscussionReplyService } from "../discussionReply.service";
import { DiscussionReplyCreateInput } from "./DiscussionReplyCreateInput";
import { DiscussionReply } from "./DiscussionReply";
import { DiscussionReplyFindManyArgs } from "./DiscussionReplyFindManyArgs";
import { DiscussionReplyWhereUniqueInput } from "./DiscussionReplyWhereUniqueInput";
import { DiscussionReplyUpdateInput } from "./DiscussionReplyUpdateInput";

export class DiscussionReplyControllerBase {
  constructor(protected readonly service: DiscussionReplyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscussionReply })
  async createDiscussionReply(
    @common.Body() data: DiscussionReplyCreateInput
  ): Promise<DiscussionReply> {
    return await this.service.createDiscussionReply({
      data: data,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        reply: true,
        topic: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscussionReply] })
  @ApiNestedQuery(DiscussionReplyFindManyArgs)
  async discussionReplies(
    @common.Req() request: Request
  ): Promise<DiscussionReply[]> {
    const args = plainToClass(DiscussionReplyFindManyArgs, request.query);
    return this.service.discussionReplies({
      ...args,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        reply: true,
        topic: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscussionReply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async discussionReply(
    @common.Param() params: DiscussionReplyWhereUniqueInput
  ): Promise<DiscussionReply | null> {
    const result = await this.service.discussionReply({
      where: params,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        reply: true,
        topic: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscussionReply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiscussionReply(
    @common.Param() params: DiscussionReplyWhereUniqueInput,
    @common.Body() data: DiscussionReplyUpdateInput
  ): Promise<DiscussionReply | null> {
    try {
      return await this.service.updateDiscussionReply({
        where: params,
        data: data,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          reply: true,
          topic: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscussionReply })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiscussionReply(
    @common.Param() params: DiscussionReplyWhereUniqueInput
  ): Promise<DiscussionReply | null> {
    try {
      return await this.service.deleteDiscussionReply({
        where: params,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          reply: true,
          topic: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
