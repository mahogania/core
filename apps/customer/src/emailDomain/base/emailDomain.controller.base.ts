/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailDomainService } from "../emailDomain.service";
import { EmailDomainCreateInput } from "./EmailDomainCreateInput";
import { EmailDomain } from "./EmailDomain";
import { EmailDomainFindManyArgs } from "./EmailDomainFindManyArgs";
import { EmailDomainWhereUniqueInput } from "./EmailDomainWhereUniqueInput";
import { EmailDomainUpdateInput } from "./EmailDomainUpdateInput";

export class EmailDomainControllerBase {
  constructor(protected readonly service: EmailDomainService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailDomain })
  async createEmailDomain(
    @common.Body() data: EmailDomainCreateInput
  ): Promise<EmailDomain> {
    return await this.service.createEmailDomain({
      data: data,
      select: {
        appendEmailsToSentFolder: true,
        attachmentLimit: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        domainName: true,
        emailServer: true,
        id: true,
        idx: true,
        incomingPort: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        smtpPort: true,
        smtpServer: true,
        updatedAt: true,
        useImap: true,
        useSsl: true,
        useSslForOutgoing: true,
        useStarttls: true,
        useTls: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailDomain] })
  @ApiNestedQuery(EmailDomainFindManyArgs)
  async emailDomains(@common.Req() request: Request): Promise<EmailDomain[]> {
    const args = plainToClass(EmailDomainFindManyArgs, request.query);
    return this.service.emailDomains({
      ...args,
      select: {
        appendEmailsToSentFolder: true,
        attachmentLimit: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        domainName: true,
        emailServer: true,
        id: true,
        idx: true,
        incomingPort: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        smtpPort: true,
        smtpServer: true,
        updatedAt: true,
        useImap: true,
        useSsl: true,
        useSslForOutgoing: true,
        useStarttls: true,
        useTls: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailDomain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailDomain(
    @common.Param() params: EmailDomainWhereUniqueInput
  ): Promise<EmailDomain | null> {
    const result = await this.service.emailDomain({
      where: params,
      select: {
        appendEmailsToSentFolder: true,
        attachmentLimit: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        domainName: true,
        emailServer: true,
        id: true,
        idx: true,
        incomingPort: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        smtpPort: true,
        smtpServer: true,
        updatedAt: true,
        useImap: true,
        useSsl: true,
        useSslForOutgoing: true,
        useStarttls: true,
        useTls: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailDomain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailDomain(
    @common.Param() params: EmailDomainWhereUniqueInput,
    @common.Body() data: EmailDomainUpdateInput
  ): Promise<EmailDomain | null> {
    try {
      return await this.service.updateEmailDomain({
        where: params,
        data: data,
        select: {
          appendEmailsToSentFolder: true,
          attachmentLimit: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          domainName: true,
          emailServer: true,
          id: true,
          idx: true,
          incomingPort: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          smtpPort: true,
          smtpServer: true,
          updatedAt: true,
          useImap: true,
          useSsl: true,
          useSslForOutgoing: true,
          useStarttls: true,
          useTls: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailDomain })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailDomain(
    @common.Param() params: EmailDomainWhereUniqueInput
  ): Promise<EmailDomain | null> {
    try {
      return await this.service.deleteEmailDomain({
        where: params,
        select: {
          appendEmailsToSentFolder: true,
          attachmentLimit: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          domainName: true,
          emailServer: true,
          id: true,
          idx: true,
          incomingPort: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          smtpPort: true,
          smtpServer: true,
          updatedAt: true,
          useImap: true,
          useSsl: true,
          useSslForOutgoing: true,
          useStarttls: true,
          useTls: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
