/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailDomain } from "./EmailDomain";
import { EmailDomainCountArgs } from "./EmailDomainCountArgs";
import { EmailDomainFindManyArgs } from "./EmailDomainFindManyArgs";
import { EmailDomainFindUniqueArgs } from "./EmailDomainFindUniqueArgs";
import { CreateEmailDomainArgs } from "./CreateEmailDomainArgs";
import { UpdateEmailDomainArgs } from "./UpdateEmailDomainArgs";
import { DeleteEmailDomainArgs } from "./DeleteEmailDomainArgs";
import { EmailDomainService } from "../emailDomain.service";
@graphql.Resolver(() => EmailDomain)
export class EmailDomainResolverBase {
  constructor(protected readonly service: EmailDomainService) {}

  async _emailDomainsMeta(
    @graphql.Args() args: EmailDomainCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailDomain])
  async emailDomains(
    @graphql.Args() args: EmailDomainFindManyArgs
  ): Promise<EmailDomain[]> {
    return this.service.emailDomains(args);
  }

  @graphql.Query(() => EmailDomain, { nullable: true })
  async emailDomain(
    @graphql.Args() args: EmailDomainFindUniqueArgs
  ): Promise<EmailDomain | null> {
    const result = await this.service.emailDomain(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailDomain)
  async createEmailDomain(
    @graphql.Args() args: CreateEmailDomainArgs
  ): Promise<EmailDomain> {
    return await this.service.createEmailDomain({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailDomain)
  async updateEmailDomain(
    @graphql.Args() args: UpdateEmailDomainArgs
  ): Promise<EmailDomain | null> {
    try {
      return await this.service.updateEmailDomain({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailDomain)
  async deleteEmailDomain(
    @graphql.Args() args: DeleteEmailDomainArgs
  ): Promise<EmailDomain | null> {
    try {
      return await this.service.deleteEmailDomain(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
