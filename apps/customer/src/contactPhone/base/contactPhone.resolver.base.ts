/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContactPhone } from "./ContactPhone";
import { ContactPhoneCountArgs } from "./ContactPhoneCountArgs";
import { ContactPhoneFindManyArgs } from "./ContactPhoneFindManyArgs";
import { ContactPhoneFindUniqueArgs } from "./ContactPhoneFindUniqueArgs";
import { CreateContactPhoneArgs } from "./CreateContactPhoneArgs";
import { UpdateContactPhoneArgs } from "./UpdateContactPhoneArgs";
import { DeleteContactPhoneArgs } from "./DeleteContactPhoneArgs";
import { ContactPhoneService } from "../contactPhone.service";
@graphql.Resolver(() => ContactPhone)
export class ContactPhoneResolverBase {
  constructor(protected readonly service: ContactPhoneService) {}

  async _contactPhonesMeta(
    @graphql.Args() args: ContactPhoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContactPhone])
  async contactPhones(
    @graphql.Args() args: ContactPhoneFindManyArgs
  ): Promise<ContactPhone[]> {
    return this.service.contactPhones(args);
  }

  @graphql.Query(() => ContactPhone, { nullable: true })
  async contactPhone(
    @graphql.Args() args: ContactPhoneFindUniqueArgs
  ): Promise<ContactPhone | null> {
    const result = await this.service.contactPhone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContactPhone)
  async createContactPhone(
    @graphql.Args() args: CreateContactPhoneArgs
  ): Promise<ContactPhone> {
    return await this.service.createContactPhone({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContactPhone)
  async updateContactPhone(
    @graphql.Args() args: UpdateContactPhoneArgs
  ): Promise<ContactPhone | null> {
    try {
      return await this.service.updateContactPhone({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactPhone)
  async deleteContactPhone(
    @graphql.Args() args: DeleteContactPhoneArgs
  ): Promise<ContactPhone | null> {
    try {
      return await this.service.deleteContactPhone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
