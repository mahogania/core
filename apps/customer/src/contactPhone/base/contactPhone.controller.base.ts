/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactPhoneService } from "../contactPhone.service";
import { ContactPhoneCreateInput } from "./ContactPhoneCreateInput";
import { ContactPhone } from "./ContactPhone";
import { ContactPhoneFindManyArgs } from "./ContactPhoneFindManyArgs";
import { ContactPhoneWhereUniqueInput } from "./ContactPhoneWhereUniqueInput";
import { ContactPhoneUpdateInput } from "./ContactPhoneUpdateInput";

export class ContactPhoneControllerBase {
  constructor(protected readonly service: ContactPhoneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactPhone })
  async createContactPhone(
    @common.Body() data: ContactPhoneCreateInput
  ): Promise<ContactPhone> {
    return await this.service.createContactPhone({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isPrimaryMobileNo: true,
        isPrimaryPhone: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactPhone] })
  @ApiNestedQuery(ContactPhoneFindManyArgs)
  async contactPhones(@common.Req() request: Request): Promise<ContactPhone[]> {
    const args = plainToClass(ContactPhoneFindManyArgs, request.query);
    return this.service.contactPhones({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isPrimaryMobileNo: true,
        isPrimaryPhone: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactPhone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactPhone(
    @common.Param() params: ContactPhoneWhereUniqueInput
  ): Promise<ContactPhone | null> {
    const result = await this.service.contactPhone({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isPrimaryMobileNo: true,
        isPrimaryPhone: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactPhone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContactPhone(
    @common.Param() params: ContactPhoneWhereUniqueInput,
    @common.Body() data: ContactPhoneUpdateInput
  ): Promise<ContactPhone | null> {
    try {
      return await this.service.updateContactPhone({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isPrimaryMobileNo: true,
          isPrimaryPhone: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactPhone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactPhone(
    @common.Param() params: ContactPhoneWhereUniqueInput
  ): Promise<ContactPhone | null> {
    try {
      return await this.service.deleteContactPhone({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isPrimaryMobileNo: true,
          isPrimaryPhone: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
