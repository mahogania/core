/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClosingStockBalanceService } from "../closingStockBalance.service";
import { ClosingStockBalanceCreateInput } from "./ClosingStockBalanceCreateInput";
import { ClosingStockBalance } from "./ClosingStockBalance";
import { ClosingStockBalanceFindManyArgs } from "./ClosingStockBalanceFindManyArgs";
import { ClosingStockBalanceWhereUniqueInput } from "./ClosingStockBalanceWhereUniqueInput";
import { ClosingStockBalanceUpdateInput } from "./ClosingStockBalanceUpdateInput";

export class ClosingStockBalanceControllerBase {
  constructor(protected readonly service: ClosingStockBalanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClosingStockBalance })
  async createClosingStockBalance(
    @common.Body() data: ClosingStockBalanceCreateInput
  ): Promise<ClosingStockBalance> {
    return await this.service.createClosingStockBalance({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        includeUom: true,
        itemCode: true,
        itemGroup: true,
        modified: true,
        modifiedBy: true,
        namingSeries: true,
        owner: true,
        status: true,
        toDate: true,
        updatedAt: true,
        warehouse: true,
        warehouseType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClosingStockBalance] })
  @ApiNestedQuery(ClosingStockBalanceFindManyArgs)
  async closingStockBalances(
    @common.Req() request: Request
  ): Promise<ClosingStockBalance[]> {
    const args = plainToClass(ClosingStockBalanceFindManyArgs, request.query);
    return this.service.closingStockBalances({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        includeUom: true,
        itemCode: true,
        itemGroup: true,
        modified: true,
        modifiedBy: true,
        namingSeries: true,
        owner: true,
        status: true,
        toDate: true,
        updatedAt: true,
        warehouse: true,
        warehouseType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClosingStockBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async closingStockBalance(
    @common.Param() params: ClosingStockBalanceWhereUniqueInput
  ): Promise<ClosingStockBalance | null> {
    const result = await this.service.closingStockBalance({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        includeUom: true,
        itemCode: true,
        itemGroup: true,
        modified: true,
        modifiedBy: true,
        namingSeries: true,
        owner: true,
        status: true,
        toDate: true,
        updatedAt: true,
        warehouse: true,
        warehouseType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClosingStockBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClosingStockBalance(
    @common.Param() params: ClosingStockBalanceWhereUniqueInput,
    @common.Body() data: ClosingStockBalanceUpdateInput
  ): Promise<ClosingStockBalance | null> {
    try {
      return await this.service.updateClosingStockBalance({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fromDate: true,
          id: true,
          idx: true,
          includeUom: true,
          itemCode: true,
          itemGroup: true,
          modified: true,
          modifiedBy: true,
          namingSeries: true,
          owner: true,
          status: true,
          toDate: true,
          updatedAt: true,
          warehouse: true,
          warehouseType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClosingStockBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClosingStockBalance(
    @common.Param() params: ClosingStockBalanceWhereUniqueInput
  ): Promise<ClosingStockBalance | null> {
    try {
      return await this.service.deleteClosingStockBalance({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fromDate: true,
          id: true,
          idx: true,
          includeUom: true,
          itemCode: true,
          itemGroup: true,
          modified: true,
          modifiedBy: true,
          namingSeries: true,
          owner: true,
          status: true,
          toDate: true,
          updatedAt: true,
          warehouse: true,
          warehouseType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
