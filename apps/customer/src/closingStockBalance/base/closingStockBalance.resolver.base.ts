/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ClosingStockBalance } from "./ClosingStockBalance";
import { ClosingStockBalanceCountArgs } from "./ClosingStockBalanceCountArgs";
import { ClosingStockBalanceFindManyArgs } from "./ClosingStockBalanceFindManyArgs";
import { ClosingStockBalanceFindUniqueArgs } from "./ClosingStockBalanceFindUniqueArgs";
import { CreateClosingStockBalanceArgs } from "./CreateClosingStockBalanceArgs";
import { UpdateClosingStockBalanceArgs } from "./UpdateClosingStockBalanceArgs";
import { DeleteClosingStockBalanceArgs } from "./DeleteClosingStockBalanceArgs";
import { ClosingStockBalanceService } from "../closingStockBalance.service";
@graphql.Resolver(() => ClosingStockBalance)
export class ClosingStockBalanceResolverBase {
  constructor(protected readonly service: ClosingStockBalanceService) {}

  async _closingStockBalancesMeta(
    @graphql.Args() args: ClosingStockBalanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ClosingStockBalance])
  async closingStockBalances(
    @graphql.Args() args: ClosingStockBalanceFindManyArgs
  ): Promise<ClosingStockBalance[]> {
    return this.service.closingStockBalances(args);
  }

  @graphql.Query(() => ClosingStockBalance, { nullable: true })
  async closingStockBalance(
    @graphql.Args() args: ClosingStockBalanceFindUniqueArgs
  ): Promise<ClosingStockBalance | null> {
    const result = await this.service.closingStockBalance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ClosingStockBalance)
  async createClosingStockBalance(
    @graphql.Args() args: CreateClosingStockBalanceArgs
  ): Promise<ClosingStockBalance> {
    return await this.service.createClosingStockBalance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ClosingStockBalance)
  async updateClosingStockBalance(
    @graphql.Args() args: UpdateClosingStockBalanceArgs
  ): Promise<ClosingStockBalance | null> {
    try {
      return await this.service.updateClosingStockBalance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClosingStockBalance)
  async deleteClosingStockBalance(
    @graphql.Args() args: DeleteClosingStockBalanceArgs
  ): Promise<ClosingStockBalance | null> {
    try {
      return await this.service.deleteClosingStockBalance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
