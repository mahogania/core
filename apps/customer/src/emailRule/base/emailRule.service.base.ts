/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailRule as PrismaEmailRule } from "@prisma/client";

export class EmailRuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailRuleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailRule.count(args);
  }

  async emailRules(
    args: Prisma.EmailRuleFindManyArgs
  ): Promise<PrismaEmailRule[]> {
    return this.prisma.emailRule.findMany(args);
  }
  async emailRule(
    args: Prisma.EmailRuleFindUniqueArgs
  ): Promise<PrismaEmailRule | null> {
    return this.prisma.emailRule.findUnique(args);
  }
  async createEmailRule(
    args: Prisma.EmailRuleCreateArgs
  ): Promise<PrismaEmailRule> {
    return this.prisma.emailRule.create(args);
  }
  async updateEmailRule(
    args: Prisma.EmailRuleUpdateArgs
  ): Promise<PrismaEmailRule> {
    return this.prisma.emailRule.update(args);
  }
  async deleteEmailRule(
    args: Prisma.EmailRuleDeleteArgs
  ): Promise<PrismaEmailRule> {
    return this.prisma.emailRule.delete(args);
  }
}
