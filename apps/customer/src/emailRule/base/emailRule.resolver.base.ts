/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailRule } from "./EmailRule";
import { EmailRuleCountArgs } from "./EmailRuleCountArgs";
import { EmailRuleFindManyArgs } from "./EmailRuleFindManyArgs";
import { EmailRuleFindUniqueArgs } from "./EmailRuleFindUniqueArgs";
import { CreateEmailRuleArgs } from "./CreateEmailRuleArgs";
import { UpdateEmailRuleArgs } from "./UpdateEmailRuleArgs";
import { DeleteEmailRuleArgs } from "./DeleteEmailRuleArgs";
import { EmailRuleService } from "../emailRule.service";
@graphql.Resolver(() => EmailRule)
export class EmailRuleResolverBase {
  constructor(protected readonly service: EmailRuleService) {}

  async _emailRulesMeta(
    @graphql.Args() args: EmailRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailRule])
  async emailRules(
    @graphql.Args() args: EmailRuleFindManyArgs
  ): Promise<EmailRule[]> {
    return this.service.emailRules(args);
  }

  @graphql.Query(() => EmailRule, { nullable: true })
  async emailRule(
    @graphql.Args() args: EmailRuleFindUniqueArgs
  ): Promise<EmailRule | null> {
    const result = await this.service.emailRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailRule)
  async createEmailRule(
    @graphql.Args() args: CreateEmailRuleArgs
  ): Promise<EmailRule> {
    return await this.service.createEmailRule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailRule)
  async updateEmailRule(
    @graphql.Args() args: UpdateEmailRuleArgs
  ): Promise<EmailRule | null> {
    try {
      return await this.service.updateEmailRule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailRule)
  async deleteEmailRule(
    @graphql.Args() args: DeleteEmailRuleArgs
  ): Promise<EmailRule | null> {
    try {
      return await this.service.deleteEmailRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
