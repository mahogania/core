/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailFlagQueueService } from "../emailFlagQueue.service";
import { EmailFlagQueueCreateInput } from "./EmailFlagQueueCreateInput";
import { EmailFlagQueue } from "./EmailFlagQueue";
import { EmailFlagQueueFindManyArgs } from "./EmailFlagQueueFindManyArgs";
import { EmailFlagQueueWhereUniqueInput } from "./EmailFlagQueueWhereUniqueInput";
import { EmailFlagQueueUpdateInput } from "./EmailFlagQueueUpdateInput";

export class EmailFlagQueueControllerBase {
  constructor(protected readonly service: EmailFlagQueueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailFlagQueue })
  async createEmailFlagQueue(
    @common.Body() data: EmailFlagQueueCreateInput
  ): Promise<EmailFlagQueue> {
    return await this.service.createEmailFlagQueue({
      data: data,
      select: {
        action: true,
        communication: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        emailAccount: true,
        id: true,
        idx: true,
        isCompleted: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        uid: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailFlagQueue] })
  @ApiNestedQuery(EmailFlagQueueFindManyArgs)
  async emailFlagQueues(
    @common.Req() request: Request
  ): Promise<EmailFlagQueue[]> {
    const args = plainToClass(EmailFlagQueueFindManyArgs, request.query);
    return this.service.emailFlagQueues({
      ...args,
      select: {
        action: true,
        communication: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        emailAccount: true,
        id: true,
        idx: true,
        isCompleted: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        uid: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailFlagQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailFlagQueue(
    @common.Param() params: EmailFlagQueueWhereUniqueInput
  ): Promise<EmailFlagQueue | null> {
    const result = await this.service.emailFlagQueue({
      where: params,
      select: {
        action: true,
        communication: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        emailAccount: true,
        id: true,
        idx: true,
        isCompleted: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        uid: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailFlagQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailFlagQueue(
    @common.Param() params: EmailFlagQueueWhereUniqueInput,
    @common.Body() data: EmailFlagQueueUpdateInput
  ): Promise<EmailFlagQueue | null> {
    try {
      return await this.service.updateEmailFlagQueue({
        where: params,
        data: data,
        select: {
          action: true,
          communication: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          emailAccount: true,
          id: true,
          idx: true,
          isCompleted: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          uid: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailFlagQueue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailFlagQueue(
    @common.Param() params: EmailFlagQueueWhereUniqueInput
  ): Promise<EmailFlagQueue | null> {
    try {
      return await this.service.deleteEmailFlagQueue({
        where: params,
        select: {
          action: true,
          communication: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          emailAccount: true,
          id: true,
          idx: true,
          isCompleted: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          uid: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
