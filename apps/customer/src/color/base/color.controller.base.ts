/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ColorService } from "../color.service";
import { ColorCreateInput } from "./ColorCreateInput";
import { Color } from "./Color";
import { ColorFindManyArgs } from "./ColorFindManyArgs";
import { ColorWhereUniqueInput } from "./ColorWhereUniqueInput";
import { ColorUpdateInput } from "./ColorUpdateInput";

export class ColorControllerBase {
  constructor(protected readonly service: ColorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Color })
  async createColor(@common.Body() data: ColorCreateInput): Promise<Color> {
    return await this.service.createColor({
      data: data,
      select: {
        color: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Color] })
  @ApiNestedQuery(ColorFindManyArgs)
  async colors(@common.Req() request: Request): Promise<Color[]> {
    const args = plainToClass(ColorFindManyArgs, request.query);
    return this.service.colors({
      ...args,
      select: {
        color: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Color })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async color(
    @common.Param() params: ColorWhereUniqueInput
  ): Promise<Color | null> {
    const result = await this.service.color({
      where: params,
      select: {
        color: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Color })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateColor(
    @common.Param() params: ColorWhereUniqueInput,
    @common.Body() data: ColorUpdateInput
  ): Promise<Color | null> {
    try {
      return await this.service.updateColor({
        where: params,
        data: data,
        select: {
          color: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Color })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteColor(
    @common.Param() params: ColorWhereUniqueInput
  ): Promise<Color | null> {
    try {
      return await this.service.deleteColor({
        where: params,
        select: {
          color: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
