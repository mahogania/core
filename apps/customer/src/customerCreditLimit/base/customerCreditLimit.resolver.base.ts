/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerCreditLimit } from "./CustomerCreditLimit";
import { CustomerCreditLimitCountArgs } from "./CustomerCreditLimitCountArgs";
import { CustomerCreditLimitFindManyArgs } from "./CustomerCreditLimitFindManyArgs";
import { CustomerCreditLimitFindUniqueArgs } from "./CustomerCreditLimitFindUniqueArgs";
import { CreateCustomerCreditLimitArgs } from "./CreateCustomerCreditLimitArgs";
import { UpdateCustomerCreditLimitArgs } from "./UpdateCustomerCreditLimitArgs";
import { DeleteCustomerCreditLimitArgs } from "./DeleteCustomerCreditLimitArgs";
import { CustomerCreditLimitService } from "../customerCreditLimit.service";
@graphql.Resolver(() => CustomerCreditLimit)
export class CustomerCreditLimitResolverBase {
  constructor(protected readonly service: CustomerCreditLimitService) {}

  async _customerCreditLimitsMeta(
    @graphql.Args() args: CustomerCreditLimitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerCreditLimit])
  async customerCreditLimits(
    @graphql.Args() args: CustomerCreditLimitFindManyArgs
  ): Promise<CustomerCreditLimit[]> {
    return this.service.customerCreditLimits(args);
  }

  @graphql.Query(() => CustomerCreditLimit, { nullable: true })
  async customerCreditLimit(
    @graphql.Args() args: CustomerCreditLimitFindUniqueArgs
  ): Promise<CustomerCreditLimit | null> {
    const result = await this.service.customerCreditLimit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerCreditLimit)
  async createCustomerCreditLimit(
    @graphql.Args() args: CreateCustomerCreditLimitArgs
  ): Promise<CustomerCreditLimit> {
    return await this.service.createCustomerCreditLimit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerCreditLimit)
  async updateCustomerCreditLimit(
    @graphql.Args() args: UpdateCustomerCreditLimitArgs
  ): Promise<CustomerCreditLimit | null> {
    try {
      return await this.service.updateCustomerCreditLimit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerCreditLimit)
  async deleteCustomerCreditLimit(
    @graphql.Args() args: DeleteCustomerCreditLimitArgs
  ): Promise<CustomerCreditLimit | null> {
    try {
      return await this.service.deleteCustomerCreditLimit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
