/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerItem } from "./CustomerItem";
import { CustomerItemCountArgs } from "./CustomerItemCountArgs";
import { CustomerItemFindManyArgs } from "./CustomerItemFindManyArgs";
import { CustomerItemFindUniqueArgs } from "./CustomerItemFindUniqueArgs";
import { CreateCustomerItemArgs } from "./CreateCustomerItemArgs";
import { UpdateCustomerItemArgs } from "./UpdateCustomerItemArgs";
import { DeleteCustomerItemArgs } from "./DeleteCustomerItemArgs";
import { CustomerItemService } from "../customerItem.service";
@graphql.Resolver(() => CustomerItem)
export class CustomerItemResolverBase {
  constructor(protected readonly service: CustomerItemService) {}

  async _customerItemsMeta(
    @graphql.Args() args: CustomerItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerItem])
  async customerItems(
    @graphql.Args() args: CustomerItemFindManyArgs
  ): Promise<CustomerItem[]> {
    return this.service.customerItems(args);
  }

  @graphql.Query(() => CustomerItem, { nullable: true })
  async customerItem(
    @graphql.Args() args: CustomerItemFindUniqueArgs
  ): Promise<CustomerItem | null> {
    const result = await this.service.customerItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerItem)
  async createCustomerItem(
    @graphql.Args() args: CreateCustomerItemArgs
  ): Promise<CustomerItem> {
    return await this.service.createCustomerItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerItem)
  async updateCustomerItem(
    @graphql.Args() args: UpdateCustomerItemArgs
  ): Promise<CustomerItem | null> {
    try {
      return await this.service.updateCustomerItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerItem)
  async deleteCustomerItem(
    @graphql.Args() args: DeleteCustomerItemArgs
  ): Promise<CustomerItem | null> {
    try {
      return await this.service.deleteCustomerItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
