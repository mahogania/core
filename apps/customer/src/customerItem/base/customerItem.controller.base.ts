/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerItemService } from "../customerItem.service";
import { CustomerItemCreateInput } from "./CustomerItemCreateInput";
import { CustomerItem } from "./CustomerItem";
import { CustomerItemFindManyArgs } from "./CustomerItemFindManyArgs";
import { CustomerItemWhereUniqueInput } from "./CustomerItemWhereUniqueInput";
import { CustomerItemUpdateInput } from "./CustomerItemUpdateInput";

export class CustomerItemControllerBase {
  constructor(protected readonly service: CustomerItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerItem })
  async createCustomerItem(
    @common.Body() data: CustomerItemCreateInput
  ): Promise<CustomerItem> {
    return await this.service.createCustomerItem({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerItem] })
  @ApiNestedQuery(CustomerItemFindManyArgs)
  async customerItems(@common.Req() request: Request): Promise<CustomerItem[]> {
    const args = plainToClass(CustomerItemFindManyArgs, request.query);
    return this.service.customerItems({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerItem(
    @common.Param() params: CustomerItemWhereUniqueInput
  ): Promise<CustomerItem | null> {
    const result = await this.service.customerItem({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerItem(
    @common.Param() params: CustomerItemWhereUniqueInput,
    @common.Body() data: CustomerItemUpdateInput
  ): Promise<CustomerItem | null> {
    try {
      return await this.service.updateCustomerItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerItem(
    @common.Param() params: CustomerItemWhereUniqueInput
  ): Promise<CustomerItem | null> {
    try {
      return await this.service.deleteCustomerItem({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
