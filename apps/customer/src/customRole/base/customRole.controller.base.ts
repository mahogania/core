/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomRoleService } from "../customRole.service";
import { CustomRoleCreateInput } from "./CustomRoleCreateInput";
import { CustomRole } from "./CustomRole";
import { CustomRoleFindManyArgs } from "./CustomRoleFindManyArgs";
import { CustomRoleWhereUniqueInput } from "./CustomRoleWhereUniqueInput";
import { CustomRoleUpdateInput } from "./CustomRoleUpdateInput";

export class CustomRoleControllerBase {
  constructor(protected readonly service: CustomRoleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomRole })
  async createCustomRole(
    @common.Body() data: CustomRoleCreateInput
  ): Promise<CustomRole> {
    return await this.service.createCustomRole({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        page: true,
        refDoctype: true,
        report: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomRole] })
  @ApiNestedQuery(CustomRoleFindManyArgs)
  async customRoles(@common.Req() request: Request): Promise<CustomRole[]> {
    const args = plainToClass(CustomRoleFindManyArgs, request.query);
    return this.service.customRoles({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        page: true,
        refDoctype: true,
        report: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customRole(
    @common.Param() params: CustomRoleWhereUniqueInput
  ): Promise<CustomRole | null> {
    const result = await this.service.customRole({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        page: true,
        refDoctype: true,
        report: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomRole(
    @common.Param() params: CustomRoleWhereUniqueInput,
    @common.Body() data: CustomRoleUpdateInput
  ): Promise<CustomRole | null> {
    try {
      return await this.service.updateCustomRole({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          page: true,
          refDoctype: true,
          report: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomRole(
    @common.Param() params: CustomRoleWhereUniqueInput
  ): Promise<CustomRole | null> {
    try {
      return await this.service.deleteCustomRole({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          page: true,
          refDoctype: true,
          report: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
