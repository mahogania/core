/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DunningType } from "./DunningType";
import { DunningTypeCountArgs } from "./DunningTypeCountArgs";
import { DunningTypeFindManyArgs } from "./DunningTypeFindManyArgs";
import { DunningTypeFindUniqueArgs } from "./DunningTypeFindUniqueArgs";
import { CreateDunningTypeArgs } from "./CreateDunningTypeArgs";
import { UpdateDunningTypeArgs } from "./UpdateDunningTypeArgs";
import { DeleteDunningTypeArgs } from "./DeleteDunningTypeArgs";
import { DunningTypeService } from "../dunningType.service";
@graphql.Resolver(() => DunningType)
export class DunningTypeResolverBase {
  constructor(protected readonly service: DunningTypeService) {}

  async _dunningTypesMeta(
    @graphql.Args() args: DunningTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DunningType])
  async dunningTypes(
    @graphql.Args() args: DunningTypeFindManyArgs
  ): Promise<DunningType[]> {
    return this.service.dunningTypes(args);
  }

  @graphql.Query(() => DunningType, { nullable: true })
  async dunningType(
    @graphql.Args() args: DunningTypeFindUniqueArgs
  ): Promise<DunningType | null> {
    const result = await this.service.dunningType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DunningType)
  async createDunningType(
    @graphql.Args() args: CreateDunningTypeArgs
  ): Promise<DunningType> {
    return await this.service.createDunningType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DunningType)
  async updateDunningType(
    @graphql.Args() args: UpdateDunningTypeArgs
  ): Promise<DunningType | null> {
    try {
      return await this.service.updateDunningType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DunningType)
  async deleteDunningType(
    @graphql.Args() args: DeleteDunningTypeArgs
  ): Promise<DunningType | null> {
    try {
      return await this.service.deleteDunningType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
