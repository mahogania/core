/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DunningTypeService } from "../dunningType.service";
import { DunningTypeCreateInput } from "./DunningTypeCreateInput";
import { DunningType } from "./DunningType";
import { DunningTypeFindManyArgs } from "./DunningTypeFindManyArgs";
import { DunningTypeWhereUniqueInput } from "./DunningTypeWhereUniqueInput";
import { DunningTypeUpdateInput } from "./DunningTypeUpdateInput";

export class DunningTypeControllerBase {
  constructor(protected readonly service: DunningTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DunningType })
  async createDunningType(
    @common.Body() data: DunningTypeCreateInput
  ): Promise<DunningType> {
    return await this.service.createDunningType({
      data: data,
      select: {
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        dunningFee: true,
        dunningType: true,
        id: true,
        idx: true,
        incomeAccount: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rateOfInterest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DunningType] })
  @ApiNestedQuery(DunningTypeFindManyArgs)
  async dunningTypes(@common.Req() request: Request): Promise<DunningType[]> {
    const args = plainToClass(DunningTypeFindManyArgs, request.query);
    return this.service.dunningTypes({
      ...args,
      select: {
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        dunningFee: true,
        dunningType: true,
        id: true,
        idx: true,
        incomeAccount: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rateOfInterest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DunningType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dunningType(
    @common.Param() params: DunningTypeWhereUniqueInput
  ): Promise<DunningType | null> {
    const result = await this.service.dunningType({
      where: params,
      select: {
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        dunningFee: true,
        dunningType: true,
        id: true,
        idx: true,
        incomeAccount: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rateOfInterest: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DunningType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDunningType(
    @common.Param() params: DunningTypeWhereUniqueInput,
    @common.Body() data: DunningTypeUpdateInput
  ): Promise<DunningType | null> {
    try {
      return await this.service.updateDunningType({
        where: params,
        data: data,
        select: {
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          dunningFee: true,
          dunningType: true,
          id: true,
          idx: true,
          incomeAccount: true,
          isDefault: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          rateOfInterest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DunningType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDunningType(
    @common.Param() params: DunningTypeWhereUniqueInput
  ): Promise<DunningType | null> {
    try {
      return await this.service.deleteDunningType({
        where: params,
        select: {
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          dunningFee: true,
          dunningType: true,
          id: true,
          idx: true,
          incomeAccount: true,
          isDefault: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          rateOfInterest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
