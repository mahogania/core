/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EmailUnsubscribe as PrismaEmailUnsubscribe,
} from "@prisma/client";

export class EmailUnsubscribeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailUnsubscribeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailUnsubscribe.count(args);
  }

  async emailUnsubscribes(
    args: Prisma.EmailUnsubscribeFindManyArgs
  ): Promise<PrismaEmailUnsubscribe[]> {
    return this.prisma.emailUnsubscribe.findMany(args);
  }
  async emailUnsubscribe(
    args: Prisma.EmailUnsubscribeFindUniqueArgs
  ): Promise<PrismaEmailUnsubscribe | null> {
    return this.prisma.emailUnsubscribe.findUnique(args);
  }
  async createEmailUnsubscribe(
    args: Prisma.EmailUnsubscribeCreateArgs
  ): Promise<PrismaEmailUnsubscribe> {
    return this.prisma.emailUnsubscribe.create(args);
  }
  async updateEmailUnsubscribe(
    args: Prisma.EmailUnsubscribeUpdateArgs
  ): Promise<PrismaEmailUnsubscribe> {
    return this.prisma.emailUnsubscribe.update(args);
  }
  async deleteEmailUnsubscribe(
    args: Prisma.EmailUnsubscribeDeleteArgs
  ): Promise<PrismaEmailUnsubscribe> {
    return this.prisma.emailUnsubscribe.delete(args);
  }
}
