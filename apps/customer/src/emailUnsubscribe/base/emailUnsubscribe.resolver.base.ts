/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailUnsubscribe } from "./EmailUnsubscribe";
import { EmailUnsubscribeCountArgs } from "./EmailUnsubscribeCountArgs";
import { EmailUnsubscribeFindManyArgs } from "./EmailUnsubscribeFindManyArgs";
import { EmailUnsubscribeFindUniqueArgs } from "./EmailUnsubscribeFindUniqueArgs";
import { CreateEmailUnsubscribeArgs } from "./CreateEmailUnsubscribeArgs";
import { UpdateEmailUnsubscribeArgs } from "./UpdateEmailUnsubscribeArgs";
import { DeleteEmailUnsubscribeArgs } from "./DeleteEmailUnsubscribeArgs";
import { EmailUnsubscribeService } from "../emailUnsubscribe.service";
@graphql.Resolver(() => EmailUnsubscribe)
export class EmailUnsubscribeResolverBase {
  constructor(protected readonly service: EmailUnsubscribeService) {}

  async _emailUnsubscribesMeta(
    @graphql.Args() args: EmailUnsubscribeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailUnsubscribe])
  async emailUnsubscribes(
    @graphql.Args() args: EmailUnsubscribeFindManyArgs
  ): Promise<EmailUnsubscribe[]> {
    return this.service.emailUnsubscribes(args);
  }

  @graphql.Query(() => EmailUnsubscribe, { nullable: true })
  async emailUnsubscribe(
    @graphql.Args() args: EmailUnsubscribeFindUniqueArgs
  ): Promise<EmailUnsubscribe | null> {
    const result = await this.service.emailUnsubscribe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailUnsubscribe)
  async createEmailUnsubscribe(
    @graphql.Args() args: CreateEmailUnsubscribeArgs
  ): Promise<EmailUnsubscribe> {
    return await this.service.createEmailUnsubscribe({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailUnsubscribe)
  async updateEmailUnsubscribe(
    @graphql.Args() args: UpdateEmailUnsubscribeArgs
  ): Promise<EmailUnsubscribe | null> {
    try {
      return await this.service.updateEmailUnsubscribe({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailUnsubscribe)
  async deleteEmailUnsubscribe(
    @graphql.Args() args: DeleteEmailUnsubscribeArgs
  ): Promise<EmailUnsubscribe | null> {
    try {
      return await this.service.deleteEmailUnsubscribe(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
