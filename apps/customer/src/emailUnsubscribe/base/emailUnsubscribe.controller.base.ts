/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailUnsubscribeService } from "../emailUnsubscribe.service";
import { EmailUnsubscribeCreateInput } from "./EmailUnsubscribeCreateInput";
import { EmailUnsubscribe } from "./EmailUnsubscribe";
import { EmailUnsubscribeFindManyArgs } from "./EmailUnsubscribeFindManyArgs";
import { EmailUnsubscribeWhereUniqueInput } from "./EmailUnsubscribeWhereUniqueInput";
import { EmailUnsubscribeUpdateInput } from "./EmailUnsubscribeUpdateInput";

export class EmailUnsubscribeControllerBase {
  constructor(protected readonly service: EmailUnsubscribeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailUnsubscribe })
  async createEmailUnsubscribe(
    @common.Body() data: EmailUnsubscribeCreateInput
  ): Promise<EmailUnsubscribe> {
    return await this.service.createEmailUnsubscribe({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        email: true,
        globalUnsubscribe: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        referenceDoctype: true,
        referenceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailUnsubscribe] })
  @ApiNestedQuery(EmailUnsubscribeFindManyArgs)
  async emailUnsubscribes(
    @common.Req() request: Request
  ): Promise<EmailUnsubscribe[]> {
    const args = plainToClass(EmailUnsubscribeFindManyArgs, request.query);
    return this.service.emailUnsubscribes({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        email: true,
        globalUnsubscribe: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        referenceDoctype: true,
        referenceName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailUnsubscribe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailUnsubscribe(
    @common.Param() params: EmailUnsubscribeWhereUniqueInput
  ): Promise<EmailUnsubscribe | null> {
    const result = await this.service.emailUnsubscribe({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        email: true,
        globalUnsubscribe: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        referenceDoctype: true,
        referenceName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailUnsubscribe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailUnsubscribe(
    @common.Param() params: EmailUnsubscribeWhereUniqueInput,
    @common.Body() data: EmailUnsubscribeUpdateInput
  ): Promise<EmailUnsubscribe | null> {
    try {
      return await this.service.updateEmailUnsubscribe({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          email: true,
          globalUnsubscribe: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          referenceDoctype: true,
          referenceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailUnsubscribe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailUnsubscribe(
    @common.Param() params: EmailUnsubscribeWhereUniqueInput
  ): Promise<EmailUnsubscribe | null> {
    try {
      return await this.service.deleteEmailUnsubscribe({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          email: true,
          globalUnsubscribe: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          referenceDoctype: true,
          referenceName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
