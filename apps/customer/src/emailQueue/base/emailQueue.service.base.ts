/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailQueue as PrismaEmailQueue } from "@prisma/client";

export class EmailQueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailQueueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailQueue.count(args);
  }

  async emailQueues(
    args: Prisma.EmailQueueFindManyArgs
  ): Promise<PrismaEmailQueue[]> {
    return this.prisma.emailQueue.findMany(args);
  }
  async emailQueue(
    args: Prisma.EmailQueueFindUniqueArgs
  ): Promise<PrismaEmailQueue | null> {
    return this.prisma.emailQueue.findUnique(args);
  }
  async createEmailQueue(
    args: Prisma.EmailQueueCreateArgs
  ): Promise<PrismaEmailQueue> {
    return this.prisma.emailQueue.create(args);
  }
  async updateEmailQueue(
    args: Prisma.EmailQueueUpdateArgs
  ): Promise<PrismaEmailQueue> {
    return this.prisma.emailQueue.update(args);
  }
  async deleteEmailQueue(
    args: Prisma.EmailQueueDeleteArgs
  ): Promise<PrismaEmailQueue> {
    return this.prisma.emailQueue.delete(args);
  }
}
