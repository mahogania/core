/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CurrencyExchangeSettingsResult } from "./CurrencyExchangeSettingsResult";
import { CurrencyExchangeSettingsResultCountArgs } from "./CurrencyExchangeSettingsResultCountArgs";
import { CurrencyExchangeSettingsResultFindManyArgs } from "./CurrencyExchangeSettingsResultFindManyArgs";
import { CurrencyExchangeSettingsResultFindUniqueArgs } from "./CurrencyExchangeSettingsResultFindUniqueArgs";
import { CreateCurrencyExchangeSettingsResultArgs } from "./CreateCurrencyExchangeSettingsResultArgs";
import { UpdateCurrencyExchangeSettingsResultArgs } from "./UpdateCurrencyExchangeSettingsResultArgs";
import { DeleteCurrencyExchangeSettingsResultArgs } from "./DeleteCurrencyExchangeSettingsResultArgs";
import { CurrencyExchangeSettingsResultService } from "../currencyExchangeSettingsResult.service";
@graphql.Resolver(() => CurrencyExchangeSettingsResult)
export class CurrencyExchangeSettingsResultResolverBase {
  constructor(
    protected readonly service: CurrencyExchangeSettingsResultService
  ) {}

  async _currencyExchangeSettingsResultsMeta(
    @graphql.Args() args: CurrencyExchangeSettingsResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CurrencyExchangeSettingsResult])
  async currencyExchangeSettingsResults(
    @graphql.Args() args: CurrencyExchangeSettingsResultFindManyArgs
  ): Promise<CurrencyExchangeSettingsResult[]> {
    return this.service.currencyExchangeSettingsResults(args);
  }

  @graphql.Query(() => CurrencyExchangeSettingsResult, { nullable: true })
  async currencyExchangeSettingsResult(
    @graphql.Args() args: CurrencyExchangeSettingsResultFindUniqueArgs
  ): Promise<CurrencyExchangeSettingsResult | null> {
    const result = await this.service.currencyExchangeSettingsResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CurrencyExchangeSettingsResult)
  async createCurrencyExchangeSettingsResult(
    @graphql.Args() args: CreateCurrencyExchangeSettingsResultArgs
  ): Promise<CurrencyExchangeSettingsResult> {
    return await this.service.createCurrencyExchangeSettingsResult({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CurrencyExchangeSettingsResult)
  async updateCurrencyExchangeSettingsResult(
    @graphql.Args() args: UpdateCurrencyExchangeSettingsResultArgs
  ): Promise<CurrencyExchangeSettingsResult | null> {
    try {
      return await this.service.updateCurrencyExchangeSettingsResult({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CurrencyExchangeSettingsResult)
  async deleteCurrencyExchangeSettingsResult(
    @graphql.Args() args: DeleteCurrencyExchangeSettingsResultArgs
  ): Promise<CurrencyExchangeSettingsResult | null> {
    try {
      return await this.service.deleteCurrencyExchangeSettingsResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
