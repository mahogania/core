/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Competitor } from "./Competitor";
import { CompetitorCountArgs } from "./CompetitorCountArgs";
import { CompetitorFindManyArgs } from "./CompetitorFindManyArgs";
import { CompetitorFindUniqueArgs } from "./CompetitorFindUniqueArgs";
import { CreateCompetitorArgs } from "./CreateCompetitorArgs";
import { UpdateCompetitorArgs } from "./UpdateCompetitorArgs";
import { DeleteCompetitorArgs } from "./DeleteCompetitorArgs";
import { CompetitorService } from "../competitor.service";
@graphql.Resolver(() => Competitor)
export class CompetitorResolverBase {
  constructor(protected readonly service: CompetitorService) {}

  async _competitorsMeta(
    @graphql.Args() args: CompetitorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Competitor])
  async competitors(
    @graphql.Args() args: CompetitorFindManyArgs
  ): Promise<Competitor[]> {
    return this.service.competitors(args);
  }

  @graphql.Query(() => Competitor, { nullable: true })
  async competitor(
    @graphql.Args() args: CompetitorFindUniqueArgs
  ): Promise<Competitor | null> {
    const result = await this.service.competitor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Competitor)
  async createCompetitor(
    @graphql.Args() args: CreateCompetitorArgs
  ): Promise<Competitor> {
    return await this.service.createCompetitor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Competitor)
  async updateCompetitor(
    @graphql.Args() args: UpdateCompetitorArgs
  ): Promise<Competitor | null> {
    try {
      return await this.service.updateCompetitor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Competitor)
  async deleteCompetitor(
    @graphql.Args() args: DeleteCompetitorArgs
  ): Promise<Competitor | null> {
    try {
      return await this.service.deleteCompetitor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
