/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CurrencyExchangeService } from "../currencyExchange.service";
import { CurrencyExchangeCreateInput } from "./CurrencyExchangeCreateInput";
import { CurrencyExchange } from "./CurrencyExchange";
import { CurrencyExchangeFindManyArgs } from "./CurrencyExchangeFindManyArgs";
import { CurrencyExchangeWhereUniqueInput } from "./CurrencyExchangeWhereUniqueInput";
import { CurrencyExchangeUpdateInput } from "./CurrencyExchangeUpdateInput";

export class CurrencyExchangeControllerBase {
  constructor(protected readonly service: CurrencyExchangeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CurrencyExchange })
  async createCurrencyExchange(
    @common.Body() data: CurrencyExchangeCreateInput
  ): Promise<CurrencyExchange> {
    return await this.service.createCurrencyExchange({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        exchangeRate: true,
        forBuying: true,
        forSelling: true,
        fromCurrency: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        toCurrency: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CurrencyExchange] })
  @ApiNestedQuery(CurrencyExchangeFindManyArgs)
  async currencyExchanges(
    @common.Req() request: Request
  ): Promise<CurrencyExchange[]> {
    const args = plainToClass(CurrencyExchangeFindManyArgs, request.query);
    return this.service.currencyExchanges({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        exchangeRate: true,
        forBuying: true,
        forSelling: true,
        fromCurrency: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        toCurrency: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CurrencyExchange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async currencyExchange(
    @common.Param() params: CurrencyExchangeWhereUniqueInput
  ): Promise<CurrencyExchange | null> {
    const result = await this.service.currencyExchange({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        exchangeRate: true,
        forBuying: true,
        forSelling: true,
        fromCurrency: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        toCurrency: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CurrencyExchange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCurrencyExchange(
    @common.Param() params: CurrencyExchangeWhereUniqueInput,
    @common.Body() data: CurrencyExchangeUpdateInput
  ): Promise<CurrencyExchange | null> {
    try {
      return await this.service.updateCurrencyExchange({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          date: true,
          docstatus: true,
          exchangeRate: true,
          forBuying: true,
          forSelling: true,
          fromCurrency: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          toCurrency: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CurrencyExchange })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCurrencyExchange(
    @common.Param() params: CurrencyExchangeWhereUniqueInput
  ): Promise<CurrencyExchange | null> {
    try {
      return await this.service.deleteCurrencyExchange({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          date: true,
          docstatus: true,
          exchangeRate: true,
          forBuying: true,
          forSelling: true,
          fromCurrency: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          toCurrency: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
