/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CurrencyExchange } from "./CurrencyExchange";
import { CurrencyExchangeCountArgs } from "./CurrencyExchangeCountArgs";
import { CurrencyExchangeFindManyArgs } from "./CurrencyExchangeFindManyArgs";
import { CurrencyExchangeFindUniqueArgs } from "./CurrencyExchangeFindUniqueArgs";
import { CreateCurrencyExchangeArgs } from "./CreateCurrencyExchangeArgs";
import { UpdateCurrencyExchangeArgs } from "./UpdateCurrencyExchangeArgs";
import { DeleteCurrencyExchangeArgs } from "./DeleteCurrencyExchangeArgs";
import { CurrencyExchangeService } from "../currencyExchange.service";
@graphql.Resolver(() => CurrencyExchange)
export class CurrencyExchangeResolverBase {
  constructor(protected readonly service: CurrencyExchangeService) {}

  async _currencyExchangesMeta(
    @graphql.Args() args: CurrencyExchangeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CurrencyExchange])
  async currencyExchanges(
    @graphql.Args() args: CurrencyExchangeFindManyArgs
  ): Promise<CurrencyExchange[]> {
    return this.service.currencyExchanges(args);
  }

  @graphql.Query(() => CurrencyExchange, { nullable: true })
  async currencyExchange(
    @graphql.Args() args: CurrencyExchangeFindUniqueArgs
  ): Promise<CurrencyExchange | null> {
    const result = await this.service.currencyExchange(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CurrencyExchange)
  async createCurrencyExchange(
    @graphql.Args() args: CreateCurrencyExchangeArgs
  ): Promise<CurrencyExchange> {
    return await this.service.createCurrencyExchange({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CurrencyExchange)
  async updateCurrencyExchange(
    @graphql.Args() args: UpdateCurrencyExchangeArgs
  ): Promise<CurrencyExchange | null> {
    try {
      return await this.service.updateCurrencyExchange({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CurrencyExchange)
  async deleteCurrencyExchange(
    @graphql.Args() args: DeleteCurrencyExchangeArgs
  ): Promise<CurrencyExchange | null> {
    try {
      return await this.service.deleteCurrencyExchange(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
