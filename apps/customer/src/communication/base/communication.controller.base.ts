/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommunicationService } from "../communication.service";
import { CommunicationCreateInput } from "./CommunicationCreateInput";
import { Communication } from "./Communication";
import { CommunicationFindManyArgs } from "./CommunicationFindManyArgs";
import { CommunicationWhereUniqueInput } from "./CommunicationWhereUniqueInput";
import { CommunicationUpdateInput } from "./CommunicationUpdateInput";

export class CommunicationControllerBase {
  constructor(protected readonly service: CommunicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Communication })
  async createCommunication(
    @common.Body() data: CommunicationCreateInput
  ): Promise<Communication> {
    return await this.service.createCommunication({
      data: data,
      select: {
        bcc: true,
        cc: true,
        commentType: true,
        communicationDate: true,
        communicationMedium: true,
        communicationType: true,
        content: true,
        createdAt: true,
        creation: true,
        deliveryStatus: true,
        docstatus: true,
        emailAccount: true,
        emailStatus: true,
        emailTemplate: true,
        feedbackRequest: true,
        hasAttachment: true,
        id: true,
        idx: true,
        imapFolder: true,
        inReplyTo: true,
        messageId: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        phoneNo: true,
        rating: true,
        readByRecipient: true,
        readByRecipientOn: true,
        readReceipt: true,
        recipients: true,
        referenceDoctype: true,
        referenceName: true,
        referenceOwner: true,
        seen: true,
        sendAfter: true,
        sender: true,
        senderFullName: true,
        sentOrReceived: true,
        status: true,
        subject: true,
        textContent: true,
        uid: true,
        unreadNotificationSent: true,
        updatedAt: true,
        user: true,
        userTags: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Communication] })
  @ApiNestedQuery(CommunicationFindManyArgs)
  async communications(
    @common.Req() request: Request
  ): Promise<Communication[]> {
    const args = plainToClass(CommunicationFindManyArgs, request.query);
    return this.service.communications({
      ...args,
      select: {
        bcc: true,
        cc: true,
        commentType: true,
        communicationDate: true,
        communicationMedium: true,
        communicationType: true,
        content: true,
        createdAt: true,
        creation: true,
        deliveryStatus: true,
        docstatus: true,
        emailAccount: true,
        emailStatus: true,
        emailTemplate: true,
        feedbackRequest: true,
        hasAttachment: true,
        id: true,
        idx: true,
        imapFolder: true,
        inReplyTo: true,
        messageId: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        phoneNo: true,
        rating: true,
        readByRecipient: true,
        readByRecipientOn: true,
        readReceipt: true,
        recipients: true,
        referenceDoctype: true,
        referenceName: true,
        referenceOwner: true,
        seen: true,
        sendAfter: true,
        sender: true,
        senderFullName: true,
        sentOrReceived: true,
        status: true,
        subject: true,
        textContent: true,
        uid: true,
        unreadNotificationSent: true,
        updatedAt: true,
        user: true,
        userTags: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Communication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async communication(
    @common.Param() params: CommunicationWhereUniqueInput
  ): Promise<Communication | null> {
    const result = await this.service.communication({
      where: params,
      select: {
        bcc: true,
        cc: true,
        commentType: true,
        communicationDate: true,
        communicationMedium: true,
        communicationType: true,
        content: true,
        createdAt: true,
        creation: true,
        deliveryStatus: true,
        docstatus: true,
        emailAccount: true,
        emailStatus: true,
        emailTemplate: true,
        feedbackRequest: true,
        hasAttachment: true,
        id: true,
        idx: true,
        imapFolder: true,
        inReplyTo: true,
        messageId: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        phoneNo: true,
        rating: true,
        readByRecipient: true,
        readByRecipientOn: true,
        readReceipt: true,
        recipients: true,
        referenceDoctype: true,
        referenceName: true,
        referenceOwner: true,
        seen: true,
        sendAfter: true,
        sender: true,
        senderFullName: true,
        sentOrReceived: true,
        status: true,
        subject: true,
        textContent: true,
        uid: true,
        unreadNotificationSent: true,
        updatedAt: true,
        user: true,
        userTags: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Communication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommunication(
    @common.Param() params: CommunicationWhereUniqueInput,
    @common.Body() data: CommunicationUpdateInput
  ): Promise<Communication | null> {
    try {
      return await this.service.updateCommunication({
        where: params,
        data: data,
        select: {
          bcc: true,
          cc: true,
          commentType: true,
          communicationDate: true,
          communicationMedium: true,
          communicationType: true,
          content: true,
          createdAt: true,
          creation: true,
          deliveryStatus: true,
          docstatus: true,
          emailAccount: true,
          emailStatus: true,
          emailTemplate: true,
          feedbackRequest: true,
          hasAttachment: true,
          id: true,
          idx: true,
          imapFolder: true,
          inReplyTo: true,
          messageId: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          phoneNo: true,
          rating: true,
          readByRecipient: true,
          readByRecipientOn: true,
          readReceipt: true,
          recipients: true,
          referenceDoctype: true,
          referenceName: true,
          referenceOwner: true,
          seen: true,
          sendAfter: true,
          sender: true,
          senderFullName: true,
          sentOrReceived: true,
          status: true,
          subject: true,
          textContent: true,
          uid: true,
          unreadNotificationSent: true,
          updatedAt: true,
          user: true,
          userTags: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Communication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommunication(
    @common.Param() params: CommunicationWhereUniqueInput
  ): Promise<Communication | null> {
    try {
      return await this.service.deleteCommunication({
        where: params,
        select: {
          bcc: true,
          cc: true,
          commentType: true,
          communicationDate: true,
          communicationMedium: true,
          communicationType: true,
          content: true,
          createdAt: true,
          creation: true,
          deliveryStatus: true,
          docstatus: true,
          emailAccount: true,
          emailStatus: true,
          emailTemplate: true,
          feedbackRequest: true,
          hasAttachment: true,
          id: true,
          idx: true,
          imapFolder: true,
          inReplyTo: true,
          messageId: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          phoneNo: true,
          rating: true,
          readByRecipient: true,
          readByRecipientOn: true,
          readReceipt: true,
          recipients: true,
          referenceDoctype: true,
          referenceName: true,
          referenceOwner: true,
          seen: true,
          sendAfter: true,
          sender: true,
          senderFullName: true,
          sentOrReceived: true,
          status: true,
          subject: true,
          textContent: true,
          uid: true,
          unreadNotificationSent: true,
          updatedAt: true,
          user: true,
          userTags: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
