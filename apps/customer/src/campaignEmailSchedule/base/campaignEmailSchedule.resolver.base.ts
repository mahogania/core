/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CampaignEmailSchedule } from "./CampaignEmailSchedule";
import { CampaignEmailScheduleCountArgs } from "./CampaignEmailScheduleCountArgs";
import { CampaignEmailScheduleFindManyArgs } from "./CampaignEmailScheduleFindManyArgs";
import { CampaignEmailScheduleFindUniqueArgs } from "./CampaignEmailScheduleFindUniqueArgs";
import { CreateCampaignEmailScheduleArgs } from "./CreateCampaignEmailScheduleArgs";
import { UpdateCampaignEmailScheduleArgs } from "./UpdateCampaignEmailScheduleArgs";
import { DeleteCampaignEmailScheduleArgs } from "./DeleteCampaignEmailScheduleArgs";
import { CampaignEmailScheduleService } from "../campaignEmailSchedule.service";
@graphql.Resolver(() => CampaignEmailSchedule)
export class CampaignEmailScheduleResolverBase {
  constructor(protected readonly service: CampaignEmailScheduleService) {}

  async _campaignEmailSchedulesMeta(
    @graphql.Args() args: CampaignEmailScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CampaignEmailSchedule])
  async campaignEmailSchedules(
    @graphql.Args() args: CampaignEmailScheduleFindManyArgs
  ): Promise<CampaignEmailSchedule[]> {
    return this.service.campaignEmailSchedules(args);
  }

  @graphql.Query(() => CampaignEmailSchedule, { nullable: true })
  async campaignEmailSchedule(
    @graphql.Args() args: CampaignEmailScheduleFindUniqueArgs
  ): Promise<CampaignEmailSchedule | null> {
    const result = await this.service.campaignEmailSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CampaignEmailSchedule)
  async createCampaignEmailSchedule(
    @graphql.Args() args: CreateCampaignEmailScheduleArgs
  ): Promise<CampaignEmailSchedule> {
    return await this.service.createCampaignEmailSchedule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CampaignEmailSchedule)
  async updateCampaignEmailSchedule(
    @graphql.Args() args: UpdateCampaignEmailScheduleArgs
  ): Promise<CampaignEmailSchedule | null> {
    try {
      return await this.service.updateCampaignEmailSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CampaignEmailSchedule)
  async deleteCampaignEmailSchedule(
    @graphql.Args() args: DeleteCampaignEmailScheduleArgs
  ): Promise<CampaignEmailSchedule | null> {
    try {
      return await this.service.deleteCampaignEmailSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
