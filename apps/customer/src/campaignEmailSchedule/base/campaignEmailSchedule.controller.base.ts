/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampaignEmailScheduleService } from "../campaignEmailSchedule.service";
import { CampaignEmailScheduleCreateInput } from "./CampaignEmailScheduleCreateInput";
import { CampaignEmailSchedule } from "./CampaignEmailSchedule";
import { CampaignEmailScheduleFindManyArgs } from "./CampaignEmailScheduleFindManyArgs";
import { CampaignEmailScheduleWhereUniqueInput } from "./CampaignEmailScheduleWhereUniqueInput";
import { CampaignEmailScheduleUpdateInput } from "./CampaignEmailScheduleUpdateInput";

export class CampaignEmailScheduleControllerBase {
  constructor(protected readonly service: CampaignEmailScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CampaignEmailSchedule })
  async createCampaignEmailSchedule(
    @common.Body() data: CampaignEmailScheduleCreateInput
  ): Promise<CampaignEmailSchedule> {
    return await this.service.createCampaignEmailSchedule({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        emailTemplate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sendAfterDays: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CampaignEmailSchedule] })
  @ApiNestedQuery(CampaignEmailScheduleFindManyArgs)
  async campaignEmailSchedules(
    @common.Req() request: Request
  ): Promise<CampaignEmailSchedule[]> {
    const args = plainToClass(CampaignEmailScheduleFindManyArgs, request.query);
    return this.service.campaignEmailSchedules({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        emailTemplate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sendAfterDays: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CampaignEmailSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campaignEmailSchedule(
    @common.Param() params: CampaignEmailScheduleWhereUniqueInput
  ): Promise<CampaignEmailSchedule | null> {
    const result = await this.service.campaignEmailSchedule({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        emailTemplate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sendAfterDays: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CampaignEmailSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampaignEmailSchedule(
    @common.Param() params: CampaignEmailScheduleWhereUniqueInput,
    @common.Body() data: CampaignEmailScheduleUpdateInput
  ): Promise<CampaignEmailSchedule | null> {
    try {
      return await this.service.updateCampaignEmailSchedule({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          emailTemplate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          sendAfterDays: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CampaignEmailSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampaignEmailSchedule(
    @common.Param() params: CampaignEmailScheduleWhereUniqueInput
  ): Promise<CampaignEmailSchedule | null> {
    try {
      return await this.service.deleteCampaignEmailSchedule({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          emailTemplate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          sendAfterDays: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
