/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CashierClosingPayments } from "./CashierClosingPayments";
import { CashierClosingPaymentsCountArgs } from "./CashierClosingPaymentsCountArgs";
import { CashierClosingPaymentsFindManyArgs } from "./CashierClosingPaymentsFindManyArgs";
import { CashierClosingPaymentsFindUniqueArgs } from "./CashierClosingPaymentsFindUniqueArgs";
import { CreateCashierClosingPaymentsArgs } from "./CreateCashierClosingPaymentsArgs";
import { UpdateCashierClosingPaymentsArgs } from "./UpdateCashierClosingPaymentsArgs";
import { DeleteCashierClosingPaymentsArgs } from "./DeleteCashierClosingPaymentsArgs";
import { CashierClosingPaymentsService } from "../cashierClosingPayments.service";
@graphql.Resolver(() => CashierClosingPayments)
export class CashierClosingPaymentsResolverBase {
  constructor(protected readonly service: CashierClosingPaymentsService) {}

  async _cashierClosingPaymentsItemsMeta(
    @graphql.Args() args: CashierClosingPaymentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CashierClosingPayments])
  async cashierClosingPaymentsItems(
    @graphql.Args() args: CashierClosingPaymentsFindManyArgs
  ): Promise<CashierClosingPayments[]> {
    return this.service.cashierClosingPaymentsItems(args);
  }

  @graphql.Query(() => CashierClosingPayments, { nullable: true })
  async cashierClosingPayments(
    @graphql.Args() args: CashierClosingPaymentsFindUniqueArgs
  ): Promise<CashierClosingPayments | null> {
    const result = await this.service.cashierClosingPayments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CashierClosingPayments)
  async createCashierClosingPayments(
    @graphql.Args() args: CreateCashierClosingPaymentsArgs
  ): Promise<CashierClosingPayments> {
    return await this.service.createCashierClosingPayments({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CashierClosingPayments)
  async updateCashierClosingPayments(
    @graphql.Args() args: UpdateCashierClosingPaymentsArgs
  ): Promise<CashierClosingPayments | null> {
    try {
      return await this.service.updateCashierClosingPayments({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CashierClosingPayments)
  async deleteCashierClosingPayments(
    @graphql.Args() args: DeleteCashierClosingPaymentsArgs
  ): Promise<CashierClosingPayments | null> {
    try {
      return await this.service.deleteCashierClosingPayments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
