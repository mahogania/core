/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CashierClosingPaymentsService } from "../cashierClosingPayments.service";
import { CashierClosingPaymentsCreateInput } from "./CashierClosingPaymentsCreateInput";
import { CashierClosingPayments } from "./CashierClosingPayments";
import { CashierClosingPaymentsFindManyArgs } from "./CashierClosingPaymentsFindManyArgs";
import { CashierClosingPaymentsWhereUniqueInput } from "./CashierClosingPaymentsWhereUniqueInput";
import { CashierClosingPaymentsUpdateInput } from "./CashierClosingPaymentsUpdateInput";

export class CashierClosingPaymentsControllerBase {
  constructor(protected readonly service: CashierClosingPaymentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CashierClosingPayments })
  async createCashierClosingPayments(
    @common.Body() data: CashierClosingPaymentsCreateInput
  ): Promise<CashierClosingPayments> {
    return await this.service.createCashierClosingPayments({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CashierClosingPayments] })
  @ApiNestedQuery(CashierClosingPaymentsFindManyArgs)
  async cashierClosingPaymentsItems(
    @common.Req() request: Request
  ): Promise<CashierClosingPayments[]> {
    const args = plainToClass(
      CashierClosingPaymentsFindManyArgs,
      request.query
    );
    return this.service.cashierClosingPaymentsItems({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CashierClosingPayments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cashierClosingPayments(
    @common.Param() params: CashierClosingPaymentsWhereUniqueInput
  ): Promise<CashierClosingPayments | null> {
    const result = await this.service.cashierClosingPayments({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CashierClosingPayments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCashierClosingPayments(
    @common.Param() params: CashierClosingPaymentsWhereUniqueInput,
    @common.Body() data: CashierClosingPaymentsUpdateInput
  ): Promise<CashierClosingPayments | null> {
    try {
      return await this.service.updateCashierClosingPayments({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CashierClosingPayments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCashierClosingPayments(
    @common.Param() params: CashierClosingPaymentsWhereUniqueInput
  ): Promise<CashierClosingPayments | null> {
    try {
      return await this.service.deleteCashierClosingPayments({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
