/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrmNoteService } from "../crmNote.service";
import { CrmNoteCreateInput } from "./CrmNoteCreateInput";
import { CrmNote } from "./CrmNote";
import { CrmNoteFindManyArgs } from "./CrmNoteFindManyArgs";
import { CrmNoteWhereUniqueInput } from "./CrmNoteWhereUniqueInput";
import { CrmNoteUpdateInput } from "./CrmNoteUpdateInput";

export class CrmNoteControllerBase {
  constructor(protected readonly service: CrmNoteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrmNote })
  async createCrmNote(
    @common.Body() data: CrmNoteCreateInput
  ): Promise<CrmNote> {
    return await this.service.createCrmNote({
      data: data,
      select: {
        addedBy: true,
        addedOn: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        note: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrmNote] })
  @ApiNestedQuery(CrmNoteFindManyArgs)
  async crmNotes(@common.Req() request: Request): Promise<CrmNote[]> {
    const args = plainToClass(CrmNoteFindManyArgs, request.query);
    return this.service.crmNotes({
      ...args,
      select: {
        addedBy: true,
        addedOn: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        note: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrmNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crmNote(
    @common.Param() params: CrmNoteWhereUniqueInput
  ): Promise<CrmNote | null> {
    const result = await this.service.crmNote({
      where: params,
      select: {
        addedBy: true,
        addedOn: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        note: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrmNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrmNote(
    @common.Param() params: CrmNoteWhereUniqueInput,
    @common.Body() data: CrmNoteUpdateInput
  ): Promise<CrmNote | null> {
    try {
      return await this.service.updateCrmNote({
        where: params,
        data: data,
        select: {
          addedBy: true,
          addedOn: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          note: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrmNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrmNote(
    @common.Param() params: CrmNoteWhereUniqueInput
  ): Promise<CrmNote | null> {
    try {
      return await this.service.deleteCrmNote({
        where: params,
        select: {
          addedBy: true,
          addedOn: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          note: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
