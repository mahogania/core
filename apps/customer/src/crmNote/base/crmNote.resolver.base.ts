/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CrmNote } from "./CrmNote";
import { CrmNoteCountArgs } from "./CrmNoteCountArgs";
import { CrmNoteFindManyArgs } from "./CrmNoteFindManyArgs";
import { CrmNoteFindUniqueArgs } from "./CrmNoteFindUniqueArgs";
import { CreateCrmNoteArgs } from "./CreateCrmNoteArgs";
import { UpdateCrmNoteArgs } from "./UpdateCrmNoteArgs";
import { DeleteCrmNoteArgs } from "./DeleteCrmNoteArgs";
import { CrmNoteService } from "../crmNote.service";
@graphql.Resolver(() => CrmNote)
export class CrmNoteResolverBase {
  constructor(protected readonly service: CrmNoteService) {}

  async _crmNotesMeta(
    @graphql.Args() args: CrmNoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CrmNote])
  async crmNotes(
    @graphql.Args() args: CrmNoteFindManyArgs
  ): Promise<CrmNote[]> {
    return this.service.crmNotes(args);
  }

  @graphql.Query(() => CrmNote, { nullable: true })
  async crmNote(
    @graphql.Args() args: CrmNoteFindUniqueArgs
  ): Promise<CrmNote | null> {
    const result = await this.service.crmNote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CrmNote)
  async createCrmNote(
    @graphql.Args() args: CreateCrmNoteArgs
  ): Promise<CrmNote> {
    return await this.service.createCrmNote({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CrmNote)
  async updateCrmNote(
    @graphql.Args() args: UpdateCrmNoteArgs
  ): Promise<CrmNote | null> {
    try {
      return await this.service.updateCrmNote({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrmNote)
  async deleteCrmNote(
    @graphql.Args() args: DeleteCrmNoteArgs
  ): Promise<CrmNote | null> {
    try {
      return await this.service.deleteCrmNote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
