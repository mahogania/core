/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerService } from "../customer.service";
import { CustomerCreateInput } from "./CustomerCreateInput";
import { Customer } from "./Customer";
import { CustomerFindManyArgs } from "./CustomerFindManyArgs";
import { CustomerWhereUniqueInput } from "./CustomerWhereUniqueInput";
import { CustomerUpdateInput } from "./CustomerUpdateInput";

export class CustomerControllerBase {
  constructor(protected readonly service: CustomerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customer })
  async createCustomer(
    @common.Body() data: CustomerCreateInput
  ): Promise<Customer> {
    return await this.service.createCustomer({
      data: data,
      select: {
        accountManager: true,
        createdAt: true,
        creation: true,
        customerDetails: true,
        customerGroup: true,
        customerName: true,
        customerPosId: true,
        customerPrimaryAddress: true,
        customerPrimaryContact: true,
        customerType: true,
        defaultBankAccount: true,
        defaultCommissionRate: true,
        defaultCurrency: true,
        defaultPriceList: true,
        defaultSalesPartner: true,
        disabled: true,
        dnRequired: true,
        docstatus: true,
        emailId: true,
        gender: true,
        id: true,
        idx: true,
        image: true,
        industry: true,
        isFrozen: true,
        isInternalCustomer: true,
        language: true,
        leadName: true,
        loyaltyProgram: true,
        loyaltyProgramTier: true,
        marketSegment: true,
        mobileNo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        opportunityName: true,
        owner: true,
        paymentTerms: true,
        primaryAddress: true,
        prospectName: true,
        representsCompany: true,
        salutation: true,
        soRequired: true,
        taxCategory: true,
        taxId: true,
        taxWithholdingCategory: true,
        territory: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Customer] })
  @ApiNestedQuery(CustomerFindManyArgs)
  async customers(@common.Req() request: Request): Promise<Customer[]> {
    const args = plainToClass(CustomerFindManyArgs, request.query);
    return this.service.customers({
      ...args,
      select: {
        accountManager: true,
        createdAt: true,
        creation: true,
        customerDetails: true,
        customerGroup: true,
        customerName: true,
        customerPosId: true,
        customerPrimaryAddress: true,
        customerPrimaryContact: true,
        customerType: true,
        defaultBankAccount: true,
        defaultCommissionRate: true,
        defaultCurrency: true,
        defaultPriceList: true,
        defaultSalesPartner: true,
        disabled: true,
        dnRequired: true,
        docstatus: true,
        emailId: true,
        gender: true,
        id: true,
        idx: true,
        image: true,
        industry: true,
        isFrozen: true,
        isInternalCustomer: true,
        language: true,
        leadName: true,
        loyaltyProgram: true,
        loyaltyProgramTier: true,
        marketSegment: true,
        mobileNo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        opportunityName: true,
        owner: true,
        paymentTerms: true,
        primaryAddress: true,
        prospectName: true,
        representsCompany: true,
        salutation: true,
        soRequired: true,
        taxCategory: true,
        taxId: true,
        taxWithholdingCategory: true,
        territory: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    const result = await this.service.customer({
      where: params,
      select: {
        accountManager: true,
        createdAt: true,
        creation: true,
        customerDetails: true,
        customerGroup: true,
        customerName: true,
        customerPosId: true,
        customerPrimaryAddress: true,
        customerPrimaryContact: true,
        customerType: true,
        defaultBankAccount: true,
        defaultCommissionRate: true,
        defaultCurrency: true,
        defaultPriceList: true,
        defaultSalesPartner: true,
        disabled: true,
        dnRequired: true,
        docstatus: true,
        emailId: true,
        gender: true,
        id: true,
        idx: true,
        image: true,
        industry: true,
        isFrozen: true,
        isInternalCustomer: true,
        language: true,
        leadName: true,
        loyaltyProgram: true,
        loyaltyProgramTier: true,
        marketSegment: true,
        mobileNo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        opportunityName: true,
        owner: true,
        paymentTerms: true,
        primaryAddress: true,
        prospectName: true,
        representsCompany: true,
        salutation: true,
        soRequired: true,
        taxCategory: true,
        taxId: true,
        taxWithholdingCategory: true,
        territory: true,
        updatedAt: true,
        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomer(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() data: CustomerUpdateInput
  ): Promise<Customer | null> {
    try {
      return await this.service.updateCustomer({
        where: params,
        data: data,
        select: {
          accountManager: true,
          createdAt: true,
          creation: true,
          customerDetails: true,
          customerGroup: true,
          customerName: true,
          customerPosId: true,
          customerPrimaryAddress: true,
          customerPrimaryContact: true,
          customerType: true,
          defaultBankAccount: true,
          defaultCommissionRate: true,
          defaultCurrency: true,
          defaultPriceList: true,
          defaultSalesPartner: true,
          disabled: true,
          dnRequired: true,
          docstatus: true,
          emailId: true,
          gender: true,
          id: true,
          idx: true,
          image: true,
          industry: true,
          isFrozen: true,
          isInternalCustomer: true,
          language: true,
          leadName: true,
          loyaltyProgram: true,
          loyaltyProgramTier: true,
          marketSegment: true,
          mobileNo: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          opportunityName: true,
          owner: true,
          paymentTerms: true,
          primaryAddress: true,
          prospectName: true,
          representsCompany: true,
          salutation: true,
          soRequired: true,
          taxCategory: true,
          taxId: true,
          taxWithholdingCategory: true,
          territory: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    try {
      return await this.service.deleteCustomer({
        where: params,
        select: {
          accountManager: true,
          createdAt: true,
          creation: true,
          customerDetails: true,
          customerGroup: true,
          customerName: true,
          customerPosId: true,
          customerPrimaryAddress: true,
          customerPrimaryContact: true,
          customerType: true,
          defaultBankAccount: true,
          defaultCommissionRate: true,
          defaultCurrency: true,
          defaultPriceList: true,
          defaultSalesPartner: true,
          disabled: true,
          dnRequired: true,
          docstatus: true,
          emailId: true,
          gender: true,
          id: true,
          idx: true,
          image: true,
          industry: true,
          isFrozen: true,
          isInternalCustomer: true,
          language: true,
          leadName: true,
          loyaltyProgram: true,
          loyaltyProgramTier: true,
          marketSegment: true,
          mobileNo: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          opportunityName: true,
          owner: true,
          paymentTerms: true,
          primaryAddress: true,
          prospectName: true,
          representsCompany: true,
          salutation: true,
          soRequired: true,
          taxCategory: true,
          taxId: true,
          taxWithholdingCategory: true,
          territory: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
