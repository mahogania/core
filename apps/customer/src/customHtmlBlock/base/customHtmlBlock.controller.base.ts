/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomHtmlBlockService } from "../customHtmlBlock.service";
import { CustomHtmlBlockCreateInput } from "./CustomHtmlBlockCreateInput";
import { CustomHtmlBlock } from "./CustomHtmlBlock";
import { CustomHtmlBlockFindManyArgs } from "./CustomHtmlBlockFindManyArgs";
import { CustomHtmlBlockWhereUniqueInput } from "./CustomHtmlBlockWhereUniqueInput";
import { CustomHtmlBlockUpdateInput } from "./CustomHtmlBlockUpdateInput";

export class CustomHtmlBlockControllerBase {
  constructor(protected readonly service: CustomHtmlBlockService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomHtmlBlock })
  async createCustomHtmlBlock(
    @common.Body() data: CustomHtmlBlockCreateInput
  ): Promise<CustomHtmlBlock> {
    return await this.service.createCustomHtmlBlock({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        html: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        privateField: true,
        script: true,
        style: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomHtmlBlock] })
  @ApiNestedQuery(CustomHtmlBlockFindManyArgs)
  async customHtmlBlocks(
    @common.Req() request: Request
  ): Promise<CustomHtmlBlock[]> {
    const args = plainToClass(CustomHtmlBlockFindManyArgs, request.query);
    return this.service.customHtmlBlocks({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        html: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        privateField: true,
        script: true,
        style: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomHtmlBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customHtmlBlock(
    @common.Param() params: CustomHtmlBlockWhereUniqueInput
  ): Promise<CustomHtmlBlock | null> {
    const result = await this.service.customHtmlBlock({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        html: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        privateField: true,
        script: true,
        style: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomHtmlBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomHtmlBlock(
    @common.Param() params: CustomHtmlBlockWhereUniqueInput,
    @common.Body() data: CustomHtmlBlockUpdateInput
  ): Promise<CustomHtmlBlock | null> {
    try {
      return await this.service.updateCustomHtmlBlock({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          html: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          privateField: true,
          script: true,
          style: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomHtmlBlock })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomHtmlBlock(
    @common.Param() params: CustomHtmlBlockWhereUniqueInput
  ): Promise<CustomHtmlBlock | null> {
    try {
      return await this.service.deleteCustomHtmlBlock({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          html: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          privateField: true,
          script: true,
          style: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
