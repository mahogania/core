/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomHtmlBlock as PrismaCustomHtmlBlock,
} from "@prisma/client";

export class CustomHtmlBlockServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomHtmlBlockCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customHtmlBlock.count(args);
  }

  async customHtmlBlocks(
    args: Prisma.CustomHtmlBlockFindManyArgs
  ): Promise<PrismaCustomHtmlBlock[]> {
    return this.prisma.customHtmlBlock.findMany(args);
  }
  async customHtmlBlock(
    args: Prisma.CustomHtmlBlockFindUniqueArgs
  ): Promise<PrismaCustomHtmlBlock | null> {
    return this.prisma.customHtmlBlock.findUnique(args);
  }
  async createCustomHtmlBlock(
    args: Prisma.CustomHtmlBlockCreateArgs
  ): Promise<PrismaCustomHtmlBlock> {
    return this.prisma.customHtmlBlock.create(args);
  }
  async updateCustomHtmlBlock(
    args: Prisma.CustomHtmlBlockUpdateArgs
  ): Promise<PrismaCustomHtmlBlock> {
    return this.prisma.customHtmlBlock.update(args);
  }
  async deleteCustomHtmlBlock(
    args: Prisma.CustomHtmlBlockDeleteArgs
  ): Promise<PrismaCustomHtmlBlock> {
    return this.prisma.customHtmlBlock.delete(args);
  }
}
