/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomField } from "./CustomField";
import { CustomFieldCountArgs } from "./CustomFieldCountArgs";
import { CustomFieldFindManyArgs } from "./CustomFieldFindManyArgs";
import { CustomFieldFindUniqueArgs } from "./CustomFieldFindUniqueArgs";
import { CreateCustomFieldArgs } from "./CreateCustomFieldArgs";
import { UpdateCustomFieldArgs } from "./UpdateCustomFieldArgs";
import { DeleteCustomFieldArgs } from "./DeleteCustomFieldArgs";
import { CustomFieldService } from "../customField.service";
@graphql.Resolver(() => CustomField)
export class CustomFieldResolverBase {
  constructor(protected readonly service: CustomFieldService) {}

  async _customFieldsMeta(
    @graphql.Args() args: CustomFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomField])
  async customFields(
    @graphql.Args() args: CustomFieldFindManyArgs
  ): Promise<CustomField[]> {
    return this.service.customFields(args);
  }

  @graphql.Query(() => CustomField, { nullable: true })
  async customField(
    @graphql.Args() args: CustomFieldFindUniqueArgs
  ): Promise<CustomField | null> {
    const result = await this.service.customField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomField)
  async createCustomField(
    @graphql.Args() args: CreateCustomFieldArgs
  ): Promise<CustomField> {
    return await this.service.createCustomField({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomField)
  async updateCustomField(
    @graphql.Args() args: UpdateCustomFieldArgs
  ): Promise<CustomField | null> {
    try {
      return await this.service.updateCustomField({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomField)
  async deleteCustomField(
    @graphql.Args() args: DeleteCustomFieldArgs
  ): Promise<CustomField | null> {
    try {
      return await this.service.deleteCustomField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
