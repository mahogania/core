/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CustomField as PrismaCustomField } from "@prisma/client";

export class CustomFieldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomFieldCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customField.count(args);
  }

  async customFields(
    args: Prisma.CustomFieldFindManyArgs
  ): Promise<PrismaCustomField[]> {
    return this.prisma.customField.findMany(args);
  }
  async customField(
    args: Prisma.CustomFieldFindUniqueArgs
  ): Promise<PrismaCustomField | null> {
    return this.prisma.customField.findUnique(args);
  }
  async createCustomField(
    args: Prisma.CustomFieldCreateArgs
  ): Promise<PrismaCustomField> {
    return this.prisma.customField.create(args);
  }
  async updateCustomField(
    args: Prisma.CustomFieldUpdateArgs
  ): Promise<PrismaCustomField> {
    return this.prisma.customField.update(args);
  }
  async deleteCustomField(
    args: Prisma.CustomFieldDeleteArgs
  ): Promise<PrismaCustomField> {
    return this.prisma.customField.delete(args);
  }
}
