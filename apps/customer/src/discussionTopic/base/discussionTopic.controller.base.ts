/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiscussionTopicService } from "../discussionTopic.service";
import { DiscussionTopicCreateInput } from "./DiscussionTopicCreateInput";
import { DiscussionTopic } from "./DiscussionTopic";
import { DiscussionTopicFindManyArgs } from "./DiscussionTopicFindManyArgs";
import { DiscussionTopicWhereUniqueInput } from "./DiscussionTopicWhereUniqueInput";
import { DiscussionTopicUpdateInput } from "./DiscussionTopicUpdateInput";

export class DiscussionTopicControllerBase {
  constructor(protected readonly service: DiscussionTopicService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscussionTopic })
  async createDiscussionTopic(
    @common.Body() data: DiscussionTopicCreateInput
  ): Promise<DiscussionTopic> {
    return await this.service.createDiscussionTopic({
      data: data,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        referenceDocname: true,
        referenceDoctype: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscussionTopic] })
  @ApiNestedQuery(DiscussionTopicFindManyArgs)
  async discussionTopics(
    @common.Req() request: Request
  ): Promise<DiscussionTopic[]> {
    const args = plainToClass(DiscussionTopicFindManyArgs, request.query);
    return this.service.discussionTopics({
      ...args,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        referenceDocname: true,
        referenceDoctype: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscussionTopic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async discussionTopic(
    @common.Param() params: DiscussionTopicWhereUniqueInput
  ): Promise<DiscussionTopic | null> {
    const result = await this.service.discussionTopic({
      where: params,
      select: {
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        referenceDocname: true,
        referenceDoctype: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscussionTopic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiscussionTopic(
    @common.Param() params: DiscussionTopicWhereUniqueInput,
    @common.Body() data: DiscussionTopicUpdateInput
  ): Promise<DiscussionTopic | null> {
    try {
      return await this.service.updateDiscussionTopic({
        where: params,
        data: data,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          referenceDocname: true,
          referenceDoctype: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscussionTopic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiscussionTopic(
    @common.Param() params: DiscussionTopicWhereUniqueInput
  ): Promise<DiscussionTopic | null> {
    try {
      return await this.service.deleteDiscussionTopic({
        where: params,
        select: {
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          referenceDocname: true,
          referenceDoctype: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
