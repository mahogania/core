/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DiscussionTopic as PrismaDiscussionTopic,
} from "@prisma/client";

export class DiscussionTopicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiscussionTopicCountArgs, "select">
  ): Promise<number> {
    return this.prisma.discussionTopic.count(args);
  }

  async discussionTopics(
    args: Prisma.DiscussionTopicFindManyArgs
  ): Promise<PrismaDiscussionTopic[]> {
    return this.prisma.discussionTopic.findMany(args);
  }
  async discussionTopic(
    args: Prisma.DiscussionTopicFindUniqueArgs
  ): Promise<PrismaDiscussionTopic | null> {
    return this.prisma.discussionTopic.findUnique(args);
  }
  async createDiscussionTopic(
    args: Prisma.DiscussionTopicCreateArgs
  ): Promise<PrismaDiscussionTopic> {
    return this.prisma.discussionTopic.create(args);
  }
  async updateDiscussionTopic(
    args: Prisma.DiscussionTopicUpdateArgs
  ): Promise<PrismaDiscussionTopic> {
    return this.prisma.discussionTopic.update(args);
  }
  async deleteDiscussionTopic(
    args: Prisma.DiscussionTopicDeleteArgs
  ): Promise<PrismaDiscussionTopic> {
    return this.prisma.discussionTopic.delete(args);
  }
}
