/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DiscussionTopic } from "./DiscussionTopic";
import { DiscussionTopicCountArgs } from "./DiscussionTopicCountArgs";
import { DiscussionTopicFindManyArgs } from "./DiscussionTopicFindManyArgs";
import { DiscussionTopicFindUniqueArgs } from "./DiscussionTopicFindUniqueArgs";
import { CreateDiscussionTopicArgs } from "./CreateDiscussionTopicArgs";
import { UpdateDiscussionTopicArgs } from "./UpdateDiscussionTopicArgs";
import { DeleteDiscussionTopicArgs } from "./DeleteDiscussionTopicArgs";
import { DiscussionTopicService } from "../discussionTopic.service";
@graphql.Resolver(() => DiscussionTopic)
export class DiscussionTopicResolverBase {
  constructor(protected readonly service: DiscussionTopicService) {}

  async _discussionTopicsMeta(
    @graphql.Args() args: DiscussionTopicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DiscussionTopic])
  async discussionTopics(
    @graphql.Args() args: DiscussionTopicFindManyArgs
  ): Promise<DiscussionTopic[]> {
    return this.service.discussionTopics(args);
  }

  @graphql.Query(() => DiscussionTopic, { nullable: true })
  async discussionTopic(
    @graphql.Args() args: DiscussionTopicFindUniqueArgs
  ): Promise<DiscussionTopic | null> {
    const result = await this.service.discussionTopic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DiscussionTopic)
  async createDiscussionTopic(
    @graphql.Args() args: CreateDiscussionTopicArgs
  ): Promise<DiscussionTopic> {
    return await this.service.createDiscussionTopic({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DiscussionTopic)
  async updateDiscussionTopic(
    @graphql.Args() args: UpdateDiscussionTopicArgs
  ): Promise<DiscussionTopic | null> {
    try {
      return await this.service.updateDiscussionTopic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiscussionTopic)
  async deleteDiscussionTopic(
    @graphql.Args() args: DeleteDiscussionTopicArgs
  ): Promise<DiscussionTopic | null> {
    try {
      return await this.service.deleteDiscussionTopic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
