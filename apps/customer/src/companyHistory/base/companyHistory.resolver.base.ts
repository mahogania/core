/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyHistory } from "./CompanyHistory";
import { CompanyHistoryCountArgs } from "./CompanyHistoryCountArgs";
import { CompanyHistoryFindManyArgs } from "./CompanyHistoryFindManyArgs";
import { CompanyHistoryFindUniqueArgs } from "./CompanyHistoryFindUniqueArgs";
import { CreateCompanyHistoryArgs } from "./CreateCompanyHistoryArgs";
import { UpdateCompanyHistoryArgs } from "./UpdateCompanyHistoryArgs";
import { DeleteCompanyHistoryArgs } from "./DeleteCompanyHistoryArgs";
import { CompanyHistoryService } from "../companyHistory.service";
@graphql.Resolver(() => CompanyHistory)
export class CompanyHistoryResolverBase {
  constructor(protected readonly service: CompanyHistoryService) {}

  async _companyHistoriesMeta(
    @graphql.Args() args: CompanyHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyHistory])
  async companyHistories(
    @graphql.Args() args: CompanyHistoryFindManyArgs
  ): Promise<CompanyHistory[]> {
    return this.service.companyHistories(args);
  }

  @graphql.Query(() => CompanyHistory, { nullable: true })
  async companyHistory(
    @graphql.Args() args: CompanyHistoryFindUniqueArgs
  ): Promise<CompanyHistory | null> {
    const result = await this.service.companyHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyHistory)
  async createCompanyHistory(
    @graphql.Args() args: CreateCompanyHistoryArgs
  ): Promise<CompanyHistory> {
    return await this.service.createCompanyHistory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanyHistory)
  async updateCompanyHistory(
    @graphql.Args() args: UpdateCompanyHistoryArgs
  ): Promise<CompanyHistory | null> {
    try {
      return await this.service.updateCompanyHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyHistory)
  async deleteCompanyHistory(
    @graphql.Args() args: DeleteCompanyHistoryArgs
  ): Promise<CompanyHistory | null> {
    try {
      return await this.service.deleteCompanyHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
