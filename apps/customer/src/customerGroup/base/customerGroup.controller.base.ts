/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerGroupService } from "../customerGroup.service";
import { CustomerGroupCreateInput } from "./CustomerGroupCreateInput";
import { CustomerGroup } from "./CustomerGroup";
import { CustomerGroupFindManyArgs } from "./CustomerGroupFindManyArgs";
import { CustomerGroupWhereUniqueInput } from "./CustomerGroupWhereUniqueInput";
import { CustomerGroupUpdateInput } from "./CustomerGroupUpdateInput";

export class CustomerGroupControllerBase {
  constructor(protected readonly service: CustomerGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerGroup })
  async createCustomerGroup(
    @common.Body() data: CustomerGroupCreateInput
  ): Promise<CustomerGroup> {
    return await this.service.createCustomerGroup({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        customerGroupName: true,
        defaultPriceList: true,
        docstatus: true,
        id: true,
        idx: true,
        isGroup: true,
        lft: true,
        modified: true,
        modifiedBy: true,
        name: true,
        oldParent: true,
        owner: true,
        parentCustomerGroup: true,
        paymentTerms: true,
        rgt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerGroup] })
  @ApiNestedQuery(CustomerGroupFindManyArgs)
  async customerGroups(
    @common.Req() request: Request
  ): Promise<CustomerGroup[]> {
    const args = plainToClass(CustomerGroupFindManyArgs, request.query);
    return this.service.customerGroups({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        customerGroupName: true,
        defaultPriceList: true,
        docstatus: true,
        id: true,
        idx: true,
        isGroup: true,
        lft: true,
        modified: true,
        modifiedBy: true,
        name: true,
        oldParent: true,
        owner: true,
        parentCustomerGroup: true,
        paymentTerms: true,
        rgt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customerGroup(
    @common.Param() params: CustomerGroupWhereUniqueInput
  ): Promise<CustomerGroup | null> {
    const result = await this.service.customerGroup({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        customerGroupName: true,
        defaultPriceList: true,
        docstatus: true,
        id: true,
        idx: true,
        isGroup: true,
        lft: true,
        modified: true,
        modifiedBy: true,
        name: true,
        oldParent: true,
        owner: true,
        parentCustomerGroup: true,
        paymentTerms: true,
        rgt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomerGroup(
    @common.Param() params: CustomerGroupWhereUniqueInput,
    @common.Body() data: CustomerGroupUpdateInput
  ): Promise<CustomerGroup | null> {
    try {
      return await this.service.updateCustomerGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          customerGroupName: true,
          defaultPriceList: true,
          docstatus: true,
          id: true,
          idx: true,
          isGroup: true,
          lft: true,
          modified: true,
          modifiedBy: true,
          name: true,
          oldParent: true,
          owner: true,
          parentCustomerGroup: true,
          paymentTerms: true,
          rgt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomerGroup(
    @common.Param() params: CustomerGroupWhereUniqueInput
  ): Promise<CustomerGroup | null> {
    try {
      return await this.service.deleteCustomerGroup({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          customerGroupName: true,
          defaultPriceList: true,
          docstatus: true,
          id: true,
          idx: true,
          isGroup: true,
          lft: true,
          modified: true,
          modifiedBy: true,
          name: true,
          oldParent: true,
          owner: true,
          parentCustomerGroup: true,
          paymentTerms: true,
          rgt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
