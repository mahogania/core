/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dunning } from "./Dunning";
import { DunningCountArgs } from "./DunningCountArgs";
import { DunningFindManyArgs } from "./DunningFindManyArgs";
import { DunningFindUniqueArgs } from "./DunningFindUniqueArgs";
import { CreateDunningArgs } from "./CreateDunningArgs";
import { UpdateDunningArgs } from "./UpdateDunningArgs";
import { DeleteDunningArgs } from "./DeleteDunningArgs";
import { DunningService } from "../dunning.service";
@graphql.Resolver(() => Dunning)
export class DunningResolverBase {
  constructor(protected readonly service: DunningService) {}

  async _dunningsMeta(
    @graphql.Args() args: DunningCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dunning])
  async dunnings(
    @graphql.Args() args: DunningFindManyArgs
  ): Promise<Dunning[]> {
    return this.service.dunnings(args);
  }

  @graphql.Query(() => Dunning, { nullable: true })
  async dunning(
    @graphql.Args() args: DunningFindUniqueArgs
  ): Promise<Dunning | null> {
    const result = await this.service.dunning(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dunning)
  async createDunning(
    @graphql.Args() args: CreateDunningArgs
  ): Promise<Dunning> {
    return await this.service.createDunning({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Dunning)
  async updateDunning(
    @graphql.Args() args: UpdateDunningArgs
  ): Promise<Dunning | null> {
    try {
      return await this.service.updateDunning({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dunning)
  async deleteDunning(
    @graphql.Args() args: DeleteDunningArgs
  ): Promise<Dunning | null> {
    try {
      return await this.service.deleteDunning(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
