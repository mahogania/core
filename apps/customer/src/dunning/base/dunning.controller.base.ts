/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DunningService } from "../dunning.service";
import { DunningCreateInput } from "./DunningCreateInput";
import { Dunning } from "./Dunning";
import { DunningFindManyArgs } from "./DunningFindManyArgs";
import { DunningWhereUniqueInput } from "./DunningWhereUniqueInput";
import { DunningUpdateInput } from "./DunningUpdateInput";

export class DunningControllerBase {
  constructor(protected readonly service: DunningService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dunning })
  async createDunning(
    @common.Body() data: DunningCreateInput
  ): Promise<Dunning> {
    return await this.service.createDunning({
      data: data,
      select: {
        addressDisplay: true,
        amendedFrom: true,
        baseDunningAmount: true,
        bodyText: true,
        closingText: true,
        company: true,
        companyAddress: true,
        companyAddressDisplay: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        conversionRate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        customerAddress: true,
        customerName: true,
        docstatus: true,
        dunningAmount: true,
        dunningFee: true,
        dunningType: true,
        grandTotal: true,
        id: true,
        idx: true,
        incomeAccount: true,
        language: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        rateOfInterest: true,
        spacer: true,
        status: true,
        totalInterest: true,
        totalOutstanding: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dunning] })
  @ApiNestedQuery(DunningFindManyArgs)
  async dunnings(@common.Req() request: Request): Promise<Dunning[]> {
    const args = plainToClass(DunningFindManyArgs, request.query);
    return this.service.dunnings({
      ...args,
      select: {
        addressDisplay: true,
        amendedFrom: true,
        baseDunningAmount: true,
        bodyText: true,
        closingText: true,
        company: true,
        companyAddress: true,
        companyAddressDisplay: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        conversionRate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        customerAddress: true,
        customerName: true,
        docstatus: true,
        dunningAmount: true,
        dunningFee: true,
        dunningType: true,
        grandTotal: true,
        id: true,
        idx: true,
        incomeAccount: true,
        language: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        rateOfInterest: true,
        spacer: true,
        status: true,
        totalInterest: true,
        totalOutstanding: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dunning })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dunning(
    @common.Param() params: DunningWhereUniqueInput
  ): Promise<Dunning | null> {
    const result = await this.service.dunning({
      where: params,
      select: {
        addressDisplay: true,
        amendedFrom: true,
        baseDunningAmount: true,
        bodyText: true,
        closingText: true,
        company: true,
        companyAddress: true,
        companyAddressDisplay: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        conversionRate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currency: true,
        customer: true,
        customerAddress: true,
        customerName: true,
        docstatus: true,
        dunningAmount: true,
        dunningFee: true,
        dunningType: true,
        grandTotal: true,
        id: true,
        idx: true,
        incomeAccount: true,
        language: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        rateOfInterest: true,
        spacer: true,
        status: true,
        totalInterest: true,
        totalOutstanding: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dunning })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDunning(
    @common.Param() params: DunningWhereUniqueInput,
    @common.Body() data: DunningUpdateInput
  ): Promise<Dunning | null> {
    try {
      return await this.service.updateDunning({
        where: params,
        data: data,
        select: {
          addressDisplay: true,
          amendedFrom: true,
          baseDunningAmount: true,
          bodyText: true,
          closingText: true,
          company: true,
          companyAddress: true,
          companyAddressDisplay: true,
          contactDisplay: true,
          contactEmail: true,
          contactMobile: true,
          contactPerson: true,
          conversionRate: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currency: true,
          customer: true,
          customerAddress: true,
          customerName: true,
          docstatus: true,
          dunningAmount: true,
          dunningFee: true,
          dunningType: true,
          grandTotal: true,
          id: true,
          idx: true,
          incomeAccount: true,
          language: true,
          letterHead: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          postingTime: true,
          rateOfInterest: true,
          spacer: true,
          status: true,
          totalInterest: true,
          totalOutstanding: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dunning })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDunning(
    @common.Param() params: DunningWhereUniqueInput
  ): Promise<Dunning | null> {
    try {
      return await this.service.deleteDunning({
        where: params,
        select: {
          addressDisplay: true,
          amendedFrom: true,
          baseDunningAmount: true,
          bodyText: true,
          closingText: true,
          company: true,
          companyAddress: true,
          companyAddressDisplay: true,
          contactDisplay: true,
          contactEmail: true,
          contactMobile: true,
          contactPerson: true,
          conversionRate: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currency: true,
          customer: true,
          customerAddress: true,
          customerName: true,
          docstatus: true,
          dunningAmount: true,
          dunningFee: true,
          dunningType: true,
          grandTotal: true,
          id: true,
          idx: true,
          incomeAccount: true,
          language: true,
          letterHead: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          postingTime: true,
          rateOfInterest: true,
          spacer: true,
          status: true,
          totalInterest: true,
          totalOutstanding: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
