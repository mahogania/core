/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailGroupMemberService } from "../emailGroupMember.service";
import { EmailGroupMemberCreateInput } from "./EmailGroupMemberCreateInput";
import { EmailGroupMember } from "./EmailGroupMember";
import { EmailGroupMemberFindManyArgs } from "./EmailGroupMemberFindManyArgs";
import { EmailGroupMemberWhereUniqueInput } from "./EmailGroupMemberWhereUniqueInput";
import { EmailGroupMemberUpdateInput } from "./EmailGroupMemberUpdateInput";

export class EmailGroupMemberControllerBase {
  constructor(protected readonly service: EmailGroupMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailGroupMember })
  async createEmailGroupMember(
    @common.Body() data: EmailGroupMemberCreateInput
  ): Promise<EmailGroupMember> {
    return await this.service.createEmailGroupMember({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        email: true,
        emailGroup: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        unsubscribed: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailGroupMember] })
  @ApiNestedQuery(EmailGroupMemberFindManyArgs)
  async emailGroupMembers(
    @common.Req() request: Request
  ): Promise<EmailGroupMember[]> {
    const args = plainToClass(EmailGroupMemberFindManyArgs, request.query);
    return this.service.emailGroupMembers({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        email: true,
        emailGroup: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        unsubscribed: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailGroupMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailGroupMember(
    @common.Param() params: EmailGroupMemberWhereUniqueInput
  ): Promise<EmailGroupMember | null> {
    const result = await this.service.emailGroupMember({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        email: true,
        emailGroup: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        unsubscribed: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailGroupMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailGroupMember(
    @common.Param() params: EmailGroupMemberWhereUniqueInput,
    @common.Body() data: EmailGroupMemberUpdateInput
  ): Promise<EmailGroupMember | null> {
    try {
      return await this.service.updateEmailGroupMember({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          email: true,
          emailGroup: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          unsubscribed: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailGroupMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailGroupMember(
    @common.Param() params: EmailGroupMemberWhereUniqueInput
  ): Promise<EmailGroupMember | null> {
    try {
      return await this.service.deleteEmailGroupMember({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          email: true,
          emailGroup: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          unsubscribed: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
