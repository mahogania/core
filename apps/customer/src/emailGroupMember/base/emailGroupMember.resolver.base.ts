/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailGroupMember } from "./EmailGroupMember";
import { EmailGroupMemberCountArgs } from "./EmailGroupMemberCountArgs";
import { EmailGroupMemberFindManyArgs } from "./EmailGroupMemberFindManyArgs";
import { EmailGroupMemberFindUniqueArgs } from "./EmailGroupMemberFindUniqueArgs";
import { CreateEmailGroupMemberArgs } from "./CreateEmailGroupMemberArgs";
import { UpdateEmailGroupMemberArgs } from "./UpdateEmailGroupMemberArgs";
import { DeleteEmailGroupMemberArgs } from "./DeleteEmailGroupMemberArgs";
import { EmailGroupMemberService } from "../emailGroupMember.service";
@graphql.Resolver(() => EmailGroupMember)
export class EmailGroupMemberResolverBase {
  constructor(protected readonly service: EmailGroupMemberService) {}

  async _emailGroupMembersMeta(
    @graphql.Args() args: EmailGroupMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailGroupMember])
  async emailGroupMembers(
    @graphql.Args() args: EmailGroupMemberFindManyArgs
  ): Promise<EmailGroupMember[]> {
    return this.service.emailGroupMembers(args);
  }

  @graphql.Query(() => EmailGroupMember, { nullable: true })
  async emailGroupMember(
    @graphql.Args() args: EmailGroupMemberFindUniqueArgs
  ): Promise<EmailGroupMember | null> {
    const result = await this.service.emailGroupMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailGroupMember)
  async createEmailGroupMember(
    @graphql.Args() args: CreateEmailGroupMemberArgs
  ): Promise<EmailGroupMember> {
    return await this.service.createEmailGroupMember({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailGroupMember)
  async updateEmailGroupMember(
    @graphql.Args() args: UpdateEmailGroupMemberArgs
  ): Promise<EmailGroupMember | null> {
    try {
      return await this.service.updateEmailGroupMember({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailGroupMember)
  async deleteEmailGroupMember(
    @graphql.Args() args: DeleteEmailGroupMemberArgs
  ): Promise<EmailGroupMember | null> {
    try {
      return await this.service.deleteEmailGroupMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
