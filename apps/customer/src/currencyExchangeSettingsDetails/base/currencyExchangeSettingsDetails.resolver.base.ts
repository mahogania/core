/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CurrencyExchangeSettingsDetails } from "./CurrencyExchangeSettingsDetails";
import { CurrencyExchangeSettingsDetailsCountArgs } from "./CurrencyExchangeSettingsDetailsCountArgs";
import { CurrencyExchangeSettingsDetailsFindManyArgs } from "./CurrencyExchangeSettingsDetailsFindManyArgs";
import { CurrencyExchangeSettingsDetailsFindUniqueArgs } from "./CurrencyExchangeSettingsDetailsFindUniqueArgs";
import { CreateCurrencyExchangeSettingsDetailsArgs } from "./CreateCurrencyExchangeSettingsDetailsArgs";
import { UpdateCurrencyExchangeSettingsDetailsArgs } from "./UpdateCurrencyExchangeSettingsDetailsArgs";
import { DeleteCurrencyExchangeSettingsDetailsArgs } from "./DeleteCurrencyExchangeSettingsDetailsArgs";
import { CurrencyExchangeSettingsDetailsService } from "../currencyExchangeSettingsDetails.service";
@graphql.Resolver(() => CurrencyExchangeSettingsDetails)
export class CurrencyExchangeSettingsDetailsResolverBase {
  constructor(
    protected readonly service: CurrencyExchangeSettingsDetailsService
  ) {}

  async _currencyExchangeSettingsDetailsItemsMeta(
    @graphql.Args() args: CurrencyExchangeSettingsDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CurrencyExchangeSettingsDetails])
  async currencyExchangeSettingsDetailsItems(
    @graphql.Args() args: CurrencyExchangeSettingsDetailsFindManyArgs
  ): Promise<CurrencyExchangeSettingsDetails[]> {
    return this.service.currencyExchangeSettingsDetailsItems(args);
  }

  @graphql.Query(() => CurrencyExchangeSettingsDetails, { nullable: true })
  async currencyExchangeSettingsDetails(
    @graphql.Args() args: CurrencyExchangeSettingsDetailsFindUniqueArgs
  ): Promise<CurrencyExchangeSettingsDetails | null> {
    const result = await this.service.currencyExchangeSettingsDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CurrencyExchangeSettingsDetails)
  async createCurrencyExchangeSettingsDetails(
    @graphql.Args() args: CreateCurrencyExchangeSettingsDetailsArgs
  ): Promise<CurrencyExchangeSettingsDetails> {
    return await this.service.createCurrencyExchangeSettingsDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CurrencyExchangeSettingsDetails)
  async updateCurrencyExchangeSettingsDetails(
    @graphql.Args() args: UpdateCurrencyExchangeSettingsDetailsArgs
  ): Promise<CurrencyExchangeSettingsDetails | null> {
    try {
      return await this.service.updateCurrencyExchangeSettingsDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CurrencyExchangeSettingsDetails)
  async deleteCurrencyExchangeSettingsDetails(
    @graphql.Args() args: DeleteCurrencyExchangeSettingsDetailsArgs
  ): Promise<CurrencyExchangeSettingsDetails | null> {
    try {
      return await this.service.deleteCurrencyExchangeSettingsDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
