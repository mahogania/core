/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CurrencyExchangeSettingsDetailsService } from "../currencyExchangeSettingsDetails.service";
import { CurrencyExchangeSettingsDetailsCreateInput } from "./CurrencyExchangeSettingsDetailsCreateInput";
import { CurrencyExchangeSettingsDetails } from "./CurrencyExchangeSettingsDetails";
import { CurrencyExchangeSettingsDetailsFindManyArgs } from "./CurrencyExchangeSettingsDetailsFindManyArgs";
import { CurrencyExchangeSettingsDetailsWhereUniqueInput } from "./CurrencyExchangeSettingsDetailsWhereUniqueInput";
import { CurrencyExchangeSettingsDetailsUpdateInput } from "./CurrencyExchangeSettingsDetailsUpdateInput";

export class CurrencyExchangeSettingsDetailsControllerBase {
  constructor(
    protected readonly service: CurrencyExchangeSettingsDetailsService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CurrencyExchangeSettingsDetails })
  async createCurrencyExchangeSettingsDetails(
    @common.Body() data: CurrencyExchangeSettingsDetailsCreateInput
  ): Promise<CurrencyExchangeSettingsDetails> {
    return await this.service.createCurrencyExchangeSettingsDetails({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        key: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CurrencyExchangeSettingsDetails] })
  @ApiNestedQuery(CurrencyExchangeSettingsDetailsFindManyArgs)
  async currencyExchangeSettingsDetailsItems(
    @common.Req() request: Request
  ): Promise<CurrencyExchangeSettingsDetails[]> {
    const args = plainToClass(
      CurrencyExchangeSettingsDetailsFindManyArgs,
      request.query
    );
    return this.service.currencyExchangeSettingsDetailsItems({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        key: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CurrencyExchangeSettingsDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async currencyExchangeSettingsDetails(
    @common.Param() params: CurrencyExchangeSettingsDetailsWhereUniqueInput
  ): Promise<CurrencyExchangeSettingsDetails | null> {
    const result = await this.service.currencyExchangeSettingsDetails({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        key: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CurrencyExchangeSettingsDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCurrencyExchangeSettingsDetails(
    @common.Param() params: CurrencyExchangeSettingsDetailsWhereUniqueInput,
    @common.Body() data: CurrencyExchangeSettingsDetailsUpdateInput
  ): Promise<CurrencyExchangeSettingsDetails | null> {
    try {
      return await this.service.updateCurrencyExchangeSettingsDetails({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          key: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CurrencyExchangeSettingsDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCurrencyExchangeSettingsDetails(
    @common.Param() params: CurrencyExchangeSettingsDetailsWhereUniqueInput
  ): Promise<CurrencyExchangeSettingsDetails | null> {
    try {
      return await this.service.deleteCurrencyExchangeSettingsDetails({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          key: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
