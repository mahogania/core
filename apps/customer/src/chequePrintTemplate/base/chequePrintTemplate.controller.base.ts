/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChequePrintTemplateService } from "../chequePrintTemplate.service";
import { ChequePrintTemplateCreateInput } from "./ChequePrintTemplateCreateInput";
import { ChequePrintTemplate } from "./ChequePrintTemplate";
import { ChequePrintTemplateFindManyArgs } from "./ChequePrintTemplateFindManyArgs";
import { ChequePrintTemplateWhereUniqueInput } from "./ChequePrintTemplateWhereUniqueInput";
import { ChequePrintTemplateUpdateInput } from "./ChequePrintTemplateUpdateInput";

export class ChequePrintTemplateControllerBase {
  constructor(protected readonly service: ChequePrintTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChequePrintTemplate })
  async createChequePrintTemplate(
    @common.Body() data: ChequePrintTemplateCreateInput
  ): Promise<ChequePrintTemplate> {
    return await this.service.createChequePrintTemplate({
      data: data,
      select: {
        accNoDistFromLeftEdge: true,
        accNoDistFromTopEdge: true,
        accPayDistFromLeftEdge: true,
        accPayDistFromTopEdge: true,
        amtInFiguresFromLeftEdge: true,
        amtInFiguresFromTopEdge: true,
        amtInWordWidth: true,
        amtInWordsFromLeftEdge: true,
        amtInWordsFromTopEdge: true,
        amtInWordsLineSpacing: true,
        bankName: true,
        chequeHeight: true,
        chequeSize: true,
        chequeWidth: true,
        createdAt: true,
        creation: true,
        dateDistFromLeftEdge: true,
        dateDistFromTopEdge: true,
        docstatus: true,
        hasPrintFormat: true,
        id: true,
        idx: true,
        isAccountPayable: true,
        messageToShow: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        payerNameFromLeftEdge: true,
        payerNameFromTopEdge: true,
        scannedCheque: true,
        signatoryFromLeftEdge: true,
        signatoryFromTopEdge: true,
        startingPositionFromTopEdge: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ChequePrintTemplate] })
  @ApiNestedQuery(ChequePrintTemplateFindManyArgs)
  async chequePrintTemplates(
    @common.Req() request: Request
  ): Promise<ChequePrintTemplate[]> {
    const args = plainToClass(ChequePrintTemplateFindManyArgs, request.query);
    return this.service.chequePrintTemplates({
      ...args,
      select: {
        accNoDistFromLeftEdge: true,
        accNoDistFromTopEdge: true,
        accPayDistFromLeftEdge: true,
        accPayDistFromTopEdge: true,
        amtInFiguresFromLeftEdge: true,
        amtInFiguresFromTopEdge: true,
        amtInWordWidth: true,
        amtInWordsFromLeftEdge: true,
        amtInWordsFromTopEdge: true,
        amtInWordsLineSpacing: true,
        bankName: true,
        chequeHeight: true,
        chequeSize: true,
        chequeWidth: true,
        createdAt: true,
        creation: true,
        dateDistFromLeftEdge: true,
        dateDistFromTopEdge: true,
        docstatus: true,
        hasPrintFormat: true,
        id: true,
        idx: true,
        isAccountPayable: true,
        messageToShow: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        payerNameFromLeftEdge: true,
        payerNameFromTopEdge: true,
        scannedCheque: true,
        signatoryFromLeftEdge: true,
        signatoryFromTopEdge: true,
        startingPositionFromTopEdge: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChequePrintTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async chequePrintTemplate(
    @common.Param() params: ChequePrintTemplateWhereUniqueInput
  ): Promise<ChequePrintTemplate | null> {
    const result = await this.service.chequePrintTemplate({
      where: params,
      select: {
        accNoDistFromLeftEdge: true,
        accNoDistFromTopEdge: true,
        accPayDistFromLeftEdge: true,
        accPayDistFromTopEdge: true,
        amtInFiguresFromLeftEdge: true,
        amtInFiguresFromTopEdge: true,
        amtInWordWidth: true,
        amtInWordsFromLeftEdge: true,
        amtInWordsFromTopEdge: true,
        amtInWordsLineSpacing: true,
        bankName: true,
        chequeHeight: true,
        chequeSize: true,
        chequeWidth: true,
        createdAt: true,
        creation: true,
        dateDistFromLeftEdge: true,
        dateDistFromTopEdge: true,
        docstatus: true,
        hasPrintFormat: true,
        id: true,
        idx: true,
        isAccountPayable: true,
        messageToShow: true,
        modified: true,
        modifiedBy: true,
        owner: true,
        payerNameFromLeftEdge: true,
        payerNameFromTopEdge: true,
        scannedCheque: true,
        signatoryFromLeftEdge: true,
        signatoryFromTopEdge: true,
        startingPositionFromTopEdge: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChequePrintTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChequePrintTemplate(
    @common.Param() params: ChequePrintTemplateWhereUniqueInput,
    @common.Body() data: ChequePrintTemplateUpdateInput
  ): Promise<ChequePrintTemplate | null> {
    try {
      return await this.service.updateChequePrintTemplate({
        where: params,
        data: data,
        select: {
          accNoDistFromLeftEdge: true,
          accNoDistFromTopEdge: true,
          accPayDistFromLeftEdge: true,
          accPayDistFromTopEdge: true,
          amtInFiguresFromLeftEdge: true,
          amtInFiguresFromTopEdge: true,
          amtInWordWidth: true,
          amtInWordsFromLeftEdge: true,
          amtInWordsFromTopEdge: true,
          amtInWordsLineSpacing: true,
          bankName: true,
          chequeHeight: true,
          chequeSize: true,
          chequeWidth: true,
          createdAt: true,
          creation: true,
          dateDistFromLeftEdge: true,
          dateDistFromTopEdge: true,
          docstatus: true,
          hasPrintFormat: true,
          id: true,
          idx: true,
          isAccountPayable: true,
          messageToShow: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          payerNameFromLeftEdge: true,
          payerNameFromTopEdge: true,
          scannedCheque: true,
          signatoryFromLeftEdge: true,
          signatoryFromTopEdge: true,
          startingPositionFromTopEdge: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChequePrintTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChequePrintTemplate(
    @common.Param() params: ChequePrintTemplateWhereUniqueInput
  ): Promise<ChequePrintTemplate | null> {
    try {
      return await this.service.deleteChequePrintTemplate({
        where: params,
        select: {
          accNoDistFromLeftEdge: true,
          accNoDistFromTopEdge: true,
          accPayDistFromLeftEdge: true,
          accPayDistFromTopEdge: true,
          amtInFiguresFromLeftEdge: true,
          amtInFiguresFromTopEdge: true,
          amtInWordWidth: true,
          amtInWordsFromLeftEdge: true,
          amtInWordsFromTopEdge: true,
          amtInWordsLineSpacing: true,
          bankName: true,
          chequeHeight: true,
          chequeSize: true,
          chequeWidth: true,
          createdAt: true,
          creation: true,
          dateDistFromLeftEdge: true,
          dateDistFromTopEdge: true,
          docstatus: true,
          hasPrintFormat: true,
          id: true,
          idx: true,
          isAccountPayable: true,
          messageToShow: true,
          modified: true,
          modifiedBy: true,
          owner: true,
          payerNameFromLeftEdge: true,
          payerNameFromTopEdge: true,
          scannedCheque: true,
          signatoryFromLeftEdge: true,
          signatoryFromTopEdge: true,
          startingPositionFromTopEdge: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
