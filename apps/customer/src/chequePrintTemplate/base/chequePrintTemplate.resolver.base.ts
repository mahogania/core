/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ChequePrintTemplate } from "./ChequePrintTemplate";
import { ChequePrintTemplateCountArgs } from "./ChequePrintTemplateCountArgs";
import { ChequePrintTemplateFindManyArgs } from "./ChequePrintTemplateFindManyArgs";
import { ChequePrintTemplateFindUniqueArgs } from "./ChequePrintTemplateFindUniqueArgs";
import { CreateChequePrintTemplateArgs } from "./CreateChequePrintTemplateArgs";
import { UpdateChequePrintTemplateArgs } from "./UpdateChequePrintTemplateArgs";
import { DeleteChequePrintTemplateArgs } from "./DeleteChequePrintTemplateArgs";
import { ChequePrintTemplateService } from "../chequePrintTemplate.service";
@graphql.Resolver(() => ChequePrintTemplate)
export class ChequePrintTemplateResolverBase {
  constructor(protected readonly service: ChequePrintTemplateService) {}

  async _chequePrintTemplatesMeta(
    @graphql.Args() args: ChequePrintTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ChequePrintTemplate])
  async chequePrintTemplates(
    @graphql.Args() args: ChequePrintTemplateFindManyArgs
  ): Promise<ChequePrintTemplate[]> {
    return this.service.chequePrintTemplates(args);
  }

  @graphql.Query(() => ChequePrintTemplate, { nullable: true })
  async chequePrintTemplate(
    @graphql.Args() args: ChequePrintTemplateFindUniqueArgs
  ): Promise<ChequePrintTemplate | null> {
    const result = await this.service.chequePrintTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChequePrintTemplate)
  async createChequePrintTemplate(
    @graphql.Args() args: CreateChequePrintTemplateArgs
  ): Promise<ChequePrintTemplate> {
    return await this.service.createChequePrintTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ChequePrintTemplate)
  async updateChequePrintTemplate(
    @graphql.Args() args: UpdateChequePrintTemplateArgs
  ): Promise<ChequePrintTemplate | null> {
    try {
      return await this.service.updateChequePrintTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChequePrintTemplate)
  async deleteChequePrintTemplate(
    @graphql.Args() args: DeleteChequePrintTemplateArgs
  ): Promise<ChequePrintTemplate | null> {
    try {
      return await this.service.deleteChequePrintTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
