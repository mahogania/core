/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailDigestService } from "../emailDigest.service";
import { EmailDigestCreateInput } from "./EmailDigestCreateInput";
import { EmailDigest } from "./EmailDigest";
import { EmailDigestFindManyArgs } from "./EmailDigestFindManyArgs";
import { EmailDigestWhereUniqueInput } from "./EmailDigestWhereUniqueInput";
import { EmailDigestUpdateInput } from "./EmailDigestUpdateInput";

export class EmailDigestControllerBase {
  constructor(protected readonly service: EmailDigestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailDigest })
  async createEmailDigest(
    @common.Body() data: EmailDigestCreateInput
  ): Promise<EmailDigest> {
    return await this.service.createEmailDigest({
      data: data,
      select: {
        addQuote: true,
        bankBalance: true,
        calendarEvents: true,
        company: true,
        createdAt: true,
        creation: true,
        creditBalance: true,
        docstatus: true,
        enabled: true,
        expenseYearToDate: true,
        expensesBooked: true,
        frequency: true,
        id: true,
        idx: true,
        income: true,
        incomeYearToDate: true,
        invoicedAmount: true,
        issue: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newQuotations: true,
        nextSend: true,
        notifications: true,
        owner: true,
        payables: true,
        pendingQuotations: true,
        project: true,
        purchaseInvoice: true,
        purchaseOrder: true,
        purchaseOrdersItemsOverdue: true,
        purchaseOrdersToBill: true,
        purchaseOrdersToReceive: true,
        salesInvoice: true,
        salesOrder: true,
        salesOrdersToBill: true,
        salesOrdersToDeliver: true,
        todoList: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailDigest] })
  @ApiNestedQuery(EmailDigestFindManyArgs)
  async emailDigests(@common.Req() request: Request): Promise<EmailDigest[]> {
    const args = plainToClass(EmailDigestFindManyArgs, request.query);
    return this.service.emailDigests({
      ...args,
      select: {
        addQuote: true,
        bankBalance: true,
        calendarEvents: true,
        company: true,
        createdAt: true,
        creation: true,
        creditBalance: true,
        docstatus: true,
        enabled: true,
        expenseYearToDate: true,
        expensesBooked: true,
        frequency: true,
        id: true,
        idx: true,
        income: true,
        incomeYearToDate: true,
        invoicedAmount: true,
        issue: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newQuotations: true,
        nextSend: true,
        notifications: true,
        owner: true,
        payables: true,
        pendingQuotations: true,
        project: true,
        purchaseInvoice: true,
        purchaseOrder: true,
        purchaseOrdersItemsOverdue: true,
        purchaseOrdersToBill: true,
        purchaseOrdersToReceive: true,
        salesInvoice: true,
        salesOrder: true,
        salesOrdersToBill: true,
        salesOrdersToDeliver: true,
        todoList: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailDigest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailDigest(
    @common.Param() params: EmailDigestWhereUniqueInput
  ): Promise<EmailDigest | null> {
    const result = await this.service.emailDigest({
      where: params,
      select: {
        addQuote: true,
        bankBalance: true,
        calendarEvents: true,
        company: true,
        createdAt: true,
        creation: true,
        creditBalance: true,
        docstatus: true,
        enabled: true,
        expenseYearToDate: true,
        expensesBooked: true,
        frequency: true,
        id: true,
        idx: true,
        income: true,
        incomeYearToDate: true,
        invoicedAmount: true,
        issue: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newQuotations: true,
        nextSend: true,
        notifications: true,
        owner: true,
        payables: true,
        pendingQuotations: true,
        project: true,
        purchaseInvoice: true,
        purchaseOrder: true,
        purchaseOrdersItemsOverdue: true,
        purchaseOrdersToBill: true,
        purchaseOrdersToReceive: true,
        salesInvoice: true,
        salesOrder: true,
        salesOrdersToBill: true,
        salesOrdersToDeliver: true,
        todoList: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailDigest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailDigest(
    @common.Param() params: EmailDigestWhereUniqueInput,
    @common.Body() data: EmailDigestUpdateInput
  ): Promise<EmailDigest | null> {
    try {
      return await this.service.updateEmailDigest({
        where: params,
        data: data,
        select: {
          addQuote: true,
          bankBalance: true,
          calendarEvents: true,
          company: true,
          createdAt: true,
          creation: true,
          creditBalance: true,
          docstatus: true,
          enabled: true,
          expenseYearToDate: true,
          expensesBooked: true,
          frequency: true,
          id: true,
          idx: true,
          income: true,
          incomeYearToDate: true,
          invoicedAmount: true,
          issue: true,
          modified: true,
          modifiedBy: true,
          name: true,
          newQuotations: true,
          nextSend: true,
          notifications: true,
          owner: true,
          payables: true,
          pendingQuotations: true,
          project: true,
          purchaseInvoice: true,
          purchaseOrder: true,
          purchaseOrdersItemsOverdue: true,
          purchaseOrdersToBill: true,
          purchaseOrdersToReceive: true,
          salesInvoice: true,
          salesOrder: true,
          salesOrdersToBill: true,
          salesOrdersToDeliver: true,
          todoList: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailDigest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailDigest(
    @common.Param() params: EmailDigestWhereUniqueInput
  ): Promise<EmailDigest | null> {
    try {
      return await this.service.deleteEmailDigest({
        where: params,
        select: {
          addQuote: true,
          bankBalance: true,
          calendarEvents: true,
          company: true,
          createdAt: true,
          creation: true,
          creditBalance: true,
          docstatus: true,
          enabled: true,
          expenseYearToDate: true,
          expensesBooked: true,
          frequency: true,
          id: true,
          idx: true,
          income: true,
          incomeYearToDate: true,
          invoicedAmount: true,
          issue: true,
          modified: true,
          modifiedBy: true,
          name: true,
          newQuotations: true,
          nextSend: true,
          notifications: true,
          owner: true,
          payables: true,
          pendingQuotations: true,
          project: true,
          purchaseInvoice: true,
          purchaseOrder: true,
          purchaseOrdersItemsOverdue: true,
          purchaseOrdersToBill: true,
          purchaseOrdersToReceive: true,
          salesInvoice: true,
          salesOrder: true,
          salesOrdersToBill: true,
          salesOrdersToDeliver: true,
          todoList: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
