/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailDigest } from "./EmailDigest";
import { EmailDigestCountArgs } from "./EmailDigestCountArgs";
import { EmailDigestFindManyArgs } from "./EmailDigestFindManyArgs";
import { EmailDigestFindUniqueArgs } from "./EmailDigestFindUniqueArgs";
import { CreateEmailDigestArgs } from "./CreateEmailDigestArgs";
import { UpdateEmailDigestArgs } from "./UpdateEmailDigestArgs";
import { DeleteEmailDigestArgs } from "./DeleteEmailDigestArgs";
import { EmailDigestService } from "../emailDigest.service";
@graphql.Resolver(() => EmailDigest)
export class EmailDigestResolverBase {
  constructor(protected readonly service: EmailDigestService) {}

  async _emailDigestsMeta(
    @graphql.Args() args: EmailDigestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailDigest])
  async emailDigests(
    @graphql.Args() args: EmailDigestFindManyArgs
  ): Promise<EmailDigest[]> {
    return this.service.emailDigests(args);
  }

  @graphql.Query(() => EmailDigest, { nullable: true })
  async emailDigest(
    @graphql.Args() args: EmailDigestFindUniqueArgs
  ): Promise<EmailDigest | null> {
    const result = await this.service.emailDigest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailDigest)
  async createEmailDigest(
    @graphql.Args() args: CreateEmailDigestArgs
  ): Promise<EmailDigest> {
    return await this.service.createEmailDigest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailDigest)
  async updateEmailDigest(
    @graphql.Args() args: UpdateEmailDigestArgs
  ): Promise<EmailDigest | null> {
    try {
      return await this.service.updateEmailDigest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailDigest)
  async deleteEmailDigest(
    @graphql.Args() args: DeleteEmailDigestArgs
  ): Promise<EmailDigest | null> {
    try {
      return await this.service.deleteEmailDigest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
