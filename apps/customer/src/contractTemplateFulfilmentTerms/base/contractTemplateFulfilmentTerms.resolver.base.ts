/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContractTemplateFulfilmentTerms } from "./ContractTemplateFulfilmentTerms";
import { ContractTemplateFulfilmentTermsCountArgs } from "./ContractTemplateFulfilmentTermsCountArgs";
import { ContractTemplateFulfilmentTermsFindManyArgs } from "./ContractTemplateFulfilmentTermsFindManyArgs";
import { ContractTemplateFulfilmentTermsFindUniqueArgs } from "./ContractTemplateFulfilmentTermsFindUniqueArgs";
import { CreateContractTemplateFulfilmentTermsArgs } from "./CreateContractTemplateFulfilmentTermsArgs";
import { UpdateContractTemplateFulfilmentTermsArgs } from "./UpdateContractTemplateFulfilmentTermsArgs";
import { DeleteContractTemplateFulfilmentTermsArgs } from "./DeleteContractTemplateFulfilmentTermsArgs";
import { ContractTemplateFulfilmentTermsService } from "../contractTemplateFulfilmentTerms.service";
@graphql.Resolver(() => ContractTemplateFulfilmentTerms)
export class ContractTemplateFulfilmentTermsResolverBase {
  constructor(
    protected readonly service: ContractTemplateFulfilmentTermsService
  ) {}

  async _contractTemplateFulfilmentTermsItemsMeta(
    @graphql.Args() args: ContractTemplateFulfilmentTermsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContractTemplateFulfilmentTerms])
  async contractTemplateFulfilmentTermsItems(
    @graphql.Args() args: ContractTemplateFulfilmentTermsFindManyArgs
  ): Promise<ContractTemplateFulfilmentTerms[]> {
    return this.service.contractTemplateFulfilmentTermsItems(args);
  }

  @graphql.Query(() => ContractTemplateFulfilmentTerms, { nullable: true })
  async contractTemplateFulfilmentTerms(
    @graphql.Args() args: ContractTemplateFulfilmentTermsFindUniqueArgs
  ): Promise<ContractTemplateFulfilmentTerms | null> {
    const result = await this.service.contractTemplateFulfilmentTerms(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContractTemplateFulfilmentTerms)
  async createContractTemplateFulfilmentTerms(
    @graphql.Args() args: CreateContractTemplateFulfilmentTermsArgs
  ): Promise<ContractTemplateFulfilmentTerms> {
    return await this.service.createContractTemplateFulfilmentTerms({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContractTemplateFulfilmentTerms)
  async updateContractTemplateFulfilmentTerms(
    @graphql.Args() args: UpdateContractTemplateFulfilmentTermsArgs
  ): Promise<ContractTemplateFulfilmentTerms | null> {
    try {
      return await this.service.updateContractTemplateFulfilmentTerms({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractTemplateFulfilmentTerms)
  async deleteContractTemplateFulfilmentTerms(
    @graphql.Args() args: DeleteContractTemplateFulfilmentTermsArgs
  ): Promise<ContractTemplateFulfilmentTerms | null> {
    try {
      return await this.service.deleteContractTemplateFulfilmentTerms(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
