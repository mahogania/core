/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContractTemplateFulfilmentTermsService } from "../contractTemplateFulfilmentTerms.service";
import { ContractTemplateFulfilmentTermsCreateInput } from "./ContractTemplateFulfilmentTermsCreateInput";
import { ContractTemplateFulfilmentTerms } from "./ContractTemplateFulfilmentTerms";
import { ContractTemplateFulfilmentTermsFindManyArgs } from "./ContractTemplateFulfilmentTermsFindManyArgs";
import { ContractTemplateFulfilmentTermsWhereUniqueInput } from "./ContractTemplateFulfilmentTermsWhereUniqueInput";
import { ContractTemplateFulfilmentTermsUpdateInput } from "./ContractTemplateFulfilmentTermsUpdateInput";

export class ContractTemplateFulfilmentTermsControllerBase {
  constructor(
    protected readonly service: ContractTemplateFulfilmentTermsService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContractTemplateFulfilmentTerms })
  async createContractTemplateFulfilmentTerms(
    @common.Body() data: ContractTemplateFulfilmentTermsCreateInput
  ): Promise<ContractTemplateFulfilmentTerms> {
    return await this.service.createContractTemplateFulfilmentTerms({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        requirement: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContractTemplateFulfilmentTerms] })
  @ApiNestedQuery(ContractTemplateFulfilmentTermsFindManyArgs)
  async contractTemplateFulfilmentTermsItems(
    @common.Req() request: Request
  ): Promise<ContractTemplateFulfilmentTerms[]> {
    const args = plainToClass(
      ContractTemplateFulfilmentTermsFindManyArgs,
      request.query
    );
    return this.service.contractTemplateFulfilmentTermsItems({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        requirement: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContractTemplateFulfilmentTerms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contractTemplateFulfilmentTerms(
    @common.Param() params: ContractTemplateFulfilmentTermsWhereUniqueInput
  ): Promise<ContractTemplateFulfilmentTerms | null> {
    const result = await this.service.contractTemplateFulfilmentTerms({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        requirement: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContractTemplateFulfilmentTerms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContractTemplateFulfilmentTerms(
    @common.Param() params: ContractTemplateFulfilmentTermsWhereUniqueInput,
    @common.Body() data: ContractTemplateFulfilmentTermsUpdateInput
  ): Promise<ContractTemplateFulfilmentTerms | null> {
    try {
      return await this.service.updateContractTemplateFulfilmentTerms({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          requirement: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContractTemplateFulfilmentTerms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContractTemplateFulfilmentTerms(
    @common.Param() params: ContractTemplateFulfilmentTermsWhereUniqueInput
  ): Promise<ContractTemplateFulfilmentTerms | null> {
    try {
      return await this.service.deleteContractTemplateFulfilmentTerms({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          requirement: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
