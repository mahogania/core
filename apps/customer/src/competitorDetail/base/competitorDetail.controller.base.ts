/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompetitorDetailService } from "../competitorDetail.service";
import { CompetitorDetailCreateInput } from "./CompetitorDetailCreateInput";
import { CompetitorDetail } from "./CompetitorDetail";
import { CompetitorDetailFindManyArgs } from "./CompetitorDetailFindManyArgs";
import { CompetitorDetailWhereUniqueInput } from "./CompetitorDetailWhereUniqueInput";
import { CompetitorDetailUpdateInput } from "./CompetitorDetailUpdateInput";

export class CompetitorDetailControllerBase {
  constructor(protected readonly service: CompetitorDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompetitorDetail })
  async createCompetitorDetail(
    @common.Body() data: CompetitorDetailCreateInput
  ): Promise<CompetitorDetail> {
    return await this.service.createCompetitorDetail({
      data: data,
      select: {
        competitor: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompetitorDetail] })
  @ApiNestedQuery(CompetitorDetailFindManyArgs)
  async competitorDetails(
    @common.Req() request: Request
  ): Promise<CompetitorDetail[]> {
    const args = plainToClass(CompetitorDetailFindManyArgs, request.query);
    return this.service.competitorDetails({
      ...args,
      select: {
        competitor: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompetitorDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async competitorDetail(
    @common.Param() params: CompetitorDetailWhereUniqueInput
  ): Promise<CompetitorDetail | null> {
    const result = await this.service.competitorDetail({
      where: params,
      select: {
        competitor: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompetitorDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompetitorDetail(
    @common.Param() params: CompetitorDetailWhereUniqueInput,
    @common.Body() data: CompetitorDetailUpdateInput
  ): Promise<CompetitorDetail | null> {
    try {
      return await this.service.updateCompetitorDetail({
        where: params,
        data: data,
        select: {
          competitor: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompetitorDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompetitorDetail(
    @common.Param() params: CompetitorDetailWhereUniqueInput
  ): Promise<CompetitorDetail | null> {
    try {
      return await this.service.deleteCompetitorDetail({
        where: params,
        select: {
          competitor: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
