/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CompetitorDetail as PrismaCompetitorDetail,
} from "@prisma/client";

export class CompetitorDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompetitorDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.competitorDetail.count(args);
  }

  async competitorDetails(
    args: Prisma.CompetitorDetailFindManyArgs
  ): Promise<PrismaCompetitorDetail[]> {
    return this.prisma.competitorDetail.findMany(args);
  }
  async competitorDetail(
    args: Prisma.CompetitorDetailFindUniqueArgs
  ): Promise<PrismaCompetitorDetail | null> {
    return this.prisma.competitorDetail.findUnique(args);
  }
  async createCompetitorDetail(
    args: Prisma.CompetitorDetailCreateArgs
  ): Promise<PrismaCompetitorDetail> {
    return this.prisma.competitorDetail.create(args);
  }
  async updateCompetitorDetail(
    args: Prisma.CompetitorDetailUpdateArgs
  ): Promise<PrismaCompetitorDetail> {
    return this.prisma.competitorDetail.update(args);
  }
  async deleteCompetitorDetail(
    args: Prisma.CompetitorDetailDeleteArgs
  ): Promise<PrismaCompetitorDetail> {
    return this.prisma.competitorDetail.delete(args);
  }
}
