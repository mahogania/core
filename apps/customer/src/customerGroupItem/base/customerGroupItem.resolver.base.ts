/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomerGroupItem } from "./CustomerGroupItem";
import { CustomerGroupItemCountArgs } from "./CustomerGroupItemCountArgs";
import { CustomerGroupItemFindManyArgs } from "./CustomerGroupItemFindManyArgs";
import { CustomerGroupItemFindUniqueArgs } from "./CustomerGroupItemFindUniqueArgs";
import { CreateCustomerGroupItemArgs } from "./CreateCustomerGroupItemArgs";
import { UpdateCustomerGroupItemArgs } from "./UpdateCustomerGroupItemArgs";
import { DeleteCustomerGroupItemArgs } from "./DeleteCustomerGroupItemArgs";
import { CustomerGroupItemService } from "../customerGroupItem.service";
@graphql.Resolver(() => CustomerGroupItem)
export class CustomerGroupItemResolverBase {
  constructor(protected readonly service: CustomerGroupItemService) {}

  async _customerGroupItemsMeta(
    @graphql.Args() args: CustomerGroupItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomerGroupItem])
  async customerGroupItems(
    @graphql.Args() args: CustomerGroupItemFindManyArgs
  ): Promise<CustomerGroupItem[]> {
    return this.service.customerGroupItems(args);
  }

  @graphql.Query(() => CustomerGroupItem, { nullable: true })
  async customerGroupItem(
    @graphql.Args() args: CustomerGroupItemFindUniqueArgs
  ): Promise<CustomerGroupItem | null> {
    const result = await this.service.customerGroupItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomerGroupItem)
  async createCustomerGroupItem(
    @graphql.Args() args: CreateCustomerGroupItemArgs
  ): Promise<CustomerGroupItem> {
    return await this.service.createCustomerGroupItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomerGroupItem)
  async updateCustomerGroupItem(
    @graphql.Args() args: UpdateCustomerGroupItemArgs
  ): Promise<CustomerGroupItem | null> {
    try {
      return await this.service.updateCustomerGroupItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerGroupItem)
  async deleteCustomerGroupItem(
    @graphql.Args() args: DeleteCustomerGroupItemArgs
  ): Promise<CustomerGroupItem | null> {
    try {
      return await this.service.deleteCustomerGroupItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
