/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ShipmentParcelTemplateService } from "../shipmentParcelTemplate.service";
import { ShipmentParcelTemplateCreateInput } from "./ShipmentParcelTemplateCreateInput";
import { ShipmentParcelTemplateWhereInput } from "./ShipmentParcelTemplateWhereInput";
import { ShipmentParcelTemplateWhereUniqueInput } from "./ShipmentParcelTemplateWhereUniqueInput";
import { ShipmentParcelTemplateFindManyArgs } from "./ShipmentParcelTemplateFindManyArgs";
import { ShipmentParcelTemplateUpdateInput } from "./ShipmentParcelTemplateUpdateInput";
import { ShipmentParcelTemplate } from "./ShipmentParcelTemplate";

export class ShipmentParcelTemplateGrpcControllerBase {
  constructor(protected readonly service: ShipmentParcelTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShipmentParcelTemplate })
  @GrpcMethod("ShipmentParcelTemplateService", "createShipmentParcelTemplate")
  async createShipmentParcelTemplate(
    @common.Body() data: ShipmentParcelTemplateCreateInput
  ): Promise<ShipmentParcelTemplate> {
    return await this.service.createShipmentParcelTemplate({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        height: true,
        id: true,
        idx: true,
        length: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parcelTemplateName: true,
        updatedAt: true,
        weight: true,
        width: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShipmentParcelTemplate] })
  @ApiNestedQuery(ShipmentParcelTemplateFindManyArgs)
  @GrpcMethod("ShipmentParcelTemplateService", "shipmentParcelTemplates")
  async shipmentParcelTemplates(
    @common.Req() request: Request
  ): Promise<ShipmentParcelTemplate[]> {
    const args = plainToClass(
      ShipmentParcelTemplateFindManyArgs,
      request.query
    );
    return this.service.shipmentParcelTemplates({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        height: true,
        id: true,
        idx: true,
        length: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parcelTemplateName: true,
        updatedAt: true,
        weight: true,
        width: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShipmentParcelTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ShipmentParcelTemplateService", "shipmentParcelTemplate")
  async shipmentParcelTemplate(
    @common.Param() params: ShipmentParcelTemplateWhereUniqueInput
  ): Promise<ShipmentParcelTemplate | null> {
    const result = await this.service.shipmentParcelTemplate({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        height: true,
        id: true,
        idx: true,
        length: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parcelTemplateName: true,
        updatedAt: true,
        weight: true,
        width: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShipmentParcelTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ShipmentParcelTemplateService", "updateShipmentParcelTemplate")
  async updateShipmentParcelTemplate(
    @common.Param() params: ShipmentParcelTemplateWhereUniqueInput,
    @common.Body() data: ShipmentParcelTemplateUpdateInput
  ): Promise<ShipmentParcelTemplate | null> {
    try {
      return await this.service.updateShipmentParcelTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          height: true,
          id: true,
          idx: true,
          length: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parcelTemplateName: true,
          updatedAt: true,
          weight: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShipmentParcelTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ShipmentParcelTemplateService", "deleteShipmentParcelTemplate")
  async deleteShipmentParcelTemplate(
    @common.Param() params: ShipmentParcelTemplateWhereUniqueInput
  ): Promise<ShipmentParcelTemplate | null> {
    try {
      return await this.service.deleteShipmentParcelTemplate({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          height: true,
          id: true,
          idx: true,
          length: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parcelTemplateName: true,
          updatedAt: true,
          weight: true,
          width: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
