/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShipmentParcel } from "./ShipmentParcel";
import { ShipmentParcelCountArgs } from "./ShipmentParcelCountArgs";
import { ShipmentParcelFindManyArgs } from "./ShipmentParcelFindManyArgs";
import { ShipmentParcelFindUniqueArgs } from "./ShipmentParcelFindUniqueArgs";
import { CreateShipmentParcelArgs } from "./CreateShipmentParcelArgs";
import { UpdateShipmentParcelArgs } from "./UpdateShipmentParcelArgs";
import { DeleteShipmentParcelArgs } from "./DeleteShipmentParcelArgs";
import { ShipmentParcelService } from "../shipmentParcel.service";
@graphql.Resolver(() => ShipmentParcel)
export class ShipmentParcelResolverBase {
  constructor(protected readonly service: ShipmentParcelService) {}

  async _shipmentParcelsMeta(
    @graphql.Args() args: ShipmentParcelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShipmentParcel])
  async shipmentParcels(
    @graphql.Args() args: ShipmentParcelFindManyArgs
  ): Promise<ShipmentParcel[]> {
    return this.service.shipmentParcels(args);
  }

  @graphql.Query(() => ShipmentParcel, { nullable: true })
  async shipmentParcel(
    @graphql.Args() args: ShipmentParcelFindUniqueArgs
  ): Promise<ShipmentParcel | null> {
    const result = await this.service.shipmentParcel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShipmentParcel)
  async createShipmentParcel(
    @graphql.Args() args: CreateShipmentParcelArgs
  ): Promise<ShipmentParcel> {
    return await this.service.createShipmentParcel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShipmentParcel)
  async updateShipmentParcel(
    @graphql.Args() args: UpdateShipmentParcelArgs
  ): Promise<ShipmentParcel | null> {
    try {
      return await this.service.updateShipmentParcel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShipmentParcel)
  async deleteShipmentParcel(
    @graphql.Args() args: DeleteShipmentParcelArgs
  ): Promise<ShipmentParcel | null> {
    try {
      return await this.service.deleteShipmentParcel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
