/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ShipmentParcel as PrismaShipmentParcel } from "@prisma/client";

export class ShipmentParcelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShipmentParcelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shipmentParcel.count(args);
  }

  async shipmentParcels(
    args: Prisma.ShipmentParcelFindManyArgs
  ): Promise<PrismaShipmentParcel[]> {
    return this.prisma.shipmentParcel.findMany(args);
  }
  async shipmentParcel(
    args: Prisma.ShipmentParcelFindUniqueArgs
  ): Promise<PrismaShipmentParcel | null> {
    return this.prisma.shipmentParcel.findUnique(args);
  }
  async createShipmentParcel(
    args: Prisma.ShipmentParcelCreateArgs
  ): Promise<PrismaShipmentParcel> {
    return this.prisma.shipmentParcel.create(args);
  }
  async updateShipmentParcel(
    args: Prisma.ShipmentParcelUpdateArgs
  ): Promise<PrismaShipmentParcel> {
    return this.prisma.shipmentParcel.update(args);
  }
  async deleteShipmentParcel(
    args: Prisma.ShipmentParcelDeleteArgs
  ): Promise<PrismaShipmentParcel> {
    return this.prisma.shipmentParcel.delete(args);
  }
}
