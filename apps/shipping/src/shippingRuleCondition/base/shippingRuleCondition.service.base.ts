/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ShippingRuleCondition as PrismaShippingRuleCondition,
} from "@prisma/client";

export class ShippingRuleConditionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShippingRuleConditionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shippingRuleCondition.count(args);
  }

  async shippingRuleConditions(
    args: Prisma.ShippingRuleConditionFindManyArgs
  ): Promise<PrismaShippingRuleCondition[]> {
    return this.prisma.shippingRuleCondition.findMany(args);
  }
  async shippingRuleCondition(
    args: Prisma.ShippingRuleConditionFindUniqueArgs
  ): Promise<PrismaShippingRuleCondition | null> {
    return this.prisma.shippingRuleCondition.findUnique(args);
  }
  async createShippingRuleCondition(
    args: Prisma.ShippingRuleConditionCreateArgs
  ): Promise<PrismaShippingRuleCondition> {
    return this.prisma.shippingRuleCondition.create(args);
  }
  async updateShippingRuleCondition(
    args: Prisma.ShippingRuleConditionUpdateArgs
  ): Promise<PrismaShippingRuleCondition> {
    return this.prisma.shippingRuleCondition.update(args);
  }
  async deleteShippingRuleCondition(
    args: Prisma.ShippingRuleConditionDeleteArgs
  ): Promise<PrismaShippingRuleCondition> {
    return this.prisma.shippingRuleCondition.delete(args);
  }
}
