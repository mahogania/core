/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShipmentService } from "../shipment.service";
import { ShipmentCreateInput } from "./ShipmentCreateInput";
import { Shipment } from "./Shipment";
import { ShipmentFindManyArgs } from "./ShipmentFindManyArgs";
import { ShipmentWhereUniqueInput } from "./ShipmentWhereUniqueInput";
import { ShipmentUpdateInput } from "./ShipmentUpdateInput";

export class ShipmentControllerBase {
  constructor(protected readonly service: ShipmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shipment })
  @swagger.ApiBody({
    type: ShipmentCreateInput,
  })
  async createShipment(
    @common.Body() data: ShipmentCreateInput
  ): Promise<Shipment> {
    return await this.service.createShipment({
      data: data,
      select: {
        amendedFrom: true,
        awbNumber: true,
        carrier: true,
        carrierService: true,
        createdAt: true,
        creation: true,
        deliveryAddress: true,
        deliveryAddressName: true,
        deliveryCompany: true,
        deliveryContact: true,
        deliveryContactEmail: true,
        deliveryContactName: true,
        deliveryCustomer: true,
        deliverySupplier: true,
        deliveryTo: true,
        deliveryToType: true,
        descriptionOfContent: true,
        docstatus: true,
        id: true,
        idx: true,
        incoterm: true,
        likedBy: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        pallets: true,
        parcelTemplate: true,
        pickup: true,
        pickupAddress: true,
        pickupAddressName: true,
        pickupCompany: true,
        pickupContact: true,
        pickupContactEmail: true,
        pickupContactName: true,
        pickupContactPerson: true,
        pickupCustomer: true,
        pickupDate: true,
        pickupFrom: true,
        pickupFromType: true,
        pickupSupplier: true,
        pickupTo: true,
        pickupType: true,
        serviceProvider: true,
        shipmentAmount: true,
        shipmentId: true,
        shipmentType: true,
        status: true,
        trackingStatus: true,
        trackingStatusInfo: true,
        trackingUrl: true,
        updatedAt: true,
        valueOfGoods: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Shipment] })
  @ApiNestedQuery(ShipmentFindManyArgs)
  async shipments(@common.Req() request: Request): Promise<Shipment[]> {
    const args = plainToClass(ShipmentFindManyArgs, request.query);
    return this.service.shipments({
      ...args,
      select: {
        amendedFrom: true,
        awbNumber: true,
        carrier: true,
        carrierService: true,
        createdAt: true,
        creation: true,
        deliveryAddress: true,
        deliveryAddressName: true,
        deliveryCompany: true,
        deliveryContact: true,
        deliveryContactEmail: true,
        deliveryContactName: true,
        deliveryCustomer: true,
        deliverySupplier: true,
        deliveryTo: true,
        deliveryToType: true,
        descriptionOfContent: true,
        docstatus: true,
        id: true,
        idx: true,
        incoterm: true,
        likedBy: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        pallets: true,
        parcelTemplate: true,
        pickup: true,
        pickupAddress: true,
        pickupAddressName: true,
        pickupCompany: true,
        pickupContact: true,
        pickupContactEmail: true,
        pickupContactName: true,
        pickupContactPerson: true,
        pickupCustomer: true,
        pickupDate: true,
        pickupFrom: true,
        pickupFromType: true,
        pickupSupplier: true,
        pickupTo: true,
        pickupType: true,
        serviceProvider: true,
        shipmentAmount: true,
        shipmentId: true,
        shipmentType: true,
        status: true,
        trackingStatus: true,
        trackingStatusInfo: true,
        trackingUrl: true,
        updatedAt: true,
        valueOfGoods: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shipment(
    @common.Param() params: ShipmentWhereUniqueInput
  ): Promise<Shipment | null> {
    const result = await this.service.shipment({
      where: params,
      select: {
        amendedFrom: true,
        awbNumber: true,
        carrier: true,
        carrierService: true,
        createdAt: true,
        creation: true,
        deliveryAddress: true,
        deliveryAddressName: true,
        deliveryCompany: true,
        deliveryContact: true,
        deliveryContactEmail: true,
        deliveryContactName: true,
        deliveryCustomer: true,
        deliverySupplier: true,
        deliveryTo: true,
        deliveryToType: true,
        descriptionOfContent: true,
        docstatus: true,
        id: true,
        idx: true,
        incoterm: true,
        likedBy: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        pallets: true,
        parcelTemplate: true,
        pickup: true,
        pickupAddress: true,
        pickupAddressName: true,
        pickupCompany: true,
        pickupContact: true,
        pickupContactEmail: true,
        pickupContactName: true,
        pickupContactPerson: true,
        pickupCustomer: true,
        pickupDate: true,
        pickupFrom: true,
        pickupFromType: true,
        pickupSupplier: true,
        pickupTo: true,
        pickupType: true,
        serviceProvider: true,
        shipmentAmount: true,
        shipmentId: true,
        shipmentType: true,
        status: true,
        trackingStatus: true,
        trackingStatusInfo: true,
        trackingUrl: true,
        updatedAt: true,
        valueOfGoods: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ShipmentUpdateInput,
  })
  async updateShipment(
    @common.Param() params: ShipmentWhereUniqueInput,
    @common.Body() data: ShipmentUpdateInput
  ): Promise<Shipment | null> {
    try {
      return await this.service.updateShipment({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          awbNumber: true,
          carrier: true,
          carrierService: true,
          createdAt: true,
          creation: true,
          deliveryAddress: true,
          deliveryAddressName: true,
          deliveryCompany: true,
          deliveryContact: true,
          deliveryContactEmail: true,
          deliveryContactName: true,
          deliveryCustomer: true,
          deliverySupplier: true,
          deliveryTo: true,
          deliveryToType: true,
          descriptionOfContent: true,
          docstatus: true,
          id: true,
          idx: true,
          incoterm: true,
          likedBy: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          pallets: true,
          parcelTemplate: true,
          pickup: true,
          pickupAddress: true,
          pickupAddressName: true,
          pickupCompany: true,
          pickupContact: true,
          pickupContactEmail: true,
          pickupContactName: true,
          pickupContactPerson: true,
          pickupCustomer: true,
          pickupDate: true,
          pickupFrom: true,
          pickupFromType: true,
          pickupSupplier: true,
          pickupTo: true,
          pickupType: true,
          serviceProvider: true,
          shipmentAmount: true,
          shipmentId: true,
          shipmentType: true,
          status: true,
          trackingStatus: true,
          trackingStatusInfo: true,
          trackingUrl: true,
          updatedAt: true,
          valueOfGoods: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shipment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShipment(
    @common.Param() params: ShipmentWhereUniqueInput
  ): Promise<Shipment | null> {
    try {
      return await this.service.deleteShipment({
        where: params,
        select: {
          amendedFrom: true,
          awbNumber: true,
          carrier: true,
          carrierService: true,
          createdAt: true,
          creation: true,
          deliveryAddress: true,
          deliveryAddressName: true,
          deliveryCompany: true,
          deliveryContact: true,
          deliveryContactEmail: true,
          deliveryContactName: true,
          deliveryCustomer: true,
          deliverySupplier: true,
          deliveryTo: true,
          deliveryToType: true,
          descriptionOfContent: true,
          docstatus: true,
          id: true,
          idx: true,
          incoterm: true,
          likedBy: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          pallets: true,
          parcelTemplate: true,
          pickup: true,
          pickupAddress: true,
          pickupAddressName: true,
          pickupCompany: true,
          pickupContact: true,
          pickupContactEmail: true,
          pickupContactName: true,
          pickupContactPerson: true,
          pickupCustomer: true,
          pickupDate: true,
          pickupFrom: true,
          pickupFromType: true,
          pickupSupplier: true,
          pickupTo: true,
          pickupType: true,
          serviceProvider: true,
          shipmentAmount: true,
          shipmentId: true,
          shipmentType: true,
          status: true,
          trackingStatus: true,
          trackingStatusInfo: true,
          trackingUrl: true,
          updatedAt: true,
          valueOfGoods: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
