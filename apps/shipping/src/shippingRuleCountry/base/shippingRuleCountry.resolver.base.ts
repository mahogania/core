/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShippingRuleCountry } from "./ShippingRuleCountry";
import { ShippingRuleCountryCountArgs } from "./ShippingRuleCountryCountArgs";
import { ShippingRuleCountryFindManyArgs } from "./ShippingRuleCountryFindManyArgs";
import { ShippingRuleCountryFindUniqueArgs } from "./ShippingRuleCountryFindUniqueArgs";
import { CreateShippingRuleCountryArgs } from "./CreateShippingRuleCountryArgs";
import { UpdateShippingRuleCountryArgs } from "./UpdateShippingRuleCountryArgs";
import { DeleteShippingRuleCountryArgs } from "./DeleteShippingRuleCountryArgs";
import { ShippingRuleCountryService } from "../shippingRuleCountry.service";
@graphql.Resolver(() => ShippingRuleCountry)
export class ShippingRuleCountryResolverBase {
  constructor(protected readonly service: ShippingRuleCountryService) {}

  async _shippingRuleCountriesMeta(
    @graphql.Args() args: ShippingRuleCountryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShippingRuleCountry])
  async shippingRuleCountries(
    @graphql.Args() args: ShippingRuleCountryFindManyArgs
  ): Promise<ShippingRuleCountry[]> {
    return this.service.shippingRuleCountries(args);
  }

  @graphql.Query(() => ShippingRuleCountry, { nullable: true })
  async shippingRuleCountry(
    @graphql.Args() args: ShippingRuleCountryFindUniqueArgs
  ): Promise<ShippingRuleCountry | null> {
    const result = await this.service.shippingRuleCountry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShippingRuleCountry)
  async createShippingRuleCountry(
    @graphql.Args() args: CreateShippingRuleCountryArgs
  ): Promise<ShippingRuleCountry> {
    return await this.service.createShippingRuleCountry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShippingRuleCountry)
  async updateShippingRuleCountry(
    @graphql.Args() args: UpdateShippingRuleCountryArgs
  ): Promise<ShippingRuleCountry | null> {
    try {
      return await this.service.updateShippingRuleCountry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShippingRuleCountry)
  async deleteShippingRuleCountry(
    @graphql.Args() args: DeleteShippingRuleCountryArgs
  ): Promise<ShippingRuleCountry | null> {
    try {
      return await this.service.deleteShippingRuleCountry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
