/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ShippingRule as PrismaShippingRule } from "@prisma/client";

export class ShippingRuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ShippingRuleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.shippingRule.count(args);
  }

  async shippingRules(
    args: Prisma.ShippingRuleFindManyArgs
  ): Promise<PrismaShippingRule[]> {
    return this.prisma.shippingRule.findMany(args);
  }
  async shippingRule(
    args: Prisma.ShippingRuleFindUniqueArgs
  ): Promise<PrismaShippingRule | null> {
    return this.prisma.shippingRule.findUnique(args);
  }
  async createShippingRule(
    args: Prisma.ShippingRuleCreateArgs
  ): Promise<PrismaShippingRule> {
    return this.prisma.shippingRule.create(args);
  }
  async updateShippingRule(
    args: Prisma.ShippingRuleUpdateArgs
  ): Promise<PrismaShippingRule> {
    return this.prisma.shippingRule.update(args);
  }
  async deleteShippingRule(
    args: Prisma.ShippingRuleDeleteArgs
  ): Promise<PrismaShippingRule> {
    return this.prisma.shippingRule.delete(args);
  }
}
