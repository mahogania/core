/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ShipmentDeliveryNote } from "./ShipmentDeliveryNote";
import { ShipmentDeliveryNoteCountArgs } from "./ShipmentDeliveryNoteCountArgs";
import { ShipmentDeliveryNoteFindManyArgs } from "./ShipmentDeliveryNoteFindManyArgs";
import { ShipmentDeliveryNoteFindUniqueArgs } from "./ShipmentDeliveryNoteFindUniqueArgs";
import { CreateShipmentDeliveryNoteArgs } from "./CreateShipmentDeliveryNoteArgs";
import { UpdateShipmentDeliveryNoteArgs } from "./UpdateShipmentDeliveryNoteArgs";
import { DeleteShipmentDeliveryNoteArgs } from "./DeleteShipmentDeliveryNoteArgs";
import { ShipmentDeliveryNoteService } from "../shipmentDeliveryNote.service";
@graphql.Resolver(() => ShipmentDeliveryNote)
export class ShipmentDeliveryNoteResolverBase {
  constructor(protected readonly service: ShipmentDeliveryNoteService) {}

  async _shipmentDeliveryNotesMeta(
    @graphql.Args() args: ShipmentDeliveryNoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ShipmentDeliveryNote])
  async shipmentDeliveryNotes(
    @graphql.Args() args: ShipmentDeliveryNoteFindManyArgs
  ): Promise<ShipmentDeliveryNote[]> {
    return this.service.shipmentDeliveryNotes(args);
  }

  @graphql.Query(() => ShipmentDeliveryNote, { nullable: true })
  async shipmentDeliveryNote(
    @graphql.Args() args: ShipmentDeliveryNoteFindUniqueArgs
  ): Promise<ShipmentDeliveryNote | null> {
    const result = await this.service.shipmentDeliveryNote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ShipmentDeliveryNote)
  async createShipmentDeliveryNote(
    @graphql.Args() args: CreateShipmentDeliveryNoteArgs
  ): Promise<ShipmentDeliveryNote> {
    return await this.service.createShipmentDeliveryNote({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ShipmentDeliveryNote)
  async updateShipmentDeliveryNote(
    @graphql.Args() args: UpdateShipmentDeliveryNoteArgs
  ): Promise<ShipmentDeliveryNote | null> {
    try {
      return await this.service.updateShipmentDeliveryNote({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ShipmentDeliveryNote)
  async deleteShipmentDeliveryNote(
    @graphql.Args() args: DeleteShipmentDeliveryNoteArgs
  ): Promise<ShipmentDeliveryNote | null> {
    try {
      return await this.service.deleteShipmentDeliveryNote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
