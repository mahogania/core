/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MountDefinitions as PrismaMountDefinitions,
} from "@prisma/client";

export class MountDefinitionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MountDefinitionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mountDefinitions.count(args);
  }

  async mountDefinitionsItems(
    args: Prisma.MountDefinitionsFindManyArgs
  ): Promise<PrismaMountDefinitions[]> {
    return this.prisma.mountDefinitions.findMany(args);
  }
  async mountDefinitions(
    args: Prisma.MountDefinitionsFindUniqueArgs
  ): Promise<PrismaMountDefinitions | null> {
    return this.prisma.mountDefinitions.findUnique(args);
  }
  async createMountDefinitions(
    args: Prisma.MountDefinitionsCreateArgs
  ): Promise<PrismaMountDefinitions> {
    return this.prisma.mountDefinitions.create(args);
  }
  async updateMountDefinitions(
    args: Prisma.MountDefinitionsUpdateArgs
  ): Promise<PrismaMountDefinitions> {
    return this.prisma.mountDefinitions.update(args);
  }
  async deleteMountDefinitions(
    args: Prisma.MountDefinitionsDeleteArgs
  ): Promise<PrismaMountDefinitions> {
    return this.prisma.mountDefinitions.delete(args);
  }
}
