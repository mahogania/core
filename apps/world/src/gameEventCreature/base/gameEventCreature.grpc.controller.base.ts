/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventCreatureService } from "../gameEventCreature.service";
import { GameEventCreatureCreateInput } from "./GameEventCreatureCreateInput";
import { GameEventCreatureWhereInput } from "./GameEventCreatureWhereInput";
import { GameEventCreatureWhereUniqueInput } from "./GameEventCreatureWhereUniqueInput";
import { GameEventCreatureFindManyArgs } from "./GameEventCreatureFindManyArgs";
import { GameEventCreatureUpdateInput } from "./GameEventCreatureUpdateInput";
import { GameEventCreature } from "./GameEventCreature";

export class GameEventCreatureGrpcControllerBase {
  constructor(protected readonly service: GameEventCreatureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventCreature })
  @GrpcMethod("GameEventCreatureService", "createGameEventCreature")
  async createGameEventCreature(
    @common.Body() data: GameEventCreatureCreateInput
  ): Promise<GameEventCreature> {
    return await this.service.createGameEventCreature({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        guid: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventCreature] })
  @ApiNestedQuery(GameEventCreatureFindManyArgs)
  @GrpcMethod("GameEventCreatureService", "gameEventCreatures")
  async gameEventCreatures(
    @common.Req() request: Request
  ): Promise<GameEventCreature[]> {
    const args = plainToClass(GameEventCreatureFindManyArgs, request.query);
    return this.service.gameEventCreatures({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        guid: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventCreature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCreatureService", "gameEventCreature")
  async gameEventCreature(
    @common.Param() params: GameEventCreatureWhereUniqueInput
  ): Promise<GameEventCreature | null> {
    const result = await this.service.gameEventCreature({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        guid: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventCreature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCreatureService", "updateGameEventCreature")
  async updateGameEventCreature(
    @common.Param() params: GameEventCreatureWhereUniqueInput,
    @common.Body() data: GameEventCreatureUpdateInput
  ): Promise<GameEventCreature | null> {
    try {
      return await this.service.updateGameEventCreature({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          guid: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventCreature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCreatureService", "deleteGameEventCreature")
  async deleteGameEventCreature(
    @common.Param() params: GameEventCreatureWhereUniqueInput
  ): Promise<GameEventCreature | null> {
    try {
      return await this.service.deleteGameEventCreature({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          guid: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
