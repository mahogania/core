/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventCreature } from "./GameEventCreature";
import { GameEventCreatureCountArgs } from "./GameEventCreatureCountArgs";
import { GameEventCreatureFindManyArgs } from "./GameEventCreatureFindManyArgs";
import { GameEventCreatureFindUniqueArgs } from "./GameEventCreatureFindUniqueArgs";
import { CreateGameEventCreatureArgs } from "./CreateGameEventCreatureArgs";
import { UpdateGameEventCreatureArgs } from "./UpdateGameEventCreatureArgs";
import { DeleteGameEventCreatureArgs } from "./DeleteGameEventCreatureArgs";
import { GameEventCreatureService } from "../gameEventCreature.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventCreature)
export class GameEventCreatureResolverBase {
  constructor(
    protected readonly service: GameEventCreatureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreature",
    action: "read",
    possession: "any",
  })
  async _gameEventCreaturesMeta(
    @graphql.Args() args: GameEventCreatureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventCreature])
  @nestAccessControl.UseRoles({
    resource: "GameEventCreature",
    action: "read",
    possession: "any",
  })
  async gameEventCreatures(
    @graphql.Args() args: GameEventCreatureFindManyArgs
  ): Promise<GameEventCreature[]> {
    return this.service.gameEventCreatures(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventCreature, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventCreature",
    action: "read",
    possession: "own",
  })
  async gameEventCreature(
    @graphql.Args() args: GameEventCreatureFindUniqueArgs
  ): Promise<GameEventCreature | null> {
    const result = await this.service.gameEventCreature(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCreature)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreature",
    action: "create",
    possession: "any",
  })
  async createGameEventCreature(
    @graphql.Args() args: CreateGameEventCreatureArgs
  ): Promise<GameEventCreature> {
    return await this.service.createGameEventCreature({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCreature)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreature",
    action: "update",
    possession: "any",
  })
  async updateGameEventCreature(
    @graphql.Args() args: UpdateGameEventCreatureArgs
  ): Promise<GameEventCreature | null> {
    try {
      return await this.service.updateGameEventCreature({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventCreature)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreature",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventCreature(
    @graphql.Args() args: DeleteGameEventCreatureArgs
  ): Promise<GameEventCreature | null> {
    try {
      return await this.service.deleteGameEventCreature(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
