/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerchoiceResponseLocaleService } from "../playerchoiceResponseLocale.service";
import { PlayerchoiceResponseLocaleCreateInput } from "./PlayerchoiceResponseLocaleCreateInput";
import { PlayerchoiceResponseLocaleWhereInput } from "./PlayerchoiceResponseLocaleWhereInput";
import { PlayerchoiceResponseLocaleWhereUniqueInput } from "./PlayerchoiceResponseLocaleWhereUniqueInput";
import { PlayerchoiceResponseLocaleFindManyArgs } from "./PlayerchoiceResponseLocaleFindManyArgs";
import { PlayerchoiceResponseLocaleUpdateInput } from "./PlayerchoiceResponseLocaleUpdateInput";
import { PlayerchoiceResponseLocale } from "./PlayerchoiceResponseLocale";

export class PlayerchoiceResponseLocaleGrpcControllerBase {
  constructor(protected readonly service: PlayerchoiceResponseLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerchoiceResponseLocale })
  @GrpcMethod(
    "PlayerchoiceResponseLocaleService",
    "createPlayerchoiceResponseLocale"
  )
  async createPlayerchoiceResponseLocale(
    @common.Body() data: PlayerchoiceResponseLocaleCreateInput
  ): Promise<PlayerchoiceResponseLocale> {
    return await this.service.createPlayerchoiceResponseLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerchoiceResponseLocale] })
  @ApiNestedQuery(PlayerchoiceResponseLocaleFindManyArgs)
  @GrpcMethod(
    "PlayerchoiceResponseLocaleService",
    "playerchoiceResponseLocales"
  )
  async playerchoiceResponseLocales(
    @common.Req() request: Request
  ): Promise<PlayerchoiceResponseLocale[]> {
    const args = plainToClass(
      PlayerchoiceResponseLocaleFindManyArgs,
      request.query
    );
    return this.service.playerchoiceResponseLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponseLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceResponseLocaleService", "playerchoiceResponseLocale")
  async playerchoiceResponseLocale(
    @common.Param() params: PlayerchoiceResponseLocaleWhereUniqueInput
  ): Promise<PlayerchoiceResponseLocale | null> {
    const result = await this.service.playerchoiceResponseLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponseLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerchoiceResponseLocaleService",
    "updatePlayerchoiceResponseLocale"
  )
  async updatePlayerchoiceResponseLocale(
    @common.Param() params: PlayerchoiceResponseLocaleWhereUniqueInput,
    @common.Body() data: PlayerchoiceResponseLocaleUpdateInput
  ): Promise<PlayerchoiceResponseLocale | null> {
    try {
      return await this.service.updatePlayerchoiceResponseLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponseLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerchoiceResponseLocaleService",
    "deletePlayerchoiceResponseLocale"
  )
  async deletePlayerchoiceResponseLocale(
    @common.Param() params: PlayerchoiceResponseLocaleWhereUniqueInput
  ): Promise<PlayerchoiceResponseLocale | null> {
    try {
      return await this.service.deletePlayerchoiceResponseLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
