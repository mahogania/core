/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AccessRequirement } from "./AccessRequirement";
import { AccessRequirementCountArgs } from "./AccessRequirementCountArgs";
import { AccessRequirementFindManyArgs } from "./AccessRequirementFindManyArgs";
import { AccessRequirementFindUniqueArgs } from "./AccessRequirementFindUniqueArgs";
import { CreateAccessRequirementArgs } from "./CreateAccessRequirementArgs";
import { UpdateAccessRequirementArgs } from "./UpdateAccessRequirementArgs";
import { DeleteAccessRequirementArgs } from "./DeleteAccessRequirementArgs";
import { AccessRequirementService } from "../accessRequirement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccessRequirement)
export class AccessRequirementResolverBase {
  constructor(
    protected readonly service: AccessRequirementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccessRequirement",
    action: "read",
    possession: "any",
  })
  async _accessRequirementsMeta(
    @graphql.Args() args: AccessRequirementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccessRequirement])
  @nestAccessControl.UseRoles({
    resource: "AccessRequirement",
    action: "read",
    possession: "any",
  })
  async accessRequirements(
    @graphql.Args() args: AccessRequirementFindManyArgs
  ): Promise<AccessRequirement[]> {
    return this.service.accessRequirements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccessRequirement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccessRequirement",
    action: "read",
    possession: "own",
  })
  async accessRequirement(
    @graphql.Args() args: AccessRequirementFindUniqueArgs
  ): Promise<AccessRequirement | null> {
    const result = await this.service.accessRequirement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccessRequirement)
  @nestAccessControl.UseRoles({
    resource: "AccessRequirement",
    action: "create",
    possession: "any",
  })
  async createAccessRequirement(
    @graphql.Args() args: CreateAccessRequirementArgs
  ): Promise<AccessRequirement> {
    return await this.service.createAccessRequirement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccessRequirement)
  @nestAccessControl.UseRoles({
    resource: "AccessRequirement",
    action: "update",
    possession: "any",
  })
  async updateAccessRequirement(
    @graphql.Args() args: UpdateAccessRequirementArgs
  ): Promise<AccessRequirement | null> {
    try {
      return await this.service.updateAccessRequirement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessRequirement)
  @nestAccessControl.UseRoles({
    resource: "AccessRequirement",
    action: "delete",
    possession: "any",
  })
  async deleteAccessRequirement(
    @graphql.Args() args: DeleteAccessRequirementArgs
  ): Promise<AccessRequirement | null> {
    try {
      return await this.service.deleteAccessRequirement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
