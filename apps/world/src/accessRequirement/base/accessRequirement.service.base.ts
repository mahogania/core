/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccessRequirement as PrismaAccessRequirement,
} from "@prisma/client";

export class AccessRequirementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessRequirementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessRequirement.count(args);
  }

  async accessRequirements(
    args: Prisma.AccessRequirementFindManyArgs
  ): Promise<PrismaAccessRequirement[]> {
    return this.prisma.accessRequirement.findMany(args);
  }
  async accessRequirement(
    args: Prisma.AccessRequirementFindUniqueArgs
  ): Promise<PrismaAccessRequirement | null> {
    return this.prisma.accessRequirement.findUnique(args);
  }
  async createAccessRequirement(
    args: Prisma.AccessRequirementCreateArgs
  ): Promise<PrismaAccessRequirement> {
    return this.prisma.accessRequirement.create(args);
  }
  async updateAccessRequirement(
    args: Prisma.AccessRequirementUpdateArgs
  ): Promise<PrismaAccessRequirement> {
    return this.prisma.accessRequirement.update(args);
  }
  async deleteAccessRequirement(
    args: Prisma.AccessRequirementDeleteArgs
  ): Promise<PrismaAccessRequirement> {
    return this.prisma.accessRequirement.delete(args);
  }
}
