/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExplorationBasexp as PrismaExplorationBasexp,
} from "@prisma/client";

export class ExplorationBasexpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExplorationBasexpCountArgs, "select">
  ): Promise<number> {
    return this.prisma.explorationBasexp.count(args);
  }

  async explorationBasexps(
    args: Prisma.ExplorationBasexpFindManyArgs
  ): Promise<PrismaExplorationBasexp[]> {
    return this.prisma.explorationBasexp.findMany(args);
  }
  async explorationBasexp(
    args: Prisma.ExplorationBasexpFindUniqueArgs
  ): Promise<PrismaExplorationBasexp | null> {
    return this.prisma.explorationBasexp.findUnique(args);
  }
  async createExplorationBasexp(
    args: Prisma.ExplorationBasexpCreateArgs
  ): Promise<PrismaExplorationBasexp> {
    return this.prisma.explorationBasexp.create(args);
  }
  async updateExplorationBasexp(
    args: Prisma.ExplorationBasexpUpdateArgs
  ): Promise<PrismaExplorationBasexp> {
    return this.prisma.explorationBasexp.update(args);
  }
  async deleteExplorationBasexp(
    args: Prisma.ExplorationBasexpDeleteArgs
  ): Promise<PrismaExplorationBasexp> {
    return this.prisma.explorationBasexp.delete(args);
  }
}
