/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ParagraphLocale as PrismaParagraphLocale,
  Paragraph as PrismaParagraph,
} from "@prisma/client";

export class ParagraphLocaleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParagraphLocaleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paragraphLocale.count(args);
  }

  async paragraphLocales(
    args: Prisma.ParagraphLocaleFindManyArgs
  ): Promise<PrismaParagraphLocale[]> {
    return this.prisma.paragraphLocale.findMany(args);
  }
  async paragraphLocale(
    args: Prisma.ParagraphLocaleFindUniqueArgs
  ): Promise<PrismaParagraphLocale | null> {
    return this.prisma.paragraphLocale.findUnique(args);
  }
  async createParagraphLocale(
    args: Prisma.ParagraphLocaleCreateArgs
  ): Promise<PrismaParagraphLocale> {
    return this.prisma.paragraphLocale.create(args);
  }
  async updateParagraphLocale(
    args: Prisma.ParagraphLocaleUpdateArgs
  ): Promise<PrismaParagraphLocale> {
    return this.prisma.paragraphLocale.update(args);
  }
  async deleteParagraphLocale(
    args: Prisma.ParagraphLocaleDeleteArgs
  ): Promise<PrismaParagraphLocale> {
    return this.prisma.paragraphLocale.delete(args);
  }

  async findParagraphs(
    parentId: string,
    args: Prisma.ParagraphFindManyArgs
  ): Promise<PrismaParagraph[]> {
    return this.prisma.paragraphLocale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paragraphs(args);
  }
}
