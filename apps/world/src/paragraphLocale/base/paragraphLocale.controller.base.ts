/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ParagraphLocaleService } from "../paragraphLocale.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ParagraphLocaleCreateInput } from "./ParagraphLocaleCreateInput";
import { ParagraphLocale } from "./ParagraphLocale";
import { ParagraphLocaleFindManyArgs } from "./ParagraphLocaleFindManyArgs";
import { ParagraphLocaleWhereUniqueInput } from "./ParagraphLocaleWhereUniqueInput";
import { ParagraphLocaleUpdateInput } from "./ParagraphLocaleUpdateInput";
import { ParagraphFindManyArgs } from "../../paragraph/base/ParagraphFindManyArgs";
import { Paragraph } from "../../paragraph/base/Paragraph";
import { ParagraphWhereUniqueInput } from "../../paragraph/base/ParagraphWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ParagraphLocaleControllerBase {
  constructor(
    protected readonly service: ParagraphLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParagraphLocale })
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ParagraphLocaleCreateInput,
  })
  async createParagraphLocale(
    @common.Body() data: ParagraphLocaleCreateInput
  ): Promise<ParagraphLocale> {
    return await this.service.createParagraphLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ParagraphLocale] })
  @ApiNestedQuery(ParagraphLocaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paragraphLocales(
    @common.Req() request: Request
  ): Promise<ParagraphLocale[]> {
    const args = plainToClass(ParagraphLocaleFindManyArgs, request.query);
    return this.service.paragraphLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParagraphLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paragraphLocale(
    @common.Param() params: ParagraphLocaleWhereUniqueInput
  ): Promise<ParagraphLocale | null> {
    const result = await this.service.paragraphLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParagraphLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ParagraphLocaleUpdateInput,
  })
  async updateParagraphLocale(
    @common.Param() params: ParagraphLocaleWhereUniqueInput,
    @common.Body() data: ParagraphLocaleUpdateInput
  ): Promise<ParagraphLocale | null> {
    try {
      return await this.service.updateParagraphLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParagraphLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteParagraphLocale(
    @common.Param() params: ParagraphLocaleWhereUniqueInput
  ): Promise<ParagraphLocale | null> {
    try {
      return await this.service.deleteParagraphLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paragraphs")
  @ApiNestedQuery(ParagraphFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "any",
  })
  async findParagraphs(
    @common.Req() request: Request,
    @common.Param() params: ParagraphLocaleWhereUniqueInput
  ): Promise<Paragraph[]> {
    const query = plainToClass(ParagraphFindManyArgs, request.query);
    const results = await this.service.findParagraphs(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        paragraphLocales: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paragraphs")
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "update",
    possession: "any",
  })
  async connectParagraphs(
    @common.Param() params: ParagraphLocaleWhereUniqueInput,
    @common.Body() body: ParagraphWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paragraphs: {
        connect: body,
      },
    };
    await this.service.updateParagraphLocale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paragraphs")
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "update",
    possession: "any",
  })
  async updateParagraphs(
    @common.Param() params: ParagraphLocaleWhereUniqueInput,
    @common.Body() body: ParagraphWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paragraphs: {
        set: body,
      },
    };
    await this.service.updateParagraphLocale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paragraphs")
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "update",
    possession: "any",
  })
  async disconnectParagraphs(
    @common.Param() params: ParagraphLocaleWhereUniqueInput,
    @common.Body() body: ParagraphWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paragraphs: {
        disconnect: body,
      },
    };
    await this.service.updateParagraphLocale({
      where: params,
      data,
      select: { id: true },
    });
  }
}
