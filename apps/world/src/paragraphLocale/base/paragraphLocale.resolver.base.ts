/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ParagraphLocale } from "./ParagraphLocale";
import { ParagraphLocaleCountArgs } from "./ParagraphLocaleCountArgs";
import { ParagraphLocaleFindManyArgs } from "./ParagraphLocaleFindManyArgs";
import { ParagraphLocaleFindUniqueArgs } from "./ParagraphLocaleFindUniqueArgs";
import { CreateParagraphLocaleArgs } from "./CreateParagraphLocaleArgs";
import { UpdateParagraphLocaleArgs } from "./UpdateParagraphLocaleArgs";
import { DeleteParagraphLocaleArgs } from "./DeleteParagraphLocaleArgs";
import { ParagraphFindManyArgs } from "../../paragraph/base/ParagraphFindManyArgs";
import { Paragraph } from "../../paragraph/base/Paragraph";
import { ParagraphLocaleService } from "../paragraphLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParagraphLocale)
export class ParagraphLocaleResolverBase {
  constructor(
    protected readonly service: ParagraphLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "read",
    possession: "any",
  })
  async _paragraphLocalesMeta(
    @graphql.Args() args: ParagraphLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParagraphLocale])
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "read",
    possession: "any",
  })
  async paragraphLocales(
    @graphql.Args() args: ParagraphLocaleFindManyArgs
  ): Promise<ParagraphLocale[]> {
    return this.service.paragraphLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParagraphLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "read",
    possession: "own",
  })
  async paragraphLocale(
    @graphql.Args() args: ParagraphLocaleFindUniqueArgs
  ): Promise<ParagraphLocale | null> {
    const result = await this.service.paragraphLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParagraphLocale)
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "create",
    possession: "any",
  })
  async createParagraphLocale(
    @graphql.Args() args: CreateParagraphLocaleArgs
  ): Promise<ParagraphLocale> {
    return await this.service.createParagraphLocale({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParagraphLocale)
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "update",
    possession: "any",
  })
  async updateParagraphLocale(
    @graphql.Args() args: UpdateParagraphLocaleArgs
  ): Promise<ParagraphLocale | null> {
    try {
      return await this.service.updateParagraphLocale({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParagraphLocale)
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "delete",
    possession: "any",
  })
  async deleteParagraphLocale(
    @graphql.Args() args: DeleteParagraphLocaleArgs
  ): Promise<ParagraphLocale | null> {
    try {
      return await this.service.deleteParagraphLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Paragraph], { name: "paragraphs" })
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "any",
  })
  async findParagraphs(
    @graphql.Parent() parent: ParagraphLocale,
    @graphql.Args() args: ParagraphFindManyArgs
  ): Promise<Paragraph[]> {
    const results = await this.service.findParagraphs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
