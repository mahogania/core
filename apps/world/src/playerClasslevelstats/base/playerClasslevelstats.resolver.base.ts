/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlayerClasslevelstats } from "./PlayerClasslevelstats";
import { PlayerClasslevelstatsCountArgs } from "./PlayerClasslevelstatsCountArgs";
import { PlayerClasslevelstatsFindManyArgs } from "./PlayerClasslevelstatsFindManyArgs";
import { PlayerClasslevelstatsFindUniqueArgs } from "./PlayerClasslevelstatsFindUniqueArgs";
import { DeletePlayerClasslevelstatsArgs } from "./DeletePlayerClasslevelstatsArgs";
import { PlayerClasslevelstatsService } from "../playerClasslevelstats.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerClasslevelstats)
export class PlayerClasslevelstatsResolverBase {
  constructor(
    protected readonly service: PlayerClasslevelstatsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerClasslevelstats",
    action: "read",
    possession: "any",
  })
  async _playerClasslevelstatsItemsMeta(
    @graphql.Args() args: PlayerClasslevelstatsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerClasslevelstats])
  @nestAccessControl.UseRoles({
    resource: "PlayerClasslevelstats",
    action: "read",
    possession: "any",
  })
  async playerClasslevelstatsItems(
    @graphql.Args() args: PlayerClasslevelstatsFindManyArgs
  ): Promise<PlayerClasslevelstats[]> {
    return this.service.playerClasslevelstatsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerClasslevelstats, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerClasslevelstats",
    action: "read",
    possession: "own",
  })
  async playerClasslevelstats(
    @graphql.Args() args: PlayerClasslevelstatsFindUniqueArgs
  ): Promise<PlayerClasslevelstats | null> {
    const result = await this.service.playerClasslevelstats(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerClasslevelstats)
  @nestAccessControl.UseRoles({
    resource: "PlayerClasslevelstats",
    action: "delete",
    possession: "any",
  })
  async deletePlayerClasslevelstats(
    @graphql.Args() args: DeletePlayerClasslevelstatsArgs
  ): Promise<PlayerClasslevelstats | null> {
    try {
      return await this.service.deletePlayerClasslevelstats(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
