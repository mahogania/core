/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MailLevelReward } from "./MailLevelReward";
import { MailLevelRewardCountArgs } from "./MailLevelRewardCountArgs";
import { MailLevelRewardFindManyArgs } from "./MailLevelRewardFindManyArgs";
import { MailLevelRewardFindUniqueArgs } from "./MailLevelRewardFindUniqueArgs";
import { DeleteMailLevelRewardArgs } from "./DeleteMailLevelRewardArgs";
import { MailLevelRewardService } from "../mailLevelReward.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MailLevelReward)
export class MailLevelRewardResolverBase {
  constructor(
    protected readonly service: MailLevelRewardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MailLevelReward",
    action: "read",
    possession: "any",
  })
  async _mailLevelRewardsMeta(
    @graphql.Args() args: MailLevelRewardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MailLevelReward])
  @nestAccessControl.UseRoles({
    resource: "MailLevelReward",
    action: "read",
    possession: "any",
  })
  async mailLevelRewards(
    @graphql.Args() args: MailLevelRewardFindManyArgs
  ): Promise<MailLevelReward[]> {
    return this.service.mailLevelRewards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MailLevelReward, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MailLevelReward",
    action: "read",
    possession: "own",
  })
  async mailLevelReward(
    @graphql.Args() args: MailLevelRewardFindUniqueArgs
  ): Promise<MailLevelReward | null> {
    const result = await this.service.mailLevelReward(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MailLevelReward)
  @nestAccessControl.UseRoles({
    resource: "MailLevelReward",
    action: "delete",
    possession: "any",
  })
  async deleteMailLevelReward(
    @graphql.Args() args: DeleteMailLevelRewardArgs
  ): Promise<MailLevelReward | null> {
    try {
      return await this.service.deleteMailLevelReward(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
