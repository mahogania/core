/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MailLevelReward as PrismaMailLevelReward,
} from "@prisma/client";

export class MailLevelRewardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MailLevelRewardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mailLevelReward.count(args);
  }

  async mailLevelRewards(
    args: Prisma.MailLevelRewardFindManyArgs
  ): Promise<PrismaMailLevelReward[]> {
    return this.prisma.mailLevelReward.findMany(args);
  }
  async mailLevelReward(
    args: Prisma.MailLevelRewardFindUniqueArgs
  ): Promise<PrismaMailLevelReward | null> {
    return this.prisma.mailLevelReward.findUnique(args);
  }
  async createMailLevelReward(
    args: Prisma.MailLevelRewardCreateArgs
  ): Promise<PrismaMailLevelReward> {
    return this.prisma.mailLevelReward.create(args);
  }
  async updateMailLevelReward(
    args: Prisma.MailLevelRewardUpdateArgs
  ): Promise<PrismaMailLevelReward> {
    return this.prisma.mailLevelReward.update(args);
  }
  async deleteMailLevelReward(
    args: Prisma.MailLevelRewardDeleteArgs
  ): Promise<PrismaMailLevelReward> {
    return this.prisma.mailLevelReward.delete(args);
  }
}
