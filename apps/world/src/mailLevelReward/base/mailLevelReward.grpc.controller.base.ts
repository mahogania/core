/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { MailLevelRewardService } from "../mailLevelReward.service";
import { MailLevelRewardCreateInput } from "./MailLevelRewardCreateInput";
import { MailLevelRewardWhereInput } from "./MailLevelRewardWhereInput";
import { MailLevelRewardWhereUniqueInput } from "./MailLevelRewardWhereUniqueInput";
import { MailLevelRewardFindManyArgs } from "./MailLevelRewardFindManyArgs";
import { MailLevelRewardUpdateInput } from "./MailLevelRewardUpdateInput";
import { MailLevelReward } from "./MailLevelReward";

export class MailLevelRewardGrpcControllerBase {
  constructor(protected readonly service: MailLevelRewardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MailLevelReward })
  @GrpcMethod("MailLevelRewardService", "createMailLevelReward")
  async createMailLevelReward(
    @common.Body() data: MailLevelRewardCreateInput
  ): Promise<MailLevelReward> {
    return await this.service.createMailLevelReward({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MailLevelReward] })
  @ApiNestedQuery(MailLevelRewardFindManyArgs)
  @GrpcMethod("MailLevelRewardService", "mailLevelRewards")
  async mailLevelRewards(
    @common.Req() request: Request
  ): Promise<MailLevelReward[]> {
    const args = plainToClass(MailLevelRewardFindManyArgs, request.query);
    return this.service.mailLevelRewards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MailLevelReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MailLevelRewardService", "mailLevelReward")
  async mailLevelReward(
    @common.Param() params: MailLevelRewardWhereUniqueInput
  ): Promise<MailLevelReward | null> {
    const result = await this.service.mailLevelReward({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MailLevelReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MailLevelRewardService", "updateMailLevelReward")
  async updateMailLevelReward(
    @common.Param() params: MailLevelRewardWhereUniqueInput,
    @common.Body() data: MailLevelRewardUpdateInput
  ): Promise<MailLevelReward | null> {
    try {
      return await this.service.updateMailLevelReward({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MailLevelReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MailLevelRewardService", "deleteMailLevelReward")
  async deleteMailLevelReward(
    @common.Param() params: MailLevelRewardWhereUniqueInput
  ): Promise<MailLevelReward | null> {
    try {
      return await this.service.deleteMailLevelReward({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
