/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MailLootTemplate } from "./MailLootTemplate";
import { MailLootTemplateCountArgs } from "./MailLootTemplateCountArgs";
import { MailLootTemplateFindManyArgs } from "./MailLootTemplateFindManyArgs";
import { MailLootTemplateFindUniqueArgs } from "./MailLootTemplateFindUniqueArgs";
import { CreateMailLootTemplateArgs } from "./CreateMailLootTemplateArgs";
import { UpdateMailLootTemplateArgs } from "./UpdateMailLootTemplateArgs";
import { DeleteMailLootTemplateArgs } from "./DeleteMailLootTemplateArgs";
import { LootTemplate } from "../../lootTemplate/base/LootTemplate";
import { MailLootTemplateService } from "../mailLootTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MailLootTemplate)
export class MailLootTemplateResolverBase {
  constructor(
    protected readonly service: MailLootTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MailLootTemplate",
    action: "read",
    possession: "any",
  })
  async _mailLootTemplatesMeta(
    @graphql.Args() args: MailLootTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MailLootTemplate])
  @nestAccessControl.UseRoles({
    resource: "MailLootTemplate",
    action: "read",
    possession: "any",
  })
  async mailLootTemplates(
    @graphql.Args() args: MailLootTemplateFindManyArgs
  ): Promise<MailLootTemplate[]> {
    return this.service.mailLootTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MailLootTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MailLootTemplate",
    action: "read",
    possession: "own",
  })
  async mailLootTemplate(
    @graphql.Args() args: MailLootTemplateFindUniqueArgs
  ): Promise<MailLootTemplate | null> {
    const result = await this.service.mailLootTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MailLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "MailLootTemplate",
    action: "create",
    possession: "any",
  })
  async createMailLootTemplate(
    @graphql.Args() args: CreateMailLootTemplateArgs
  ): Promise<MailLootTemplate> {
    return await this.service.createMailLootTemplate({
      ...args,
      data: {
        ...args.data,

        lootTemplate: args.data.lootTemplate
          ? {
              connect: args.data.lootTemplate,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MailLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "MailLootTemplate",
    action: "update",
    possession: "any",
  })
  async updateMailLootTemplate(
    @graphql.Args() args: UpdateMailLootTemplateArgs
  ): Promise<MailLootTemplate | null> {
    try {
      return await this.service.updateMailLootTemplate({
        ...args,
        data: {
          ...args.data,

          lootTemplate: args.data.lootTemplate
            ? {
                connect: args.data.lootTemplate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MailLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "MailLootTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteMailLootTemplate(
    @graphql.Args() args: DeleteMailLootTemplateArgs
  ): Promise<MailLootTemplate | null> {
    try {
      return await this.service.deleteMailLootTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => LootTemplate, {
    nullable: true,
    name: "lootTemplate",
  })
  @nestAccessControl.UseRoles({
    resource: "LootTemplate",
    action: "read",
    possession: "any",
  })
  async getLootTemplate(
    @graphql.Parent() parent: MailLootTemplate
  ): Promise<LootTemplate | null> {
    const result = await this.service.getLootTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
