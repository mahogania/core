/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MailLootTemplate as PrismaMailLootTemplate,
  LootTemplate as PrismaLootTemplate,
} from "@prisma/client";

export class MailLootTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MailLootTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.mailLootTemplate.count(args);
  }

  async mailLootTemplates(
    args: Prisma.MailLootTemplateFindManyArgs
  ): Promise<PrismaMailLootTemplate[]> {
    return this.prisma.mailLootTemplate.findMany(args);
  }
  async mailLootTemplate(
    args: Prisma.MailLootTemplateFindUniqueArgs
  ): Promise<PrismaMailLootTemplate | null> {
    return this.prisma.mailLootTemplate.findUnique(args);
  }
  async createMailLootTemplate(
    args: Prisma.MailLootTemplateCreateArgs
  ): Promise<PrismaMailLootTemplate> {
    return this.prisma.mailLootTemplate.create(args);
  }
  async updateMailLootTemplate(
    args: Prisma.MailLootTemplateUpdateArgs
  ): Promise<PrismaMailLootTemplate> {
    return this.prisma.mailLootTemplate.update(args);
  }
  async deleteMailLootTemplate(
    args: Prisma.MailLootTemplateDeleteArgs
  ): Promise<PrismaMailLootTemplate> {
    return this.prisma.mailLootTemplate.delete(args);
  }

  async getLootTemplate(parentId: string): Promise<PrismaLootTemplate | null> {
    return this.prisma.mailLootTemplate
      .findUnique({
        where: { id: parentId },
      })
      .lootTemplate();
  }
}
