/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InstanceTemplate as PrismaInstanceTemplate,
  LinkedRespawn as PrismaLinkedRespawn,
} from "@prisma/client";

export class InstanceTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstanceTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.instanceTemplate.count(args);
  }

  async instanceTemplates(
    args: Prisma.InstanceTemplateFindManyArgs
  ): Promise<PrismaInstanceTemplate[]> {
    return this.prisma.instanceTemplate.findMany(args);
  }
  async instanceTemplate(
    args: Prisma.InstanceTemplateFindUniqueArgs
  ): Promise<PrismaInstanceTemplate | null> {
    return this.prisma.instanceTemplate.findUnique(args);
  }
  async createInstanceTemplate(
    args: Prisma.InstanceTemplateCreateArgs
  ): Promise<PrismaInstanceTemplate> {
    return this.prisma.instanceTemplate.create(args);
  }
  async updateInstanceTemplate(
    args: Prisma.InstanceTemplateUpdateArgs
  ): Promise<PrismaInstanceTemplate> {
    return this.prisma.instanceTemplate.update(args);
  }
  async deleteInstanceTemplate(
    args: Prisma.InstanceTemplateDeleteArgs
  ): Promise<PrismaInstanceTemplate> {
    return this.prisma.instanceTemplate.delete(args);
  }

  async getLinkedRespawns(
    parentId: string
  ): Promise<PrismaLinkedRespawn | null> {
    return this.prisma.instanceTemplate
      .findUnique({
        where: { id: parentId },
      })
      .linkedRespawns();
  }
}
