/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { InstanceTemplateService } from "../instanceTemplate.service";
import { InstanceTemplateCreateInput } from "./InstanceTemplateCreateInput";
import { InstanceTemplateWhereInput } from "./InstanceTemplateWhereInput";
import { InstanceTemplateWhereUniqueInput } from "./InstanceTemplateWhereUniqueInput";
import { InstanceTemplateFindManyArgs } from "./InstanceTemplateFindManyArgs";
import { InstanceTemplateUpdateInput } from "./InstanceTemplateUpdateInput";
import { InstanceTemplate } from "./InstanceTemplate";

export class InstanceTemplateGrpcControllerBase {
  constructor(protected readonly service: InstanceTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InstanceTemplate })
  @GrpcMethod("InstanceTemplateService", "createInstanceTemplate")
  async createInstanceTemplate(
    @common.Body() data: InstanceTemplateCreateInput
  ): Promise<InstanceTemplate> {
    return await this.service.createInstanceTemplate({
      data: {
        ...data,

        linkedRespawns: data.linkedRespawns
          ? {
              connect: data.linkedRespawns,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        linkedRespawns: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InstanceTemplate] })
  @ApiNestedQuery(InstanceTemplateFindManyArgs)
  @GrpcMethod("InstanceTemplateService", "instanceTemplates")
  async instanceTemplates(
    @common.Req() request: Request
  ): Promise<InstanceTemplate[]> {
    const args = plainToClass(InstanceTemplateFindManyArgs, request.query);
    return this.service.instanceTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,

        linkedRespawns: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InstanceTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceTemplateService", "instanceTemplate")
  async instanceTemplate(
    @common.Param() params: InstanceTemplateWhereUniqueInput
  ): Promise<InstanceTemplate | null> {
    const result = await this.service.instanceTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,

        linkedRespawns: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InstanceTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceTemplateService", "updateInstanceTemplate")
  async updateInstanceTemplate(
    @common.Param() params: InstanceTemplateWhereUniqueInput,
    @common.Body() data: InstanceTemplateUpdateInput
  ): Promise<InstanceTemplate | null> {
    try {
      return await this.service.updateInstanceTemplate({
        where: params,
        data: {
          ...data,

          linkedRespawns: data.linkedRespawns
            ? {
                connect: data.linkedRespawns,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          linkedRespawns: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InstanceTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceTemplateService", "deleteInstanceTemplate")
  async deleteInstanceTemplate(
    @common.Param() params: InstanceTemplateWhereUniqueInput
  ): Promise<InstanceTemplate | null> {
    try {
      return await this.service.deleteInstanceTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,

          linkedRespawns: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
