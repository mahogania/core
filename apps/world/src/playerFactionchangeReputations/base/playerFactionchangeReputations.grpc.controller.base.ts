/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerFactionchangeReputationsService } from "../playerFactionchangeReputations.service";
import { PlayerFactionchangeReputationsCreateInput } from "./PlayerFactionchangeReputationsCreateInput";
import { PlayerFactionchangeReputationsWhereInput } from "./PlayerFactionchangeReputationsWhereInput";
import { PlayerFactionchangeReputationsWhereUniqueInput } from "./PlayerFactionchangeReputationsWhereUniqueInput";
import { PlayerFactionchangeReputationsFindManyArgs } from "./PlayerFactionchangeReputationsFindManyArgs";
import { PlayerFactionchangeReputationsUpdateInput } from "./PlayerFactionchangeReputationsUpdateInput";
import { PlayerFactionchangeReputations } from "./PlayerFactionchangeReputations";

export class PlayerFactionchangeReputationsGrpcControllerBase {
  constructor(
    protected readonly service: PlayerFactionchangeReputationsService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerFactionchangeReputations })
  @GrpcMethod(
    "PlayerFactionchangeReputationsService",
    "createPlayerFactionchangeReputations"
  )
  async createPlayerFactionchangeReputations(
    @common.Body() data: PlayerFactionchangeReputationsCreateInput
  ): Promise<PlayerFactionchangeReputations> {
    return await this.service.createPlayerFactionchangeReputations({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerFactionchangeReputations] })
  @ApiNestedQuery(PlayerFactionchangeReputationsFindManyArgs)
  @GrpcMethod(
    "PlayerFactionchangeReputationsService",
    "playerFactionchangeReputationsItems"
  )
  async playerFactionchangeReputationsItems(
    @common.Req() request: Request
  ): Promise<PlayerFactionchangeReputations[]> {
    const args = plainToClass(
      PlayerFactionchangeReputationsFindManyArgs,
      request.query
    );
    return this.service.playerFactionchangeReputationsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeReputations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeReputationsService",
    "playerFactionchangeReputations"
  )
  async playerFactionchangeReputations(
    @common.Param() params: PlayerFactionchangeReputationsWhereUniqueInput
  ): Promise<PlayerFactionchangeReputations | null> {
    const result = await this.service.playerFactionchangeReputations({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeReputations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeReputationsService",
    "updatePlayerFactionchangeReputations"
  )
  async updatePlayerFactionchangeReputations(
    @common.Param() params: PlayerFactionchangeReputationsWhereUniqueInput,
    @common.Body() data: PlayerFactionchangeReputationsUpdateInput
  ): Promise<PlayerFactionchangeReputations | null> {
    try {
      return await this.service.updatePlayerFactionchangeReputations({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeReputations })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeReputationsService",
    "deletePlayerFactionchangeReputations"
  )
  async deletePlayerFactionchangeReputations(
    @common.Param() params: PlayerFactionchangeReputationsWhereUniqueInput
  ): Promise<PlayerFactionchangeReputations | null> {
    try {
      return await this.service.deletePlayerFactionchangeReputations({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
