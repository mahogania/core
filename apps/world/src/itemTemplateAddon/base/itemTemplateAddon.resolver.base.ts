/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ItemTemplateAddon } from "./ItemTemplateAddon";
import { ItemTemplateAddonCountArgs } from "./ItemTemplateAddonCountArgs";
import { ItemTemplateAddonFindManyArgs } from "./ItemTemplateAddonFindManyArgs";
import { ItemTemplateAddonFindUniqueArgs } from "./ItemTemplateAddonFindUniqueArgs";
import { CreateItemTemplateAddonArgs } from "./CreateItemTemplateAddonArgs";
import { UpdateItemTemplateAddonArgs } from "./UpdateItemTemplateAddonArgs";
import { DeleteItemTemplateAddonArgs } from "./DeleteItemTemplateAddonArgs";
import { ItemTemplateFindManyArgs } from "../../itemTemplate/base/ItemTemplateFindManyArgs";
import { ItemTemplate } from "../../itemTemplate/base/ItemTemplate";
import { ItemTemplateAddonService } from "../itemTemplateAddon.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItemTemplateAddon)
export class ItemTemplateAddonResolverBase {
  constructor(
    protected readonly service: ItemTemplateAddonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItemTemplateAddon",
    action: "read",
    possession: "any",
  })
  async _itemTemplateAddonsMeta(
    @graphql.Args() args: ItemTemplateAddonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItemTemplateAddon])
  @nestAccessControl.UseRoles({
    resource: "ItemTemplateAddon",
    action: "read",
    possession: "any",
  })
  async itemTemplateAddons(
    @graphql.Args() args: ItemTemplateAddonFindManyArgs
  ): Promise<ItemTemplateAddon[]> {
    return this.service.itemTemplateAddons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItemTemplateAddon, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItemTemplateAddon",
    action: "read",
    possession: "own",
  })
  async itemTemplateAddon(
    @graphql.Args() args: ItemTemplateAddonFindUniqueArgs
  ): Promise<ItemTemplateAddon | null> {
    const result = await this.service.itemTemplateAddon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemTemplateAddon)
  @nestAccessControl.UseRoles({
    resource: "ItemTemplateAddon",
    action: "create",
    possession: "any",
  })
  async createItemTemplateAddon(
    @graphql.Args() args: CreateItemTemplateAddonArgs
  ): Promise<ItemTemplateAddon> {
    return await this.service.createItemTemplateAddon({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemTemplateAddon)
  @nestAccessControl.UseRoles({
    resource: "ItemTemplateAddon",
    action: "update",
    possession: "any",
  })
  async updateItemTemplateAddon(
    @graphql.Args() args: UpdateItemTemplateAddonArgs
  ): Promise<ItemTemplateAddon | null> {
    try {
      return await this.service.updateItemTemplateAddon({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemTemplateAddon)
  @nestAccessControl.UseRoles({
    resource: "ItemTemplateAddon",
    action: "delete",
    possession: "any",
  })
  async deleteItemTemplateAddon(
    @graphql.Args() args: DeleteItemTemplateAddonArgs
  ): Promise<ItemTemplateAddon | null> {
    try {
      return await this.service.deleteItemTemplateAddon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ItemTemplate], { name: "itemTemplates" })
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "read",
    possession: "any",
  })
  async findItemTemplates(
    @graphql.Parent() parent: ItemTemplateAddon,
    @graphql.Args() args: ItemTemplateFindManyArgs
  ): Promise<ItemTemplate[]> {
    const results = await this.service.findItemTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
