/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AchievementRewardService } from "../achievementReward.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AchievementRewardCreateInput } from "./AchievementRewardCreateInput";
import { AchievementReward } from "./AchievementReward";
import { AchievementRewardFindManyArgs } from "./AchievementRewardFindManyArgs";
import { AchievementRewardWhereUniqueInput } from "./AchievementRewardWhereUniqueInput";
import { AchievementRewardUpdateInput } from "./AchievementRewardUpdateInput";
import { AchievementFindManyArgs } from "../../achievement/base/AchievementFindManyArgs";
import { Achievement } from "../../achievement/base/Achievement";
import { AchievementWhereUniqueInput } from "../../achievement/base/AchievementWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AchievementRewardControllerBase {
  constructor(
    protected readonly service: AchievementRewardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AchievementReward })
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AchievementRewardCreateInput,
  })
  async createAchievementReward(
    @common.Body() data: AchievementRewardCreateInput
  ): Promise<AchievementReward> {
    return await this.service.createAchievementReward({
      data: {
        ...data,

        achievementRewardLocales: data.achievementRewardLocales
          ? {
              connect: data.achievementRewardLocales,
            }
          : undefined,
      },
      select: {
        achievementRewardLocales: {
          select: {
            id: true,
          },
        },

        body: true,
        createdAt: true,
        id: true,
        itemId: true,
        mailTemplateId: true,
        sender: true,
        subject: true,
        titleA: true,
        titleH: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AchievementReward] })
  @ApiNestedQuery(AchievementRewardFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async achievementRewards(
    @common.Req() request: Request
  ): Promise<AchievementReward[]> {
    const args = plainToClass(AchievementRewardFindManyArgs, request.query);
    return this.service.achievementRewards({
      ...args,
      select: {
        achievementRewardLocales: {
          select: {
            id: true,
          },
        },

        body: true,
        createdAt: true,
        id: true,
        itemId: true,
        mailTemplateId: true,
        sender: true,
        subject: true,
        titleA: true,
        titleH: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AchievementReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async achievementReward(
    @common.Param() params: AchievementRewardWhereUniqueInput
  ): Promise<AchievementReward | null> {
    const result = await this.service.achievementReward({
      where: params,
      select: {
        achievementRewardLocales: {
          select: {
            id: true,
          },
        },

        body: true,
        createdAt: true,
        id: true,
        itemId: true,
        mailTemplateId: true,
        sender: true,
        subject: true,
        titleA: true,
        titleH: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AchievementReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AchievementRewardUpdateInput,
  })
  async updateAchievementReward(
    @common.Param() params: AchievementRewardWhereUniqueInput,
    @common.Body() data: AchievementRewardUpdateInput
  ): Promise<AchievementReward | null> {
    try {
      return await this.service.updateAchievementReward({
        where: params,
        data: {
          ...data,

          achievementRewardLocales: data.achievementRewardLocales
            ? {
                connect: data.achievementRewardLocales,
              }
            : undefined,
        },
        select: {
          achievementRewardLocales: {
            select: {
              id: true,
            },
          },

          body: true,
          createdAt: true,
          id: true,
          itemId: true,
          mailTemplateId: true,
          sender: true,
          subject: true,
          titleA: true,
          titleH: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AchievementReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAchievementReward(
    @common.Param() params: AchievementRewardWhereUniqueInput
  ): Promise<AchievementReward | null> {
    try {
      return await this.service.deleteAchievementReward({
        where: params,
        select: {
          achievementRewardLocales: {
            select: {
              id: true,
            },
          },

          body: true,
          createdAt: true,
          id: true,
          itemId: true,
          mailTemplateId: true,
          sender: true,
          subject: true,
          titleA: true,
          titleH: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/achievements")
  @ApiNestedQuery(AchievementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "read",
    possession: "any",
  })
  async findAchievements(
    @common.Req() request: Request,
    @common.Param() params: AchievementRewardWhereUniqueInput
  ): Promise<Achievement[]> {
    const query = plainToClass(AchievementFindManyArgs, request.query);
    const results = await this.service.findAchievements(params.id, {
      ...query,
      select: {
        achievementRewards: {
          select: {
            id: true,
          },
        },

        count: true,
        createdAt: true,
        flags: true,
        id: true,
        map: true,

        player: {
          select: {
            id: true,
          },
        },

        points: true,
        refAchievement: true,
        requiredFaction: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/achievements")
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "update",
    possession: "any",
  })
  async connectAchievements(
    @common.Param() params: AchievementRewardWhereUniqueInput,
    @common.Body() body: AchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      achievements: {
        connect: body,
      },
    };
    await this.service.updateAchievementReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/achievements")
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "update",
    possession: "any",
  })
  async updateAchievements(
    @common.Param() params: AchievementRewardWhereUniqueInput,
    @common.Body() body: AchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      achievements: {
        set: body,
      },
    };
    await this.service.updateAchievementReward({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/achievements")
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "update",
    possession: "any",
  })
  async disconnectAchievements(
    @common.Param() params: AchievementRewardWhereUniqueInput,
    @common.Body() body: AchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      achievements: {
        disconnect: body,
      },
    };
    await this.service.updateAchievementReward({
      where: params,
      data,
      select: { id: true },
    });
  }
}
