/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AchievementReward } from "./AchievementReward";
import { AchievementRewardCountArgs } from "./AchievementRewardCountArgs";
import { AchievementRewardFindManyArgs } from "./AchievementRewardFindManyArgs";
import { AchievementRewardFindUniqueArgs } from "./AchievementRewardFindUniqueArgs";
import { CreateAchievementRewardArgs } from "./CreateAchievementRewardArgs";
import { UpdateAchievementRewardArgs } from "./UpdateAchievementRewardArgs";
import { DeleteAchievementRewardArgs } from "./DeleteAchievementRewardArgs";
import { AchievementFindManyArgs } from "../../achievement/base/AchievementFindManyArgs";
import { Achievement } from "../../achievement/base/Achievement";
import { AchievementRewardLocale } from "../../achievementRewardLocale/base/AchievementRewardLocale";
import { AchievementRewardService } from "../achievementReward.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AchievementReward)
export class AchievementRewardResolverBase {
  constructor(
    protected readonly service: AchievementRewardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "read",
    possession: "any",
  })
  async _achievementRewardsMeta(
    @graphql.Args() args: AchievementRewardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AchievementReward])
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "read",
    possession: "any",
  })
  async achievementRewards(
    @graphql.Args() args: AchievementRewardFindManyArgs
  ): Promise<AchievementReward[]> {
    return this.service.achievementRewards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AchievementReward, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "read",
    possession: "own",
  })
  async achievementReward(
    @graphql.Args() args: AchievementRewardFindUniqueArgs
  ): Promise<AchievementReward | null> {
    const result = await this.service.achievementReward(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementReward)
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "create",
    possession: "any",
  })
  async createAchievementReward(
    @graphql.Args() args: CreateAchievementRewardArgs
  ): Promise<AchievementReward> {
    return await this.service.createAchievementReward({
      ...args,
      data: {
        ...args.data,

        achievementRewardLocales: args.data.achievementRewardLocales
          ? {
              connect: args.data.achievementRewardLocales,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementReward)
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "update",
    possession: "any",
  })
  async updateAchievementReward(
    @graphql.Args() args: UpdateAchievementRewardArgs
  ): Promise<AchievementReward | null> {
    try {
      return await this.service.updateAchievementReward({
        ...args,
        data: {
          ...args.data,

          achievementRewardLocales: args.data.achievementRewardLocales
            ? {
                connect: args.data.achievementRewardLocales,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AchievementReward)
  @nestAccessControl.UseRoles({
    resource: "AchievementReward",
    action: "delete",
    possession: "any",
  })
  async deleteAchievementReward(
    @graphql.Args() args: DeleteAchievementRewardArgs
  ): Promise<AchievementReward | null> {
    try {
      return await this.service.deleteAchievementReward(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Achievement], { name: "achievements" })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "read",
    possession: "any",
  })
  async findAchievements(
    @graphql.Parent() parent: AchievementReward,
    @graphql.Args() args: AchievementFindManyArgs
  ): Promise<Achievement[]> {
    const results = await this.service.findAchievements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AchievementRewardLocale, {
    nullable: true,
    name: "achievementRewardLocales",
  })
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "read",
    possession: "any",
  })
  async getAchievementRewardLocales(
    @graphql.Parent() parent: AchievementReward
  ): Promise<AchievementRewardLocale | null> {
    const result = await this.service.getAchievementRewardLocales(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
