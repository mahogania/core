/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AchievementRewardService } from "../achievementReward.service";
import { AchievementRewardCreateInput } from "./AchievementRewardCreateInput";
import { AchievementRewardWhereInput } from "./AchievementRewardWhereInput";
import { AchievementRewardWhereUniqueInput } from "./AchievementRewardWhereUniqueInput";
import { AchievementRewardFindManyArgs } from "./AchievementRewardFindManyArgs";
import { AchievementRewardUpdateInput } from "./AchievementRewardUpdateInput";
import { AchievementReward } from "./AchievementReward";

export class AchievementRewardGrpcControllerBase {
  constructor(protected readonly service: AchievementRewardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AchievementReward })
  @GrpcMethod("AchievementRewardService", "createAchievementReward")
  async createAchievementReward(
    @common.Body() data: AchievementRewardCreateInput
  ): Promise<AchievementReward> {
    return await this.service.createAchievementReward({
      data: data,
      select: {
        body: true,
        createdAt: true,
        id: true,
        itemId: true,
        mailTemplateId: true,
        sender: true,
        subject: true,
        titleA: true,
        titleH: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AchievementReward] })
  @ApiNestedQuery(AchievementRewardFindManyArgs)
  @GrpcMethod("AchievementRewardService", "achievementRewards")
  async achievementRewards(
    @common.Req() request: Request
  ): Promise<AchievementReward[]> {
    const args = plainToClass(AchievementRewardFindManyArgs, request.query);
    return this.service.achievementRewards({
      ...args,
      select: {
        body: true,
        createdAt: true,
        id: true,
        itemId: true,
        mailTemplateId: true,
        sender: true,
        subject: true,
        titleA: true,
        titleH: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AchievementReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AchievementRewardService", "achievementReward")
  async achievementReward(
    @common.Param() params: AchievementRewardWhereUniqueInput
  ): Promise<AchievementReward | null> {
    const result = await this.service.achievementReward({
      where: params,
      select: {
        body: true,
        createdAt: true,
        id: true,
        itemId: true,
        mailTemplateId: true,
        sender: true,
        subject: true,
        titleA: true,
        titleH: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AchievementReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AchievementRewardService", "updateAchievementReward")
  async updateAchievementReward(
    @common.Param() params: AchievementRewardWhereUniqueInput,
    @common.Body() data: AchievementRewardUpdateInput
  ): Promise<AchievementReward | null> {
    try {
      return await this.service.updateAchievementReward({
        where: params,
        data: data,
        select: {
          body: true,
          createdAt: true,
          id: true,
          itemId: true,
          mailTemplateId: true,
          sender: true,
          subject: true,
          titleA: true,
          titleH: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AchievementReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AchievementRewardService", "deleteAchievementReward")
  async deleteAchievementReward(
    @common.Param() params: AchievementRewardWhereUniqueInput
  ): Promise<AchievementReward | null> {
    try {
      return await this.service.deleteAchievementReward({
        where: params,
        select: {
          body: true,
          createdAt: true,
          id: true,
          itemId: true,
          mailTemplateId: true,
          sender: true,
          subject: true,
          titleA: true,
          titleH: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
