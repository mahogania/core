/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AchievementReward as PrismaAchievementReward,
} from "@prisma/client";

export class AchievementRewardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AchievementRewardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.achievementReward.count(args);
  }

  async achievementRewards(
    args: Prisma.AchievementRewardFindManyArgs
  ): Promise<PrismaAchievementReward[]> {
    return this.prisma.achievementReward.findMany(args);
  }
  async achievementReward(
    args: Prisma.AchievementRewardFindUniqueArgs
  ): Promise<PrismaAchievementReward | null> {
    return this.prisma.achievementReward.findUnique(args);
  }
  async createAchievementReward(
    args: Prisma.AchievementRewardCreateArgs
  ): Promise<PrismaAchievementReward> {
    return this.prisma.achievementReward.create(args);
  }
  async updateAchievementReward(
    args: Prisma.AchievementRewardUpdateArgs
  ): Promise<PrismaAchievementReward> {
    return this.prisma.achievementReward.update(args);
  }
  async deleteAchievementReward(
    args: Prisma.AchievementRewardDeleteArgs
  ): Promise<PrismaAchievementReward> {
    return this.prisma.achievementReward.delete(args);
  }
}
