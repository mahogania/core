/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventCondition } from "./GameEventCondition";
import { GameEventConditionCountArgs } from "./GameEventConditionCountArgs";
import { GameEventConditionFindManyArgs } from "./GameEventConditionFindManyArgs";
import { GameEventConditionFindUniqueArgs } from "./GameEventConditionFindUniqueArgs";
import { CreateGameEventConditionArgs } from "./CreateGameEventConditionArgs";
import { UpdateGameEventConditionArgs } from "./UpdateGameEventConditionArgs";
import { DeleteGameEventConditionArgs } from "./DeleteGameEventConditionArgs";
import { GameEventConditionService } from "../gameEventCondition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventCondition)
export class GameEventConditionResolverBase {
  constructor(
    protected readonly service: GameEventConditionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventCondition",
    action: "read",
    possession: "any",
  })
  async _gameEventConditionsMeta(
    @graphql.Args() args: GameEventConditionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventCondition])
  @nestAccessControl.UseRoles({
    resource: "GameEventCondition",
    action: "read",
    possession: "any",
  })
  async gameEventConditions(
    @graphql.Args() args: GameEventConditionFindManyArgs
  ): Promise<GameEventCondition[]> {
    return this.service.gameEventConditions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventCondition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventCondition",
    action: "read",
    possession: "own",
  })
  async gameEventCondition(
    @graphql.Args() args: GameEventConditionFindUniqueArgs
  ): Promise<GameEventCondition | null> {
    const result = await this.service.gameEventCondition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCondition)
  @nestAccessControl.UseRoles({
    resource: "GameEventCondition",
    action: "create",
    possession: "any",
  })
  async createGameEventCondition(
    @graphql.Args() args: CreateGameEventConditionArgs
  ): Promise<GameEventCondition> {
    return await this.service.createGameEventCondition({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCondition)
  @nestAccessControl.UseRoles({
    resource: "GameEventCondition",
    action: "update",
    possession: "any",
  })
  async updateGameEventCondition(
    @graphql.Args() args: UpdateGameEventConditionArgs
  ): Promise<GameEventCondition | null> {
    try {
      return await this.service.updateGameEventCondition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventCondition)
  @nestAccessControl.UseRoles({
    resource: "GameEventCondition",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventCondition(
    @graphql.Args() args: DeleteGameEventConditionArgs
  ): Promise<GameEventCondition | null> {
    try {
      return await this.service.deleteGameEventCondition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
