/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GameEventCondition as PrismaGameEventCondition,
} from "@prisma/client";

export class GameEventConditionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameEventConditionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameEventCondition.count(args);
  }

  async gameEventConditions(
    args: Prisma.GameEventConditionFindManyArgs
  ): Promise<PrismaGameEventCondition[]> {
    return this.prisma.gameEventCondition.findMany(args);
  }
  async gameEventCondition(
    args: Prisma.GameEventConditionFindUniqueArgs
  ): Promise<PrismaGameEventCondition | null> {
    return this.prisma.gameEventCondition.findUnique(args);
  }
  async createGameEventCondition(
    args: Prisma.GameEventConditionCreateArgs
  ): Promise<PrismaGameEventCondition> {
    return this.prisma.gameEventCondition.create(args);
  }
  async updateGameEventCondition(
    args: Prisma.GameEventConditionUpdateArgs
  ): Promise<PrismaGameEventCondition> {
    return this.prisma.gameEventCondition.update(args);
  }
  async deleteGameEventCondition(
    args: Prisma.GameEventConditionDeleteArgs
  ): Promise<PrismaGameEventCondition> {
    return this.prisma.gameEventCondition.delete(args);
  }
}
