/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventConditionService } from "../gameEventCondition.service";
import { GameEventConditionCreateInput } from "./GameEventConditionCreateInput";
import { GameEventConditionWhereInput } from "./GameEventConditionWhereInput";
import { GameEventConditionWhereUniqueInput } from "./GameEventConditionWhereUniqueInput";
import { GameEventConditionFindManyArgs } from "./GameEventConditionFindManyArgs";
import { GameEventConditionUpdateInput } from "./GameEventConditionUpdateInput";
import { GameEventCondition } from "./GameEventCondition";

export class GameEventConditionGrpcControllerBase {
  constructor(protected readonly service: GameEventConditionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventCondition })
  @GrpcMethod("GameEventConditionService", "createGameEventCondition")
  async createGameEventCondition(
    @common.Body() data: GameEventConditionCreateInput
  ): Promise<GameEventCondition> {
    return await this.service.createGameEventCondition({
      data: data,
      select: {
        conditionId: true,
        createdAt: true,
        description: true,
        doneWorldStateField: true,
        eventEntry: true,
        id: true,
        maxWorldStateField: true,
        reqNum: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventCondition] })
  @ApiNestedQuery(GameEventConditionFindManyArgs)
  @GrpcMethod("GameEventConditionService", "gameEventConditions")
  async gameEventConditions(
    @common.Req() request: Request
  ): Promise<GameEventCondition[]> {
    const args = plainToClass(GameEventConditionFindManyArgs, request.query);
    return this.service.gameEventConditions({
      ...args,
      select: {
        conditionId: true,
        createdAt: true,
        description: true,
        doneWorldStateField: true,
        eventEntry: true,
        id: true,
        maxWorldStateField: true,
        reqNum: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventCondition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventConditionService", "gameEventCondition")
  async gameEventCondition(
    @common.Param() params: GameEventConditionWhereUniqueInput
  ): Promise<GameEventCondition | null> {
    const result = await this.service.gameEventCondition({
      where: params,
      select: {
        conditionId: true,
        createdAt: true,
        description: true,
        doneWorldStateField: true,
        eventEntry: true,
        id: true,
        maxWorldStateField: true,
        reqNum: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventCondition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventConditionService", "updateGameEventCondition")
  async updateGameEventCondition(
    @common.Param() params: GameEventConditionWhereUniqueInput,
    @common.Body() data: GameEventConditionUpdateInput
  ): Promise<GameEventCondition | null> {
    try {
      return await this.service.updateGameEventCondition({
        where: params,
        data: data,
        select: {
          conditionId: true,
          createdAt: true,
          description: true,
          doneWorldStateField: true,
          eventEntry: true,
          id: true,
          maxWorldStateField: true,
          reqNum: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventCondition })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventConditionService", "deleteGameEventCondition")
  async deleteGameEventCondition(
    @common.Param() params: GameEventConditionWhereUniqueInput
  ): Promise<GameEventCondition | null> {
    try {
      return await this.service.deleteGameEventCondition({
        where: params,
        select: {
          conditionId: true,
          createdAt: true,
          description: true,
          doneWorldStateField: true,
          eventEntry: true,
          id: true,
          maxWorldStateField: true,
          reqNum: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
