/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerchoiceLocaleService } from "../playerchoiceLocale.service";
import { PlayerchoiceLocaleCreateInput } from "./PlayerchoiceLocaleCreateInput";
import { PlayerchoiceLocaleWhereInput } from "./PlayerchoiceLocaleWhereInput";
import { PlayerchoiceLocaleWhereUniqueInput } from "./PlayerchoiceLocaleWhereUniqueInput";
import { PlayerchoiceLocaleFindManyArgs } from "./PlayerchoiceLocaleFindManyArgs";
import { PlayerchoiceLocaleUpdateInput } from "./PlayerchoiceLocaleUpdateInput";
import { PlayerchoiceLocale } from "./PlayerchoiceLocale";

export class PlayerchoiceLocaleGrpcControllerBase {
  constructor(protected readonly service: PlayerchoiceLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerchoiceLocale })
  @GrpcMethod("PlayerchoiceLocaleService", "createPlayerchoiceLocale")
  async createPlayerchoiceLocale(
    @common.Body() data: PlayerchoiceLocaleCreateInput
  ): Promise<PlayerchoiceLocale> {
    return await this.service.createPlayerchoiceLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerchoiceLocale] })
  @ApiNestedQuery(PlayerchoiceLocaleFindManyArgs)
  @GrpcMethod("PlayerchoiceLocaleService", "playerchoiceLocales")
  async playerchoiceLocales(
    @common.Req() request: Request
  ): Promise<PlayerchoiceLocale[]> {
    const args = plainToClass(PlayerchoiceLocaleFindManyArgs, request.query);
    return this.service.playerchoiceLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceLocaleService", "playerchoiceLocale")
  async playerchoiceLocale(
    @common.Param() params: PlayerchoiceLocaleWhereUniqueInput
  ): Promise<PlayerchoiceLocale | null> {
    const result = await this.service.playerchoiceLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceLocaleService", "updatePlayerchoiceLocale")
  async updatePlayerchoiceLocale(
    @common.Param() params: PlayerchoiceLocaleWhereUniqueInput,
    @common.Body() data: PlayerchoiceLocaleUpdateInput
  ): Promise<PlayerchoiceLocale | null> {
    try {
      return await this.service.updatePlayerchoiceLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceLocaleService", "deletePlayerchoiceLocale")
  async deletePlayerchoiceLocale(
    @common.Param() params: PlayerchoiceLocaleWhereUniqueInput
  ): Promise<PlayerchoiceLocale | null> {
    try {
      return await this.service.deletePlayerchoiceLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
