/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerFactionchangeSpellsService } from "../playerFactionchangeSpells.service";
import { PlayerFactionchangeSpellsCreateInput } from "./PlayerFactionchangeSpellsCreateInput";
import { PlayerFactionchangeSpellsWhereInput } from "./PlayerFactionchangeSpellsWhereInput";
import { PlayerFactionchangeSpellsWhereUniqueInput } from "./PlayerFactionchangeSpellsWhereUniqueInput";
import { PlayerFactionchangeSpellsFindManyArgs } from "./PlayerFactionchangeSpellsFindManyArgs";
import { PlayerFactionchangeSpellsUpdateInput } from "./PlayerFactionchangeSpellsUpdateInput";
import { PlayerFactionchangeSpells } from "./PlayerFactionchangeSpells";

export class PlayerFactionchangeSpellsGrpcControllerBase {
  constructor(protected readonly service: PlayerFactionchangeSpellsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerFactionchangeSpells })
  @GrpcMethod(
    "PlayerFactionchangeSpellsService",
    "createPlayerFactionchangeSpells"
  )
  async createPlayerFactionchangeSpells(
    @common.Body() data: PlayerFactionchangeSpellsCreateInput
  ): Promise<PlayerFactionchangeSpells> {
    return await this.service.createPlayerFactionchangeSpells({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerFactionchangeSpells] })
  @ApiNestedQuery(PlayerFactionchangeSpellsFindManyArgs)
  @GrpcMethod(
    "PlayerFactionchangeSpellsService",
    "playerFactionchangeSpellsItems"
  )
  async playerFactionchangeSpellsItems(
    @common.Req() request: Request
  ): Promise<PlayerFactionchangeSpells[]> {
    const args = plainToClass(
      PlayerFactionchangeSpellsFindManyArgs,
      request.query
    );
    return this.service.playerFactionchangeSpellsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeSpells })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerFactionchangeSpellsService", "playerFactionchangeSpells")
  async playerFactionchangeSpells(
    @common.Param() params: PlayerFactionchangeSpellsWhereUniqueInput
  ): Promise<PlayerFactionchangeSpells | null> {
    const result = await this.service.playerFactionchangeSpells({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeSpells })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeSpellsService",
    "updatePlayerFactionchangeSpells"
  )
  async updatePlayerFactionchangeSpells(
    @common.Param() params: PlayerFactionchangeSpellsWhereUniqueInput,
    @common.Body() data: PlayerFactionchangeSpellsUpdateInput
  ): Promise<PlayerFactionchangeSpells | null> {
    try {
      return await this.service.updatePlayerFactionchangeSpells({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeSpells })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeSpellsService",
    "deletePlayerFactionchangeSpells"
  )
  async deletePlayerFactionchangeSpells(
    @common.Param() params: PlayerFactionchangeSpellsWhereUniqueInput
  ): Promise<PlayerFactionchangeSpells | null> {
    try {
      return await this.service.deletePlayerFactionchangeSpells({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
