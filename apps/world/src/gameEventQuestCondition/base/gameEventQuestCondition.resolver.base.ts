/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventQuestCondition } from "./GameEventQuestCondition";
import { GameEventQuestConditionCountArgs } from "./GameEventQuestConditionCountArgs";
import { GameEventQuestConditionFindManyArgs } from "./GameEventQuestConditionFindManyArgs";
import { GameEventQuestConditionFindUniqueArgs } from "./GameEventQuestConditionFindUniqueArgs";
import { CreateGameEventQuestConditionArgs } from "./CreateGameEventQuestConditionArgs";
import { UpdateGameEventQuestConditionArgs } from "./UpdateGameEventQuestConditionArgs";
import { DeleteGameEventQuestConditionArgs } from "./DeleteGameEventQuestConditionArgs";
import { GameEventQuestConditionService } from "../gameEventQuestCondition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventQuestCondition)
export class GameEventQuestConditionResolverBase {
  constructor(
    protected readonly service: GameEventQuestConditionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuestCondition",
    action: "read",
    possession: "any",
  })
  async _gameEventQuestConditionsMeta(
    @graphql.Args() args: GameEventQuestConditionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventQuestCondition])
  @nestAccessControl.UseRoles({
    resource: "GameEventQuestCondition",
    action: "read",
    possession: "any",
  })
  async gameEventQuestConditions(
    @graphql.Args() args: GameEventQuestConditionFindManyArgs
  ): Promise<GameEventQuestCondition[]> {
    return this.service.gameEventQuestConditions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventQuestCondition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventQuestCondition",
    action: "read",
    possession: "own",
  })
  async gameEventQuestCondition(
    @graphql.Args() args: GameEventQuestConditionFindUniqueArgs
  ): Promise<GameEventQuestCondition | null> {
    const result = await this.service.gameEventQuestCondition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventQuestCondition)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuestCondition",
    action: "create",
    possession: "any",
  })
  async createGameEventQuestCondition(
    @graphql.Args() args: CreateGameEventQuestConditionArgs
  ): Promise<GameEventQuestCondition> {
    return await this.service.createGameEventQuestCondition({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventQuestCondition)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuestCondition",
    action: "update",
    possession: "any",
  })
  async updateGameEventQuestCondition(
    @graphql.Args() args: UpdateGameEventQuestConditionArgs
  ): Promise<GameEventQuestCondition | null> {
    try {
      return await this.service.updateGameEventQuestCondition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventQuestCondition)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuestCondition",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventQuestCondition(
    @graphql.Args() args: DeleteGameEventQuestConditionArgs
  ): Promise<GameEventQuestCondition | null> {
    try {
      return await this.service.deleteGameEventQuestCondition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
