/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameObjectOverrides } from "./GameObjectOverrides";
import { GameObjectOverridesCountArgs } from "./GameObjectOverridesCountArgs";
import { GameObjectOverridesFindManyArgs } from "./GameObjectOverridesFindManyArgs";
import { GameObjectOverridesFindUniqueArgs } from "./GameObjectOverridesFindUniqueArgs";
import { DeleteGameObjectOverridesArgs } from "./DeleteGameObjectOverridesArgs";
import { GameObjectOverridesService } from "../gameObjectOverrides.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameObjectOverrides)
export class GameObjectOverridesResolverBase {
  constructor(
    protected readonly service: GameObjectOverridesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameObjectOverrides",
    action: "read",
    possession: "any",
  })
  async _gameObjectOverridesItemsMeta(
    @graphql.Args() args: GameObjectOverridesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameObjectOverrides])
  @nestAccessControl.UseRoles({
    resource: "GameObjectOverrides",
    action: "read",
    possession: "any",
  })
  async gameObjectOverridesItems(
    @graphql.Args() args: GameObjectOverridesFindManyArgs
  ): Promise<GameObjectOverrides[]> {
    return this.service.gameObjectOverridesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameObjectOverrides, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameObjectOverrides",
    action: "read",
    possession: "own",
  })
  async gameObjectOverrides(
    @graphql.Args() args: GameObjectOverridesFindUniqueArgs
  ): Promise<GameObjectOverrides | null> {
    const result = await this.service.gameObjectOverrides(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameObjectOverrides)
  @nestAccessControl.UseRoles({
    resource: "GameObjectOverrides",
    action: "delete",
    possession: "any",
  })
  async deleteGameObjectOverrides(
    @graphql.Args() args: DeleteGameObjectOverridesArgs
  ): Promise<GameObjectOverrides | null> {
    try {
      return await this.service.deleteGameObjectOverrides(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
