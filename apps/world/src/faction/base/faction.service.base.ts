/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Faction as PrismaFaction,
  PlayerFactionQuest as PrismaPlayerFactionQuest,
  PlayerFactionReputation as PrismaPlayerFactionReputation,
  PlayerFactionSpell as PrismaPlayerFactionSpell,
  PlayerFactionTitle as PrismaPlayerFactionTitle,
  PlayerFactionAchievement as PrismaPlayerFactionAchievement,
} from "@prisma/client";

export class FactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FactionCountArgs, "select">): Promise<number> {
    return this.prisma.faction.count(args);
  }

  async factions(args: Prisma.FactionFindManyArgs): Promise<PrismaFaction[]> {
    return this.prisma.faction.findMany(args);
  }
  async faction(
    args: Prisma.FactionFindUniqueArgs
  ): Promise<PrismaFaction | null> {
    return this.prisma.faction.findUnique(args);
  }
  async createFaction(args: Prisma.FactionCreateArgs): Promise<PrismaFaction> {
    return this.prisma.faction.create(args);
  }
  async updateFaction(args: Prisma.FactionUpdateArgs): Promise<PrismaFaction> {
    return this.prisma.faction.update(args);
  }
  async deleteFaction(args: Prisma.FactionDeleteArgs): Promise<PrismaFaction> {
    return this.prisma.faction.delete(args);
  }

  async findPlayerFactionQuests(
    parentId: string,
    args: Prisma.PlayerFactionQuestFindManyArgs
  ): Promise<PrismaPlayerFactionQuest[]> {
    return this.prisma.faction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionQuests(args);
  }

  async findPlayerFactionReputations(
    parentId: string,
    args: Prisma.PlayerFactionReputationFindManyArgs
  ): Promise<PrismaPlayerFactionReputation[]> {
    return this.prisma.faction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionReputations(args);
  }

  async findPlayerFactionSpells(
    parentId: string,
    args: Prisma.PlayerFactionSpellFindManyArgs
  ): Promise<PrismaPlayerFactionSpell[]> {
    return this.prisma.faction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionSpells(args);
  }

  async findPlayerFactionTitles(
    parentId: string,
    args: Prisma.PlayerFactionTitleFindManyArgs
  ): Promise<PrismaPlayerFactionTitle[]> {
    return this.prisma.faction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionTitles(args);
  }

  async getPlayerFactionAchievements(
    parentId: string
  ): Promise<PrismaPlayerFactionAchievement | null> {
    return this.prisma.faction
      .findUnique({
        where: { id: parentId },
      })
      .playerFactionAchievements();
  }
}
