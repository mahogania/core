/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Faction } from "./Faction";
import { FactionCountArgs } from "./FactionCountArgs";
import { FactionFindManyArgs } from "./FactionFindManyArgs";
import { FactionFindUniqueArgs } from "./FactionFindUniqueArgs";
import { CreateFactionArgs } from "./CreateFactionArgs";
import { UpdateFactionArgs } from "./UpdateFactionArgs";
import { DeleteFactionArgs } from "./DeleteFactionArgs";
import { PlayerFactionQuestFindManyArgs } from "../../playerFactionQuest/base/PlayerFactionQuestFindManyArgs";
import { PlayerFactionQuest } from "../../playerFactionQuest/base/PlayerFactionQuest";
import { PlayerFactionReputationFindManyArgs } from "../../playerFactionReputation/base/PlayerFactionReputationFindManyArgs";
import { PlayerFactionReputation } from "../../playerFactionReputation/base/PlayerFactionReputation";
import { PlayerFactionSpellFindManyArgs } from "../../playerFactionSpell/base/PlayerFactionSpellFindManyArgs";
import { PlayerFactionSpell } from "../../playerFactionSpell/base/PlayerFactionSpell";
import { PlayerFactionTitleFindManyArgs } from "../../playerFactionTitle/base/PlayerFactionTitleFindManyArgs";
import { PlayerFactionTitle } from "../../playerFactionTitle/base/PlayerFactionTitle";
import { PlayerFactionAchievement } from "../../playerFactionAchievement/base/PlayerFactionAchievement";
import { FactionService } from "../faction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Faction)
export class FactionResolverBase {
  constructor(
    protected readonly service: FactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "read",
    possession: "any",
  })
  async _factionsMeta(
    @graphql.Args() args: FactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Faction])
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "read",
    possession: "any",
  })
  async factions(
    @graphql.Args() args: FactionFindManyArgs
  ): Promise<Faction[]> {
    return this.service.factions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Faction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "read",
    possession: "own",
  })
  async faction(
    @graphql.Args() args: FactionFindUniqueArgs
  ): Promise<Faction | null> {
    const result = await this.service.faction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Faction)
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "create",
    possession: "any",
  })
  async createFaction(
    @graphql.Args() args: CreateFactionArgs
  ): Promise<Faction> {
    return await this.service.createFaction({
      ...args,
      data: {
        ...args.data,

        playerFactionAchievements: args.data.playerFactionAchievements
          ? {
              connect: args.data.playerFactionAchievements,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Faction)
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "update",
    possession: "any",
  })
  async updateFaction(
    @graphql.Args() args: UpdateFactionArgs
  ): Promise<Faction | null> {
    try {
      return await this.service.updateFaction({
        ...args,
        data: {
          ...args.data,

          playerFactionAchievements: args.data.playerFactionAchievements
            ? {
                connect: args.data.playerFactionAchievements,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Faction)
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "delete",
    possession: "any",
  })
  async deleteFaction(
    @graphql.Args() args: DeleteFactionArgs
  ): Promise<Faction | null> {
    try {
      return await this.service.deleteFaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PlayerFactionQuest], {
    name: "playerFactionQuests",
  })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionQuest",
    action: "read",
    possession: "any",
  })
  async findPlayerFactionQuests(
    @graphql.Parent() parent: Faction,
    @graphql.Args() args: PlayerFactionQuestFindManyArgs
  ): Promise<PlayerFactionQuest[]> {
    const results = await this.service.findPlayerFactionQuests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PlayerFactionReputation], {
    name: "playerFactionReputations",
  })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "read",
    possession: "any",
  })
  async findPlayerFactionReputations(
    @graphql.Parent() parent: Faction,
    @graphql.Args() args: PlayerFactionReputationFindManyArgs
  ): Promise<PlayerFactionReputation[]> {
    const results = await this.service.findPlayerFactionReputations(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PlayerFactionSpell], {
    name: "playerFactionSpells",
  })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "read",
    possession: "any",
  })
  async findPlayerFactionSpells(
    @graphql.Parent() parent: Faction,
    @graphql.Args() args: PlayerFactionSpellFindManyArgs
  ): Promise<PlayerFactionSpell[]> {
    const results = await this.service.findPlayerFactionSpells(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PlayerFactionTitle], {
    name: "playerFactionTitles",
  })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionTitle",
    action: "read",
    possession: "any",
  })
  async findPlayerFactionTitles(
    @graphql.Parent() parent: Faction,
    @graphql.Args() args: PlayerFactionTitleFindManyArgs
  ): Promise<PlayerFactionTitle[]> {
    const results = await this.service.findPlayerFactionTitles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PlayerFactionAchievement, {
    nullable: true,
    name: "playerFactionAchievements",
  })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "read",
    possession: "any",
  })
  async getPlayerFactionAchievements(
    @graphql.Parent() parent: Faction
  ): Promise<PlayerFactionAchievement | null> {
    const result = await this.service.getPlayerFactionAchievements(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
