/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PetLevelstatsService } from "../petLevelstats.service";
import { PetLevelstatsCreateInput } from "./PetLevelstatsCreateInput";
import { PetLevelstatsWhereInput } from "./PetLevelstatsWhereInput";
import { PetLevelstatsWhereUniqueInput } from "./PetLevelstatsWhereUniqueInput";
import { PetLevelstatsFindManyArgs } from "./PetLevelstatsFindManyArgs";
import { PetLevelstatsUpdateInput } from "./PetLevelstatsUpdateInput";
import { PetLevelstats } from "./PetLevelstats";

export class PetLevelstatsGrpcControllerBase {
  constructor(protected readonly service: PetLevelstatsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PetLevelstats })
  @GrpcMethod("PetLevelstatsService", "createPetLevelstats")
  async createPetLevelstats(
    @common.Body() data: PetLevelstatsCreateInput
  ): Promise<PetLevelstats> {
    return await this.service.createPetLevelstats({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PetLevelstats] })
  @ApiNestedQuery(PetLevelstatsFindManyArgs)
  @GrpcMethod("PetLevelstatsService", "petLevelstatsItems")
  async petLevelstatsItems(
    @common.Req() request: Request
  ): Promise<PetLevelstats[]> {
    const args = plainToClass(PetLevelstatsFindManyArgs, request.query);
    return this.service.petLevelstatsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PetLevelstats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PetLevelstatsService", "petLevelstats")
  async petLevelstats(
    @common.Param() params: PetLevelstatsWhereUniqueInput
  ): Promise<PetLevelstats | null> {
    const result = await this.service.petLevelstats({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PetLevelstats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PetLevelstatsService", "updatePetLevelstats")
  async updatePetLevelstats(
    @common.Param() params: PetLevelstatsWhereUniqueInput,
    @common.Body() data: PetLevelstatsUpdateInput
  ): Promise<PetLevelstats | null> {
    try {
      return await this.service.updatePetLevelstats({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PetLevelstats })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PetLevelstatsService", "deletePetLevelstats")
  async deletePetLevelstats(
    @common.Param() params: PetLevelstatsWhereUniqueInput
  ): Promise<PetLevelstats | null> {
    try {
      return await this.service.deletePetLevelstats({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
