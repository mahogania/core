/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEvent } from "./GameEvent";
import { GameEventCountArgs } from "./GameEventCountArgs";
import { GameEventFindManyArgs } from "./GameEventFindManyArgs";
import { GameEventFindUniqueArgs } from "./GameEventFindUniqueArgs";
import { CreateGameEventArgs } from "./CreateGameEventArgs";
import { UpdateGameEventArgs } from "./UpdateGameEventArgs";
import { DeleteGameEventArgs } from "./DeleteGameEventArgs";
import { GameEventService } from "../gameEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEvent)
export class GameEventResolverBase {
  constructor(
    protected readonly service: GameEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "read",
    possession: "any",
  })
  async _gameEventsMeta(
    @graphql.Args() args: GameEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEvent])
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "read",
    possession: "any",
  })
  async gameEvents(
    @graphql.Args() args: GameEventFindManyArgs
  ): Promise<GameEvent[]> {
    return this.service.gameEvents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "read",
    possession: "own",
  })
  async gameEvent(
    @graphql.Args() args: GameEventFindUniqueArgs
  ): Promise<GameEvent | null> {
    const result = await this.service.gameEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEvent)
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "create",
    possession: "any",
  })
  async createGameEvent(
    @graphql.Args() args: CreateGameEventArgs
  ): Promise<GameEvent> {
    return await this.service.createGameEvent({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEvent)
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "update",
    possession: "any",
  })
  async updateGameEvent(
    @graphql.Args() args: UpdateGameEventArgs
  ): Promise<GameEvent | null> {
    try {
      return await this.service.updateGameEvent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEvent)
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "delete",
    possession: "any",
  })
  async deleteGameEvent(
    @graphql.Args() args: DeleteGameEventArgs
  ): Promise<GameEvent | null> {
    try {
      return await this.service.deleteGameEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
