/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventService } from "../gameEvent.service";
import { GameEventCreateInput } from "./GameEventCreateInput";
import { GameEventWhereInput } from "./GameEventWhereInput";
import { GameEventWhereUniqueInput } from "./GameEventWhereUniqueInput";
import { GameEventFindManyArgs } from "./GameEventFindManyArgs";
import { GameEventUpdateInput } from "./GameEventUpdateInput";
import { GameEvent } from "./GameEvent";

export class GameEventGrpcControllerBase {
  constructor(protected readonly service: GameEventService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEvent })
  @GrpcMethod("GameEventService", "createGameEvent")
  async createGameEvent(
    @common.Body() data: GameEventCreateInput
  ): Promise<GameEvent> {
    return await this.service.createGameEvent({
      data: data,
      select: {
        announce: true,
        createdAt: true,
        description: true,
        endTime: true,
        eventEntry: true,
        holiday: true,
        holidayStage: true,
        id: true,
        length: true,
        occurence: true,
        startTime: true,
        updatedAt: true,
        worldEvent: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEvent] })
  @ApiNestedQuery(GameEventFindManyArgs)
  @GrpcMethod("GameEventService", "gameEvents")
  async gameEvents(@common.Req() request: Request): Promise<GameEvent[]> {
    const args = plainToClass(GameEventFindManyArgs, request.query);
    return this.service.gameEvents({
      ...args,
      select: {
        announce: true,
        createdAt: true,
        description: true,
        endTime: true,
        eventEntry: true,
        holiday: true,
        holidayStage: true,
        id: true,
        length: true,
        occurence: true,
        startTime: true,
        updatedAt: true,
        worldEvent: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventService", "gameEvent")
  async gameEvent(
    @common.Param() params: GameEventWhereUniqueInput
  ): Promise<GameEvent | null> {
    const result = await this.service.gameEvent({
      where: params,
      select: {
        announce: true,
        createdAt: true,
        description: true,
        endTime: true,
        eventEntry: true,
        holiday: true,
        holidayStage: true,
        id: true,
        length: true,
        occurence: true,
        startTime: true,
        updatedAt: true,
        worldEvent: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventService", "updateGameEvent")
  async updateGameEvent(
    @common.Param() params: GameEventWhereUniqueInput,
    @common.Body() data: GameEventUpdateInput
  ): Promise<GameEvent | null> {
    try {
      return await this.service.updateGameEvent({
        where: params,
        data: data,
        select: {
          announce: true,
          createdAt: true,
          description: true,
          endTime: true,
          eventEntry: true,
          holiday: true,
          holidayStage: true,
          id: true,
          length: true,
          occurence: true,
          startTime: true,
          updatedAt: true,
          worldEvent: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEvent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventService", "deleteGameEvent")
  async deleteGameEvent(
    @common.Param() params: GameEventWhereUniqueInput
  ): Promise<GameEvent | null> {
    try {
      return await this.service.deleteGameEvent({
        where: params,
        select: {
          announce: true,
          createdAt: true,
          description: true,
          endTime: true,
          eventEntry: true,
          holiday: true,
          holidayStage: true,
          id: true,
          length: true,
          occurence: true,
          startTime: true,
          updatedAt: true,
          worldEvent: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
