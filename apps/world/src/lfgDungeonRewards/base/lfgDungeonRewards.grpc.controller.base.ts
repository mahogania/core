/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { LfgDungeonRewardsService } from "../lfgDungeonRewards.service";
import { LfgDungeonRewardsCreateInput } from "./LfgDungeonRewardsCreateInput";
import { LfgDungeonRewardsWhereInput } from "./LfgDungeonRewardsWhereInput";
import { LfgDungeonRewardsWhereUniqueInput } from "./LfgDungeonRewardsWhereUniqueInput";
import { LfgDungeonRewardsFindManyArgs } from "./LfgDungeonRewardsFindManyArgs";
import { LfgDungeonRewardsUpdateInput } from "./LfgDungeonRewardsUpdateInput";
import { LfgDungeonRewards } from "./LfgDungeonRewards";

export class LfgDungeonRewardsGrpcControllerBase {
  constructor(protected readonly service: LfgDungeonRewardsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LfgDungeonRewards })
  @GrpcMethod("LfgDungeonRewardsService", "createLfgDungeonRewards")
  async createLfgDungeonRewards(
    @common.Body() data: LfgDungeonRewardsCreateInput
  ): Promise<LfgDungeonRewards> {
    return await this.service.createLfgDungeonRewards({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LfgDungeonRewards] })
  @ApiNestedQuery(LfgDungeonRewardsFindManyArgs)
  @GrpcMethod("LfgDungeonRewardsService", "lfgDungeonRewardsItems")
  async lfgDungeonRewardsItems(
    @common.Req() request: Request
  ): Promise<LfgDungeonRewards[]> {
    const args = plainToClass(LfgDungeonRewardsFindManyArgs, request.query);
    return this.service.lfgDungeonRewardsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LfgDungeonRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LfgDungeonRewardsService", "lfgDungeonRewards")
  async lfgDungeonRewards(
    @common.Param() params: LfgDungeonRewardsWhereUniqueInput
  ): Promise<LfgDungeonRewards | null> {
    const result = await this.service.lfgDungeonRewards({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LfgDungeonRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LfgDungeonRewardsService", "updateLfgDungeonRewards")
  async updateLfgDungeonRewards(
    @common.Param() params: LfgDungeonRewardsWhereUniqueInput,
    @common.Body() data: LfgDungeonRewardsUpdateInput
  ): Promise<LfgDungeonRewards | null> {
    try {
      return await this.service.updateLfgDungeonRewards({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LfgDungeonRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LfgDungeonRewardsService", "deleteLfgDungeonRewards")
  async deleteLfgDungeonRewards(
    @common.Param() params: LfgDungeonRewardsWhereUniqueInput
  ): Promise<LfgDungeonRewards | null> {
    try {
      return await this.service.deleteLfgDungeonRewards({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
