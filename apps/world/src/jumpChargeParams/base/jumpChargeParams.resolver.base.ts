/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { JumpChargeParams } from "./JumpChargeParams";
import { JumpChargeParamsCountArgs } from "./JumpChargeParamsCountArgs";
import { JumpChargeParamsFindManyArgs } from "./JumpChargeParamsFindManyArgs";
import { JumpChargeParamsFindUniqueArgs } from "./JumpChargeParamsFindUniqueArgs";
import { DeleteJumpChargeParamsArgs } from "./DeleteJumpChargeParamsArgs";
import { JumpChargeParamsService } from "../jumpChargeParams.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JumpChargeParams)
export class JumpChargeParamsResolverBase {
  constructor(
    protected readonly service: JumpChargeParamsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JumpChargeParams",
    action: "read",
    possession: "any",
  })
  async _jumpChargeParamsItemsMeta(
    @graphql.Args() args: JumpChargeParamsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JumpChargeParams])
  @nestAccessControl.UseRoles({
    resource: "JumpChargeParams",
    action: "read",
    possession: "any",
  })
  async jumpChargeParamsItems(
    @graphql.Args() args: JumpChargeParamsFindManyArgs
  ): Promise<JumpChargeParams[]> {
    return this.service.jumpChargeParamsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JumpChargeParams, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JumpChargeParams",
    action: "read",
    possession: "own",
  })
  async jumpChargeParams(
    @graphql.Args() args: JumpChargeParamsFindUniqueArgs
  ): Promise<JumpChargeParams | null> {
    const result = await this.service.jumpChargeParams(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JumpChargeParams)
  @nestAccessControl.UseRoles({
    resource: "JumpChargeParams",
    action: "delete",
    possession: "any",
  })
  async deleteJumpChargeParams(
    @graphql.Args() args: DeleteJumpChargeParamsArgs
  ): Promise<JumpChargeParams | null> {
    try {
      return await this.service.deleteJumpChargeParams(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
