/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { JumpChargeParamsService } from "../jumpChargeParams.service";
import { JumpChargeParamsCreateInput } from "./JumpChargeParamsCreateInput";
import { JumpChargeParamsWhereInput } from "./JumpChargeParamsWhereInput";
import { JumpChargeParamsWhereUniqueInput } from "./JumpChargeParamsWhereUniqueInput";
import { JumpChargeParamsFindManyArgs } from "./JumpChargeParamsFindManyArgs";
import { JumpChargeParamsUpdateInput } from "./JumpChargeParamsUpdateInput";
import { JumpChargeParams } from "./JumpChargeParams";

export class JumpChargeParamsGrpcControllerBase {
  constructor(protected readonly service: JumpChargeParamsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JumpChargeParams })
  @GrpcMethod("JumpChargeParamsService", "createJumpChargeParams")
  async createJumpChargeParams(
    @common.Body() data: JumpChargeParamsCreateInput
  ): Promise<JumpChargeParams> {
    return await this.service.createJumpChargeParams({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JumpChargeParams] })
  @ApiNestedQuery(JumpChargeParamsFindManyArgs)
  @GrpcMethod("JumpChargeParamsService", "jumpChargeParamsItems")
  async jumpChargeParamsItems(
    @common.Req() request: Request
  ): Promise<JumpChargeParams[]> {
    const args = plainToClass(JumpChargeParamsFindManyArgs, request.query);
    return this.service.jumpChargeParamsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JumpChargeParams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JumpChargeParamsService", "jumpChargeParams")
  async jumpChargeParams(
    @common.Param() params: JumpChargeParamsWhereUniqueInput
  ): Promise<JumpChargeParams | null> {
    const result = await this.service.jumpChargeParams({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JumpChargeParams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JumpChargeParamsService", "updateJumpChargeParams")
  async updateJumpChargeParams(
    @common.Param() params: JumpChargeParamsWhereUniqueInput,
    @common.Body() data: JumpChargeParamsUpdateInput
  ): Promise<JumpChargeParams | null> {
    try {
      return await this.service.updateJumpChargeParams({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JumpChargeParams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JumpChargeParamsService", "deleteJumpChargeParams")
  async deleteJumpChargeParams(
    @common.Param() params: JumpChargeParamsWhereUniqueInput
  ): Promise<JumpChargeParams | null> {
    try {
      return await this.service.deleteJumpChargeParams({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
