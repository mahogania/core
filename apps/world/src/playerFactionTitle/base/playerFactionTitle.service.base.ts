/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlayerFactionTitle as PrismaPlayerFactionTitle,
  Faction as PrismaFaction,
  Player as PrismaPlayer,
} from "@prisma/client";

export class PlayerFactionTitleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerFactionTitleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerFactionTitle.count(args);
  }

  async playerFactionTitles(
    args: Prisma.PlayerFactionTitleFindManyArgs
  ): Promise<PrismaPlayerFactionTitle[]> {
    return this.prisma.playerFactionTitle.findMany(args);
  }
  async playerFactionTitle(
    args: Prisma.PlayerFactionTitleFindUniqueArgs
  ): Promise<PrismaPlayerFactionTitle | null> {
    return this.prisma.playerFactionTitle.findUnique(args);
  }
  async createPlayerFactionTitle(
    args: Prisma.PlayerFactionTitleCreateArgs
  ): Promise<PrismaPlayerFactionTitle> {
    return this.prisma.playerFactionTitle.create(args);
  }
  async updatePlayerFactionTitle(
    args: Prisma.PlayerFactionTitleUpdateArgs
  ): Promise<PrismaPlayerFactionTitle> {
    return this.prisma.playerFactionTitle.update(args);
  }
  async deletePlayerFactionTitle(
    args: Prisma.PlayerFactionTitleDeleteArgs
  ): Promise<PrismaPlayerFactionTitle> {
    return this.prisma.playerFactionTitle.delete(args);
  }

  async getFaction(parentId: string): Promise<PrismaFaction | null> {
    return this.prisma.playerFactionTitle
      .findUnique({
        where: { id: parentId },
      })
      .faction();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.playerFactionTitle
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
