/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventPoolService } from "../gameEventPool.service";
import { GameEventPoolCreateInput } from "./GameEventPoolCreateInput";
import { GameEventPoolWhereInput } from "./GameEventPoolWhereInput";
import { GameEventPoolWhereUniqueInput } from "./GameEventPoolWhereUniqueInput";
import { GameEventPoolFindManyArgs } from "./GameEventPoolFindManyArgs";
import { GameEventPoolUpdateInput } from "./GameEventPoolUpdateInput";
import { GameEventPool } from "./GameEventPool";

export class GameEventPoolGrpcControllerBase {
  constructor(protected readonly service: GameEventPoolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventPool })
  @GrpcMethod("GameEventPoolService", "createGameEventPool")
  async createGameEventPool(
    @common.Body() data: GameEventPoolCreateInput
  ): Promise<GameEventPool> {
    return await this.service.createGameEventPool({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        poolEntry: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventPool] })
  @ApiNestedQuery(GameEventPoolFindManyArgs)
  @GrpcMethod("GameEventPoolService", "gameEventPools")
  async gameEventPools(
    @common.Req() request: Request
  ): Promise<GameEventPool[]> {
    const args = plainToClass(GameEventPoolFindManyArgs, request.query);
    return this.service.gameEventPools({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        poolEntry: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventPool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventPoolService", "gameEventPool")
  async gameEventPool(
    @common.Param() params: GameEventPoolWhereUniqueInput
  ): Promise<GameEventPool | null> {
    const result = await this.service.gameEventPool({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        poolEntry: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventPool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventPoolService", "updateGameEventPool")
  async updateGameEventPool(
    @common.Param() params: GameEventPoolWhereUniqueInput,
    @common.Body() data: GameEventPoolUpdateInput
  ): Promise<GameEventPool | null> {
    try {
      return await this.service.updateGameEventPool({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          poolEntry: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventPool })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventPoolService", "deleteGameEventPool")
  async deleteGameEventPool(
    @common.Param() params: GameEventPoolWhereUniqueInput
  ): Promise<GameEventPool | null> {
    try {
      return await this.service.deleteGameEventPool({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          poolEntry: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
