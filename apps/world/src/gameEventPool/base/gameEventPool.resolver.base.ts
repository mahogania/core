/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventPool } from "./GameEventPool";
import { GameEventPoolCountArgs } from "./GameEventPoolCountArgs";
import { GameEventPoolFindManyArgs } from "./GameEventPoolFindManyArgs";
import { GameEventPoolFindUniqueArgs } from "./GameEventPoolFindUniqueArgs";
import { CreateGameEventPoolArgs } from "./CreateGameEventPoolArgs";
import { UpdateGameEventPoolArgs } from "./UpdateGameEventPoolArgs";
import { DeleteGameEventPoolArgs } from "./DeleteGameEventPoolArgs";
import { GameEventPoolService } from "../gameEventPool.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventPool)
export class GameEventPoolResolverBase {
  constructor(
    protected readonly service: GameEventPoolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventPool",
    action: "read",
    possession: "any",
  })
  async _gameEventPoolsMeta(
    @graphql.Args() args: GameEventPoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventPool])
  @nestAccessControl.UseRoles({
    resource: "GameEventPool",
    action: "read",
    possession: "any",
  })
  async gameEventPools(
    @graphql.Args() args: GameEventPoolFindManyArgs
  ): Promise<GameEventPool[]> {
    return this.service.gameEventPools(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventPool, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventPool",
    action: "read",
    possession: "own",
  })
  async gameEventPool(
    @graphql.Args() args: GameEventPoolFindUniqueArgs
  ): Promise<GameEventPool | null> {
    const result = await this.service.gameEventPool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventPool)
  @nestAccessControl.UseRoles({
    resource: "GameEventPool",
    action: "create",
    possession: "any",
  })
  async createGameEventPool(
    @graphql.Args() args: CreateGameEventPoolArgs
  ): Promise<GameEventPool> {
    return await this.service.createGameEventPool({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventPool)
  @nestAccessControl.UseRoles({
    resource: "GameEventPool",
    action: "update",
    possession: "any",
  })
  async updateGameEventPool(
    @graphql.Args() args: UpdateGameEventPoolArgs
  ): Promise<GameEventPool | null> {
    try {
      return await this.service.updateGameEventPool({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventPool)
  @nestAccessControl.UseRoles({
    resource: "GameEventPool",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventPool(
    @graphql.Args() args: DeleteGameEventPoolArgs
  ): Promise<GameEventPool | null> {
    try {
      return await this.service.deleteGameEventPool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
