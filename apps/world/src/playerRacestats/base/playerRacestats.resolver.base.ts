/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlayerRacestats } from "./PlayerRacestats";
import { PlayerRacestatsCountArgs } from "./PlayerRacestatsCountArgs";
import { PlayerRacestatsFindManyArgs } from "./PlayerRacestatsFindManyArgs";
import { PlayerRacestatsFindUniqueArgs } from "./PlayerRacestatsFindUniqueArgs";
import { DeletePlayerRacestatsArgs } from "./DeletePlayerRacestatsArgs";
import { PlayerRacestatsService } from "../playerRacestats.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerRacestats)
export class PlayerRacestatsResolverBase {
  constructor(
    protected readonly service: PlayerRacestatsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerRacestats",
    action: "read",
    possession: "any",
  })
  async _playerRacestatsItemsMeta(
    @graphql.Args() args: PlayerRacestatsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerRacestats])
  @nestAccessControl.UseRoles({
    resource: "PlayerRacestats",
    action: "read",
    possession: "any",
  })
  async playerRacestatsItems(
    @graphql.Args() args: PlayerRacestatsFindManyArgs
  ): Promise<PlayerRacestats[]> {
    return this.service.playerRacestatsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerRacestats, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerRacestats",
    action: "read",
    possession: "own",
  })
  async playerRacestats(
    @graphql.Args() args: PlayerRacestatsFindUniqueArgs
  ): Promise<PlayerRacestats | null> {
    const result = await this.service.playerRacestats(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerRacestats)
  @nestAccessControl.UseRoles({
    resource: "PlayerRacestats",
    action: "delete",
    possession: "any",
  })
  async deletePlayerRacestats(
    @graphql.Args() args: DeletePlayerRacestatsArgs
  ): Promise<PlayerRacestats | null> {
    try {
      return await this.service.deletePlayerRacestats(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
