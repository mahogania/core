/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlayerRacestats as PrismaPlayerRacestats,
} from "@prisma/client";

export class PlayerRacestatsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerRacestatsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerRacestats.count(args);
  }

  async playerRacestatsItems(
    args: Prisma.PlayerRacestatsFindManyArgs
  ): Promise<PrismaPlayerRacestats[]> {
    return this.prisma.playerRacestats.findMany(args);
  }
  async playerRacestats(
    args: Prisma.PlayerRacestatsFindUniqueArgs
  ): Promise<PrismaPlayerRacestats | null> {
    return this.prisma.playerRacestats.findUnique(args);
  }
  async createPlayerRacestats(
    args: Prisma.PlayerRacestatsCreateArgs
  ): Promise<PrismaPlayerRacestats> {
    return this.prisma.playerRacestats.create(args);
  }
  async updatePlayerRacestats(
    args: Prisma.PlayerRacestatsUpdateArgs
  ): Promise<PrismaPlayerRacestats> {
    return this.prisma.playerRacestats.update(args);
  }
  async deletePlayerRacestats(
    args: Prisma.PlayerRacestatsDeleteArgs
  ): Promise<PrismaPlayerRacestats> {
    return this.prisma.playerRacestats.delete(args);
  }
}
