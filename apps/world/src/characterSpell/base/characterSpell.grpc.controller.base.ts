/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CharacterSpellService } from "../characterSpell.service";
import { CharacterSpellCreateInput } from "./CharacterSpellCreateInput";
import { CharacterSpellWhereInput } from "./CharacterSpellWhereInput";
import { CharacterSpellWhereUniqueInput } from "./CharacterSpellWhereUniqueInput";
import { CharacterSpellFindManyArgs } from "./CharacterSpellFindManyArgs";
import { CharacterSpellUpdateInput } from "./CharacterSpellUpdateInput";
import { CharacterSpell } from "./CharacterSpell";
import { CharacterFindManyArgs } from "../../character/base/CharacterFindManyArgs";
import { Character } from "../../character/base/Character";
import { CharacterWhereUniqueInput } from "../../character/base/CharacterWhereUniqueInput";

export class CharacterSpellGrpcControllerBase {
  constructor(protected readonly service: CharacterSpellService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CharacterSpell })
  @GrpcMethod("CharacterSpellService", "createCharacterSpell")
  async createCharacterSpell(
    @common.Body() data: CharacterSpellCreateInput
  ): Promise<CharacterSpell> {
    return await this.service.createCharacterSpell({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CharacterSpell] })
  @ApiNestedQuery(CharacterSpellFindManyArgs)
  @GrpcMethod("CharacterSpellService", "characterSpells")
  async characterSpells(
    @common.Req() request: Request
  ): Promise<CharacterSpell[]> {
    const args = plainToClass(CharacterSpellFindManyArgs, request.query);
    return this.service.characterSpells({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CharacterSpell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CharacterSpellService", "characterSpell")
  async characterSpell(
    @common.Param() params: CharacterSpellWhereUniqueInput
  ): Promise<CharacterSpell | null> {
    const result = await this.service.characterSpell({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CharacterSpell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CharacterSpellService", "updateCharacterSpell")
  async updateCharacterSpell(
    @common.Param() params: CharacterSpellWhereUniqueInput,
    @common.Body() data: CharacterSpellUpdateInput
  ): Promise<CharacterSpell | null> {
    try {
      return await this.service.updateCharacterSpell({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CharacterSpell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CharacterSpellService", "deleteCharacterSpell")
  async deleteCharacterSpell(
    @common.Param() params: CharacterSpellWhereUniqueInput
  ): Promise<CharacterSpell | null> {
    try {
      return await this.service.deleteCharacterSpell({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/characters")
  @ApiNestedQuery(CharacterFindManyArgs)
  @GrpcMethod("CharacterSpellService", "findManyCharacters")
  async findManyCharacters(
    @common.Req() request: Request,
    @common.Param() params: CharacterSpellWhereUniqueInput
  ): Promise<Character[]> {
    const query = plainToClass(CharacterFindManyArgs, request.query);
    const results = await this.service.findCharacters(params.id, {
      ...query,
      select: {
        characterSpells: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/characters")
  @GrpcMethod("CharacterSpellService", "connectCharacters")
  async connectCharacters(
    @common.Param() params: CharacterSpellWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        connect: body,
      },
    };
    await this.service.updateCharacterSpell({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/characters")
  @GrpcMethod("CharacterSpellService", "updateCharacters")
  async updateCharacters(
    @common.Param() params: CharacterSpellWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        set: body,
      },
    };
    await this.service.updateCharacterSpell({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/characters")
  @GrpcMethod("CharacterSpellService", "disconnectCharacters")
  async disconnectCharacters(
    @common.Param() params: CharacterSpellWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        disconnect: body,
      },
    };
    await this.service.updateCharacterSpell({
      where: params,
      data,
      select: { id: true },
    });
  }
}
