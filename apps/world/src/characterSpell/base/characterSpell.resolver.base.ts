/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CharacterSpell } from "./CharacterSpell";
import { CharacterSpellCountArgs } from "./CharacterSpellCountArgs";
import { CharacterSpellFindManyArgs } from "./CharacterSpellFindManyArgs";
import { CharacterSpellFindUniqueArgs } from "./CharacterSpellFindUniqueArgs";
import { CreateCharacterSpellArgs } from "./CreateCharacterSpellArgs";
import { UpdateCharacterSpellArgs } from "./UpdateCharacterSpellArgs";
import { DeleteCharacterSpellArgs } from "./DeleteCharacterSpellArgs";
import { CharacterFindManyArgs } from "../../character/base/CharacterFindManyArgs";
import { Character } from "../../character/base/Character";
import { CharacterSpellService } from "../characterSpell.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CharacterSpell)
export class CharacterSpellResolverBase {
  constructor(
    protected readonly service: CharacterSpellService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CharacterSpell",
    action: "read",
    possession: "any",
  })
  async _characterSpellsMeta(
    @graphql.Args() args: CharacterSpellCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CharacterSpell])
  @nestAccessControl.UseRoles({
    resource: "CharacterSpell",
    action: "read",
    possession: "any",
  })
  async characterSpells(
    @graphql.Args() args: CharacterSpellFindManyArgs
  ): Promise<CharacterSpell[]> {
    return this.service.characterSpells(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CharacterSpell, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CharacterSpell",
    action: "read",
    possession: "own",
  })
  async characterSpell(
    @graphql.Args() args: CharacterSpellFindUniqueArgs
  ): Promise<CharacterSpell | null> {
    const result = await this.service.characterSpell(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CharacterSpell)
  @nestAccessControl.UseRoles({
    resource: "CharacterSpell",
    action: "create",
    possession: "any",
  })
  async createCharacterSpell(
    @graphql.Args() args: CreateCharacterSpellArgs
  ): Promise<CharacterSpell> {
    return await this.service.createCharacterSpell({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CharacterSpell)
  @nestAccessControl.UseRoles({
    resource: "CharacterSpell",
    action: "update",
    possession: "any",
  })
  async updateCharacterSpell(
    @graphql.Args() args: UpdateCharacterSpellArgs
  ): Promise<CharacterSpell | null> {
    try {
      return await this.service.updateCharacterSpell({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CharacterSpell)
  @nestAccessControl.UseRoles({
    resource: "CharacterSpell",
    action: "delete",
    possession: "any",
  })
  async deleteCharacterSpell(
    @graphql.Args() args: DeleteCharacterSpellArgs
  ): Promise<CharacterSpell | null> {
    try {
      return await this.service.deleteCharacterSpell(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Character], { name: "characters" })
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "any",
  })
  async findCharacters(
    @graphql.Parent() parent: CharacterSpell,
    @graphql.Args() args: CharacterFindManyArgs
  ): Promise<Character[]> {
    const results = await this.service.findCharacters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
