/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemLootTemplate as PrismaItemLootTemplate,
} from "@prisma/client";

export class ItemLootTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemLootTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemLootTemplate.count(args);
  }

  async itemLootTemplates(
    args: Prisma.ItemLootTemplateFindManyArgs
  ): Promise<PrismaItemLootTemplate[]> {
    return this.prisma.itemLootTemplate.findMany(args);
  }
  async itemLootTemplate(
    args: Prisma.ItemLootTemplateFindUniqueArgs
  ): Promise<PrismaItemLootTemplate | null> {
    return this.prisma.itemLootTemplate.findUnique(args);
  }
  async createItemLootTemplate(
    args: Prisma.ItemLootTemplateCreateArgs
  ): Promise<PrismaItemLootTemplate> {
    return this.prisma.itemLootTemplate.create(args);
  }
  async updateItemLootTemplate(
    args: Prisma.ItemLootTemplateUpdateArgs
  ): Promise<PrismaItemLootTemplate> {
    return this.prisma.itemLootTemplate.update(args);
  }
  async deleteItemLootTemplate(
    args: Prisma.ItemLootTemplateDeleteArgs
  ): Promise<PrismaItemLootTemplate> {
    return this.prisma.itemLootTemplate.delete(args);
  }
}
