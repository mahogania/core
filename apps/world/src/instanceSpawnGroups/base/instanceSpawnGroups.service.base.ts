/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  InstanceSpawnGroups as PrismaInstanceSpawnGroups,
} from "@prisma/client";

export class InstanceSpawnGroupsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstanceSpawnGroupsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.instanceSpawnGroups.count(args);
  }

  async instanceSpawnGroupsItems(
    args: Prisma.InstanceSpawnGroupsFindManyArgs
  ): Promise<PrismaInstanceSpawnGroups[]> {
    return this.prisma.instanceSpawnGroups.findMany(args);
  }
  async instanceSpawnGroups(
    args: Prisma.InstanceSpawnGroupsFindUniqueArgs
  ): Promise<PrismaInstanceSpawnGroups | null> {
    return this.prisma.instanceSpawnGroups.findUnique(args);
  }
  async createInstanceSpawnGroups(
    args: Prisma.InstanceSpawnGroupsCreateArgs
  ): Promise<PrismaInstanceSpawnGroups> {
    return this.prisma.instanceSpawnGroups.create(args);
  }
  async updateInstanceSpawnGroups(
    args: Prisma.InstanceSpawnGroupsUpdateArgs
  ): Promise<PrismaInstanceSpawnGroups> {
    return this.prisma.instanceSpawnGroups.update(args);
  }
  async deleteInstanceSpawnGroups(
    args: Prisma.InstanceSpawnGroupsDeleteArgs
  ): Promise<PrismaInstanceSpawnGroups> {
    return this.prisma.instanceSpawnGroups.delete(args);
  }
}
