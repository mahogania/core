/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { InstanceSpawnGroupsService } from "../instanceSpawnGroups.service";
import { InstanceSpawnGroupsCreateInput } from "./InstanceSpawnGroupsCreateInput";
import { InstanceSpawnGroupsWhereInput } from "./InstanceSpawnGroupsWhereInput";
import { InstanceSpawnGroupsWhereUniqueInput } from "./InstanceSpawnGroupsWhereUniqueInput";
import { InstanceSpawnGroupsFindManyArgs } from "./InstanceSpawnGroupsFindManyArgs";
import { InstanceSpawnGroupsUpdateInput } from "./InstanceSpawnGroupsUpdateInput";
import { InstanceSpawnGroups } from "./InstanceSpawnGroups";

export class InstanceSpawnGroupsGrpcControllerBase {
  constructor(protected readonly service: InstanceSpawnGroupsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InstanceSpawnGroups })
  @GrpcMethod("InstanceSpawnGroupsService", "createInstanceSpawnGroups")
  async createInstanceSpawnGroups(
    @common.Body() data: InstanceSpawnGroupsCreateInput
  ): Promise<InstanceSpawnGroups> {
    return await this.service.createInstanceSpawnGroups({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InstanceSpawnGroups] })
  @ApiNestedQuery(InstanceSpawnGroupsFindManyArgs)
  @GrpcMethod("InstanceSpawnGroupsService", "instanceSpawnGroupsItems")
  async instanceSpawnGroupsItems(
    @common.Req() request: Request
  ): Promise<InstanceSpawnGroups[]> {
    const args = plainToClass(InstanceSpawnGroupsFindManyArgs, request.query);
    return this.service.instanceSpawnGroupsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InstanceSpawnGroups })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceSpawnGroupsService", "instanceSpawnGroups")
  async instanceSpawnGroups(
    @common.Param() params: InstanceSpawnGroupsWhereUniqueInput
  ): Promise<InstanceSpawnGroups | null> {
    const result = await this.service.instanceSpawnGroups({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InstanceSpawnGroups })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceSpawnGroupsService", "updateInstanceSpawnGroups")
  async updateInstanceSpawnGroups(
    @common.Param() params: InstanceSpawnGroupsWhereUniqueInput,
    @common.Body() data: InstanceSpawnGroupsUpdateInput
  ): Promise<InstanceSpawnGroups | null> {
    try {
      return await this.service.updateInstanceSpawnGroups({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InstanceSpawnGroups })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InstanceSpawnGroupsService", "deleteInstanceSpawnGroups")
  async deleteInstanceSpawnGroups(
    @common.Param() params: InstanceSpawnGroupsWhereUniqueInput
  ): Promise<InstanceSpawnGroups | null> {
    try {
      return await this.service.deleteInstanceSpawnGroups({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
