/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameObjectLootTemplateService } from "../gameObjectLootTemplate.service";
import { GameObjectLootTemplateCreateInput } from "./GameObjectLootTemplateCreateInput";
import { GameObjectLootTemplateWhereInput } from "./GameObjectLootTemplateWhereInput";
import { GameObjectLootTemplateWhereUniqueInput } from "./GameObjectLootTemplateWhereUniqueInput";
import { GameObjectLootTemplateFindManyArgs } from "./GameObjectLootTemplateFindManyArgs";
import { GameObjectLootTemplateUpdateInput } from "./GameObjectLootTemplateUpdateInput";
import { GameObjectLootTemplate } from "./GameObjectLootTemplate";

export class GameObjectLootTemplateGrpcControllerBase {
  constructor(protected readonly service: GameObjectLootTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameObjectLootTemplate })
  @GrpcMethod("GameObjectLootTemplateService", "createGameObjectLootTemplate")
  async createGameObjectLootTemplate(
    @common.Body() data: GameObjectLootTemplateCreateInput
  ): Promise<GameObjectLootTemplate> {
    return await this.service.createGameObjectLootTemplate({
      data: data,
      select: {
        chance: true,
        comment: true,
        createdAt: true,
        entry: true,
        groupId: true,
        id: true,
        item: true,
        lootMode: true,
        maxCount: true,
        minCount: true,
        questRequired: true,
        reference: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameObjectLootTemplate] })
  @ApiNestedQuery(GameObjectLootTemplateFindManyArgs)
  @GrpcMethod("GameObjectLootTemplateService", "gameObjectLootTemplates")
  async gameObjectLootTemplates(
    @common.Req() request: Request
  ): Promise<GameObjectLootTemplate[]> {
    const args = plainToClass(
      GameObjectLootTemplateFindManyArgs,
      request.query
    );
    return this.service.gameObjectLootTemplates({
      ...args,
      select: {
        chance: true,
        comment: true,
        createdAt: true,
        entry: true,
        groupId: true,
        id: true,
        item: true,
        lootMode: true,
        maxCount: true,
        minCount: true,
        questRequired: true,
        reference: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameObjectLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectLootTemplateService", "gameObjectLootTemplate")
  async gameObjectLootTemplate(
    @common.Param() params: GameObjectLootTemplateWhereUniqueInput
  ): Promise<GameObjectLootTemplate | null> {
    const result = await this.service.gameObjectLootTemplate({
      where: params,
      select: {
        chance: true,
        comment: true,
        createdAt: true,
        entry: true,
        groupId: true,
        id: true,
        item: true,
        lootMode: true,
        maxCount: true,
        minCount: true,
        questRequired: true,
        reference: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameObjectLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectLootTemplateService", "updateGameObjectLootTemplate")
  async updateGameObjectLootTemplate(
    @common.Param() params: GameObjectLootTemplateWhereUniqueInput,
    @common.Body() data: GameObjectLootTemplateUpdateInput
  ): Promise<GameObjectLootTemplate | null> {
    try {
      return await this.service.updateGameObjectLootTemplate({
        where: params,
        data: data,
        select: {
          chance: true,
          comment: true,
          createdAt: true,
          entry: true,
          groupId: true,
          id: true,
          item: true,
          lootMode: true,
          maxCount: true,
          minCount: true,
          questRequired: true,
          reference: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameObjectLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectLootTemplateService", "deleteGameObjectLootTemplate")
  async deleteGameObjectLootTemplate(
    @common.Param() params: GameObjectLootTemplateWhereUniqueInput
  ): Promise<GameObjectLootTemplate | null> {
    try {
      return await this.service.deleteGameObjectLootTemplate({
        where: params,
        select: {
          chance: true,
          comment: true,
          createdAt: true,
          entry: true,
          groupId: true,
          id: true,
          item: true,
          lootMode: true,
          maxCount: true,
          minCount: true,
          questRequired: true,
          reference: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
