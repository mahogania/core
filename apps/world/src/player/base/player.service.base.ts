/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Player as PrismaPlayer,
  PlayerFactionAchievement as PrismaPlayerFactionAchievement,
  Achievement as PrismaAchievement,
  PlayerCraft as PrismaPlayerCraft,
  PlayerFactionQuest as PrismaPlayerFactionQuest,
  PlayerFactionReputation as PrismaPlayerFactionReputation,
  PlayerFactionSpell as PrismaPlayerFactionSpell,
  PlayerFactionTitle as PrismaPlayerFactionTitle,
  PlayerXpForLevel as PrismaPlayerXpForLevel,
  Response as PrismaResponse,
  GeneStat as PrismaGeneStat,
} from "@prisma/client";

export class PlayerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlayerCountArgs, "select">): Promise<number> {
    return this.prisma.player.count(args);
  }

  async players(args: Prisma.PlayerFindManyArgs): Promise<PrismaPlayer[]> {
    return this.prisma.player.findMany(args);
  }
  async player(
    args: Prisma.PlayerFindUniqueArgs
  ): Promise<PrismaPlayer | null> {
    return this.prisma.player.findUnique(args);
  }
  async createPlayer(args: Prisma.PlayerCreateArgs): Promise<PrismaPlayer> {
    return this.prisma.player.create(args);
  }
  async updatePlayer(args: Prisma.PlayerUpdateArgs): Promise<PrismaPlayer> {
    return this.prisma.player.update(args);
  }
  async deletePlayer(args: Prisma.PlayerDeleteArgs): Promise<PrismaPlayer> {
    return this.prisma.player.delete(args);
  }

  async findPlayerFactionAchievements(
    parentId: string,
    args: Prisma.PlayerFactionAchievementFindManyArgs
  ): Promise<PrismaPlayerFactionAchievement[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .PlayerFactionAchievements(args);
  }

  async findAchievements(
    parentId: string,
    args: Prisma.AchievementFindManyArgs
  ): Promise<PrismaAchievement[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .achievements(args);
  }

  async findPlayerCrafts(
    parentId: string,
    args: Prisma.PlayerCraftFindManyArgs
  ): Promise<PrismaPlayerCraft[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerCrafts(args);
  }

  async findPlayerFactionQuests(
    parentId: string,
    args: Prisma.PlayerFactionQuestFindManyArgs
  ): Promise<PrismaPlayerFactionQuest[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionQuests(args);
  }

  async findPlayerFactionReputations(
    parentId: string,
    args: Prisma.PlayerFactionReputationFindManyArgs
  ): Promise<PrismaPlayerFactionReputation[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionReputations(args);
  }

  async findPlayerFactionSpells(
    parentId: string,
    args: Prisma.PlayerFactionSpellFindManyArgs
  ): Promise<PrismaPlayerFactionSpell[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionSpells(args);
  }

  async findPlayerFactionTitles(
    parentId: string,
    args: Prisma.PlayerFactionTitleFindManyArgs
  ): Promise<PrismaPlayerFactionTitle[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerFactionTitles(args);
  }

  async findPlayerXpForLevels(
    parentId: string,
    args: Prisma.PlayerXpForLevelFindManyArgs
  ): Promise<PrismaPlayerXpForLevel[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerXpForLevels(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.ResponseFindManyArgs
  ): Promise<PrismaResponse[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }

  async getGeneStats(parentId: string): Promise<PrismaGeneStat | null> {
    return this.prisma.player
      .findUnique({
        where: { id: parentId },
      })
      .geneStats();
  }
}
