/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { NpcSpellclickSpellsService } from "../npcSpellclickSpells.service";
import { NpcSpellclickSpellsCreateInput } from "./NpcSpellclickSpellsCreateInput";
import { NpcSpellclickSpellsWhereInput } from "./NpcSpellclickSpellsWhereInput";
import { NpcSpellclickSpellsWhereUniqueInput } from "./NpcSpellclickSpellsWhereUniqueInput";
import { NpcSpellclickSpellsFindManyArgs } from "./NpcSpellclickSpellsFindManyArgs";
import { NpcSpellclickSpellsUpdateInput } from "./NpcSpellclickSpellsUpdateInput";
import { NpcSpellclickSpells } from "./NpcSpellclickSpells";

export class NpcSpellclickSpellsGrpcControllerBase {
  constructor(protected readonly service: NpcSpellclickSpellsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NpcSpellclickSpells })
  @GrpcMethod("NpcSpellclickSpellsService", "createNpcSpellclickSpells")
  async createNpcSpellclickSpells(
    @common.Body() data: NpcSpellclickSpellsCreateInput
  ): Promise<NpcSpellclickSpells> {
    return await this.service.createNpcSpellclickSpells({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NpcSpellclickSpells] })
  @ApiNestedQuery(NpcSpellclickSpellsFindManyArgs)
  @GrpcMethod("NpcSpellclickSpellsService", "npcSpellclickSpellsItems")
  async npcSpellclickSpellsItems(
    @common.Req() request: Request
  ): Promise<NpcSpellclickSpells[]> {
    const args = plainToClass(NpcSpellclickSpellsFindManyArgs, request.query);
    return this.service.npcSpellclickSpellsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NpcSpellclickSpells })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("NpcSpellclickSpellsService", "npcSpellclickSpells")
  async npcSpellclickSpells(
    @common.Param() params: NpcSpellclickSpellsWhereUniqueInput
  ): Promise<NpcSpellclickSpells | null> {
    const result = await this.service.npcSpellclickSpells({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NpcSpellclickSpells })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("NpcSpellclickSpellsService", "updateNpcSpellclickSpells")
  async updateNpcSpellclickSpells(
    @common.Param() params: NpcSpellclickSpellsWhereUniqueInput,
    @common.Body() data: NpcSpellclickSpellsUpdateInput
  ): Promise<NpcSpellclickSpells | null> {
    try {
      return await this.service.updateNpcSpellclickSpells({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NpcSpellclickSpells })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("NpcSpellclickSpellsService", "deleteNpcSpellclickSpells")
  async deleteNpcSpellclickSpells(
    @common.Param() params: NpcSpellclickSpellsWhereUniqueInput
  ): Promise<NpcSpellclickSpells | null> {
    try {
      return await this.service.deleteNpcSpellclickSpells({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
