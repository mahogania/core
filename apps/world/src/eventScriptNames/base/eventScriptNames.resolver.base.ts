/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EventScriptNames } from "./EventScriptNames";
import { EventScriptNamesCountArgs } from "./EventScriptNamesCountArgs";
import { EventScriptNamesFindManyArgs } from "./EventScriptNamesFindManyArgs";
import { EventScriptNamesFindUniqueArgs } from "./EventScriptNamesFindUniqueArgs";
import { CreateEventScriptNamesArgs } from "./CreateEventScriptNamesArgs";
import { UpdateEventScriptNamesArgs } from "./UpdateEventScriptNamesArgs";
import { DeleteEventScriptNamesArgs } from "./DeleteEventScriptNamesArgs";
import { EventScriptNamesService } from "../eventScriptNames.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EventScriptNames)
export class EventScriptNamesResolverBase {
  constructor(
    protected readonly service: EventScriptNamesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EventScriptNames",
    action: "read",
    possession: "any",
  })
  async _eventScriptNamesItemsMeta(
    @graphql.Args() args: EventScriptNamesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EventScriptNames])
  @nestAccessControl.UseRoles({
    resource: "EventScriptNames",
    action: "read",
    possession: "any",
  })
  async eventScriptNamesItems(
    @graphql.Args() args: EventScriptNamesFindManyArgs
  ): Promise<EventScriptNames[]> {
    return this.service.eventScriptNamesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EventScriptNames, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EventScriptNames",
    action: "read",
    possession: "own",
  })
  async eventScriptNames(
    @graphql.Args() args: EventScriptNamesFindUniqueArgs
  ): Promise<EventScriptNames | null> {
    const result = await this.service.eventScriptNames(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventScriptNames)
  @nestAccessControl.UseRoles({
    resource: "EventScriptNames",
    action: "create",
    possession: "any",
  })
  async createEventScriptNames(
    @graphql.Args() args: CreateEventScriptNamesArgs
  ): Promise<EventScriptNames> {
    return await this.service.createEventScriptNames({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventScriptNames)
  @nestAccessControl.UseRoles({
    resource: "EventScriptNames",
    action: "update",
    possession: "any",
  })
  async updateEventScriptNames(
    @graphql.Args() args: UpdateEventScriptNamesArgs
  ): Promise<EventScriptNames | null> {
    try {
      return await this.service.updateEventScriptNames({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventScriptNames)
  @nestAccessControl.UseRoles({
    resource: "EventScriptNames",
    action: "delete",
    possession: "any",
  })
  async deleteEventScriptNames(
    @graphql.Args() args: DeleteEventScriptNamesArgs
  ): Promise<EventScriptNames | null> {
    try {
      return await this.service.deleteEventScriptNames(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
