/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EventScriptNamesService } from "../eventScriptNames.service";
import { EventScriptNamesCreateInput } from "./EventScriptNamesCreateInput";
import { EventScriptNamesWhereInput } from "./EventScriptNamesWhereInput";
import { EventScriptNamesWhereUniqueInput } from "./EventScriptNamesWhereUniqueInput";
import { EventScriptNamesFindManyArgs } from "./EventScriptNamesFindManyArgs";
import { EventScriptNamesUpdateInput } from "./EventScriptNamesUpdateInput";
import { EventScriptNames } from "./EventScriptNames";

export class EventScriptNamesGrpcControllerBase {
  constructor(protected readonly service: EventScriptNamesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventScriptNames })
  @GrpcMethod("EventScriptNamesService", "createEventScriptNames")
  async createEventScriptNames(
    @common.Body() data: EventScriptNamesCreateInput
  ): Promise<EventScriptNames> {
    return await this.service.createEventScriptNames({
      data: data,
      select: {
        createdAt: true,
        id: true,
        scriptName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventScriptNames] })
  @ApiNestedQuery(EventScriptNamesFindManyArgs)
  @GrpcMethod("EventScriptNamesService", "eventScriptNamesItems")
  async eventScriptNamesItems(
    @common.Req() request: Request
  ): Promise<EventScriptNames[]> {
    const args = plainToClass(EventScriptNamesFindManyArgs, request.query);
    return this.service.eventScriptNamesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        scriptName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventScriptNames })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EventScriptNamesService", "eventScriptNames")
  async eventScriptNames(
    @common.Param() params: EventScriptNamesWhereUniqueInput
  ): Promise<EventScriptNames | null> {
    const result = await this.service.eventScriptNames({
      where: params,
      select: {
        createdAt: true,
        id: true,
        scriptName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventScriptNames })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EventScriptNamesService", "updateEventScriptNames")
  async updateEventScriptNames(
    @common.Param() params: EventScriptNamesWhereUniqueInput,
    @common.Body() data: EventScriptNamesUpdateInput
  ): Promise<EventScriptNames | null> {
    try {
      return await this.service.updateEventScriptNames({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          scriptName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventScriptNames })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EventScriptNamesService", "deleteEventScriptNames")
  async deleteEventScriptNames(
    @common.Param() params: EventScriptNamesWhereUniqueInput
  ): Promise<EventScriptNames | null> {
    try {
      return await this.service.deleteEventScriptNames({
        where: params,
        select: {
          createdAt: true,
          id: true,
          scriptName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
