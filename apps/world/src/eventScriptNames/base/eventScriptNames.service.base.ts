/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EventScriptNames as PrismaEventScriptNames,
} from "@prisma/client";

export class EventScriptNamesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventScriptNamesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventScriptNames.count(args);
  }

  async eventScriptNamesItems(
    args: Prisma.EventScriptNamesFindManyArgs
  ): Promise<PrismaEventScriptNames[]> {
    return this.prisma.eventScriptNames.findMany(args);
  }
  async eventScriptNames(
    args: Prisma.EventScriptNamesFindUniqueArgs
  ): Promise<PrismaEventScriptNames | null> {
    return this.prisma.eventScriptNames.findUnique(args);
  }
  async createEventScriptNames(
    args: Prisma.EventScriptNamesCreateArgs
  ): Promise<PrismaEventScriptNames> {
    return this.prisma.eventScriptNames.create(args);
  }
  async updateEventScriptNames(
    args: Prisma.EventScriptNamesUpdateArgs
  ): Promise<PrismaEventScriptNames> {
    return this.prisma.eventScriptNames.update(args);
  }
  async deleteEventScriptNames(
    args: Prisma.EventScriptNamesDeleteArgs
  ): Promise<PrismaEventScriptNames> {
    return this.prisma.eventScriptNames.delete(args);
  }
}
