/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Playerchoice as PrismaPlayerchoice } from "@prisma/client";

export class PlayerchoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerchoiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerchoice.count(args);
  }

  async playerchoices(
    args: Prisma.PlayerchoiceFindManyArgs
  ): Promise<PrismaPlayerchoice[]> {
    return this.prisma.playerchoice.findMany(args);
  }
  async playerchoice(
    args: Prisma.PlayerchoiceFindUniqueArgs
  ): Promise<PrismaPlayerchoice | null> {
    return this.prisma.playerchoice.findUnique(args);
  }
  async createPlayerchoice(
    args: Prisma.PlayerchoiceCreateArgs
  ): Promise<PrismaPlayerchoice> {
    return this.prisma.playerchoice.create(args);
  }
  async updatePlayerchoice(
    args: Prisma.PlayerchoiceUpdateArgs
  ): Promise<PrismaPlayerchoice> {
    return this.prisma.playerchoice.update(args);
  }
  async deletePlayerchoice(
    args: Prisma.PlayerchoiceDeleteArgs
  ): Promise<PrismaPlayerchoice> {
    return this.prisma.playerchoice.delete(args);
  }
}
