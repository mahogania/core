/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LootTemplate as PrismaLootTemplate,
  GameObjectLootTemplate as PrismaGameObjectLootTemplate,
  MailLootTemplate as PrismaMailLootTemplate,
  MillingLootTemplate as PrismaMillingLootTemplate,
} from "@prisma/client";

export class LootTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LootTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.lootTemplate.count(args);
  }

  async lootTemplates(
    args: Prisma.LootTemplateFindManyArgs
  ): Promise<PrismaLootTemplate[]> {
    return this.prisma.lootTemplate.findMany(args);
  }
  async lootTemplate(
    args: Prisma.LootTemplateFindUniqueArgs
  ): Promise<PrismaLootTemplate | null> {
    return this.prisma.lootTemplate.findUnique(args);
  }
  async createLootTemplate(
    args: Prisma.LootTemplateCreateArgs
  ): Promise<PrismaLootTemplate> {
    return this.prisma.lootTemplate.create(args);
  }
  async updateLootTemplate(
    args: Prisma.LootTemplateUpdateArgs
  ): Promise<PrismaLootTemplate> {
    return this.prisma.lootTemplate.update(args);
  }
  async deleteLootTemplate(
    args: Prisma.LootTemplateDeleteArgs
  ): Promise<PrismaLootTemplate> {
    return this.prisma.lootTemplate.delete(args);
  }

  async findGameObjectLootTemplates(
    parentId: string,
    args: Prisma.GameObjectLootTemplateFindManyArgs
  ): Promise<PrismaGameObjectLootTemplate[]> {
    return this.prisma.lootTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gameObjectLootTemplates(args);
  }

  async findMailLootTemplates(
    parentId: string,
    args: Prisma.MailLootTemplateFindManyArgs
  ): Promise<PrismaMailLootTemplate[]> {
    return this.prisma.lootTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mailLootTemplates(args);
  }

  async findMillingLootTemplates(
    parentId: string,
    args: Prisma.MillingLootTemplateFindManyArgs
  ): Promise<PrismaMillingLootTemplate[]> {
    return this.prisma.lootTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .millingLootTemplates(args);
  }
}
