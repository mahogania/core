/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventGameObject } from "./GameEventGameObject";
import { GameEventGameObjectCountArgs } from "./GameEventGameObjectCountArgs";
import { GameEventGameObjectFindManyArgs } from "./GameEventGameObjectFindManyArgs";
import { GameEventGameObjectFindUniqueArgs } from "./GameEventGameObjectFindUniqueArgs";
import { CreateGameEventGameObjectArgs } from "./CreateGameEventGameObjectArgs";
import { UpdateGameEventGameObjectArgs } from "./UpdateGameEventGameObjectArgs";
import { DeleteGameEventGameObjectArgs } from "./DeleteGameEventGameObjectArgs";
import { GameEventFindManyArgs } from "../../gameEvent/base/GameEventFindManyArgs";
import { GameEvent } from "../../gameEvent/base/GameEvent";
import { GameEventGameObjectService } from "../gameEventGameObject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventGameObject)
export class GameEventGameObjectResolverBase {
  constructor(
    protected readonly service: GameEventGameObjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObject",
    action: "read",
    possession: "any",
  })
  async _gameEventGameObjectsMeta(
    @graphql.Args() args: GameEventGameObjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventGameObject])
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObject",
    action: "read",
    possession: "any",
  })
  async gameEventGameObjects(
    @graphql.Args() args: GameEventGameObjectFindManyArgs
  ): Promise<GameEventGameObject[]> {
    return this.service.gameEventGameObjects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventGameObject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObject",
    action: "read",
    possession: "own",
  })
  async gameEventGameObject(
    @graphql.Args() args: GameEventGameObjectFindUniqueArgs
  ): Promise<GameEventGameObject | null> {
    const result = await this.service.gameEventGameObject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventGameObject)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObject",
    action: "create",
    possession: "any",
  })
  async createGameEventGameObject(
    @graphql.Args() args: CreateGameEventGameObjectArgs
  ): Promise<GameEventGameObject> {
    return await this.service.createGameEventGameObject({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventGameObject)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObject",
    action: "update",
    possession: "any",
  })
  async updateGameEventGameObject(
    @graphql.Args() args: UpdateGameEventGameObjectArgs
  ): Promise<GameEventGameObject | null> {
    try {
      return await this.service.updateGameEventGameObject({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventGameObject)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObject",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventGameObject(
    @graphql.Args() args: DeleteGameEventGameObjectArgs
  ): Promise<GameEventGameObject | null> {
    try {
      return await this.service.deleteGameEventGameObject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GameEvent], { name: "gameEvents" })
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "read",
    possession: "any",
  })
  async findGameEvents(
    @graphql.Parent() parent: GameEventGameObject,
    @graphql.Args() args: GameEventFindManyArgs
  ): Promise<GameEvent[]> {
    const results = await this.service.findGameEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
