/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  GameEventGameObject as PrismaGameEventGameObject,
  GameEvent as PrismaGameEvent,
} from "@prisma/client";

export class GameEventGameObjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameEventGameObjectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameEventGameObject.count(args);
  }

  async gameEventGameObjects(
    args: Prisma.GameEventGameObjectFindManyArgs
  ): Promise<PrismaGameEventGameObject[]> {
    return this.prisma.gameEventGameObject.findMany(args);
  }
  async gameEventGameObject(
    args: Prisma.GameEventGameObjectFindUniqueArgs
  ): Promise<PrismaGameEventGameObject | null> {
    return this.prisma.gameEventGameObject.findUnique(args);
  }
  async createGameEventGameObject(
    args: Prisma.GameEventGameObjectCreateArgs
  ): Promise<PrismaGameEventGameObject> {
    return this.prisma.gameEventGameObject.create(args);
  }
  async updateGameEventGameObject(
    args: Prisma.GameEventGameObjectUpdateArgs
  ): Promise<PrismaGameEventGameObject> {
    return this.prisma.gameEventGameObject.update(args);
  }
  async deleteGameEventGameObject(
    args: Prisma.GameEventGameObjectDeleteArgs
  ): Promise<PrismaGameEventGameObject> {
    return this.prisma.gameEventGameObject.delete(args);
  }

  async findGameEvents(
    parentId: string,
    args: Prisma.GameEventFindManyArgs
  ): Promise<PrismaGameEvent[]> {
    return this.prisma.gameEventGameObject
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .gameEvents(args);
  }
}
