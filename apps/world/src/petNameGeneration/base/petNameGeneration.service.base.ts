/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PetNameGeneration as PrismaPetNameGeneration,
} from "@prisma/client";

export class PetNameGenerationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PetNameGenerationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.petNameGeneration.count(args);
  }

  async petNameGenerations(
    args: Prisma.PetNameGenerationFindManyArgs
  ): Promise<PrismaPetNameGeneration[]> {
    return this.prisma.petNameGeneration.findMany(args);
  }
  async petNameGeneration(
    args: Prisma.PetNameGenerationFindUniqueArgs
  ): Promise<PrismaPetNameGeneration | null> {
    return this.prisma.petNameGeneration.findUnique(args);
  }
  async createPetNameGeneration(
    args: Prisma.PetNameGenerationCreateArgs
  ): Promise<PrismaPetNameGeneration> {
    return this.prisma.petNameGeneration.create(args);
  }
  async updatePetNameGeneration(
    args: Prisma.PetNameGenerationUpdateArgs
  ): Promise<PrismaPetNameGeneration> {
    return this.prisma.petNameGeneration.update(args);
  }
  async deletePetNameGeneration(
    args: Prisma.PetNameGenerationDeleteArgs
  ): Promise<PrismaPetNameGeneration> {
    return this.prisma.petNameGeneration.delete(args);
  }
}
