/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerchoiceResponseService } from "../playerchoiceResponse.service";
import { PlayerchoiceResponseCreateInput } from "./PlayerchoiceResponseCreateInput";
import { PlayerchoiceResponseWhereInput } from "./PlayerchoiceResponseWhereInput";
import { PlayerchoiceResponseWhereUniqueInput } from "./PlayerchoiceResponseWhereUniqueInput";
import { PlayerchoiceResponseFindManyArgs } from "./PlayerchoiceResponseFindManyArgs";
import { PlayerchoiceResponseUpdateInput } from "./PlayerchoiceResponseUpdateInput";
import { PlayerchoiceResponse } from "./PlayerchoiceResponse";

export class PlayerchoiceResponseGrpcControllerBase {
  constructor(protected readonly service: PlayerchoiceResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerchoiceResponse })
  @GrpcMethod("PlayerchoiceResponseService", "createPlayerchoiceResponse")
  async createPlayerchoiceResponse(
    @common.Body() data: PlayerchoiceResponseCreateInput
  ): Promise<PlayerchoiceResponse> {
    return await this.service.createPlayerchoiceResponse({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerchoiceResponse] })
  @ApiNestedQuery(PlayerchoiceResponseFindManyArgs)
  @GrpcMethod("PlayerchoiceResponseService", "playerchoiceResponses")
  async playerchoiceResponses(
    @common.Req() request: Request
  ): Promise<PlayerchoiceResponse[]> {
    const args = plainToClass(PlayerchoiceResponseFindManyArgs, request.query);
    return this.service.playerchoiceResponses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceResponseService", "playerchoiceResponse")
  async playerchoiceResponse(
    @common.Param() params: PlayerchoiceResponseWhereUniqueInput
  ): Promise<PlayerchoiceResponse | null> {
    const result = await this.service.playerchoiceResponse({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceResponseService", "updatePlayerchoiceResponse")
  async updatePlayerchoiceResponse(
    @common.Param() params: PlayerchoiceResponseWhereUniqueInput,
    @common.Body() data: PlayerchoiceResponseUpdateInput
  ): Promise<PlayerchoiceResponse | null> {
    try {
      return await this.service.updatePlayerchoiceResponse({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerchoiceResponseService", "deletePlayerchoiceResponse")
  async deletePlayerchoiceResponse(
    @common.Param() params: PlayerchoiceResponseWhereUniqueInput
  ): Promise<PlayerchoiceResponse | null> {
    try {
      return await this.service.deletePlayerchoiceResponse({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
