/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlayerchoiceResponse as PrismaPlayerchoiceResponse,
} from "@prisma/client";

export class PlayerchoiceResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerchoiceResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerchoiceResponse.count(args);
  }

  async playerchoiceResponses(
    args: Prisma.PlayerchoiceResponseFindManyArgs
  ): Promise<PrismaPlayerchoiceResponse[]> {
    return this.prisma.playerchoiceResponse.findMany(args);
  }
  async playerchoiceResponse(
    args: Prisma.PlayerchoiceResponseFindUniqueArgs
  ): Promise<PrismaPlayerchoiceResponse | null> {
    return this.prisma.playerchoiceResponse.findUnique(args);
  }
  async createPlayerchoiceResponse(
    args: Prisma.PlayerchoiceResponseCreateArgs
  ): Promise<PrismaPlayerchoiceResponse> {
    return this.prisma.playerchoiceResponse.create(args);
  }
  async updatePlayerchoiceResponse(
    args: Prisma.PlayerchoiceResponseUpdateArgs
  ): Promise<PrismaPlayerchoiceResponse> {
    return this.prisma.playerchoiceResponse.update(args);
  }
  async deletePlayerchoiceResponse(
    args: Prisma.PlayerchoiceResponseDeleteArgs
  ): Promise<PrismaPlayerchoiceResponse> {
    return this.prisma.playerchoiceResponse.delete(args);
  }
}
