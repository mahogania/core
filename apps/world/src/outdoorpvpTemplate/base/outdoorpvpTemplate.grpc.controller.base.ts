/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { OutdoorpvpTemplateService } from "../outdoorpvpTemplate.service";
import { OutdoorpvpTemplateCreateInput } from "./OutdoorpvpTemplateCreateInput";
import { OutdoorpvpTemplateWhereInput } from "./OutdoorpvpTemplateWhereInput";
import { OutdoorpvpTemplateWhereUniqueInput } from "./OutdoorpvpTemplateWhereUniqueInput";
import { OutdoorpvpTemplateFindManyArgs } from "./OutdoorpvpTemplateFindManyArgs";
import { OutdoorpvpTemplateUpdateInput } from "./OutdoorpvpTemplateUpdateInput";
import { OutdoorpvpTemplate } from "./OutdoorpvpTemplate";

export class OutdoorpvpTemplateGrpcControllerBase {
  constructor(protected readonly service: OutdoorpvpTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OutdoorpvpTemplate })
  @GrpcMethod("OutdoorpvpTemplateService", "createOutdoorpvpTemplate")
  async createOutdoorpvpTemplate(
    @common.Body() data: OutdoorpvpTemplateCreateInput
  ): Promise<OutdoorpvpTemplate> {
    return await this.service.createOutdoorpvpTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [OutdoorpvpTemplate] })
  @ApiNestedQuery(OutdoorpvpTemplateFindManyArgs)
  @GrpcMethod("OutdoorpvpTemplateService", "outdoorpvpTemplates")
  async outdoorpvpTemplates(
    @common.Req() request: Request
  ): Promise<OutdoorpvpTemplate[]> {
    const args = plainToClass(OutdoorpvpTemplateFindManyArgs, request.query);
    return this.service.outdoorpvpTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OutdoorpvpTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("OutdoorpvpTemplateService", "outdoorpvpTemplate")
  async outdoorpvpTemplate(
    @common.Param() params: OutdoorpvpTemplateWhereUniqueInput
  ): Promise<OutdoorpvpTemplate | null> {
    const result = await this.service.outdoorpvpTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OutdoorpvpTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("OutdoorpvpTemplateService", "updateOutdoorpvpTemplate")
  async updateOutdoorpvpTemplate(
    @common.Param() params: OutdoorpvpTemplateWhereUniqueInput,
    @common.Body() data: OutdoorpvpTemplateUpdateInput
  ): Promise<OutdoorpvpTemplate | null> {
    try {
      return await this.service.updateOutdoorpvpTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OutdoorpvpTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("OutdoorpvpTemplateService", "deleteOutdoorpvpTemplate")
  async deleteOutdoorpvpTemplate(
    @common.Param() params: OutdoorpvpTemplateWhereUniqueInput
  ): Promise<OutdoorpvpTemplate | null> {
    try {
      return await this.service.deleteOutdoorpvpTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
