/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { DisenchantLootTemplateService } from "../disenchantLootTemplate.service";
import { DisenchantLootTemplateCreateInput } from "./DisenchantLootTemplateCreateInput";
import { DisenchantLootTemplateWhereInput } from "./DisenchantLootTemplateWhereInput";
import { DisenchantLootTemplateWhereUniqueInput } from "./DisenchantLootTemplateWhereUniqueInput";
import { DisenchantLootTemplateFindManyArgs } from "./DisenchantLootTemplateFindManyArgs";
import { DisenchantLootTemplateUpdateInput } from "./DisenchantLootTemplateUpdateInput";
import { DisenchantLootTemplate } from "./DisenchantLootTemplate";

export class DisenchantLootTemplateGrpcControllerBase {
  constructor(protected readonly service: DisenchantLootTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DisenchantLootTemplate })
  @GrpcMethod("DisenchantLootTemplateService", "createDisenchantLootTemplate")
  async createDisenchantLootTemplate(
    @common.Body() data: DisenchantLootTemplateCreateInput
  ): Promise<DisenchantLootTemplate> {
    return await this.service.createDisenchantLootTemplate({
      data: data,
      select: {
        chance: true,
        comment: true,
        createdAt: true,
        entry: true,
        groupId: true,
        id: true,
        item: true,
        lootMode: true,
        maxCount: true,
        minCount: true,
        questRequired: true,
        reference: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DisenchantLootTemplate] })
  @ApiNestedQuery(DisenchantLootTemplateFindManyArgs)
  @GrpcMethod("DisenchantLootTemplateService", "disenchantLootTemplates")
  async disenchantLootTemplates(
    @common.Req() request: Request
  ): Promise<DisenchantLootTemplate[]> {
    const args = plainToClass(
      DisenchantLootTemplateFindManyArgs,
      request.query
    );
    return this.service.disenchantLootTemplates({
      ...args,
      select: {
        chance: true,
        comment: true,
        createdAt: true,
        entry: true,
        groupId: true,
        id: true,
        item: true,
        lootMode: true,
        maxCount: true,
        minCount: true,
        questRequired: true,
        reference: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DisenchantLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("DisenchantLootTemplateService", "disenchantLootTemplate")
  async disenchantLootTemplate(
    @common.Param() params: DisenchantLootTemplateWhereUniqueInput
  ): Promise<DisenchantLootTemplate | null> {
    const result = await this.service.disenchantLootTemplate({
      where: params,
      select: {
        chance: true,
        comment: true,
        createdAt: true,
        entry: true,
        groupId: true,
        id: true,
        item: true,
        lootMode: true,
        maxCount: true,
        minCount: true,
        questRequired: true,
        reference: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DisenchantLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("DisenchantLootTemplateService", "updateDisenchantLootTemplate")
  async updateDisenchantLootTemplate(
    @common.Param() params: DisenchantLootTemplateWhereUniqueInput,
    @common.Body() data: DisenchantLootTemplateUpdateInput
  ): Promise<DisenchantLootTemplate | null> {
    try {
      return await this.service.updateDisenchantLootTemplate({
        where: params,
        data: data,
        select: {
          chance: true,
          comment: true,
          createdAt: true,
          entry: true,
          groupId: true,
          id: true,
          item: true,
          lootMode: true,
          maxCount: true,
          minCount: true,
          questRequired: true,
          reference: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DisenchantLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("DisenchantLootTemplateService", "deleteDisenchantLootTemplate")
  async deleteDisenchantLootTemplate(
    @common.Param() params: DisenchantLootTemplateWhereUniqueInput
  ): Promise<DisenchantLootTemplate | null> {
    try {
      return await this.service.deleteDisenchantLootTemplate({
        where: params,
        select: {
          chance: true,
          comment: true,
          createdAt: true,
          entry: true,
          groupId: true,
          id: true,
          item: true,
          lootMode: true,
          maxCount: true,
          minCount: true,
          questRequired: true,
          reference: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
