/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DisenchantLootTemplate as PrismaDisenchantLootTemplate,
} from "@prisma/client";

export class DisenchantLootTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DisenchantLootTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.disenchantLootTemplate.count(args);
  }

  async disenchantLootTemplates(
    args: Prisma.DisenchantLootTemplateFindManyArgs
  ): Promise<PrismaDisenchantLootTemplate[]> {
    return this.prisma.disenchantLootTemplate.findMany(args);
  }
  async disenchantLootTemplate(
    args: Prisma.DisenchantLootTemplateFindUniqueArgs
  ): Promise<PrismaDisenchantLootTemplate | null> {
    return this.prisma.disenchantLootTemplate.findUnique(args);
  }
  async createDisenchantLootTemplate(
    args: Prisma.DisenchantLootTemplateCreateArgs
  ): Promise<PrismaDisenchantLootTemplate> {
    return this.prisma.disenchantLootTemplate.create(args);
  }
  async updateDisenchantLootTemplate(
    args: Prisma.DisenchantLootTemplateUpdateArgs
  ): Promise<PrismaDisenchantLootTemplate> {
    return this.prisma.disenchantLootTemplate.update(args);
  }
  async deleteDisenchantLootTemplate(
    args: Prisma.DisenchantLootTemplateDeleteArgs
  ): Promise<PrismaDisenchantLootTemplate> {
    return this.prisma.disenchantLootTemplate.delete(args);
  }
}
