/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DisenchantLootTemplate } from "./DisenchantLootTemplate";
import { DisenchantLootTemplateCountArgs } from "./DisenchantLootTemplateCountArgs";
import { DisenchantLootTemplateFindManyArgs } from "./DisenchantLootTemplateFindManyArgs";
import { DisenchantLootTemplateFindUniqueArgs } from "./DisenchantLootTemplateFindUniqueArgs";
import { CreateDisenchantLootTemplateArgs } from "./CreateDisenchantLootTemplateArgs";
import { UpdateDisenchantLootTemplateArgs } from "./UpdateDisenchantLootTemplateArgs";
import { DeleteDisenchantLootTemplateArgs } from "./DeleteDisenchantLootTemplateArgs";
import { DisenchantLootTemplateService } from "../disenchantLootTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DisenchantLootTemplate)
export class DisenchantLootTemplateResolverBase {
  constructor(
    protected readonly service: DisenchantLootTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DisenchantLootTemplate",
    action: "read",
    possession: "any",
  })
  async _disenchantLootTemplatesMeta(
    @graphql.Args() args: DisenchantLootTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DisenchantLootTemplate])
  @nestAccessControl.UseRoles({
    resource: "DisenchantLootTemplate",
    action: "read",
    possession: "any",
  })
  async disenchantLootTemplates(
    @graphql.Args() args: DisenchantLootTemplateFindManyArgs
  ): Promise<DisenchantLootTemplate[]> {
    return this.service.disenchantLootTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DisenchantLootTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DisenchantLootTemplate",
    action: "read",
    possession: "own",
  })
  async disenchantLootTemplate(
    @graphql.Args() args: DisenchantLootTemplateFindUniqueArgs
  ): Promise<DisenchantLootTemplate | null> {
    const result = await this.service.disenchantLootTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DisenchantLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "DisenchantLootTemplate",
    action: "create",
    possession: "any",
  })
  async createDisenchantLootTemplate(
    @graphql.Args() args: CreateDisenchantLootTemplateArgs
  ): Promise<DisenchantLootTemplate> {
    return await this.service.createDisenchantLootTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DisenchantLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "DisenchantLootTemplate",
    action: "update",
    possession: "any",
  })
  async updateDisenchantLootTemplate(
    @graphql.Args() args: UpdateDisenchantLootTemplateArgs
  ): Promise<DisenchantLootTemplate | null> {
    try {
      return await this.service.updateDisenchantLootTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DisenchantLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "DisenchantLootTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteDisenchantLootTemplate(
    @graphql.Args() args: DeleteDisenchantLootTemplateArgs
  ): Promise<DisenchantLootTemplate | null> {
    try {
      return await this.service.deleteDisenchantLootTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
