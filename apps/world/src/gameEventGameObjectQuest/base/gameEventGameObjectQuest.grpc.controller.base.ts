/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventGameObjectQuestService } from "../gameEventGameObjectQuest.service";
import { GameEventGameObjectQuestCreateInput } from "./GameEventGameObjectQuestCreateInput";
import { GameEventGameObjectQuestWhereInput } from "./GameEventGameObjectQuestWhereInput";
import { GameEventGameObjectQuestWhereUniqueInput } from "./GameEventGameObjectQuestWhereUniqueInput";
import { GameEventGameObjectQuestFindManyArgs } from "./GameEventGameObjectQuestFindManyArgs";
import { GameEventGameObjectQuestUpdateInput } from "./GameEventGameObjectQuestUpdateInput";
import { GameEventGameObjectQuest } from "./GameEventGameObjectQuest";

export class GameEventGameObjectQuestGrpcControllerBase {
  constructor(protected readonly service: GameEventGameObjectQuestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventGameObjectQuest })
  @GrpcMethod(
    "GameEventGameObjectQuestService",
    "createGameEventGameObjectQuest"
  )
  async createGameEventGameObjectQuest(
    @common.Body() data: GameEventGameObjectQuestCreateInput
  ): Promise<GameEventGameObjectQuest> {
    return await this.service.createGameEventGameObjectQuest({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventGameObjectQuest] })
  @ApiNestedQuery(GameEventGameObjectQuestFindManyArgs)
  @GrpcMethod("GameEventGameObjectQuestService", "gameEventGameObjectQuests")
  async gameEventGameObjectQuests(
    @common.Req() request: Request
  ): Promise<GameEventGameObjectQuest[]> {
    const args = plainToClass(
      GameEventGameObjectQuestFindManyArgs,
      request.query
    );
    return this.service.gameEventGameObjectQuests({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventGameObjectQuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventGameObjectQuestService", "gameEventGameObjectQuest")
  async gameEventGameObjectQuest(
    @common.Param() params: GameEventGameObjectQuestWhereUniqueInput
  ): Promise<GameEventGameObjectQuest | null> {
    const result = await this.service.gameEventGameObjectQuest({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventGameObjectQuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "GameEventGameObjectQuestService",
    "updateGameEventGameObjectQuest"
  )
  async updateGameEventGameObjectQuest(
    @common.Param() params: GameEventGameObjectQuestWhereUniqueInput,
    @common.Body() data: GameEventGameObjectQuestUpdateInput
  ): Promise<GameEventGameObjectQuest | null> {
    try {
      return await this.service.updateGameEventGameObjectQuest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          quest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventGameObjectQuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "GameEventGameObjectQuestService",
    "deleteGameEventGameObjectQuest"
  )
  async deleteGameEventGameObjectQuest(
    @common.Param() params: GameEventGameObjectQuestWhereUniqueInput
  ): Promise<GameEventGameObjectQuest | null> {
    try {
      return await this.service.deleteGameEventGameObjectQuest({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          quest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
