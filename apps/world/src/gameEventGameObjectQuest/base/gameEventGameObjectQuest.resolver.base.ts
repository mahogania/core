/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventGameObjectQuest } from "./GameEventGameObjectQuest";
import { GameEventGameObjectQuestCountArgs } from "./GameEventGameObjectQuestCountArgs";
import { GameEventGameObjectQuestFindManyArgs } from "./GameEventGameObjectQuestFindManyArgs";
import { GameEventGameObjectQuestFindUniqueArgs } from "./GameEventGameObjectQuestFindUniqueArgs";
import { CreateGameEventGameObjectQuestArgs } from "./CreateGameEventGameObjectQuestArgs";
import { UpdateGameEventGameObjectQuestArgs } from "./UpdateGameEventGameObjectQuestArgs";
import { DeleteGameEventGameObjectQuestArgs } from "./DeleteGameEventGameObjectQuestArgs";
import { GameEventGameObjectQuestService } from "../gameEventGameObjectQuest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventGameObjectQuest)
export class GameEventGameObjectQuestResolverBase {
  constructor(
    protected readonly service: GameEventGameObjectQuestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObjectQuest",
    action: "read",
    possession: "any",
  })
  async _gameEventGameObjectQuestsMeta(
    @graphql.Args() args: GameEventGameObjectQuestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventGameObjectQuest])
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObjectQuest",
    action: "read",
    possession: "any",
  })
  async gameEventGameObjectQuests(
    @graphql.Args() args: GameEventGameObjectQuestFindManyArgs
  ): Promise<GameEventGameObjectQuest[]> {
    return this.service.gameEventGameObjectQuests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventGameObjectQuest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObjectQuest",
    action: "read",
    possession: "own",
  })
  async gameEventGameObjectQuest(
    @graphql.Args() args: GameEventGameObjectQuestFindUniqueArgs
  ): Promise<GameEventGameObjectQuest | null> {
    const result = await this.service.gameEventGameObjectQuest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventGameObjectQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObjectQuest",
    action: "create",
    possession: "any",
  })
  async createGameEventGameObjectQuest(
    @graphql.Args() args: CreateGameEventGameObjectQuestArgs
  ): Promise<GameEventGameObjectQuest> {
    return await this.service.createGameEventGameObjectQuest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventGameObjectQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObjectQuest",
    action: "update",
    possession: "any",
  })
  async updateGameEventGameObjectQuest(
    @graphql.Args() args: UpdateGameEventGameObjectQuestArgs
  ): Promise<GameEventGameObjectQuest | null> {
    try {
      return await this.service.updateGameEventGameObjectQuest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventGameObjectQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventGameObjectQuest",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventGameObjectQuest(
    @graphql.Args() args: DeleteGameEventGameObjectQuestArgs
  ): Promise<GameEventGameObjectQuest | null> {
    try {
      return await this.service.deleteGameEventGameObjectQuest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
