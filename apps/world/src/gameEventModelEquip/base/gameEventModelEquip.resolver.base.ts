/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventModelEquip } from "./GameEventModelEquip";
import { GameEventModelEquipCountArgs } from "./GameEventModelEquipCountArgs";
import { GameEventModelEquipFindManyArgs } from "./GameEventModelEquipFindManyArgs";
import { GameEventModelEquipFindUniqueArgs } from "./GameEventModelEquipFindUniqueArgs";
import { CreateGameEventModelEquipArgs } from "./CreateGameEventModelEquipArgs";
import { UpdateGameEventModelEquipArgs } from "./UpdateGameEventModelEquipArgs";
import { DeleteGameEventModelEquipArgs } from "./DeleteGameEventModelEquipArgs";
import { GameEventFindManyArgs } from "../../gameEvent/base/GameEventFindManyArgs";
import { GameEvent } from "../../gameEvent/base/GameEvent";
import { GameEventModelEquipService } from "../gameEventModelEquip.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventModelEquip)
export class GameEventModelEquipResolverBase {
  constructor(
    protected readonly service: GameEventModelEquipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventModelEquip",
    action: "read",
    possession: "any",
  })
  async _gameEventModelEquipsMeta(
    @graphql.Args() args: GameEventModelEquipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventModelEquip])
  @nestAccessControl.UseRoles({
    resource: "GameEventModelEquip",
    action: "read",
    possession: "any",
  })
  async gameEventModelEquips(
    @graphql.Args() args: GameEventModelEquipFindManyArgs
  ): Promise<GameEventModelEquip[]> {
    return this.service.gameEventModelEquips(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventModelEquip, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventModelEquip",
    action: "read",
    possession: "own",
  })
  async gameEventModelEquip(
    @graphql.Args() args: GameEventModelEquipFindUniqueArgs
  ): Promise<GameEventModelEquip | null> {
    const result = await this.service.gameEventModelEquip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventModelEquip)
  @nestAccessControl.UseRoles({
    resource: "GameEventModelEquip",
    action: "create",
    possession: "any",
  })
  async createGameEventModelEquip(
    @graphql.Args() args: CreateGameEventModelEquipArgs
  ): Promise<GameEventModelEquip> {
    return await this.service.createGameEventModelEquip({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventModelEquip)
  @nestAccessControl.UseRoles({
    resource: "GameEventModelEquip",
    action: "update",
    possession: "any",
  })
  async updateGameEventModelEquip(
    @graphql.Args() args: UpdateGameEventModelEquipArgs
  ): Promise<GameEventModelEquip | null> {
    try {
      return await this.service.updateGameEventModelEquip({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventModelEquip)
  @nestAccessControl.UseRoles({
    resource: "GameEventModelEquip",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventModelEquip(
    @graphql.Args() args: DeleteGameEventModelEquipArgs
  ): Promise<GameEventModelEquip | null> {
    try {
      return await this.service.deleteGameEventModelEquip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GameEvent], { name: "gameEvents" })
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "read",
    possession: "any",
  })
  async findGameEvents(
    @graphql.Parent() parent: GameEventModelEquip,
    @graphql.Args() args: GameEventFindManyArgs
  ): Promise<GameEvent[]> {
    const results = await this.service.findGameEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
