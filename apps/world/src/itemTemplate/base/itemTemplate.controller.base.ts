/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ItemTemplateService } from "../itemTemplate.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ItemTemplateCreateInput } from "./ItemTemplateCreateInput";
import { ItemTemplate } from "./ItemTemplate";
import { ItemTemplateFindManyArgs } from "./ItemTemplateFindManyArgs";
import { ItemTemplateWhereUniqueInput } from "./ItemTemplateWhereUniqueInput";
import { ItemTemplateUpdateInput } from "./ItemTemplateUpdateInput";
import { ItemRandomBonusListTemplateFindManyArgs } from "../../itemRandomBonusListTemplate/base/ItemRandomBonusListTemplateFindManyArgs";
import { ItemRandomBonusListTemplate } from "../../itemRandomBonusListTemplate/base/ItemRandomBonusListTemplate";
import { ItemRandomBonusListTemplateWhereUniqueInput } from "../../itemRandomBonusListTemplate/base/ItemRandomBonusListTemplateWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ItemTemplateControllerBase {
  constructor(
    protected readonly service: ItemTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemTemplate })
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ItemTemplateCreateInput,
  })
  async createItemTemplate(
    @common.Body() data: ItemTemplateCreateInput
  ): Promise<ItemTemplate> {
    return await this.service.createItemTemplate({
      data: {
        ...data,

        itemBehaviour: data.itemBehaviour
          ? {
              connect: data.itemBehaviour,
            }
          : undefined,

        itemTemplateAddons: data.itemTemplateAddons
          ? {
              connect: data.itemTemplateAddons,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        itemBehaviour: {
          select: {
            id: true,
          },
        },

        itemTemplateAddons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemTemplate] })
  @ApiNestedQuery(ItemTemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async itemTemplates(@common.Req() request: Request): Promise<ItemTemplate[]> {
    const args = plainToClass(ItemTemplateFindManyArgs, request.query);
    return this.service.itemTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,

        itemBehaviour: {
          select: {
            id: true,
          },
        },

        itemTemplateAddons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async itemTemplate(
    @common.Param() params: ItemTemplateWhereUniqueInput
  ): Promise<ItemTemplate | null> {
    const result = await this.service.itemTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,

        itemBehaviour: {
          select: {
            id: true,
          },
        },

        itemTemplateAddons: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ItemTemplateUpdateInput,
  })
  async updateItemTemplate(
    @common.Param() params: ItemTemplateWhereUniqueInput,
    @common.Body() data: ItemTemplateUpdateInput
  ): Promise<ItemTemplate | null> {
    try {
      return await this.service.updateItemTemplate({
        where: params,
        data: {
          ...data,

          itemBehaviour: data.itemBehaviour
            ? {
                connect: data.itemBehaviour,
              }
            : undefined,

          itemTemplateAddons: data.itemTemplateAddons
            ? {
                connect: data.itemTemplateAddons,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          itemBehaviour: {
            select: {
              id: true,
            },
          },

          itemTemplateAddons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteItemTemplate(
    @common.Param() params: ItemTemplateWhereUniqueInput
  ): Promise<ItemTemplate | null> {
    try {
      return await this.service.deleteItemTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,

          itemBehaviour: {
            select: {
              id: true,
            },
          },

          itemTemplateAddons: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/itemRandomBonusListTemplates")
  @ApiNestedQuery(ItemRandomBonusListTemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ItemRandomBonusListTemplate",
    action: "read",
    possession: "any",
  })
  async findItemRandomBonusListTemplates(
    @common.Req() request: Request,
    @common.Param() params: ItemTemplateWhereUniqueInput
  ): Promise<ItemRandomBonusListTemplate[]> {
    const query = plainToClass(
      ItemRandomBonusListTemplateFindManyArgs,
      request.query
    );
    const results = await this.service.findItemRandomBonusListTemplates(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,

          itemTemplate: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/itemRandomBonusListTemplates")
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "update",
    possession: "any",
  })
  async connectItemRandomBonusListTemplates(
    @common.Param() params: ItemTemplateWhereUniqueInput,
    @common.Body() body: ItemRandomBonusListTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemRandomBonusListTemplates: {
        connect: body,
      },
    };
    await this.service.updateItemTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/itemRandomBonusListTemplates")
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "update",
    possession: "any",
  })
  async updateItemRandomBonusListTemplates(
    @common.Param() params: ItemTemplateWhereUniqueInput,
    @common.Body() body: ItemRandomBonusListTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemRandomBonusListTemplates: {
        set: body,
      },
    };
    await this.service.updateItemTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/itemRandomBonusListTemplates")
  @nestAccessControl.UseRoles({
    resource: "ItemTemplate",
    action: "update",
    possession: "any",
  })
  async disconnectItemRandomBonusListTemplates(
    @common.Param() params: ItemTemplateWhereUniqueInput,
    @common.Body() body: ItemRandomBonusListTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemRandomBonusListTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateItemTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
