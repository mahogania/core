/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ItemTemplate as PrismaItemTemplate,
  ItemRandomBonusListTemplate as PrismaItemRandomBonusListTemplate,
  ItemBehaviour as PrismaItemBehaviour,
  ItemTemplateAddon as PrismaItemTemplateAddon,
} from "@prisma/client";

export class ItemTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemTemplate.count(args);
  }

  async itemTemplates(
    args: Prisma.ItemTemplateFindManyArgs
  ): Promise<PrismaItemTemplate[]> {
    return this.prisma.itemTemplate.findMany(args);
  }
  async itemTemplate(
    args: Prisma.ItemTemplateFindUniqueArgs
  ): Promise<PrismaItemTemplate | null> {
    return this.prisma.itemTemplate.findUnique(args);
  }
  async createItemTemplate(
    args: Prisma.ItemTemplateCreateArgs
  ): Promise<PrismaItemTemplate> {
    return this.prisma.itemTemplate.create(args);
  }
  async updateItemTemplate(
    args: Prisma.ItemTemplateUpdateArgs
  ): Promise<PrismaItemTemplate> {
    return this.prisma.itemTemplate.update(args);
  }
  async deleteItemTemplate(
    args: Prisma.ItemTemplateDeleteArgs
  ): Promise<PrismaItemTemplate> {
    return this.prisma.itemTemplate.delete(args);
  }

  async findItemRandomBonusListTemplates(
    parentId: string,
    args: Prisma.ItemRandomBonusListTemplateFindManyArgs
  ): Promise<PrismaItemRandomBonusListTemplate[]> {
    return this.prisma.itemTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .itemRandomBonusListTemplates(args);
  }

  async getItemBehaviour(
    parentId: string
  ): Promise<PrismaItemBehaviour | null> {
    return this.prisma.itemTemplate
      .findUnique({
        where: { id: parentId },
      })
      .itemBehaviour();
  }

  async getItemTemplateAddons(
    parentId: string
  ): Promise<PrismaItemTemplateAddon | null> {
    return this.prisma.itemTemplate
      .findUnique({
        where: { id: parentId },
      })
      .itemTemplateAddons();
  }
}
