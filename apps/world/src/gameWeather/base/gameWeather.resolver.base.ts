/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameWeather } from "./GameWeather";
import { GameWeatherCountArgs } from "./GameWeatherCountArgs";
import { GameWeatherFindManyArgs } from "./GameWeatherFindManyArgs";
import { GameWeatherFindUniqueArgs } from "./GameWeatherFindUniqueArgs";
import { CreateGameWeatherArgs } from "./CreateGameWeatherArgs";
import { UpdateGameWeatherArgs } from "./UpdateGameWeatherArgs";
import { DeleteGameWeatherArgs } from "./DeleteGameWeatherArgs";
import { GameWeatherService } from "../gameWeather.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameWeather)
export class GameWeatherResolverBase {
  constructor(
    protected readonly service: GameWeatherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "read",
    possession: "any",
  })
  async _gameWeathersMeta(
    @graphql.Args() args: GameWeatherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameWeather])
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "read",
    possession: "any",
  })
  async gameWeathers(
    @graphql.Args() args: GameWeatherFindManyArgs
  ): Promise<GameWeather[]> {
    return this.service.gameWeathers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameWeather, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "read",
    possession: "own",
  })
  async gameWeather(
    @graphql.Args() args: GameWeatherFindUniqueArgs
  ): Promise<GameWeather | null> {
    const result = await this.service.gameWeather(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameWeather)
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "create",
    possession: "any",
  })
  async createGameWeather(
    @graphql.Args() args: CreateGameWeatherArgs
  ): Promise<GameWeather> {
    return await this.service.createGameWeather({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameWeather)
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "update",
    possession: "any",
  })
  async updateGameWeather(
    @graphql.Args() args: UpdateGameWeatherArgs
  ): Promise<GameWeather | null> {
    try {
      return await this.service.updateGameWeather({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameWeather)
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "delete",
    possession: "any",
  })
  async deleteGameWeather(
    @graphql.Args() args: DeleteGameWeatherArgs
  ): Promise<GameWeather | null> {
    try {
      return await this.service.deleteGameWeather(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
