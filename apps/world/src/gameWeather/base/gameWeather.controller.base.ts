/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GameWeatherService } from "../gameWeather.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameWeatherCreateInput } from "./GameWeatherCreateInput";
import { GameWeather } from "./GameWeather";
import { GameWeatherFindManyArgs } from "./GameWeatherFindManyArgs";
import { GameWeatherWhereUniqueInput } from "./GameWeatherWhereUniqueInput";
import { GameWeatherUpdateInput } from "./GameWeatherUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GameWeatherControllerBase {
  constructor(
    protected readonly service: GameWeatherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameWeather })
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GameWeatherCreateInput,
  })
  async createGameWeather(
    @common.Body() data: GameWeatherCreateInput
  ): Promise<GameWeather> {
    return await this.service.createGameWeather({
      data: data,
      select: {
        createdAt: true,
        fallRainChance: true,
        fallSnowChance: true,
        fallStormChance: true,
        id: true,
        scriptName: true,
        springRainChance: true,
        springSnowChance: true,
        springStormChance: true,
        summerRainChance: true,
        summerSnowChance: true,
        summerStormChance: true,
        updatedAt: true,
        winterRainChance: true,
        winterSnowChance: true,
        winterStormChance: true,
        zone: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [GameWeather] })
  @ApiNestedQuery(GameWeatherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gameWeathers(@common.Req() request: Request): Promise<GameWeather[]> {
    const args = plainToClass(GameWeatherFindManyArgs, request.query);
    return this.service.gameWeathers({
      ...args,
      select: {
        createdAt: true,
        fallRainChance: true,
        fallSnowChance: true,
        fallStormChance: true,
        id: true,
        scriptName: true,
        springRainChance: true,
        springSnowChance: true,
        springStormChance: true,
        summerRainChance: true,
        summerSnowChance: true,
        summerStormChance: true,
        updatedAt: true,
        winterRainChance: true,
        winterSnowChance: true,
        winterStormChance: true,
        zone: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameWeather })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gameWeather(
    @common.Param() params: GameWeatherWhereUniqueInput
  ): Promise<GameWeather | null> {
    const result = await this.service.gameWeather({
      where: params,
      select: {
        createdAt: true,
        fallRainChance: true,
        fallSnowChance: true,
        fallStormChance: true,
        id: true,
        scriptName: true,
        springRainChance: true,
        springSnowChance: true,
        springStormChance: true,
        summerRainChance: true,
        summerSnowChance: true,
        summerStormChance: true,
        updatedAt: true,
        winterRainChance: true,
        winterSnowChance: true,
        winterStormChance: true,
        zone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameWeather })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GameWeatherUpdateInput,
  })
  async updateGameWeather(
    @common.Param() params: GameWeatherWhereUniqueInput,
    @common.Body() data: GameWeatherUpdateInput
  ): Promise<GameWeather | null> {
    try {
      return await this.service.updateGameWeather({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fallRainChance: true,
          fallSnowChance: true,
          fallStormChance: true,
          id: true,
          scriptName: true,
          springRainChance: true,
          springSnowChance: true,
          springStormChance: true,
          summerRainChance: true,
          summerSnowChance: true,
          summerStormChance: true,
          updatedAt: true,
          winterRainChance: true,
          winterSnowChance: true,
          winterStormChance: true,
          zone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameWeather })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameWeather",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGameWeather(
    @common.Param() params: GameWeatherWhereUniqueInput
  ): Promise<GameWeather | null> {
    try {
      return await this.service.deleteGameWeather({
        where: params,
        select: {
          createdAt: true,
          fallRainChance: true,
          fallSnowChance: true,
          fallStormChance: true,
          id: true,
          scriptName: true,
          springRainChance: true,
          springSnowChance: true,
          springStormChance: true,
          summerRainChance: true,
          summerSnowChance: true,
          summerStormChance: true,
          updatedAt: true,
          winterRainChance: true,
          winterSnowChance: true,
          winterStormChance: true,
          zone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
