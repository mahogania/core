/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GameWeather as PrismaGameWeather } from "@prisma/client";

export class GameWeatherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameWeatherCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameWeather.count(args);
  }

  async gameWeathers(
    args: Prisma.GameWeatherFindManyArgs
  ): Promise<PrismaGameWeather[]> {
    return this.prisma.gameWeather.findMany(args);
  }
  async gameWeather(
    args: Prisma.GameWeatherFindUniqueArgs
  ): Promise<PrismaGameWeather | null> {
    return this.prisma.gameWeather.findUnique(args);
  }
  async createGameWeather(
    args: Prisma.GameWeatherCreateArgs
  ): Promise<PrismaGameWeather> {
    return this.prisma.gameWeather.create(args);
  }
  async updateGameWeather(
    args: Prisma.GameWeatherUpdateArgs
  ): Promise<PrismaGameWeather> {
    return this.prisma.gameWeather.update(args);
  }
  async deleteGameWeather(
    args: Prisma.GameWeatherDeleteArgs
  ): Promise<PrismaGameWeather> {
    return this.prisma.gameWeather.delete(args);
  }
}
