/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameWeatherService } from "../gameWeather.service";
import { GameWeatherCreateInput } from "./GameWeatherCreateInput";
import { GameWeatherWhereInput } from "./GameWeatherWhereInput";
import { GameWeatherWhereUniqueInput } from "./GameWeatherWhereUniqueInput";
import { GameWeatherFindManyArgs } from "./GameWeatherFindManyArgs";
import { GameWeatherUpdateInput } from "./GameWeatherUpdateInput";
import { GameWeather } from "./GameWeather";

export class GameWeatherGrpcControllerBase {
  constructor(protected readonly service: GameWeatherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameWeather })
  @GrpcMethod("GameWeatherService", "createGameWeather")
  async createGameWeather(
    @common.Body() data: GameWeatherCreateInput
  ): Promise<GameWeather> {
    return await this.service.createGameWeather({
      data: data,
      select: {
        chance: true,
        createdAt: true,
        id: true,
        kind: true,
        script: true,
        season: true,
        updatedAt: true,
        zone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameWeather] })
  @ApiNestedQuery(GameWeatherFindManyArgs)
  @GrpcMethod("GameWeatherService", "gameWeathers")
  async gameWeathers(@common.Req() request: Request): Promise<GameWeather[]> {
    const args = plainToClass(GameWeatherFindManyArgs, request.query);
    return this.service.gameWeathers({
      ...args,
      select: {
        chance: true,
        createdAt: true,
        id: true,
        kind: true,
        script: true,
        season: true,
        updatedAt: true,
        zone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameWeather })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameWeatherService", "gameWeather")
  async gameWeather(
    @common.Param() params: GameWeatherWhereUniqueInput
  ): Promise<GameWeather | null> {
    const result = await this.service.gameWeather({
      where: params,
      select: {
        chance: true,
        createdAt: true,
        id: true,
        kind: true,
        script: true,
        season: true,
        updatedAt: true,
        zone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameWeather })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameWeatherService", "updateGameWeather")
  async updateGameWeather(
    @common.Param() params: GameWeatherWhereUniqueInput,
    @common.Body() data: GameWeatherUpdateInput
  ): Promise<GameWeather | null> {
    try {
      return await this.service.updateGameWeather({
        where: params,
        data: data,
        select: {
          chance: true,
          createdAt: true,
          id: true,
          kind: true,
          script: true,
          season: true,
          updatedAt: true,
          zone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameWeather })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameWeatherService", "deleteGameWeather")
  async deleteGameWeather(
    @common.Param() params: GameWeatherWhereUniqueInput
  ): Promise<GameWeather | null> {
    try {
      return await this.service.deleteGameWeather({
        where: params,
        select: {
          chance: true,
          createdAt: true,
          id: true,
          kind: true,
          script: true,
          season: true,
          updatedAt: true,
          zone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
