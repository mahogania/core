/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayercreateinfoActionService } from "../playercreateinfoAction.service";
import { PlayercreateinfoActionCreateInput } from "./PlayercreateinfoActionCreateInput";
import { PlayercreateinfoActionWhereInput } from "./PlayercreateinfoActionWhereInput";
import { PlayercreateinfoActionWhereUniqueInput } from "./PlayercreateinfoActionWhereUniqueInput";
import { PlayercreateinfoActionFindManyArgs } from "./PlayercreateinfoActionFindManyArgs";
import { PlayercreateinfoActionUpdateInput } from "./PlayercreateinfoActionUpdateInput";
import { PlayercreateinfoAction } from "./PlayercreateinfoAction";

export class PlayercreateinfoActionGrpcControllerBase {
  constructor(protected readonly service: PlayercreateinfoActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayercreateinfoAction })
  @GrpcMethod("PlayercreateinfoActionService", "createPlayercreateinfoAction")
  async createPlayercreateinfoAction(
    @common.Body() data: PlayercreateinfoActionCreateInput
  ): Promise<PlayercreateinfoAction> {
    return await this.service.createPlayercreateinfoAction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayercreateinfoAction] })
  @ApiNestedQuery(PlayercreateinfoActionFindManyArgs)
  @GrpcMethod("PlayercreateinfoActionService", "playercreateinfoActions")
  async playercreateinfoActions(
    @common.Req() request: Request
  ): Promise<PlayercreateinfoAction[]> {
    const args = plainToClass(
      PlayercreateinfoActionFindManyArgs,
      request.query
    );
    return this.service.playercreateinfoActions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayercreateinfoAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayercreateinfoActionService", "playercreateinfoAction")
  async playercreateinfoAction(
    @common.Param() params: PlayercreateinfoActionWhereUniqueInput
  ): Promise<PlayercreateinfoAction | null> {
    const result = await this.service.playercreateinfoAction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayercreateinfoAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayercreateinfoActionService", "updatePlayercreateinfoAction")
  async updatePlayercreateinfoAction(
    @common.Param() params: PlayercreateinfoActionWhereUniqueInput,
    @common.Body() data: PlayercreateinfoActionUpdateInput
  ): Promise<PlayercreateinfoAction | null> {
    try {
      return await this.service.updatePlayercreateinfoAction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayercreateinfoAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayercreateinfoActionService", "deletePlayercreateinfoAction")
  async deletePlayercreateinfoAction(
    @common.Param() params: PlayercreateinfoActionWhereUniqueInput
  ): Promise<PlayercreateinfoAction | null> {
    try {
      return await this.service.deletePlayercreateinfoAction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
