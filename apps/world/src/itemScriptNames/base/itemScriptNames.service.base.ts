/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ItemScriptNames as PrismaItemScriptNames,
} from "@prisma/client";

export class ItemScriptNamesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemScriptNamesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemScriptNames.count(args);
  }

  async itemScriptNamesItems(
    args: Prisma.ItemScriptNamesFindManyArgs
  ): Promise<PrismaItemScriptNames[]> {
    return this.prisma.itemScriptNames.findMany(args);
  }
  async itemScriptNames(
    args: Prisma.ItemScriptNamesFindUniqueArgs
  ): Promise<PrismaItemScriptNames | null> {
    return this.prisma.itemScriptNames.findUnique(args);
  }
  async createItemScriptNames(
    args: Prisma.ItemScriptNamesCreateArgs
  ): Promise<PrismaItemScriptNames> {
    return this.prisma.itemScriptNames.create(args);
  }
  async updateItemScriptNames(
    args: Prisma.ItemScriptNamesUpdateArgs
  ): Promise<PrismaItemScriptNames> {
    return this.prisma.itemScriptNames.update(args);
  }
  async deleteItemScriptNames(
    args: Prisma.ItemScriptNamesDeleteArgs
  ): Promise<PrismaItemScriptNames> {
    return this.prisma.itemScriptNames.delete(args);
  }
}
