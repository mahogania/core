/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ItemScriptNamesService } from "../itemScriptNames.service";
import { ItemScriptNamesCreateInput } from "./ItemScriptNamesCreateInput";
import { ItemScriptNamesWhereInput } from "./ItemScriptNamesWhereInput";
import { ItemScriptNamesWhereUniqueInput } from "./ItemScriptNamesWhereUniqueInput";
import { ItemScriptNamesFindManyArgs } from "./ItemScriptNamesFindManyArgs";
import { ItemScriptNamesUpdateInput } from "./ItemScriptNamesUpdateInput";
import { ItemScriptNames } from "./ItemScriptNames";

export class ItemScriptNamesGrpcControllerBase {
  constructor(protected readonly service: ItemScriptNamesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemScriptNames })
  @GrpcMethod("ItemScriptNamesService", "createItemScriptNames")
  async createItemScriptNames(
    @common.Body() data: ItemScriptNamesCreateInput
  ): Promise<ItemScriptNames> {
    return await this.service.createItemScriptNames({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemScriptNames] })
  @ApiNestedQuery(ItemScriptNamesFindManyArgs)
  @GrpcMethod("ItemScriptNamesService", "itemScriptNamesItems")
  async itemScriptNamesItems(
    @common.Req() request: Request
  ): Promise<ItemScriptNames[]> {
    const args = plainToClass(ItemScriptNamesFindManyArgs, request.query);
    return this.service.itemScriptNamesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemScriptNames })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ItemScriptNamesService", "itemScriptNames")
  async itemScriptNames(
    @common.Param() params: ItemScriptNamesWhereUniqueInput
  ): Promise<ItemScriptNames | null> {
    const result = await this.service.itemScriptNames({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemScriptNames })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ItemScriptNamesService", "updateItemScriptNames")
  async updateItemScriptNames(
    @common.Param() params: ItemScriptNamesWhereUniqueInput,
    @common.Body() data: ItemScriptNamesUpdateInput
  ): Promise<ItemScriptNames | null> {
    try {
      return await this.service.updateItemScriptNames({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemScriptNames })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ItemScriptNamesService", "deleteItemScriptNames")
  async deleteItemScriptNames(
    @common.Param() params: ItemScriptNamesWhereUniqueInput
  ): Promise<ItemScriptNames | null> {
    try {
      return await this.service.deleteItemScriptNames({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
