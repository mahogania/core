/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ItemScriptNames } from "./ItemScriptNames";
import { ItemScriptNamesCountArgs } from "./ItemScriptNamesCountArgs";
import { ItemScriptNamesFindManyArgs } from "./ItemScriptNamesFindManyArgs";
import { ItemScriptNamesFindUniqueArgs } from "./ItemScriptNamesFindUniqueArgs";
import { DeleteItemScriptNamesArgs } from "./DeleteItemScriptNamesArgs";
import { ItemScriptNamesService } from "../itemScriptNames.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItemScriptNames)
export class ItemScriptNamesResolverBase {
  constructor(
    protected readonly service: ItemScriptNamesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItemScriptNames",
    action: "read",
    possession: "any",
  })
  async _itemScriptNamesItemsMeta(
    @graphql.Args() args: ItemScriptNamesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItemScriptNames])
  @nestAccessControl.UseRoles({
    resource: "ItemScriptNames",
    action: "read",
    possession: "any",
  })
  async itemScriptNamesItems(
    @graphql.Args() args: ItemScriptNamesFindManyArgs
  ): Promise<ItemScriptNames[]> {
    return this.service.itemScriptNamesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItemScriptNames, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItemScriptNames",
    action: "read",
    possession: "own",
  })
  async itemScriptNames(
    @graphql.Args() args: ItemScriptNamesFindUniqueArgs
  ): Promise<ItemScriptNames | null> {
    const result = await this.service.itemScriptNames(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemScriptNames)
  @nestAccessControl.UseRoles({
    resource: "ItemScriptNames",
    action: "delete",
    possession: "any",
  })
  async deleteItemScriptNames(
    @graphql.Args() args: DeleteItemScriptNamesArgs
  ): Promise<ItemScriptNames | null> {
    try {
      return await this.service.deleteItemScriptNames(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
