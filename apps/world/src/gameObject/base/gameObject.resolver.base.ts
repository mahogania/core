/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameObject } from "./GameObject";
import { GameObjectCountArgs } from "./GameObjectCountArgs";
import { GameObjectFindManyArgs } from "./GameObjectFindManyArgs";
import { GameObjectFindUniqueArgs } from "./GameObjectFindUniqueArgs";
import { CreateGameObjectArgs } from "./CreateGameObjectArgs";
import { UpdateGameObjectArgs } from "./UpdateGameObjectArgs";
import { DeleteGameObjectArgs } from "./DeleteGameObjectArgs";
import { GameObjectService } from "../gameObject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameObject)
export class GameObjectResolverBase {
  constructor(
    protected readonly service: GameObjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameObject",
    action: "read",
    possession: "any",
  })
  async _gameObjectsMeta(
    @graphql.Args() args: GameObjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameObject])
  @nestAccessControl.UseRoles({
    resource: "GameObject",
    action: "read",
    possession: "any",
  })
  async gameObjects(
    @graphql.Args() args: GameObjectFindManyArgs
  ): Promise<GameObject[]> {
    return this.service.gameObjects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameObject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameObject",
    action: "read",
    possession: "own",
  })
  async gameObject(
    @graphql.Args() args: GameObjectFindUniqueArgs
  ): Promise<GameObject | null> {
    const result = await this.service.gameObject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameObject)
  @nestAccessControl.UseRoles({
    resource: "GameObject",
    action: "create",
    possession: "any",
  })
  async createGameObject(
    @graphql.Args() args: CreateGameObjectArgs
  ): Promise<GameObject> {
    return await this.service.createGameObject({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameObject)
  @nestAccessControl.UseRoles({
    resource: "GameObject",
    action: "update",
    possession: "any",
  })
  async updateGameObject(
    @graphql.Args() args: UpdateGameObjectArgs
  ): Promise<GameObject | null> {
    try {
      return await this.service.updateGameObject({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameObject)
  @nestAccessControl.UseRoles({
    resource: "GameObject",
    action: "delete",
    possession: "any",
  })
  async deleteGameObject(
    @graphql.Args() args: DeleteGameObjectArgs
  ): Promise<GameObject | null> {
    try {
      return await this.service.deleteGameObject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameObject)
  async uploadScript(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: GameObjectFindUniqueArgs
  ): Promise<GameObject> {
    return await this.service.uploadScript(args, file);
  }

  @graphql.Mutation(() => GameObject)
  async deleteScript(
    @graphql.Args()
    args: GameObjectFindUniqueArgs
  ): Promise<GameObject> {
    return await this.service.deleteScript(args);
  }
}
