/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerRewardService } from "../playerReward.service";
import { PlayerRewardCreateInput } from "./PlayerRewardCreateInput";
import { PlayerRewardWhereInput } from "./PlayerRewardWhereInput";
import { PlayerRewardWhereUniqueInput } from "./PlayerRewardWhereUniqueInput";
import { PlayerRewardFindManyArgs } from "./PlayerRewardFindManyArgs";
import { PlayerRewardUpdateInput } from "./PlayerRewardUpdateInput";
import { PlayerReward } from "./PlayerReward";

export class PlayerRewardGrpcControllerBase {
  constructor(protected readonly service: PlayerRewardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerReward })
  @GrpcMethod("PlayerRewardService", "createPlayerReward")
  async createPlayerReward(
    @common.Body() data: PlayerRewardCreateInput
  ): Promise<PlayerReward> {
    return await this.service.createPlayerReward({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerReward] })
  @ApiNestedQuery(PlayerRewardFindManyArgs)
  @GrpcMethod("PlayerRewardService", "playerRewards")
  async playerRewards(@common.Req() request: Request): Promise<PlayerReward[]> {
    const args = plainToClass(PlayerRewardFindManyArgs, request.query);
    return this.service.playerRewards({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerRewardService", "playerReward")
  async playerReward(
    @common.Param() params: PlayerRewardWhereUniqueInput
  ): Promise<PlayerReward | null> {
    const result = await this.service.playerReward({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerRewardService", "updatePlayerReward")
  async updatePlayerReward(
    @common.Param() params: PlayerRewardWhereUniqueInput,
    @common.Body() data: PlayerRewardUpdateInput
  ): Promise<PlayerReward | null> {
    try {
      return await this.service.updatePlayerReward({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerReward })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerRewardService", "deletePlayerReward")
  async deletePlayerReward(
    @common.Param() params: PlayerRewardWhereUniqueInput
  ): Promise<PlayerReward | null> {
    try {
      return await this.service.deletePlayerReward({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
