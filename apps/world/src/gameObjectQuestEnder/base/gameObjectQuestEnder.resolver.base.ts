/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameObjectQuestEnder } from "./GameObjectQuestEnder";
import { GameObjectQuestEnderCountArgs } from "./GameObjectQuestEnderCountArgs";
import { GameObjectQuestEnderFindManyArgs } from "./GameObjectQuestEnderFindManyArgs";
import { GameObjectQuestEnderFindUniqueArgs } from "./GameObjectQuestEnderFindUniqueArgs";
import { DeleteGameObjectQuestEnderArgs } from "./DeleteGameObjectQuestEnderArgs";
import { GameObjectQuestEnderService } from "../gameObjectQuestEnder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameObjectQuestEnder)
export class GameObjectQuestEnderResolverBase {
  constructor(
    protected readonly service: GameObjectQuestEnderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameObjectQuestEnder",
    action: "read",
    possession: "any",
  })
  async _gameObjectQuestEndersMeta(
    @graphql.Args() args: GameObjectQuestEnderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameObjectQuestEnder])
  @nestAccessControl.UseRoles({
    resource: "GameObjectQuestEnder",
    action: "read",
    possession: "any",
  })
  async gameObjectQuestEnders(
    @graphql.Args() args: GameObjectQuestEnderFindManyArgs
  ): Promise<GameObjectQuestEnder[]> {
    return this.service.gameObjectQuestEnders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameObjectQuestEnder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameObjectQuestEnder",
    action: "read",
    possession: "own",
  })
  async gameObjectQuestEnder(
    @graphql.Args() args: GameObjectQuestEnderFindUniqueArgs
  ): Promise<GameObjectQuestEnder | null> {
    const result = await this.service.gameObjectQuestEnder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameObjectQuestEnder)
  @nestAccessControl.UseRoles({
    resource: "GameObjectQuestEnder",
    action: "delete",
    possession: "any",
  })
  async deleteGameObjectQuestEnder(
    @graphql.Args() args: DeleteGameObjectQuestEnderArgs
  ): Promise<GameObjectQuestEnder | null> {
    try {
      return await this.service.deleteGameObjectQuestEnder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
