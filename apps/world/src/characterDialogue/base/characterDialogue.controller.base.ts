/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CharacterDialogueService } from "../characterDialogue.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CharacterDialogueCreateInput } from "./CharacterDialogueCreateInput";
import { CharacterDialogue } from "./CharacterDialogue";
import { CharacterDialogueFindManyArgs } from "./CharacterDialogueFindManyArgs";
import { CharacterDialogueWhereUniqueInput } from "./CharacterDialogueWhereUniqueInput";
import { CharacterDialogueUpdateInput } from "./CharacterDialogueUpdateInput";
import { CharacterFindManyArgs } from "../../character/base/CharacterFindManyArgs";
import { Character } from "../../character/base/Character";
import { CharacterWhereUniqueInput } from "../../character/base/CharacterWhereUniqueInput";
import { ParagraphFindManyArgs } from "../../paragraph/base/ParagraphFindManyArgs";
import { Paragraph } from "../../paragraph/base/Paragraph";
import { ParagraphWhereUniqueInput } from "../../paragraph/base/ParagraphWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CharacterDialogueControllerBase {
  constructor(
    protected readonly service: CharacterDialogueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CharacterDialogue })
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CharacterDialogueCreateInput,
  })
  async createCharacterDialogue(
    @common.Body() data: CharacterDialogueCreateInput
  ): Promise<CharacterDialogue> {
    return await this.service.createCharacterDialogue({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CharacterDialogue] })
  @ApiNestedQuery(CharacterDialogueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async characterDialogues(
    @common.Req() request: Request
  ): Promise<CharacterDialogue[]> {
    const args = plainToClass(CharacterDialogueFindManyArgs, request.query);
    return this.service.characterDialogues({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CharacterDialogue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async characterDialogue(
    @common.Param() params: CharacterDialogueWhereUniqueInput
  ): Promise<CharacterDialogue | null> {
    const result = await this.service.characterDialogue({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CharacterDialogue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CharacterDialogueUpdateInput,
  })
  async updateCharacterDialogue(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() data: CharacterDialogueUpdateInput
  ): Promise<CharacterDialogue | null> {
    try {
      return await this.service.updateCharacterDialogue({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CharacterDialogue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCharacterDialogue(
    @common.Param() params: CharacterDialogueWhereUniqueInput
  ): Promise<CharacterDialogue | null> {
    try {
      return await this.service.deleteCharacterDialogue({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/characters")
  @ApiNestedQuery(CharacterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Character",
    action: "read",
    possession: "any",
  })
  async findCharacters(
    @common.Req() request: Request,
    @common.Param() params: CharacterDialogueWhereUniqueInput
  ): Promise<Character[]> {
    const query = plainToClass(CharacterFindManyArgs, request.query);
    const results = await this.service.findCharacters(params.id, {
      ...query,
      select: {
        characterSpells: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/characters")
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  async connectCharacters(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        connect: body,
      },
    };
    await this.service.updateCharacterDialogue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/characters")
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  async updateCharacters(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        set: body,
      },
    };
    await this.service.updateCharacterDialogue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/characters")
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  async disconnectCharacters(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() body: CharacterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characters: {
        disconnect: body,
      },
    };
    await this.service.updateCharacterDialogue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paragraphs")
  @ApiNestedQuery(ParagraphFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "any",
  })
  async findParagraphs(
    @common.Req() request: Request,
    @common.Param() params: CharacterDialogueWhereUniqueInput
  ): Promise<Paragraph[]> {
    const query = plainToClass(ParagraphFindManyArgs, request.query);
    const results = await this.service.findParagraphs(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        paragraphLocales: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paragraphs")
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  async connectParagraphs(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() body: ParagraphWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paragraphs: {
        connect: body,
      },
    };
    await this.service.updateCharacterDialogue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paragraphs")
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  async updateParagraphs(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() body: ParagraphWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paragraphs: {
        set: body,
      },
    };
    await this.service.updateCharacterDialogue({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paragraphs")
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "update",
    possession: "any",
  })
  async disconnectParagraphs(
    @common.Param() params: CharacterDialogueWhereUniqueInput,
    @common.Body() body: ParagraphWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paragraphs: {
        disconnect: body,
      },
    };
    await this.service.updateCharacterDialogue({
      where: params,
      data,
      select: { id: true },
    });
  }
}
