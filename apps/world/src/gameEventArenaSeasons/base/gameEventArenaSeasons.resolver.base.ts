/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventArenaSeasons } from "./GameEventArenaSeasons";
import { GameEventArenaSeasonsCountArgs } from "./GameEventArenaSeasonsCountArgs";
import { GameEventArenaSeasonsFindManyArgs } from "./GameEventArenaSeasonsFindManyArgs";
import { GameEventArenaSeasonsFindUniqueArgs } from "./GameEventArenaSeasonsFindUniqueArgs";
import { CreateGameEventArenaSeasonsArgs } from "./CreateGameEventArenaSeasonsArgs";
import { UpdateGameEventArenaSeasonsArgs } from "./UpdateGameEventArenaSeasonsArgs";
import { DeleteGameEventArenaSeasonsArgs } from "./DeleteGameEventArenaSeasonsArgs";
import { GameEventArenaSeasonsService } from "../gameEventArenaSeasons.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventArenaSeasons)
export class GameEventArenaSeasonsResolverBase {
  constructor(
    protected readonly service: GameEventArenaSeasonsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventArenaSeasons",
    action: "read",
    possession: "any",
  })
  async _gameEventArenaSeasonsItemsMeta(
    @graphql.Args() args: GameEventArenaSeasonsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventArenaSeasons])
  @nestAccessControl.UseRoles({
    resource: "GameEventArenaSeasons",
    action: "read",
    possession: "any",
  })
  async gameEventArenaSeasonsItems(
    @graphql.Args() args: GameEventArenaSeasonsFindManyArgs
  ): Promise<GameEventArenaSeasons[]> {
    return this.service.gameEventArenaSeasonsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventArenaSeasons, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventArenaSeasons",
    action: "read",
    possession: "own",
  })
  async gameEventArenaSeasons(
    @graphql.Args() args: GameEventArenaSeasonsFindUniqueArgs
  ): Promise<GameEventArenaSeasons | null> {
    const result = await this.service.gameEventArenaSeasons(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventArenaSeasons)
  @nestAccessControl.UseRoles({
    resource: "GameEventArenaSeasons",
    action: "create",
    possession: "any",
  })
  async createGameEventArenaSeasons(
    @graphql.Args() args: CreateGameEventArenaSeasonsArgs
  ): Promise<GameEventArenaSeasons> {
    return await this.service.createGameEventArenaSeasons({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventArenaSeasons)
  @nestAccessControl.UseRoles({
    resource: "GameEventArenaSeasons",
    action: "update",
    possession: "any",
  })
  async updateGameEventArenaSeasons(
    @graphql.Args() args: UpdateGameEventArenaSeasonsArgs
  ): Promise<GameEventArenaSeasons | null> {
    try {
      return await this.service.updateGameEventArenaSeasons({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventArenaSeasons)
  @nestAccessControl.UseRoles({
    resource: "GameEventArenaSeasons",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventArenaSeasons(
    @graphql.Args() args: DeleteGameEventArenaSeasonsArgs
  ): Promise<GameEventArenaSeasons | null> {
    try {
      return await this.service.deleteGameEventArenaSeasons(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
