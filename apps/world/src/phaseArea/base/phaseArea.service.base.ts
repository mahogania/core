/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PhaseArea as PrismaPhaseArea } from "@prisma/client";

export class PhaseAreaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PhaseAreaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.phaseArea.count(args);
  }

  async phaseAreas(
    args: Prisma.PhaseAreaFindManyArgs
  ): Promise<PrismaPhaseArea[]> {
    return this.prisma.phaseArea.findMany(args);
  }
  async phaseArea(
    args: Prisma.PhaseAreaFindUniqueArgs
  ): Promise<PrismaPhaseArea | null> {
    return this.prisma.phaseArea.findUnique(args);
  }
  async createPhaseArea(
    args: Prisma.PhaseAreaCreateArgs
  ): Promise<PrismaPhaseArea> {
    return this.prisma.phaseArea.create(args);
  }
  async updatePhaseArea(
    args: Prisma.PhaseAreaUpdateArgs
  ): Promise<PrismaPhaseArea> {
    return this.prisma.phaseArea.update(args);
  }
  async deletePhaseArea(
    args: Prisma.PhaseAreaDeleteArgs
  ): Promise<PrismaPhaseArea> {
    return this.prisma.phaseArea.delete(args);
  }
}
