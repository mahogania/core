/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EventScripts } from "./EventScripts";
import { EventScriptsCountArgs } from "./EventScriptsCountArgs";
import { EventScriptsFindManyArgs } from "./EventScriptsFindManyArgs";
import { EventScriptsFindUniqueArgs } from "./EventScriptsFindUniqueArgs";
import { CreateEventScriptsArgs } from "./CreateEventScriptsArgs";
import { UpdateEventScriptsArgs } from "./UpdateEventScriptsArgs";
import { DeleteEventScriptsArgs } from "./DeleteEventScriptsArgs";
import { EventScriptsService } from "../eventScripts.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EventScripts)
export class EventScriptsResolverBase {
  constructor(
    protected readonly service: EventScriptsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EventScripts",
    action: "read",
    possession: "any",
  })
  async _eventScriptsItemsMeta(
    @graphql.Args() args: EventScriptsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EventScripts])
  @nestAccessControl.UseRoles({
    resource: "EventScripts",
    action: "read",
    possession: "any",
  })
  async eventScriptsItems(
    @graphql.Args() args: EventScriptsFindManyArgs
  ): Promise<EventScripts[]> {
    return this.service.eventScriptsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EventScripts, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EventScripts",
    action: "read",
    possession: "own",
  })
  async eventScripts(
    @graphql.Args() args: EventScriptsFindUniqueArgs
  ): Promise<EventScripts | null> {
    const result = await this.service.eventScripts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventScripts)
  @nestAccessControl.UseRoles({
    resource: "EventScripts",
    action: "create",
    possession: "any",
  })
  async createEventScripts(
    @graphql.Args() args: CreateEventScriptsArgs
  ): Promise<EventScripts> {
    return await this.service.createEventScripts({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EventScripts)
  @nestAccessControl.UseRoles({
    resource: "EventScripts",
    action: "update",
    possession: "any",
  })
  async updateEventScripts(
    @graphql.Args() args: UpdateEventScriptsArgs
  ): Promise<EventScripts | null> {
    try {
      return await this.service.updateEventScripts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventScripts)
  @nestAccessControl.UseRoles({
    resource: "EventScripts",
    action: "delete",
    possession: "any",
  })
  async deleteEventScripts(
    @graphql.Args() args: DeleteEventScriptsArgs
  ): Promise<EventScripts | null> {
    try {
      return await this.service.deleteEventScripts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
