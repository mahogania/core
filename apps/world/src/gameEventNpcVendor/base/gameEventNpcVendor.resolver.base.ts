/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventNpcVendor } from "./GameEventNpcVendor";
import { GameEventNpcVendorCountArgs } from "./GameEventNpcVendorCountArgs";
import { GameEventNpcVendorFindManyArgs } from "./GameEventNpcVendorFindManyArgs";
import { GameEventNpcVendorFindUniqueArgs } from "./GameEventNpcVendorFindUniqueArgs";
import { CreateGameEventNpcVendorArgs } from "./CreateGameEventNpcVendorArgs";
import { UpdateGameEventNpcVendorArgs } from "./UpdateGameEventNpcVendorArgs";
import { DeleteGameEventNpcVendorArgs } from "./DeleteGameEventNpcVendorArgs";
import { GameEventNpcVendorService } from "../gameEventNpcVendor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventNpcVendor)
export class GameEventNpcVendorResolverBase {
  constructor(
    protected readonly service: GameEventNpcVendorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcVendor",
    action: "read",
    possession: "any",
  })
  async _gameEventNpcVendorsMeta(
    @graphql.Args() args: GameEventNpcVendorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventNpcVendor])
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcVendor",
    action: "read",
    possession: "any",
  })
  async gameEventNpcVendors(
    @graphql.Args() args: GameEventNpcVendorFindManyArgs
  ): Promise<GameEventNpcVendor[]> {
    return this.service.gameEventNpcVendors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventNpcVendor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcVendor",
    action: "read",
    possession: "own",
  })
  async gameEventNpcVendor(
    @graphql.Args() args: GameEventNpcVendorFindUniqueArgs
  ): Promise<GameEventNpcVendor | null> {
    const result = await this.service.gameEventNpcVendor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventNpcVendor)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcVendor",
    action: "create",
    possession: "any",
  })
  async createGameEventNpcVendor(
    @graphql.Args() args: CreateGameEventNpcVendorArgs
  ): Promise<GameEventNpcVendor> {
    return await this.service.createGameEventNpcVendor({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventNpcVendor)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcVendor",
    action: "update",
    possession: "any",
  })
  async updateGameEventNpcVendor(
    @graphql.Args() args: UpdateGameEventNpcVendorArgs
  ): Promise<GameEventNpcVendor | null> {
    try {
      return await this.service.updateGameEventNpcVendor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventNpcVendor)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcVendor",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventNpcVendor(
    @graphql.Args() args: DeleteGameEventNpcVendorArgs
  ): Promise<GameEventNpcVendor | null> {
    try {
      return await this.service.deleteGameEventNpcVendor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
