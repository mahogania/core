/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventNpcVendorService } from "../gameEventNpcVendor.service";
import { GameEventNpcVendorCreateInput } from "./GameEventNpcVendorCreateInput";
import { GameEventNpcVendorWhereInput } from "./GameEventNpcVendorWhereInput";
import { GameEventNpcVendorWhereUniqueInput } from "./GameEventNpcVendorWhereUniqueInput";
import { GameEventNpcVendorFindManyArgs } from "./GameEventNpcVendorFindManyArgs";
import { GameEventNpcVendorUpdateInput } from "./GameEventNpcVendorUpdateInput";
import { GameEventNpcVendor } from "./GameEventNpcVendor";

export class GameEventNpcVendorGrpcControllerBase {
  constructor(protected readonly service: GameEventNpcVendorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventNpcVendor })
  @GrpcMethod("GameEventNpcVendorService", "createGameEventNpcVendor")
  async createGameEventNpcVendor(
    @common.Body() data: GameEventNpcVendorCreateInput
  ): Promise<GameEventNpcVendor> {
    return await this.service.createGameEventNpcVendor({
      data: data,
      select: {
        bonusListIDs: true,
        createdAt: true,
        eventEntry: true,
        extendedCost: true,
        guid: true,
        id: true,
        ignoreFiltering: true,
        incrtime: true,
        item: true,
        maxcount: true,
        playerConditionId: true,
        slot: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventNpcVendor] })
  @ApiNestedQuery(GameEventNpcVendorFindManyArgs)
  @GrpcMethod("GameEventNpcVendorService", "gameEventNpcVendors")
  async gameEventNpcVendors(
    @common.Req() request: Request
  ): Promise<GameEventNpcVendor[]> {
    const args = plainToClass(GameEventNpcVendorFindManyArgs, request.query);
    return this.service.gameEventNpcVendors({
      ...args,
      select: {
        bonusListIDs: true,
        createdAt: true,
        eventEntry: true,
        extendedCost: true,
        guid: true,
        id: true,
        ignoreFiltering: true,
        incrtime: true,
        item: true,
        maxcount: true,
        playerConditionId: true,
        slot: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventNpcVendor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventNpcVendorService", "gameEventNpcVendor")
  async gameEventNpcVendor(
    @common.Param() params: GameEventNpcVendorWhereUniqueInput
  ): Promise<GameEventNpcVendor | null> {
    const result = await this.service.gameEventNpcVendor({
      where: params,
      select: {
        bonusListIDs: true,
        createdAt: true,
        eventEntry: true,
        extendedCost: true,
        guid: true,
        id: true,
        ignoreFiltering: true,
        incrtime: true,
        item: true,
        maxcount: true,
        playerConditionId: true,
        slot: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventNpcVendor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventNpcVendorService", "updateGameEventNpcVendor")
  async updateGameEventNpcVendor(
    @common.Param() params: GameEventNpcVendorWhereUniqueInput,
    @common.Body() data: GameEventNpcVendorUpdateInput
  ): Promise<GameEventNpcVendor | null> {
    try {
      return await this.service.updateGameEventNpcVendor({
        where: params,
        data: data,
        select: {
          bonusListIDs: true,
          createdAt: true,
          eventEntry: true,
          extendedCost: true,
          guid: true,
          id: true,
          ignoreFiltering: true,
          incrtime: true,
          item: true,
          maxcount: true,
          playerConditionId: true,
          slot: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventNpcVendor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventNpcVendorService", "deleteGameEventNpcVendor")
  async deleteGameEventNpcVendor(
    @common.Param() params: GameEventNpcVendorWhereUniqueInput
  ): Promise<GameEventNpcVendor | null> {
    try {
      return await this.service.deleteGameEventNpcVendor({
        where: params,
        select: {
          bonusListIDs: true,
          createdAt: true,
          eventEntry: true,
          extendedCost: true,
          guid: true,
          id: true,
          ignoreFiltering: true,
          incrtime: true,
          item: true,
          maxcount: true,
          playerConditionId: true,
          slot: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
