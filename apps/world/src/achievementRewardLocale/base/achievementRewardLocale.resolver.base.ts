/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AchievementRewardLocale } from "./AchievementRewardLocale";
import { AchievementRewardLocaleCountArgs } from "./AchievementRewardLocaleCountArgs";
import { AchievementRewardLocaleFindManyArgs } from "./AchievementRewardLocaleFindManyArgs";
import { AchievementRewardLocaleFindUniqueArgs } from "./AchievementRewardLocaleFindUniqueArgs";
import { CreateAchievementRewardLocaleArgs } from "./CreateAchievementRewardLocaleArgs";
import { UpdateAchievementRewardLocaleArgs } from "./UpdateAchievementRewardLocaleArgs";
import { DeleteAchievementRewardLocaleArgs } from "./DeleteAchievementRewardLocaleArgs";
import { AchievementRewardLocaleService } from "../achievementRewardLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AchievementRewardLocale)
export class AchievementRewardLocaleResolverBase {
  constructor(
    protected readonly service: AchievementRewardLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "read",
    possession: "any",
  })
  async _achievementRewardLocalesMeta(
    @graphql.Args() args: AchievementRewardLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AchievementRewardLocale])
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "read",
    possession: "any",
  })
  async achievementRewardLocales(
    @graphql.Args() args: AchievementRewardLocaleFindManyArgs
  ): Promise<AchievementRewardLocale[]> {
    return this.service.achievementRewardLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AchievementRewardLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "read",
    possession: "own",
  })
  async achievementRewardLocale(
    @graphql.Args() args: AchievementRewardLocaleFindUniqueArgs
  ): Promise<AchievementRewardLocale | null> {
    const result = await this.service.achievementRewardLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementRewardLocale)
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "create",
    possession: "any",
  })
  async createAchievementRewardLocale(
    @graphql.Args() args: CreateAchievementRewardLocaleArgs
  ): Promise<AchievementRewardLocale> {
    return await this.service.createAchievementRewardLocale({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementRewardLocale)
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "update",
    possession: "any",
  })
  async updateAchievementRewardLocale(
    @graphql.Args() args: UpdateAchievementRewardLocaleArgs
  ): Promise<AchievementRewardLocale | null> {
    try {
      return await this.service.updateAchievementRewardLocale({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AchievementRewardLocale)
  @nestAccessControl.UseRoles({
    resource: "AchievementRewardLocale",
    action: "delete",
    possession: "any",
  })
  async deleteAchievementRewardLocale(
    @graphql.Args() args: DeleteAchievementRewardLocaleArgs
  ): Promise<AchievementRewardLocale | null> {
    try {
      return await this.service.deleteAchievementRewardLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
