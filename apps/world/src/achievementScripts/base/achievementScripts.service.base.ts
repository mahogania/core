/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AchievementScripts as PrismaAchievementScripts,
} from "@prisma/client";

export class AchievementScriptsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AchievementScriptsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.achievementScripts.count(args);
  }

  async achievementScriptsItems(
    args: Prisma.AchievementScriptsFindManyArgs
  ): Promise<PrismaAchievementScripts[]> {
    return this.prisma.achievementScripts.findMany(args);
  }
  async achievementScripts(
    args: Prisma.AchievementScriptsFindUniqueArgs
  ): Promise<PrismaAchievementScripts | null> {
    return this.prisma.achievementScripts.findUnique(args);
  }
  async createAchievementScripts(
    args: Prisma.AchievementScriptsCreateArgs
  ): Promise<PrismaAchievementScripts> {
    return this.prisma.achievementScripts.create(args);
  }
  async updateAchievementScripts(
    args: Prisma.AchievementScriptsUpdateArgs
  ): Promise<PrismaAchievementScripts> {
    return this.prisma.achievementScripts.update(args);
  }
  async deleteAchievementScripts(
    args: Prisma.AchievementScriptsDeleteArgs
  ): Promise<PrismaAchievementScripts> {
    return this.prisma.achievementScripts.delete(args);
  }
}
