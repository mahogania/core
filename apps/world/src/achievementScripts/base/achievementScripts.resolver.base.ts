/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AchievementScripts } from "./AchievementScripts";
import { AchievementScriptsCountArgs } from "./AchievementScriptsCountArgs";
import { AchievementScriptsFindManyArgs } from "./AchievementScriptsFindManyArgs";
import { AchievementScriptsFindUniqueArgs } from "./AchievementScriptsFindUniqueArgs";
import { CreateAchievementScriptsArgs } from "./CreateAchievementScriptsArgs";
import { UpdateAchievementScriptsArgs } from "./UpdateAchievementScriptsArgs";
import { DeleteAchievementScriptsArgs } from "./DeleteAchievementScriptsArgs";
import { AchievementScriptsService } from "../achievementScripts.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AchievementScripts)
export class AchievementScriptsResolverBase {
  constructor(
    protected readonly service: AchievementScriptsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AchievementScripts",
    action: "read",
    possession: "any",
  })
  async _achievementScriptsItemsMeta(
    @graphql.Args() args: AchievementScriptsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AchievementScripts])
  @nestAccessControl.UseRoles({
    resource: "AchievementScripts",
    action: "read",
    possession: "any",
  })
  async achievementScriptsItems(
    @graphql.Args() args: AchievementScriptsFindManyArgs
  ): Promise<AchievementScripts[]> {
    return this.service.achievementScriptsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AchievementScripts, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AchievementScripts",
    action: "read",
    possession: "own",
  })
  async achievementScripts(
    @graphql.Args() args: AchievementScriptsFindUniqueArgs
  ): Promise<AchievementScripts | null> {
    const result = await this.service.achievementScripts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementScripts)
  @nestAccessControl.UseRoles({
    resource: "AchievementScripts",
    action: "create",
    possession: "any",
  })
  async createAchievementScripts(
    @graphql.Args() args: CreateAchievementScriptsArgs
  ): Promise<AchievementScripts> {
    return await this.service.createAchievementScripts({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementScripts)
  @nestAccessControl.UseRoles({
    resource: "AchievementScripts",
    action: "update",
    possession: "any",
  })
  async updateAchievementScripts(
    @graphql.Args() args: UpdateAchievementScriptsArgs
  ): Promise<AchievementScripts | null> {
    try {
      return await this.service.updateAchievementScripts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AchievementScripts)
  @nestAccessControl.UseRoles({
    resource: "AchievementScripts",
    action: "delete",
    possession: "any",
  })
  async deleteAchievementScripts(
    @graphql.Args() args: DeleteAchievementScriptsArgs
  ): Promise<AchievementScripts | null> {
    try {
      return await this.service.deleteAchievementScripts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
