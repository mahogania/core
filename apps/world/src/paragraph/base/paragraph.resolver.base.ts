/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Paragraph } from "./Paragraph";
import { ParagraphCountArgs } from "./ParagraphCountArgs";
import { ParagraphFindManyArgs } from "./ParagraphFindManyArgs";
import { ParagraphFindUniqueArgs } from "./ParagraphFindUniqueArgs";
import { CreateParagraphArgs } from "./CreateParagraphArgs";
import { UpdateParagraphArgs } from "./UpdateParagraphArgs";
import { DeleteParagraphArgs } from "./DeleteParagraphArgs";
import { CharacterDialogueFindManyArgs } from "../../characterDialogue/base/CharacterDialogueFindManyArgs";
import { CharacterDialogue } from "../../characterDialogue/base/CharacterDialogue";
import { ParagraphLocale } from "../../paragraphLocale/base/ParagraphLocale";
import { ParagraphService } from "../paragraph.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Paragraph)
export class ParagraphResolverBase {
  constructor(
    protected readonly service: ParagraphService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "any",
  })
  async _paragraphsMeta(
    @graphql.Args() args: ParagraphCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Paragraph])
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "any",
  })
  async paragraphs(
    @graphql.Args() args: ParagraphFindManyArgs
  ): Promise<Paragraph[]> {
    return this.service.paragraphs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Paragraph, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "own",
  })
  async paragraph(
    @graphql.Args() args: ParagraphFindUniqueArgs
  ): Promise<Paragraph | null> {
    const result = await this.service.paragraph(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paragraph)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "create",
    possession: "any",
  })
  async createParagraph(
    @graphql.Args() args: CreateParagraphArgs
  ): Promise<Paragraph> {
    return await this.service.createParagraph({
      ...args,
      data: {
        ...args.data,

        paragraphLocales: args.data.paragraphLocales
          ? {
              connect: args.data.paragraphLocales,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paragraph)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "update",
    possession: "any",
  })
  async updateParagraph(
    @graphql.Args() args: UpdateParagraphArgs
  ): Promise<Paragraph | null> {
    try {
      return await this.service.updateParagraph({
        ...args,
        data: {
          ...args.data,

          paragraphLocales: args.data.paragraphLocales
            ? {
                connect: args.data.paragraphLocales,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Paragraph)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "delete",
    possession: "any",
  })
  async deleteParagraph(
    @graphql.Args() args: DeleteParagraphArgs
  ): Promise<Paragraph | null> {
    try {
      return await this.service.deleteParagraph(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CharacterDialogue], { name: "characterLines" })
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "read",
    possession: "any",
  })
  async findCharacterLines(
    @graphql.Parent() parent: Paragraph,
    @graphql.Args() args: CharacterDialogueFindManyArgs
  ): Promise<CharacterDialogue[]> {
    const results = await this.service.findCharacterLines(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ParagraphLocale, {
    nullable: true,
    name: "paragraphLocales",
  })
  @nestAccessControl.UseRoles({
    resource: "ParagraphLocale",
    action: "read",
    possession: "any",
  })
  async getParagraphLocales(
    @graphql.Parent() parent: Paragraph
  ): Promise<ParagraphLocale | null> {
    const result = await this.service.getParagraphLocales(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
