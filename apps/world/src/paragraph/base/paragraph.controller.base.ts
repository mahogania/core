/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ParagraphService } from "../paragraph.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ParagraphCreateInput } from "./ParagraphCreateInput";
import { Paragraph } from "./Paragraph";
import { ParagraphFindManyArgs } from "./ParagraphFindManyArgs";
import { ParagraphWhereUniqueInput } from "./ParagraphWhereUniqueInput";
import { ParagraphUpdateInput } from "./ParagraphUpdateInput";
import { CharacterDialogueFindManyArgs } from "../../characterDialogue/base/CharacterDialogueFindManyArgs";
import { CharacterDialogue } from "../../characterDialogue/base/CharacterDialogue";
import { CharacterDialogueWhereUniqueInput } from "../../characterDialogue/base/CharacterDialogueWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ParagraphControllerBase {
  constructor(
    protected readonly service: ParagraphService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Paragraph })
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ParagraphCreateInput,
  })
  async createParagraph(
    @common.Body() data: ParagraphCreateInput
  ): Promise<Paragraph> {
    return await this.service.createParagraph({
      data: {
        ...data,

        paragraphLocales: data.paragraphLocales
          ? {
              connect: data.paragraphLocales,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        paragraphLocales: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Paragraph] })
  @ApiNestedQuery(ParagraphFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paragraphs(@common.Req() request: Request): Promise<Paragraph[]> {
    const args = plainToClass(ParagraphFindManyArgs, request.query);
    return this.service.paragraphs({
      ...args,
      select: {
        createdAt: true,
        id: true,

        paragraphLocales: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Paragraph })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paragraph(
    @common.Param() params: ParagraphWhereUniqueInput
  ): Promise<Paragraph | null> {
    const result = await this.service.paragraph({
      where: params,
      select: {
        createdAt: true,
        id: true,

        paragraphLocales: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Paragraph })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ParagraphUpdateInput,
  })
  async updateParagraph(
    @common.Param() params: ParagraphWhereUniqueInput,
    @common.Body() data: ParagraphUpdateInput
  ): Promise<Paragraph | null> {
    try {
      return await this.service.updateParagraph({
        where: params,
        data: {
          ...data,

          paragraphLocales: data.paragraphLocales
            ? {
                connect: data.paragraphLocales,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          paragraphLocales: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Paragraph })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteParagraph(
    @common.Param() params: ParagraphWhereUniqueInput
  ): Promise<Paragraph | null> {
    try {
      return await this.service.deleteParagraph({
        where: params,
        select: {
          createdAt: true,
          id: true,

          paragraphLocales: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/characterLines")
  @ApiNestedQuery(CharacterDialogueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CharacterDialogue",
    action: "read",
    possession: "any",
  })
  async findCharacterLines(
    @common.Req() request: Request,
    @common.Param() params: ParagraphWhereUniqueInput
  ): Promise<CharacterDialogue[]> {
    const query = plainToClass(CharacterDialogueFindManyArgs, request.query);
    const results = await this.service.findCharacterLines(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/characterLines")
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "update",
    possession: "any",
  })
  async connectCharacterLines(
    @common.Param() params: ParagraphWhereUniqueInput,
    @common.Body() body: CharacterDialogueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characterLines: {
        connect: body,
      },
    };
    await this.service.updateParagraph({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/characterLines")
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "update",
    possession: "any",
  })
  async updateCharacterLines(
    @common.Param() params: ParagraphWhereUniqueInput,
    @common.Body() body: CharacterDialogueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characterLines: {
        set: body,
      },
    };
    await this.service.updateParagraph({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/characterLines")
  @nestAccessControl.UseRoles({
    resource: "Paragraph",
    action: "update",
    possession: "any",
  })
  async disconnectCharacterLines(
    @common.Param() params: ParagraphWhereUniqueInput,
    @common.Body() body: CharacterDialogueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characterLines: {
        disconnect: body,
      },
    };
    await this.service.updateParagraph({
      where: params,
      data,
      select: { id: true },
    });
  }
}
