/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AchievementBehaviour } from "./AchievementBehaviour";
import { AchievementBehaviourCountArgs } from "./AchievementBehaviourCountArgs";
import { AchievementBehaviourFindManyArgs } from "./AchievementBehaviourFindManyArgs";
import { AchievementBehaviourFindUniqueArgs } from "./AchievementBehaviourFindUniqueArgs";
import { CreateAchievementBehaviourArgs } from "./CreateAchievementBehaviourArgs";
import { UpdateAchievementBehaviourArgs } from "./UpdateAchievementBehaviourArgs";
import { DeleteAchievementBehaviourArgs } from "./DeleteAchievementBehaviourArgs";
import { Achievement } from "../../achievement/base/Achievement";
import { AchievementBehaviourService } from "../achievementBehaviour.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AchievementBehaviour)
export class AchievementBehaviourResolverBase {
  constructor(
    protected readonly service: AchievementBehaviourService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "read",
    possession: "any",
  })
  async _achievementBehavioursMeta(
    @graphql.Args() args: AchievementBehaviourCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AchievementBehaviour])
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "read",
    possession: "any",
  })
  async achievementBehaviours(
    @graphql.Args() args: AchievementBehaviourFindManyArgs
  ): Promise<AchievementBehaviour[]> {
    return this.service.achievementBehaviours(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AchievementBehaviour, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "read",
    possession: "own",
  })
  async achievementBehaviour(
    @graphql.Args() args: AchievementBehaviourFindUniqueArgs
  ): Promise<AchievementBehaviour | null> {
    const result = await this.service.achievementBehaviour(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementBehaviour)
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "create",
    possession: "any",
  })
  async createAchievementBehaviour(
    @graphql.Args() args: CreateAchievementBehaviourArgs
  ): Promise<AchievementBehaviour> {
    return await this.service.createAchievementBehaviour({
      ...args,
      data: {
        ...args.data,

        achievement: args.data.achievement
          ? {
              connect: args.data.achievement,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AchievementBehaviour)
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "update",
    possession: "any",
  })
  async updateAchievementBehaviour(
    @graphql.Args() args: UpdateAchievementBehaviourArgs
  ): Promise<AchievementBehaviour | null> {
    try {
      return await this.service.updateAchievementBehaviour({
        ...args,
        data: {
          ...args.data,

          achievement: args.data.achievement
            ? {
                connect: args.data.achievement,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AchievementBehaviour)
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "delete",
    possession: "any",
  })
  async deleteAchievementBehaviour(
    @graphql.Args() args: DeleteAchievementBehaviourArgs
  ): Promise<AchievementBehaviour | null> {
    try {
      return await this.service.deleteAchievementBehaviour(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Achievement, {
    nullable: true,
    name: "achievement",
  })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "read",
    possession: "any",
  })
  async getAchievement(
    @graphql.Parent() parent: AchievementBehaviour
  ): Promise<Achievement | null> {
    const result = await this.service.getAchievement(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
