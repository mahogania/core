/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AchievementBehaviourService } from "../achievementBehaviour.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AchievementBehaviourCreateInput } from "./AchievementBehaviourCreateInput";
import { AchievementBehaviour } from "./AchievementBehaviour";
import { AchievementBehaviourFindManyArgs } from "./AchievementBehaviourFindManyArgs";
import { AchievementBehaviourWhereUniqueInput } from "./AchievementBehaviourWhereUniqueInput";
import { AchievementBehaviourUpdateInput } from "./AchievementBehaviourUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AchievementBehaviourControllerBase {
  constructor(
    protected readonly service: AchievementBehaviourService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AchievementBehaviour })
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AchievementBehaviourCreateInput,
  })
  async createAchievementBehaviour(
    @common.Body() data: AchievementBehaviourCreateInput
  ): Promise<AchievementBehaviour> {
    return await this.service.createAchievementBehaviour({
      data: {
        ...data,

        achievement: data.achievement
          ? {
              connect: data.achievement,
            }
          : undefined,
      },
      select: {
        achievement: {
          select: {
            id: true,
          },
        },

        behaviourName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AchievementBehaviour] })
  @ApiNestedQuery(AchievementBehaviourFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async achievementBehaviours(
    @common.Req() request: Request
  ): Promise<AchievementBehaviour[]> {
    const args = plainToClass(AchievementBehaviourFindManyArgs, request.query);
    return this.service.achievementBehaviours({
      ...args,
      select: {
        achievement: {
          select: {
            id: true,
          },
        },

        behaviourName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AchievementBehaviour })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async achievementBehaviour(
    @common.Param() params: AchievementBehaviourWhereUniqueInput
  ): Promise<AchievementBehaviour | null> {
    const result = await this.service.achievementBehaviour({
      where: params,
      select: {
        achievement: {
          select: {
            id: true,
          },
        },

        behaviourName: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AchievementBehaviour })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AchievementBehaviourUpdateInput,
  })
  async updateAchievementBehaviour(
    @common.Param() params: AchievementBehaviourWhereUniqueInput,
    @common.Body() data: AchievementBehaviourUpdateInput
  ): Promise<AchievementBehaviour | null> {
    try {
      return await this.service.updateAchievementBehaviour({
        where: params,
        data: {
          ...data,

          achievement: data.achievement
            ? {
                connect: data.achievement,
              }
            : undefined,
        },
        select: {
          achievement: {
            select: {
              id: true,
            },
          },

          behaviourName: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AchievementBehaviour })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AchievementBehaviour",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAchievementBehaviour(
    @common.Param() params: AchievementBehaviourWhereUniqueInput
  ): Promise<AchievementBehaviour | null> {
    try {
      return await this.service.deleteAchievementBehaviour({
        where: params,
        select: {
          achievement: {
            select: {
              id: true,
            },
          },

          behaviourName: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
