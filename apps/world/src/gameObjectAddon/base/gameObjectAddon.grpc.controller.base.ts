/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameObjectAddonService } from "../gameObjectAddon.service";
import { GameObjectAddonCreateInput } from "./GameObjectAddonCreateInput";
import { GameObjectAddonWhereInput } from "./GameObjectAddonWhereInput";
import { GameObjectAddonWhereUniqueInput } from "./GameObjectAddonWhereUniqueInput";
import { GameObjectAddonFindManyArgs } from "./GameObjectAddonFindManyArgs";
import { GameObjectAddonUpdateInput } from "./GameObjectAddonUpdateInput";
import { GameObjectAddon } from "./GameObjectAddon";

export class GameObjectAddonGrpcControllerBase {
  constructor(protected readonly service: GameObjectAddonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameObjectAddon })
  @GrpcMethod("GameObjectAddonService", "createGameObjectAddon")
  async createGameObjectAddon(
    @common.Body() data: GameObjectAddonCreateInput
  ): Promise<GameObjectAddon> {
    return await this.service.createGameObjectAddon({
      data: data,
      select: {
        aiAnimKitId: true,
        createdAt: true,
        id: true,
        transformId: true,
        updatedAt: true,
        worldEffectId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameObjectAddon] })
  @ApiNestedQuery(GameObjectAddonFindManyArgs)
  @GrpcMethod("GameObjectAddonService", "gameObjectAddons")
  async gameObjectAddons(
    @common.Req() request: Request
  ): Promise<GameObjectAddon[]> {
    const args = plainToClass(GameObjectAddonFindManyArgs, request.query);
    return this.service.gameObjectAddons({
      ...args,
      select: {
        aiAnimKitId: true,
        createdAt: true,
        id: true,
        transformId: true,
        updatedAt: true,
        worldEffectId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameObjectAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectAddonService", "gameObjectAddon")
  async gameObjectAddon(
    @common.Param() params: GameObjectAddonWhereUniqueInput
  ): Promise<GameObjectAddon | null> {
    const result = await this.service.gameObjectAddon({
      where: params,
      select: {
        aiAnimKitId: true,
        createdAt: true,
        id: true,
        transformId: true,
        updatedAt: true,
        worldEffectId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameObjectAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectAddonService", "updateGameObjectAddon")
  async updateGameObjectAddon(
    @common.Param() params: GameObjectAddonWhereUniqueInput,
    @common.Body() data: GameObjectAddonUpdateInput
  ): Promise<GameObjectAddon | null> {
    try {
      return await this.service.updateGameObjectAddon({
        where: params,
        data: data,
        select: {
          aiAnimKitId: true,
          createdAt: true,
          id: true,
          transformId: true,
          updatedAt: true,
          worldEffectId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameObjectAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectAddonService", "deleteGameObjectAddon")
  async deleteGameObjectAddon(
    @common.Param() params: GameObjectAddonWhereUniqueInput
  ): Promise<GameObjectAddon | null> {
    try {
      return await this.service.deleteGameObjectAddon({
        where: params,
        select: {
          aiAnimKitId: true,
          createdAt: true,
          id: true,
          transformId: true,
          updatedAt: true,
          worldEffectId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
