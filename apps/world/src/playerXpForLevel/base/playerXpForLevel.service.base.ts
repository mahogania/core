/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlayerXpForLevel as PrismaPlayerXpForLevel,
} from "@prisma/client";

export class PlayerXpForLevelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerXpForLevelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerXpForLevel.count(args);
  }

  async playerXpForLevels(
    args: Prisma.PlayerXpForLevelFindManyArgs
  ): Promise<PrismaPlayerXpForLevel[]> {
    return this.prisma.playerXpForLevel.findMany(args);
  }
  async playerXpForLevel(
    args: Prisma.PlayerXpForLevelFindUniqueArgs
  ): Promise<PrismaPlayerXpForLevel | null> {
    return this.prisma.playerXpForLevel.findUnique(args);
  }
  async createPlayerXpForLevel(
    args: Prisma.PlayerXpForLevelCreateArgs
  ): Promise<PrismaPlayerXpForLevel> {
    return this.prisma.playerXpForLevel.create(args);
  }
  async updatePlayerXpForLevel(
    args: Prisma.PlayerXpForLevelUpdateArgs
  ): Promise<PrismaPlayerXpForLevel> {
    return this.prisma.playerXpForLevel.update(args);
  }
  async deletePlayerXpForLevel(
    args: Prisma.PlayerXpForLevelDeleteArgs
  ): Promise<PrismaPlayerXpForLevel> {
    return this.prisma.playerXpForLevel.delete(args);
  }
}
