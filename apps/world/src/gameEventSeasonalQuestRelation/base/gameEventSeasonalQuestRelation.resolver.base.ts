/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventSeasonalQuestRelation } from "./GameEventSeasonalQuestRelation";
import { GameEventSeasonalQuestRelationCountArgs } from "./GameEventSeasonalQuestRelationCountArgs";
import { GameEventSeasonalQuestRelationFindManyArgs } from "./GameEventSeasonalQuestRelationFindManyArgs";
import { GameEventSeasonalQuestRelationFindUniqueArgs } from "./GameEventSeasonalQuestRelationFindUniqueArgs";
import { CreateGameEventSeasonalQuestRelationArgs } from "./CreateGameEventSeasonalQuestRelationArgs";
import { UpdateGameEventSeasonalQuestRelationArgs } from "./UpdateGameEventSeasonalQuestRelationArgs";
import { DeleteGameEventSeasonalQuestRelationArgs } from "./DeleteGameEventSeasonalQuestRelationArgs";
import { GameEventSeasonalQuestRelationService } from "../gameEventSeasonalQuestRelation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventSeasonalQuestRelation)
export class GameEventSeasonalQuestRelationResolverBase {
  constructor(
    protected readonly service: GameEventSeasonalQuestRelationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventSeasonalQuestRelation",
    action: "read",
    possession: "any",
  })
  async _gameEventSeasonalQuestRelationsMeta(
    @graphql.Args() args: GameEventSeasonalQuestRelationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventSeasonalQuestRelation])
  @nestAccessControl.UseRoles({
    resource: "GameEventSeasonalQuestRelation",
    action: "read",
    possession: "any",
  })
  async gameEventSeasonalQuestRelations(
    @graphql.Args() args: GameEventSeasonalQuestRelationFindManyArgs
  ): Promise<GameEventSeasonalQuestRelation[]> {
    return this.service.gameEventSeasonalQuestRelations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventSeasonalQuestRelation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventSeasonalQuestRelation",
    action: "read",
    possession: "own",
  })
  async gameEventSeasonalQuestRelation(
    @graphql.Args() args: GameEventSeasonalQuestRelationFindUniqueArgs
  ): Promise<GameEventSeasonalQuestRelation | null> {
    const result = await this.service.gameEventSeasonalQuestRelation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventSeasonalQuestRelation)
  @nestAccessControl.UseRoles({
    resource: "GameEventSeasonalQuestRelation",
    action: "create",
    possession: "any",
  })
  async createGameEventSeasonalQuestRelation(
    @graphql.Args() args: CreateGameEventSeasonalQuestRelationArgs
  ): Promise<GameEventSeasonalQuestRelation> {
    return await this.service.createGameEventSeasonalQuestRelation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventSeasonalQuestRelation)
  @nestAccessControl.UseRoles({
    resource: "GameEventSeasonalQuestRelation",
    action: "update",
    possession: "any",
  })
  async updateGameEventSeasonalQuestRelation(
    @graphql.Args() args: UpdateGameEventSeasonalQuestRelationArgs
  ): Promise<GameEventSeasonalQuestRelation | null> {
    try {
      return await this.service.updateGameEventSeasonalQuestRelation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventSeasonalQuestRelation)
  @nestAccessControl.UseRoles({
    resource: "GameEventSeasonalQuestRelation",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventSeasonalQuestRelation(
    @graphql.Args() args: DeleteGameEventSeasonalQuestRelationArgs
  ): Promise<GameEventSeasonalQuestRelation | null> {
    try {
      return await this.service.deleteGameEventSeasonalQuestRelation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
