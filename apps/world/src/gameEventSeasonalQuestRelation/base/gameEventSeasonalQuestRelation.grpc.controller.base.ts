/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventSeasonalQuestRelationService } from "../gameEventSeasonalQuestRelation.service";
import { GameEventSeasonalQuestRelationCreateInput } from "./GameEventSeasonalQuestRelationCreateInput";
import { GameEventSeasonalQuestRelationWhereInput } from "./GameEventSeasonalQuestRelationWhereInput";
import { GameEventSeasonalQuestRelationWhereUniqueInput } from "./GameEventSeasonalQuestRelationWhereUniqueInput";
import { GameEventSeasonalQuestRelationFindManyArgs } from "./GameEventSeasonalQuestRelationFindManyArgs";
import { GameEventSeasonalQuestRelationUpdateInput } from "./GameEventSeasonalQuestRelationUpdateInput";
import { GameEventSeasonalQuestRelation } from "./GameEventSeasonalQuestRelation";

export class GameEventSeasonalQuestRelationGrpcControllerBase {
  constructor(
    protected readonly service: GameEventSeasonalQuestRelationService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventSeasonalQuestRelation })
  @GrpcMethod(
    "GameEventSeasonalQuestRelationService",
    "createGameEventSeasonalQuestRelation"
  )
  async createGameEventSeasonalQuestRelation(
    @common.Body() data: GameEventSeasonalQuestRelationCreateInput
  ): Promise<GameEventSeasonalQuestRelation> {
    return await this.service.createGameEventSeasonalQuestRelation({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        questId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventSeasonalQuestRelation] })
  @ApiNestedQuery(GameEventSeasonalQuestRelationFindManyArgs)
  @GrpcMethod(
    "GameEventSeasonalQuestRelationService",
    "gameEventSeasonalQuestRelations"
  )
  async gameEventSeasonalQuestRelations(
    @common.Req() request: Request
  ): Promise<GameEventSeasonalQuestRelation[]> {
    const args = plainToClass(
      GameEventSeasonalQuestRelationFindManyArgs,
      request.query
    );
    return this.service.gameEventSeasonalQuestRelations({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        questId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventSeasonalQuestRelation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "GameEventSeasonalQuestRelationService",
    "gameEventSeasonalQuestRelation"
  )
  async gameEventSeasonalQuestRelation(
    @common.Param() params: GameEventSeasonalQuestRelationWhereUniqueInput
  ): Promise<GameEventSeasonalQuestRelation | null> {
    const result = await this.service.gameEventSeasonalQuestRelation({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        questId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventSeasonalQuestRelation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "GameEventSeasonalQuestRelationService",
    "updateGameEventSeasonalQuestRelation"
  )
  async updateGameEventSeasonalQuestRelation(
    @common.Param() params: GameEventSeasonalQuestRelationWhereUniqueInput,
    @common.Body() data: GameEventSeasonalQuestRelationUpdateInput
  ): Promise<GameEventSeasonalQuestRelation | null> {
    try {
      return await this.service.updateGameEventSeasonalQuestRelation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          questId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventSeasonalQuestRelation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "GameEventSeasonalQuestRelationService",
    "deleteGameEventSeasonalQuestRelation"
  )
  async deleteGameEventSeasonalQuestRelation(
    @common.Param() params: GameEventSeasonalQuestRelationWhereUniqueInput
  ): Promise<GameEventSeasonalQuestRelation | null> {
    try {
      return await this.service.deleteGameEventSeasonalQuestRelation({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          questId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
