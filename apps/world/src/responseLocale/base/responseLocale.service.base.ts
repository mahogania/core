/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ResponseLocale as PrismaResponseLocale,
  Response as PrismaResponse,
} from "@prisma/client";

export class ResponseLocaleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResponseLocaleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.responseLocale.count(args);
  }

  async responseLocales(
    args: Prisma.ResponseLocaleFindManyArgs
  ): Promise<PrismaResponseLocale[]> {
    return this.prisma.responseLocale.findMany(args);
  }
  async responseLocale(
    args: Prisma.ResponseLocaleFindUniqueArgs
  ): Promise<PrismaResponseLocale | null> {
    return this.prisma.responseLocale.findUnique(args);
  }
  async createResponseLocale(
    args: Prisma.ResponseLocaleCreateArgs
  ): Promise<PrismaResponseLocale> {
    return this.prisma.responseLocale.create(args);
  }
  async updateResponseLocale(
    args: Prisma.ResponseLocaleUpdateArgs
  ): Promise<PrismaResponseLocale> {
    return this.prisma.responseLocale.update(args);
  }
  async deleteResponseLocale(
    args: Prisma.ResponseLocaleDeleteArgs
  ): Promise<PrismaResponseLocale> {
    return this.prisma.responseLocale.delete(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.ResponseFindManyArgs
  ): Promise<PrismaResponse[]> {
    return this.prisma.responseLocale
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }
}
