/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ResponseLocale } from "./ResponseLocale";
import { ResponseLocaleCountArgs } from "./ResponseLocaleCountArgs";
import { ResponseLocaleFindManyArgs } from "./ResponseLocaleFindManyArgs";
import { ResponseLocaleFindUniqueArgs } from "./ResponseLocaleFindUniqueArgs";
import { CreateResponseLocaleArgs } from "./CreateResponseLocaleArgs";
import { UpdateResponseLocaleArgs } from "./UpdateResponseLocaleArgs";
import { DeleteResponseLocaleArgs } from "./DeleteResponseLocaleArgs";
import { ResponseFindManyArgs } from "../../response/base/ResponseFindManyArgs";
import { Response } from "../../response/base/Response";
import { ResponseLocaleService } from "../responseLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ResponseLocale)
export class ResponseLocaleResolverBase {
  constructor(
    protected readonly service: ResponseLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ResponseLocale",
    action: "read",
    possession: "any",
  })
  async _responseLocalesMeta(
    @graphql.Args() args: ResponseLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ResponseLocale])
  @nestAccessControl.UseRoles({
    resource: "ResponseLocale",
    action: "read",
    possession: "any",
  })
  async responseLocales(
    @graphql.Args() args: ResponseLocaleFindManyArgs
  ): Promise<ResponseLocale[]> {
    return this.service.responseLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ResponseLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ResponseLocale",
    action: "read",
    possession: "own",
  })
  async responseLocale(
    @graphql.Args() args: ResponseLocaleFindUniqueArgs
  ): Promise<ResponseLocale | null> {
    const result = await this.service.responseLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ResponseLocale)
  @nestAccessControl.UseRoles({
    resource: "ResponseLocale",
    action: "create",
    possession: "any",
  })
  async createResponseLocale(
    @graphql.Args() args: CreateResponseLocaleArgs
  ): Promise<ResponseLocale> {
    return await this.service.createResponseLocale({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ResponseLocale)
  @nestAccessControl.UseRoles({
    resource: "ResponseLocale",
    action: "update",
    possession: "any",
  })
  async updateResponseLocale(
    @graphql.Args() args: UpdateResponseLocaleArgs
  ): Promise<ResponseLocale | null> {
    try {
      return await this.service.updateResponseLocale({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ResponseLocale)
  @nestAccessControl.UseRoles({
    resource: "ResponseLocale",
    action: "delete",
    possession: "any",
  })
  async deleteResponseLocale(
    @graphql.Args() args: DeleteResponseLocaleArgs
  ): Promise<ResponseLocale | null> {
    try {
      return await this.service.deleteResponseLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Response], { name: "responses" })
  @nestAccessControl.UseRoles({
    resource: "Response",
    action: "read",
    possession: "any",
  })
  async findResponses(
    @graphql.Parent() parent: ResponseLocale,
    @graphql.Args() args: ResponseFindManyArgs
  ): Promise<Response[]> {
    const results = await this.service.findResponses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
