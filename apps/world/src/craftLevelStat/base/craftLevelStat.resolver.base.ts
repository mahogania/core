/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CraftLevelStat } from "./CraftLevelStat";
import { CraftLevelStatCountArgs } from "./CraftLevelStatCountArgs";
import { CraftLevelStatFindManyArgs } from "./CraftLevelStatFindManyArgs";
import { CraftLevelStatFindUniqueArgs } from "./CraftLevelStatFindUniqueArgs";
import { CreateCraftLevelStatArgs } from "./CreateCraftLevelStatArgs";
import { UpdateCraftLevelStatArgs } from "./UpdateCraftLevelStatArgs";
import { DeleteCraftLevelStatArgs } from "./DeleteCraftLevelStatArgs";
import { Craft } from "../../craft/base/Craft";
import { CraftLevelStatService } from "../craftLevelStat.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CraftLevelStat)
export class CraftLevelStatResolverBase {
  constructor(
    protected readonly service: CraftLevelStatService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "read",
    possession: "any",
  })
  async _craftLevelStatsMeta(
    @graphql.Args() args: CraftLevelStatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CraftLevelStat])
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "read",
    possession: "any",
  })
  async craftLevelStats(
    @graphql.Args() args: CraftLevelStatFindManyArgs
  ): Promise<CraftLevelStat[]> {
    return this.service.craftLevelStats(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CraftLevelStat, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "read",
    possession: "own",
  })
  async craftLevelStat(
    @graphql.Args() args: CraftLevelStatFindUniqueArgs
  ): Promise<CraftLevelStat | null> {
    const result = await this.service.craftLevelStat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CraftLevelStat)
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "create",
    possession: "any",
  })
  async createCraftLevelStat(
    @graphql.Args() args: CreateCraftLevelStatArgs
  ): Promise<CraftLevelStat> {
    return await this.service.createCraftLevelStat({
      ...args,
      data: {
        ...args.data,

        craft: {
          connect: args.data.craft,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CraftLevelStat)
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "update",
    possession: "any",
  })
  async updateCraftLevelStat(
    @graphql.Args() args: UpdateCraftLevelStatArgs
  ): Promise<CraftLevelStat | null> {
    try {
      return await this.service.updateCraftLevelStat({
        ...args,
        data: {
          ...args.data,

          craft: {
            connect: args.data.craft,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CraftLevelStat)
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "delete",
    possession: "any",
  })
  async deleteCraftLevelStat(
    @graphql.Args() args: DeleteCraftLevelStatArgs
  ): Promise<CraftLevelStat | null> {
    try {
      return await this.service.deleteCraftLevelStat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Craft, {
    nullable: true,
    name: "craft",
  })
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "read",
    possession: "any",
  })
  async getCraft(
    @graphql.Parent() parent: CraftLevelStat
  ): Promise<Craft | null> {
    const result = await this.service.getCraft(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
