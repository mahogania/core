/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameObjectTemplateAddon } from "./GameObjectTemplateAddon";
import { GameObjectTemplateAddonCountArgs } from "./GameObjectTemplateAddonCountArgs";
import { GameObjectTemplateAddonFindManyArgs } from "./GameObjectTemplateAddonFindManyArgs";
import { GameObjectTemplateAddonFindUniqueArgs } from "./GameObjectTemplateAddonFindUniqueArgs";
import { DeleteGameObjectTemplateAddonArgs } from "./DeleteGameObjectTemplateAddonArgs";
import { GameObjectTemplateAddonService } from "../gameObjectTemplateAddon.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameObjectTemplateAddon)
export class GameObjectTemplateAddonResolverBase {
  constructor(
    protected readonly service: GameObjectTemplateAddonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameObjectTemplateAddon",
    action: "read",
    possession: "any",
  })
  async _gameObjectTemplateAddonsMeta(
    @graphql.Args() args: GameObjectTemplateAddonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameObjectTemplateAddon])
  @nestAccessControl.UseRoles({
    resource: "GameObjectTemplateAddon",
    action: "read",
    possession: "any",
  })
  async gameObjectTemplateAddons(
    @graphql.Args() args: GameObjectTemplateAddonFindManyArgs
  ): Promise<GameObjectTemplateAddon[]> {
    return this.service.gameObjectTemplateAddons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameObjectTemplateAddon, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameObjectTemplateAddon",
    action: "read",
    possession: "own",
  })
  async gameObjectTemplateAddon(
    @graphql.Args() args: GameObjectTemplateAddonFindUniqueArgs
  ): Promise<GameObjectTemplateAddon | null> {
    const result = await this.service.gameObjectTemplateAddon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GameObjectTemplateAddon)
  @nestAccessControl.UseRoles({
    resource: "GameObjectTemplateAddon",
    action: "delete",
    possession: "any",
  })
  async deleteGameObjectTemplateAddon(
    @graphql.Args() args: DeleteGameObjectTemplateAddonArgs
  ): Promise<GameObjectTemplateAddon | null> {
    try {
      return await this.service.deleteGameObjectTemplateAddon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
