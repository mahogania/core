/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventNpcFlagService } from "../gameEventNpcFlag.service";
import { GameEventNpcFlagCreateInput } from "./GameEventNpcFlagCreateInput";
import { GameEventNpcFlagWhereInput } from "./GameEventNpcFlagWhereInput";
import { GameEventNpcFlagWhereUniqueInput } from "./GameEventNpcFlagWhereUniqueInput";
import { GameEventNpcFlagFindManyArgs } from "./GameEventNpcFlagFindManyArgs";
import { GameEventNpcFlagUpdateInput } from "./GameEventNpcFlagUpdateInput";
import { GameEventNpcFlag } from "./GameEventNpcFlag";

export class GameEventNpcFlagGrpcControllerBase {
  constructor(protected readonly service: GameEventNpcFlagService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventNpcFlag })
  @GrpcMethod("GameEventNpcFlagService", "createGameEventNpcFlag")
  async createGameEventNpcFlag(
    @common.Body() data: GameEventNpcFlagCreateInput
  ): Promise<GameEventNpcFlag> {
    return await this.service.createGameEventNpcFlag({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        guid: true,
        id: true,
        npcflag: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventNpcFlag] })
  @ApiNestedQuery(GameEventNpcFlagFindManyArgs)
  @GrpcMethod("GameEventNpcFlagService", "gameEventNpcFlags")
  async gameEventNpcFlags(
    @common.Req() request: Request
  ): Promise<GameEventNpcFlag[]> {
    const args = plainToClass(GameEventNpcFlagFindManyArgs, request.query);
    return this.service.gameEventNpcFlags({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        guid: true,
        id: true,
        npcflag: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventNpcFlag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventNpcFlagService", "gameEventNpcFlag")
  async gameEventNpcFlag(
    @common.Param() params: GameEventNpcFlagWhereUniqueInput
  ): Promise<GameEventNpcFlag | null> {
    const result = await this.service.gameEventNpcFlag({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        guid: true,
        id: true,
        npcflag: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventNpcFlag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventNpcFlagService", "updateGameEventNpcFlag")
  async updateGameEventNpcFlag(
    @common.Param() params: GameEventNpcFlagWhereUniqueInput,
    @common.Body() data: GameEventNpcFlagUpdateInput
  ): Promise<GameEventNpcFlag | null> {
    try {
      return await this.service.updateGameEventNpcFlag({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          guid: true,
          id: true,
          npcflag: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventNpcFlag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventNpcFlagService", "deleteGameEventNpcFlag")
  async deleteGameEventNpcFlag(
    @common.Param() params: GameEventNpcFlagWhereUniqueInput
  ): Promise<GameEventNpcFlag | null> {
    try {
      return await this.service.deleteGameEventNpcFlag({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          guid: true,
          id: true,
          npcflag: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
