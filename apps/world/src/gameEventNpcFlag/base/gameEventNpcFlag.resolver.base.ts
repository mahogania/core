/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventNpcFlag } from "./GameEventNpcFlag";
import { GameEventNpcFlagCountArgs } from "./GameEventNpcFlagCountArgs";
import { GameEventNpcFlagFindManyArgs } from "./GameEventNpcFlagFindManyArgs";
import { GameEventNpcFlagFindUniqueArgs } from "./GameEventNpcFlagFindUniqueArgs";
import { CreateGameEventNpcFlagArgs } from "./CreateGameEventNpcFlagArgs";
import { UpdateGameEventNpcFlagArgs } from "./UpdateGameEventNpcFlagArgs";
import { DeleteGameEventNpcFlagArgs } from "./DeleteGameEventNpcFlagArgs";
import { GameEventNpcFlagService } from "../gameEventNpcFlag.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventNpcFlag)
export class GameEventNpcFlagResolverBase {
  constructor(
    protected readonly service: GameEventNpcFlagService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcFlag",
    action: "read",
    possession: "any",
  })
  async _gameEventNpcFlagsMeta(
    @graphql.Args() args: GameEventNpcFlagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventNpcFlag])
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcFlag",
    action: "read",
    possession: "any",
  })
  async gameEventNpcFlags(
    @graphql.Args() args: GameEventNpcFlagFindManyArgs
  ): Promise<GameEventNpcFlag[]> {
    return this.service.gameEventNpcFlags(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventNpcFlag, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcFlag",
    action: "read",
    possession: "own",
  })
  async gameEventNpcFlag(
    @graphql.Args() args: GameEventNpcFlagFindUniqueArgs
  ): Promise<GameEventNpcFlag | null> {
    const result = await this.service.gameEventNpcFlag(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventNpcFlag)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcFlag",
    action: "create",
    possession: "any",
  })
  async createGameEventNpcFlag(
    @graphql.Args() args: CreateGameEventNpcFlagArgs
  ): Promise<GameEventNpcFlag> {
    return await this.service.createGameEventNpcFlag({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventNpcFlag)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcFlag",
    action: "update",
    possession: "any",
  })
  async updateGameEventNpcFlag(
    @graphql.Args() args: UpdateGameEventNpcFlagArgs
  ): Promise<GameEventNpcFlag | null> {
    try {
      return await this.service.updateGameEventNpcFlag({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventNpcFlag)
  @nestAccessControl.UseRoles({
    resource: "GameEventNpcFlag",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventNpcFlag(
    @graphql.Args() args: DeleteGameEventNpcFlagArgs
  ): Promise<GameEventNpcFlag | null> {
    try {
      return await this.service.deleteGameEventNpcFlag(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
