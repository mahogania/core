/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlayerFactionchangeTitles } from "./PlayerFactionchangeTitles";
import { PlayerFactionchangeTitlesCountArgs } from "./PlayerFactionchangeTitlesCountArgs";
import { PlayerFactionchangeTitlesFindManyArgs } from "./PlayerFactionchangeTitlesFindManyArgs";
import { PlayerFactionchangeTitlesFindUniqueArgs } from "./PlayerFactionchangeTitlesFindUniqueArgs";
import { DeletePlayerFactionchangeTitlesArgs } from "./DeletePlayerFactionchangeTitlesArgs";
import { PlayerFactionchangeTitlesService } from "../playerFactionchangeTitles.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerFactionchangeTitles)
export class PlayerFactionchangeTitlesResolverBase {
  constructor(
    protected readonly service: PlayerFactionchangeTitlesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeTitles",
    action: "read",
    possession: "any",
  })
  async _playerFactionchangeTitlesItemsMeta(
    @graphql.Args() args: PlayerFactionchangeTitlesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerFactionchangeTitles])
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeTitles",
    action: "read",
    possession: "any",
  })
  async playerFactionchangeTitlesItems(
    @graphql.Args() args: PlayerFactionchangeTitlesFindManyArgs
  ): Promise<PlayerFactionchangeTitles[]> {
    return this.service.playerFactionchangeTitlesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerFactionchangeTitles, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeTitles",
    action: "read",
    possession: "own",
  })
  async playerFactionchangeTitles(
    @graphql.Args() args: PlayerFactionchangeTitlesFindUniqueArgs
  ): Promise<PlayerFactionchangeTitles | null> {
    const result = await this.service.playerFactionchangeTitles(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerFactionchangeTitles)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeTitles",
    action: "delete",
    possession: "any",
  })
  async deletePlayerFactionchangeTitles(
    @graphql.Args() args: DeletePlayerFactionchangeTitlesArgs
  ): Promise<PlayerFactionchangeTitles | null> {
    try {
      return await this.service.deletePlayerFactionchangeTitles(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
