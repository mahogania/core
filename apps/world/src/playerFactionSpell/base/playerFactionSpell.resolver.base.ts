/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlayerFactionSpell } from "./PlayerFactionSpell";
import { PlayerFactionSpellCountArgs } from "./PlayerFactionSpellCountArgs";
import { PlayerFactionSpellFindManyArgs } from "./PlayerFactionSpellFindManyArgs";
import { PlayerFactionSpellFindUniqueArgs } from "./PlayerFactionSpellFindUniqueArgs";
import { CreatePlayerFactionSpellArgs } from "./CreatePlayerFactionSpellArgs";
import { UpdatePlayerFactionSpellArgs } from "./UpdatePlayerFactionSpellArgs";
import { DeletePlayerFactionSpellArgs } from "./DeletePlayerFactionSpellArgs";
import { Faction } from "../../faction/base/Faction";
import { Player } from "../../player/base/Player";
import { PlayerFactionSpellService } from "../playerFactionSpell.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerFactionSpell)
export class PlayerFactionSpellResolverBase {
  constructor(
    protected readonly service: PlayerFactionSpellService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "read",
    possession: "any",
  })
  async _playerFactionSpellsMeta(
    @graphql.Args() args: PlayerFactionSpellCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerFactionSpell])
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "read",
    possession: "any",
  })
  async playerFactionSpells(
    @graphql.Args() args: PlayerFactionSpellFindManyArgs
  ): Promise<PlayerFactionSpell[]> {
    return this.service.playerFactionSpells(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerFactionSpell, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "read",
    possession: "own",
  })
  async playerFactionSpell(
    @graphql.Args() args: PlayerFactionSpellFindUniqueArgs
  ): Promise<PlayerFactionSpell | null> {
    const result = await this.service.playerFactionSpell(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerFactionSpell)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "create",
    possession: "any",
  })
  async createPlayerFactionSpell(
    @graphql.Args() args: CreatePlayerFactionSpellArgs
  ): Promise<PlayerFactionSpell> {
    return await this.service.createPlayerFactionSpell({
      ...args,
      data: {
        ...args.data,

        faction: args.data.faction
          ? {
              connect: args.data.faction,
            }
          : undefined,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerFactionSpell)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "update",
    possession: "any",
  })
  async updatePlayerFactionSpell(
    @graphql.Args() args: UpdatePlayerFactionSpellArgs
  ): Promise<PlayerFactionSpell | null> {
    try {
      return await this.service.updatePlayerFactionSpell({
        ...args,
        data: {
          ...args.data,

          faction: args.data.faction
            ? {
                connect: args.data.faction,
              }
            : undefined,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerFactionSpell)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionSpell",
    action: "delete",
    possession: "any",
  })
  async deletePlayerFactionSpell(
    @graphql.Args() args: DeletePlayerFactionSpellArgs
  ): Promise<PlayerFactionSpell | null> {
    try {
      return await this.service.deletePlayerFactionSpell(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Faction, {
    nullable: true,
    name: "faction",
  })
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "read",
    possession: "any",
  })
  async getFaction(
    @graphql.Parent() parent: PlayerFactionSpell
  ): Promise<Faction | null> {
    const result = await this.service.getFaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: PlayerFactionSpell
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
