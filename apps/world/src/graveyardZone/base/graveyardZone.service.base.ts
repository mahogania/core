/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GraveyardZone as PrismaGraveyardZone } from "@prisma/client";

export class GraveyardZoneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GraveyardZoneCountArgs, "select">
  ): Promise<number> {
    return this.prisma.graveyardZone.count(args);
  }

  async graveyardZones(
    args: Prisma.GraveyardZoneFindManyArgs
  ): Promise<PrismaGraveyardZone[]> {
    return this.prisma.graveyardZone.findMany(args);
  }
  async graveyardZone(
    args: Prisma.GraveyardZoneFindUniqueArgs
  ): Promise<PrismaGraveyardZone | null> {
    return this.prisma.graveyardZone.findUnique(args);
  }
  async createGraveyardZone(
    args: Prisma.GraveyardZoneCreateArgs
  ): Promise<PrismaGraveyardZone> {
    return this.prisma.graveyardZone.create(args);
  }
  async updateGraveyardZone(
    args: Prisma.GraveyardZoneUpdateArgs
  ): Promise<PrismaGraveyardZone> {
    return this.prisma.graveyardZone.update(args);
  }
  async deleteGraveyardZone(
    args: Prisma.GraveyardZoneDeleteArgs
  ): Promise<PrismaGraveyardZone> {
    return this.prisma.graveyardZone.delete(args);
  }
}
