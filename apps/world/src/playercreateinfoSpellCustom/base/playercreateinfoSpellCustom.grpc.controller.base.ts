/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayercreateinfoSpellCustomService } from "../playercreateinfoSpellCustom.service";
import { PlayercreateinfoSpellCustomCreateInput } from "./PlayercreateinfoSpellCustomCreateInput";
import { PlayercreateinfoSpellCustomWhereInput } from "./PlayercreateinfoSpellCustomWhereInput";
import { PlayercreateinfoSpellCustomWhereUniqueInput } from "./PlayercreateinfoSpellCustomWhereUniqueInput";
import { PlayercreateinfoSpellCustomFindManyArgs } from "./PlayercreateinfoSpellCustomFindManyArgs";
import { PlayercreateinfoSpellCustomUpdateInput } from "./PlayercreateinfoSpellCustomUpdateInput";
import { PlayercreateinfoSpellCustom } from "./PlayercreateinfoSpellCustom";

export class PlayercreateinfoSpellCustomGrpcControllerBase {
  constructor(protected readonly service: PlayercreateinfoSpellCustomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayercreateinfoSpellCustom })
  @GrpcMethod(
    "PlayercreateinfoSpellCustomService",
    "createPlayercreateinfoSpellCustom"
  )
  async createPlayercreateinfoSpellCustom(
    @common.Body() data: PlayercreateinfoSpellCustomCreateInput
  ): Promise<PlayercreateinfoSpellCustom> {
    return await this.service.createPlayercreateinfoSpellCustom({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayercreateinfoSpellCustom] })
  @ApiNestedQuery(PlayercreateinfoSpellCustomFindManyArgs)
  @GrpcMethod(
    "PlayercreateinfoSpellCustomService",
    "playercreateinfoSpellCustoms"
  )
  async playercreateinfoSpellCustoms(
    @common.Req() request: Request
  ): Promise<PlayercreateinfoSpellCustom[]> {
    const args = plainToClass(
      PlayercreateinfoSpellCustomFindManyArgs,
      request.query
    );
    return this.service.playercreateinfoSpellCustoms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayercreateinfoSpellCustom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayercreateinfoSpellCustomService",
    "playercreateinfoSpellCustom"
  )
  async playercreateinfoSpellCustom(
    @common.Param() params: PlayercreateinfoSpellCustomWhereUniqueInput
  ): Promise<PlayercreateinfoSpellCustom | null> {
    const result = await this.service.playercreateinfoSpellCustom({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayercreateinfoSpellCustom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayercreateinfoSpellCustomService",
    "updatePlayercreateinfoSpellCustom"
  )
  async updatePlayercreateinfoSpellCustom(
    @common.Param() params: PlayercreateinfoSpellCustomWhereUniqueInput,
    @common.Body() data: PlayercreateinfoSpellCustomUpdateInput
  ): Promise<PlayercreateinfoSpellCustom | null> {
    try {
      return await this.service.updatePlayercreateinfoSpellCustom({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayercreateinfoSpellCustom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayercreateinfoSpellCustomService",
    "deletePlayercreateinfoSpellCustom"
  )
  async deletePlayercreateinfoSpellCustom(
    @common.Param() params: PlayercreateinfoSpellCustomWhereUniqueInput
  ): Promise<PlayercreateinfoSpellCustom | null> {
    try {
      return await this.service.deletePlayercreateinfoSpellCustom({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
