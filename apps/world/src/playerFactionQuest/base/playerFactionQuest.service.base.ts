/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlayerFactionQuest as PrismaPlayerFactionQuest,
  Faction as PrismaFaction,
  Player as PrismaPlayer,
} from "@prisma/client";

export class PlayerFactionQuestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerFactionQuestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerFactionQuest.count(args);
  }

  async playerFactionQuests(
    args: Prisma.PlayerFactionQuestFindManyArgs
  ): Promise<PrismaPlayerFactionQuest[]> {
    return this.prisma.playerFactionQuest.findMany(args);
  }
  async playerFactionQuest(
    args: Prisma.PlayerFactionQuestFindUniqueArgs
  ): Promise<PrismaPlayerFactionQuest | null> {
    return this.prisma.playerFactionQuest.findUnique(args);
  }
  async createPlayerFactionQuest(
    args: Prisma.PlayerFactionQuestCreateArgs
  ): Promise<PrismaPlayerFactionQuest> {
    return this.prisma.playerFactionQuest.create(args);
  }
  async updatePlayerFactionQuest(
    args: Prisma.PlayerFactionQuestUpdateArgs
  ): Promise<PrismaPlayerFactionQuest> {
    return this.prisma.playerFactionQuest.update(args);
  }
  async deletePlayerFactionQuest(
    args: Prisma.PlayerFactionQuestDeleteArgs
  ): Promise<PrismaPlayerFactionQuest> {
    return this.prisma.playerFactionQuest.delete(args);
  }

  async getFaction(parentId: string): Promise<PrismaFaction | null> {
    return this.prisma.playerFactionQuest
      .findUnique({
        where: { id: parentId },
      })
      .faction();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.playerFactionQuest
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
