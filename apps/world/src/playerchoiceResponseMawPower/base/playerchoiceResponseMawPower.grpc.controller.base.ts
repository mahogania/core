/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerchoiceResponseMawPowerService } from "../playerchoiceResponseMawPower.service";
import { PlayerchoiceResponseMawPowerCreateInput } from "./PlayerchoiceResponseMawPowerCreateInput";
import { PlayerchoiceResponseMawPowerWhereInput } from "./PlayerchoiceResponseMawPowerWhereInput";
import { PlayerchoiceResponseMawPowerWhereUniqueInput } from "./PlayerchoiceResponseMawPowerWhereUniqueInput";
import { PlayerchoiceResponseMawPowerFindManyArgs } from "./PlayerchoiceResponseMawPowerFindManyArgs";
import { PlayerchoiceResponseMawPowerUpdateInput } from "./PlayerchoiceResponseMawPowerUpdateInput";
import { PlayerchoiceResponseMawPower } from "./PlayerchoiceResponseMawPower";

export class PlayerchoiceResponseMawPowerGrpcControllerBase {
  constructor(
    protected readonly service: PlayerchoiceResponseMawPowerService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerchoiceResponseMawPower })
  @GrpcMethod(
    "PlayerchoiceResponseMawPowerService",
    "createPlayerchoiceResponseMawPower"
  )
  async createPlayerchoiceResponseMawPower(
    @common.Body() data: PlayerchoiceResponseMawPowerCreateInput
  ): Promise<PlayerchoiceResponseMawPower> {
    return await this.service.createPlayerchoiceResponseMawPower({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerchoiceResponseMawPower] })
  @ApiNestedQuery(PlayerchoiceResponseMawPowerFindManyArgs)
  @GrpcMethod(
    "PlayerchoiceResponseMawPowerService",
    "playerchoiceResponseMawPowers"
  )
  async playerchoiceResponseMawPowers(
    @common.Req() request: Request
  ): Promise<PlayerchoiceResponseMawPower[]> {
    const args = plainToClass(
      PlayerchoiceResponseMawPowerFindManyArgs,
      request.query
    );
    return this.service.playerchoiceResponseMawPowers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponseMawPower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerchoiceResponseMawPowerService",
    "playerchoiceResponseMawPower"
  )
  async playerchoiceResponseMawPower(
    @common.Param() params: PlayerchoiceResponseMawPowerWhereUniqueInput
  ): Promise<PlayerchoiceResponseMawPower | null> {
    const result = await this.service.playerchoiceResponseMawPower({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponseMawPower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerchoiceResponseMawPowerService",
    "updatePlayerchoiceResponseMawPower"
  )
  async updatePlayerchoiceResponseMawPower(
    @common.Param() params: PlayerchoiceResponseMawPowerWhereUniqueInput,
    @common.Body() data: PlayerchoiceResponseMawPowerUpdateInput
  ): Promise<PlayerchoiceResponseMawPower | null> {
    try {
      return await this.service.updatePlayerchoiceResponseMawPower({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerchoiceResponseMawPower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerchoiceResponseMawPowerService",
    "deletePlayerchoiceResponseMawPower"
  )
  async deletePlayerchoiceResponseMawPower(
    @common.Param() params: PlayerchoiceResponseMawPowerWhereUniqueInput
  ): Promise<PlayerchoiceResponseMawPower | null> {
    try {
      return await this.service.deletePlayerchoiceResponseMawPower({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
