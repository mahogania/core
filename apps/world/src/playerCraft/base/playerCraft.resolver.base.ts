/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlayerCraft } from "./PlayerCraft";
import { PlayerCraftCountArgs } from "./PlayerCraftCountArgs";
import { PlayerCraftFindManyArgs } from "./PlayerCraftFindManyArgs";
import { PlayerCraftFindUniqueArgs } from "./PlayerCraftFindUniqueArgs";
import { CreatePlayerCraftArgs } from "./CreatePlayerCraftArgs";
import { UpdatePlayerCraftArgs } from "./UpdatePlayerCraftArgs";
import { DeletePlayerCraftArgs } from "./DeletePlayerCraftArgs";
import { Craft } from "../../craft/base/Craft";
import { Player } from "../../player/base/Player";
import { PlayerCraftService } from "../playerCraft.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerCraft)
export class PlayerCraftResolverBase {
  constructor(
    protected readonly service: PlayerCraftService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "read",
    possession: "any",
  })
  async _playerCraftsMeta(
    @graphql.Args() args: PlayerCraftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerCraft])
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "read",
    possession: "any",
  })
  async playerCrafts(
    @graphql.Args() args: PlayerCraftFindManyArgs
  ): Promise<PlayerCraft[]> {
    return this.service.playerCrafts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerCraft, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "read",
    possession: "own",
  })
  async playerCraft(
    @graphql.Args() args: PlayerCraftFindUniqueArgs
  ): Promise<PlayerCraft | null> {
    const result = await this.service.playerCraft(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerCraft)
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "create",
    possession: "any",
  })
  async createPlayerCraft(
    @graphql.Args() args: CreatePlayerCraftArgs
  ): Promise<PlayerCraft> {
    return await this.service.createPlayerCraft({
      ...args,
      data: {
        ...args.data,

        craft: {
          connect: args.data.craft,
        },

        player: {
          connect: args.data.player,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerCraft)
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "update",
    possession: "any",
  })
  async updatePlayerCraft(
    @graphql.Args() args: UpdatePlayerCraftArgs
  ): Promise<PlayerCraft | null> {
    try {
      return await this.service.updatePlayerCraft({
        ...args,
        data: {
          ...args.data,

          craft: {
            connect: args.data.craft,
          },

          player: {
            connect: args.data.player,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerCraft)
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "delete",
    possession: "any",
  })
  async deletePlayerCraft(
    @graphql.Args() args: DeletePlayerCraftArgs
  ): Promise<PlayerCraft | null> {
    try {
      return await this.service.deletePlayerCraft(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Craft, {
    nullable: true,
    name: "craft",
  })
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "read",
    possession: "any",
  })
  async getCraft(@graphql.Parent() parent: PlayerCraft): Promise<Craft | null> {
    const result = await this.service.getCraft(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: PlayerCraft
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
