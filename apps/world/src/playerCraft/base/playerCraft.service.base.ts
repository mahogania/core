/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlayerCraft as PrismaPlayerCraft,
  Craft as PrismaCraft,
  Player as PrismaPlayer,
} from "@prisma/client";

export class PlayerCraftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerCraftCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerCraft.count(args);
  }

  async playerCrafts(
    args: Prisma.PlayerCraftFindManyArgs
  ): Promise<PrismaPlayerCraft[]> {
    return this.prisma.playerCraft.findMany(args);
  }
  async playerCraft(
    args: Prisma.PlayerCraftFindUniqueArgs
  ): Promise<PrismaPlayerCraft | null> {
    return this.prisma.playerCraft.findUnique(args);
  }
  async createPlayerCraft(
    args: Prisma.PlayerCraftCreateArgs
  ): Promise<PrismaPlayerCraft> {
    return this.prisma.playerCraft.create(args);
  }
  async updatePlayerCraft(
    args: Prisma.PlayerCraftUpdateArgs
  ): Promise<PrismaPlayerCraft> {
    return this.prisma.playerCraft.update(args);
  }
  async deletePlayerCraft(
    args: Prisma.PlayerCraftDeleteArgs
  ): Promise<PrismaPlayerCraft> {
    return this.prisma.playerCraft.delete(args);
  }

  async getCraft(parentId: string): Promise<PrismaCraft | null> {
    return this.prisma.playerCraft
      .findUnique({
        where: { id: parentId },
      })
      .craft();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.playerCraft
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
