/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PhaseNameService } from "../phaseName.service";
import { PhaseNameCreateInput } from "./PhaseNameCreateInput";
import { PhaseNameWhereInput } from "./PhaseNameWhereInput";
import { PhaseNameWhereUniqueInput } from "./PhaseNameWhereUniqueInput";
import { PhaseNameFindManyArgs } from "./PhaseNameFindManyArgs";
import { PhaseNameUpdateInput } from "./PhaseNameUpdateInput";
import { PhaseName } from "./PhaseName";

export class PhaseNameGrpcControllerBase {
  constructor(protected readonly service: PhaseNameService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PhaseName })
  @GrpcMethod("PhaseNameService", "createPhaseName")
  async createPhaseName(
    @common.Body() data: PhaseNameCreateInput
  ): Promise<PhaseName> {
    return await this.service.createPhaseName({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PhaseName] })
  @ApiNestedQuery(PhaseNameFindManyArgs)
  @GrpcMethod("PhaseNameService", "phaseNames")
  async phaseNames(@common.Req() request: Request): Promise<PhaseName[]> {
    const args = plainToClass(PhaseNameFindManyArgs, request.query);
    return this.service.phaseNames({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PhaseName })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PhaseNameService", "phaseName")
  async phaseName(
    @common.Param() params: PhaseNameWhereUniqueInput
  ): Promise<PhaseName | null> {
    const result = await this.service.phaseName({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PhaseName })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PhaseNameService", "updatePhaseName")
  async updatePhaseName(
    @common.Param() params: PhaseNameWhereUniqueInput,
    @common.Body() data: PhaseNameUpdateInput
  ): Promise<PhaseName | null> {
    try {
      return await this.service.updatePhaseName({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PhaseName })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PhaseNameService", "deletePhaseName")
  async deletePhaseName(
    @common.Param() params: PhaseNameWhereUniqueInput
  ): Promise<PhaseName | null> {
    try {
      return await this.service.deletePhaseName({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
