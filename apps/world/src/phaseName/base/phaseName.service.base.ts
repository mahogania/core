/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PhaseName as PrismaPhaseName } from "@prisma/client";

export class PhaseNameServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PhaseNameCountArgs, "select">
  ): Promise<number> {
    return this.prisma.phaseName.count(args);
  }

  async phaseNames(
    args: Prisma.PhaseNameFindManyArgs
  ): Promise<PrismaPhaseName[]> {
    return this.prisma.phaseName.findMany(args);
  }
  async phaseName(
    args: Prisma.PhaseNameFindUniqueArgs
  ): Promise<PrismaPhaseName | null> {
    return this.prisma.phaseName.findUnique(args);
  }
  async createPhaseName(
    args: Prisma.PhaseNameCreateArgs
  ): Promise<PrismaPhaseName> {
    return this.prisma.phaseName.create(args);
  }
  async updatePhaseName(
    args: Prisma.PhaseNameUpdateArgs
  ): Promise<PrismaPhaseName> {
    return this.prisma.phaseName.update(args);
  }
  async deletePhaseName(
    args: Prisma.PhaseNameDeleteArgs
  ): Promise<PrismaPhaseName> {
    return this.prisma.phaseName.delete(args);
  }
}
