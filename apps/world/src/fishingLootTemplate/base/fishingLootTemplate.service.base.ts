/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FishingLootTemplate as PrismaFishingLootTemplate,
} from "@prisma/client";

export class FishingLootTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FishingLootTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fishingLootTemplate.count(args);
  }

  async fishingLootTemplates(
    args: Prisma.FishingLootTemplateFindManyArgs
  ): Promise<PrismaFishingLootTemplate[]> {
    return this.prisma.fishingLootTemplate.findMany(args);
  }
  async fishingLootTemplate(
    args: Prisma.FishingLootTemplateFindUniqueArgs
  ): Promise<PrismaFishingLootTemplate | null> {
    return this.prisma.fishingLootTemplate.findUnique(args);
  }
  async createFishingLootTemplate(
    args: Prisma.FishingLootTemplateCreateArgs
  ): Promise<PrismaFishingLootTemplate> {
    return this.prisma.fishingLootTemplate.create(args);
  }
  async updateFishingLootTemplate(
    args: Prisma.FishingLootTemplateUpdateArgs
  ): Promise<PrismaFishingLootTemplate> {
    return this.prisma.fishingLootTemplate.update(args);
  }
  async deleteFishingLootTemplate(
    args: Prisma.FishingLootTemplateDeleteArgs
  ): Promise<PrismaFishingLootTemplate> {
    return this.prisma.fishingLootTemplate.delete(args);
  }
}
