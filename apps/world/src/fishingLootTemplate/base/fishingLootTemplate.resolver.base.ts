/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FishingLootTemplate } from "./FishingLootTemplate";
import { FishingLootTemplateCountArgs } from "./FishingLootTemplateCountArgs";
import { FishingLootTemplateFindManyArgs } from "./FishingLootTemplateFindManyArgs";
import { FishingLootTemplateFindUniqueArgs } from "./FishingLootTemplateFindUniqueArgs";
import { CreateFishingLootTemplateArgs } from "./CreateFishingLootTemplateArgs";
import { UpdateFishingLootTemplateArgs } from "./UpdateFishingLootTemplateArgs";
import { DeleteFishingLootTemplateArgs } from "./DeleteFishingLootTemplateArgs";
import { FishingLootTemplateService } from "../fishingLootTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FishingLootTemplate)
export class FishingLootTemplateResolverBase {
  constructor(
    protected readonly service: FishingLootTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FishingLootTemplate",
    action: "read",
    possession: "any",
  })
  async _fishingLootTemplatesMeta(
    @graphql.Args() args: FishingLootTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FishingLootTemplate])
  @nestAccessControl.UseRoles({
    resource: "FishingLootTemplate",
    action: "read",
    possession: "any",
  })
  async fishingLootTemplates(
    @graphql.Args() args: FishingLootTemplateFindManyArgs
  ): Promise<FishingLootTemplate[]> {
    return this.service.fishingLootTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FishingLootTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FishingLootTemplate",
    action: "read",
    possession: "own",
  })
  async fishingLootTemplate(
    @graphql.Args() args: FishingLootTemplateFindUniqueArgs
  ): Promise<FishingLootTemplate | null> {
    const result = await this.service.fishingLootTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FishingLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "FishingLootTemplate",
    action: "create",
    possession: "any",
  })
  async createFishingLootTemplate(
    @graphql.Args() args: CreateFishingLootTemplateArgs
  ): Promise<FishingLootTemplate> {
    return await this.service.createFishingLootTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FishingLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "FishingLootTemplate",
    action: "update",
    possession: "any",
  })
  async updateFishingLootTemplate(
    @graphql.Args() args: UpdateFishingLootTemplateArgs
  ): Promise<FishingLootTemplate | null> {
    try {
      return await this.service.updateFishingLootTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FishingLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "FishingLootTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteFishingLootTemplate(
    @graphql.Args() args: DeleteFishingLootTemplateArgs
  ): Promise<FishingLootTemplate | null> {
    try {
      return await this.service.deleteFishingLootTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
