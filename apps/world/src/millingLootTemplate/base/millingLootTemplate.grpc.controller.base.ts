/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { MillingLootTemplateService } from "../millingLootTemplate.service";
import { MillingLootTemplateCreateInput } from "./MillingLootTemplateCreateInput";
import { MillingLootTemplateWhereInput } from "./MillingLootTemplateWhereInput";
import { MillingLootTemplateWhereUniqueInput } from "./MillingLootTemplateWhereUniqueInput";
import { MillingLootTemplateFindManyArgs } from "./MillingLootTemplateFindManyArgs";
import { MillingLootTemplateUpdateInput } from "./MillingLootTemplateUpdateInput";
import { MillingLootTemplate } from "./MillingLootTemplate";

export class MillingLootTemplateGrpcControllerBase {
  constructor(protected readonly service: MillingLootTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MillingLootTemplate })
  @GrpcMethod("MillingLootTemplateService", "createMillingLootTemplate")
  async createMillingLootTemplate(
    @common.Body() data: MillingLootTemplateCreateInput
  ): Promise<MillingLootTemplate> {
    return await this.service.createMillingLootTemplate({
      data: {
        ...data,

        lootTemplate: data.lootTemplate
          ? {
              connect: data.lootTemplate,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        lootTemplate: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MillingLootTemplate] })
  @ApiNestedQuery(MillingLootTemplateFindManyArgs)
  @GrpcMethod("MillingLootTemplateService", "millingLootTemplates")
  async millingLootTemplates(
    @common.Req() request: Request
  ): Promise<MillingLootTemplate[]> {
    const args = plainToClass(MillingLootTemplateFindManyArgs, request.query);
    return this.service.millingLootTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,

        lootTemplate: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MillingLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MillingLootTemplateService", "millingLootTemplate")
  async millingLootTemplate(
    @common.Param() params: MillingLootTemplateWhereUniqueInput
  ): Promise<MillingLootTemplate | null> {
    const result = await this.service.millingLootTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,

        lootTemplate: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MillingLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MillingLootTemplateService", "updateMillingLootTemplate")
  async updateMillingLootTemplate(
    @common.Param() params: MillingLootTemplateWhereUniqueInput,
    @common.Body() data: MillingLootTemplateUpdateInput
  ): Promise<MillingLootTemplate | null> {
    try {
      return await this.service.updateMillingLootTemplate({
        where: params,
        data: {
          ...data,

          lootTemplate: data.lootTemplate
            ? {
                connect: data.lootTemplate,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          lootTemplate: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MillingLootTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MillingLootTemplateService", "deleteMillingLootTemplate")
  async deleteMillingLootTemplate(
    @common.Param() params: MillingLootTemplateWhereUniqueInput
  ): Promise<MillingLootTemplate | null> {
    try {
      return await this.service.deleteMillingLootTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,

          lootTemplate: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
