/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MillingLootTemplate } from "./MillingLootTemplate";
import { MillingLootTemplateCountArgs } from "./MillingLootTemplateCountArgs";
import { MillingLootTemplateFindManyArgs } from "./MillingLootTemplateFindManyArgs";
import { MillingLootTemplateFindUniqueArgs } from "./MillingLootTemplateFindUniqueArgs";
import { CreateMillingLootTemplateArgs } from "./CreateMillingLootTemplateArgs";
import { UpdateMillingLootTemplateArgs } from "./UpdateMillingLootTemplateArgs";
import { DeleteMillingLootTemplateArgs } from "./DeleteMillingLootTemplateArgs";
import { LootTemplate } from "../../lootTemplate/base/LootTemplate";
import { MillingLootTemplateService } from "../millingLootTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MillingLootTemplate)
export class MillingLootTemplateResolverBase {
  constructor(
    protected readonly service: MillingLootTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MillingLootTemplate",
    action: "read",
    possession: "any",
  })
  async _millingLootTemplatesMeta(
    @graphql.Args() args: MillingLootTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MillingLootTemplate])
  @nestAccessControl.UseRoles({
    resource: "MillingLootTemplate",
    action: "read",
    possession: "any",
  })
  async millingLootTemplates(
    @graphql.Args() args: MillingLootTemplateFindManyArgs
  ): Promise<MillingLootTemplate[]> {
    return this.service.millingLootTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MillingLootTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MillingLootTemplate",
    action: "read",
    possession: "own",
  })
  async millingLootTemplate(
    @graphql.Args() args: MillingLootTemplateFindUniqueArgs
  ): Promise<MillingLootTemplate | null> {
    const result = await this.service.millingLootTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MillingLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "MillingLootTemplate",
    action: "create",
    possession: "any",
  })
  async createMillingLootTemplate(
    @graphql.Args() args: CreateMillingLootTemplateArgs
  ): Promise<MillingLootTemplate> {
    return await this.service.createMillingLootTemplate({
      ...args,
      data: {
        ...args.data,

        lootTemplate: args.data.lootTemplate
          ? {
              connect: args.data.lootTemplate,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MillingLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "MillingLootTemplate",
    action: "update",
    possession: "any",
  })
  async updateMillingLootTemplate(
    @graphql.Args() args: UpdateMillingLootTemplateArgs
  ): Promise<MillingLootTemplate | null> {
    try {
      return await this.service.updateMillingLootTemplate({
        ...args,
        data: {
          ...args.data,

          lootTemplate: args.data.lootTemplate
            ? {
                connect: args.data.lootTemplate,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MillingLootTemplate)
  @nestAccessControl.UseRoles({
    resource: "MillingLootTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteMillingLootTemplate(
    @graphql.Args() args: DeleteMillingLootTemplateArgs
  ): Promise<MillingLootTemplate | null> {
    try {
      return await this.service.deleteMillingLootTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => LootTemplate, {
    nullable: true,
    name: "lootTemplate",
  })
  @nestAccessControl.UseRoles({
    resource: "LootTemplate",
    action: "read",
    possession: "any",
  })
  async getLootTemplate(
    @graphql.Parent() parent: MillingLootTemplate
  ): Promise<LootTemplate | null> {
    const result = await this.service.getLootTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
