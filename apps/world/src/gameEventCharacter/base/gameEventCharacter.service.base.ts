/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GameEventCharacter as PrismaGameEventCharacter,
} from "@prisma/client";

export class GameEventCharacterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameEventCharacterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameEventCharacter.count(args);
  }

  async gameEventCharacters(
    args: Prisma.GameEventCharacterFindManyArgs
  ): Promise<PrismaGameEventCharacter[]> {
    return this.prisma.gameEventCharacter.findMany(args);
  }
  async gameEventCharacter(
    args: Prisma.GameEventCharacterFindUniqueArgs
  ): Promise<PrismaGameEventCharacter | null> {
    return this.prisma.gameEventCharacter.findUnique(args);
  }
  async createGameEventCharacter(
    args: Prisma.GameEventCharacterCreateArgs
  ): Promise<PrismaGameEventCharacter> {
    return this.prisma.gameEventCharacter.create(args);
  }
  async updateGameEventCharacter(
    args: Prisma.GameEventCharacterUpdateArgs
  ): Promise<PrismaGameEventCharacter> {
    return this.prisma.gameEventCharacter.update(args);
  }
  async deleteGameEventCharacter(
    args: Prisma.GameEventCharacterDeleteArgs
  ): Promise<PrismaGameEventCharacter> {
    return this.prisma.gameEventCharacter.delete(args);
  }
}
