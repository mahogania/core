/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventCharacter } from "./GameEventCharacter";
import { GameEventCharacterCountArgs } from "./GameEventCharacterCountArgs";
import { GameEventCharacterFindManyArgs } from "./GameEventCharacterFindManyArgs";
import { GameEventCharacterFindUniqueArgs } from "./GameEventCharacterFindUniqueArgs";
import { CreateGameEventCharacterArgs } from "./CreateGameEventCharacterArgs";
import { UpdateGameEventCharacterArgs } from "./UpdateGameEventCharacterArgs";
import { DeleteGameEventCharacterArgs } from "./DeleteGameEventCharacterArgs";
import { GameEventCharacterService } from "../gameEventCharacter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventCharacter)
export class GameEventCharacterResolverBase {
  constructor(
    protected readonly service: GameEventCharacterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventCharacter",
    action: "read",
    possession: "any",
  })
  async _gameEventCharactersMeta(
    @graphql.Args() args: GameEventCharacterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventCharacter])
  @nestAccessControl.UseRoles({
    resource: "GameEventCharacter",
    action: "read",
    possession: "any",
  })
  async gameEventCharacters(
    @graphql.Args() args: GameEventCharacterFindManyArgs
  ): Promise<GameEventCharacter[]> {
    return this.service.gameEventCharacters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventCharacter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventCharacter",
    action: "read",
    possession: "own",
  })
  async gameEventCharacter(
    @graphql.Args() args: GameEventCharacterFindUniqueArgs
  ): Promise<GameEventCharacter | null> {
    const result = await this.service.gameEventCharacter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCharacter)
  @nestAccessControl.UseRoles({
    resource: "GameEventCharacter",
    action: "create",
    possession: "any",
  })
  async createGameEventCharacter(
    @graphql.Args() args: CreateGameEventCharacterArgs
  ): Promise<GameEventCharacter> {
    return await this.service.createGameEventCharacter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCharacter)
  @nestAccessControl.UseRoles({
    resource: "GameEventCharacter",
    action: "update",
    possession: "any",
  })
  async updateGameEventCharacter(
    @graphql.Args() args: UpdateGameEventCharacterArgs
  ): Promise<GameEventCharacter | null> {
    try {
      return await this.service.updateGameEventCharacter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventCharacter)
  @nestAccessControl.UseRoles({
    resource: "GameEventCharacter",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventCharacter(
    @graphql.Args() args: DeleteGameEventCharacterArgs
  ): Promise<GameEventCharacter | null> {
    try {
      return await this.service.deleteGameEventCharacter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
