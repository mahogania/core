/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventCharacterService } from "../gameEventCharacter.service";
import { GameEventCharacterCreateInput } from "./GameEventCharacterCreateInput";
import { GameEventCharacterWhereInput } from "./GameEventCharacterWhereInput";
import { GameEventCharacterWhereUniqueInput } from "./GameEventCharacterWhereUniqueInput";
import { GameEventCharacterFindManyArgs } from "./GameEventCharacterFindManyArgs";
import { GameEventCharacterUpdateInput } from "./GameEventCharacterUpdateInput";
import { GameEventCharacter } from "./GameEventCharacter";

export class GameEventCharacterGrpcControllerBase {
  constructor(protected readonly service: GameEventCharacterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventCharacter })
  @GrpcMethod("GameEventCharacterService", "createGameEventCharacter")
  async createGameEventCharacter(
    @common.Body() data: GameEventCharacterCreateInput
  ): Promise<GameEventCharacter> {
    return await this.service.createGameEventCharacter({
      data: data,
      select: {
        createdAt: true,
        id: true,
        npcId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventCharacter] })
  @ApiNestedQuery(GameEventCharacterFindManyArgs)
  @GrpcMethod("GameEventCharacterService", "gameEventCharacters")
  async gameEventCharacters(
    @common.Req() request: Request
  ): Promise<GameEventCharacter[]> {
    const args = plainToClass(GameEventCharacterFindManyArgs, request.query);
    return this.service.gameEventCharacters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        npcId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventCharacter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCharacterService", "gameEventCharacter")
  async gameEventCharacter(
    @common.Param() params: GameEventCharacterWhereUniqueInput
  ): Promise<GameEventCharacter | null> {
    const result = await this.service.gameEventCharacter({
      where: params,
      select: {
        createdAt: true,
        id: true,
        npcId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventCharacter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCharacterService", "updateGameEventCharacter")
  async updateGameEventCharacter(
    @common.Param() params: GameEventCharacterWhereUniqueInput,
    @common.Body() data: GameEventCharacterUpdateInput
  ): Promise<GameEventCharacter | null> {
    try {
      return await this.service.updateGameEventCharacter({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          npcId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventCharacter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCharacterService", "deleteGameEventCharacter")
  async deleteGameEventCharacter(
    @common.Param() params: GameEventCharacterWhereUniqueInput
  ): Promise<GameEventCharacter | null> {
    try {
      return await this.service.deleteGameEventCharacter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          npcId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
