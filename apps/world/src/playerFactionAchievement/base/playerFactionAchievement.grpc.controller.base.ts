/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerFactionAchievementService } from "../playerFactionAchievement.service";
import { PlayerFactionAchievementCreateInput } from "./PlayerFactionAchievementCreateInput";
import { PlayerFactionAchievementWhereInput } from "./PlayerFactionAchievementWhereInput";
import { PlayerFactionAchievementWhereUniqueInput } from "./PlayerFactionAchievementWhereUniqueInput";
import { PlayerFactionAchievementFindManyArgs } from "./PlayerFactionAchievementFindManyArgs";
import { PlayerFactionAchievementUpdateInput } from "./PlayerFactionAchievementUpdateInput";
import { PlayerFactionAchievement } from "./PlayerFactionAchievement";

export class PlayerFactionAchievementGrpcControllerBase {
  constructor(protected readonly service: PlayerFactionAchievementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerFactionAchievement })
  @GrpcMethod(
    "PlayerFactionAchievementService",
    "createPlayerFactionAchievement"
  )
  async createPlayerFactionAchievement(
    @common.Body() data: PlayerFactionAchievementCreateInput
  ): Promise<PlayerFactionAchievement> {
    return await this.service.createPlayerFactionAchievement({
      data: {
        ...data,

        faction: {
          connect: data.faction,
        },

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        faction: {
          select: {
            id: true,
          },
        },

        id: true,

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerFactionAchievement] })
  @ApiNestedQuery(PlayerFactionAchievementFindManyArgs)
  @GrpcMethod("PlayerFactionAchievementService", "playerFactionAchievements")
  async playerFactionAchievements(
    @common.Req() request: Request
  ): Promise<PlayerFactionAchievement[]> {
    const args = plainToClass(
      PlayerFactionAchievementFindManyArgs,
      request.query
    );
    return this.service.playerFactionAchievements({
      ...args,
      select: {
        createdAt: true,

        faction: {
          select: {
            id: true,
          },
        },

        id: true,

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionAchievement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerFactionAchievementService", "playerFactionAchievement")
  async playerFactionAchievement(
    @common.Param() params: PlayerFactionAchievementWhereUniqueInput
  ): Promise<PlayerFactionAchievement | null> {
    const result = await this.service.playerFactionAchievement({
      where: params,
      select: {
        createdAt: true,

        faction: {
          select: {
            id: true,
          },
        },

        id: true,

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionAchievement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionAchievementService",
    "updatePlayerFactionAchievement"
  )
  async updatePlayerFactionAchievement(
    @common.Param() params: PlayerFactionAchievementWhereUniqueInput,
    @common.Body() data: PlayerFactionAchievementUpdateInput
  ): Promise<PlayerFactionAchievement | null> {
    try {
      return await this.service.updatePlayerFactionAchievement({
        where: params,
        data: {
          ...data,

          faction: {
            connect: data.faction,
          },

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          faction: {
            select: {
              id: true,
            },
          },

          id: true,

          player: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionAchievement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionAchievementService",
    "deletePlayerFactionAchievement"
  )
  async deletePlayerFactionAchievement(
    @common.Param() params: PlayerFactionAchievementWhereUniqueInput
  ): Promise<PlayerFactionAchievement | null> {
    try {
      return await this.service.deletePlayerFactionAchievement({
        where: params,
        select: {
          createdAt: true,

          faction: {
            select: {
              id: true,
            },
          },

          id: true,

          player: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
