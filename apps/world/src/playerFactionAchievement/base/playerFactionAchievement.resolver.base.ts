/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlayerFactionAchievement } from "./PlayerFactionAchievement";
import { PlayerFactionAchievementCountArgs } from "./PlayerFactionAchievementCountArgs";
import { PlayerFactionAchievementFindManyArgs } from "./PlayerFactionAchievementFindManyArgs";
import { PlayerFactionAchievementFindUniqueArgs } from "./PlayerFactionAchievementFindUniqueArgs";
import { CreatePlayerFactionAchievementArgs } from "./CreatePlayerFactionAchievementArgs";
import { UpdatePlayerFactionAchievementArgs } from "./UpdatePlayerFactionAchievementArgs";
import { DeletePlayerFactionAchievementArgs } from "./DeletePlayerFactionAchievementArgs";
import { Faction } from "../../faction/base/Faction";
import { Player } from "../../player/base/Player";
import { PlayerFactionAchievementService } from "../playerFactionAchievement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerFactionAchievement)
export class PlayerFactionAchievementResolverBase {
  constructor(
    protected readonly service: PlayerFactionAchievementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "read",
    possession: "any",
  })
  async _playerFactionAchievementsMeta(
    @graphql.Args() args: PlayerFactionAchievementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerFactionAchievement])
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "read",
    possession: "any",
  })
  async playerFactionAchievements(
    @graphql.Args() args: PlayerFactionAchievementFindManyArgs
  ): Promise<PlayerFactionAchievement[]> {
    return this.service.playerFactionAchievements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerFactionAchievement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "read",
    possession: "own",
  })
  async playerFactionAchievement(
    @graphql.Args() args: PlayerFactionAchievementFindUniqueArgs
  ): Promise<PlayerFactionAchievement | null> {
    const result = await this.service.playerFactionAchievement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerFactionAchievement)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "create",
    possession: "any",
  })
  async createPlayerFactionAchievement(
    @graphql.Args() args: CreatePlayerFactionAchievementArgs
  ): Promise<PlayerFactionAchievement> {
    return await this.service.createPlayerFactionAchievement({
      ...args,
      data: {
        ...args.data,

        faction: {
          connect: args.data.faction,
        },

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerFactionAchievement)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "update",
    possession: "any",
  })
  async updatePlayerFactionAchievement(
    @graphql.Args() args: UpdatePlayerFactionAchievementArgs
  ): Promise<PlayerFactionAchievement | null> {
    try {
      return await this.service.updatePlayerFactionAchievement({
        ...args,
        data: {
          ...args.data,

          faction: {
            connect: args.data.faction,
          },

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerFactionAchievement)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionAchievement",
    action: "delete",
    possession: "any",
  })
  async deletePlayerFactionAchievement(
    @graphql.Args() args: DeletePlayerFactionAchievementArgs
  ): Promise<PlayerFactionAchievement | null> {
    try {
      return await this.service.deletePlayerFactionAchievement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Faction, {
    nullable: true,
    name: "faction",
  })
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "read",
    possession: "any",
  })
  async getFaction(
    @graphql.Parent() parent: PlayerFactionAchievement
  ): Promise<Faction | null> {
    const result = await this.service.getFaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: PlayerFactionAchievement
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
