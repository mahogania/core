/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlayerFactionAchievement as PrismaPlayerFactionAchievement,
  Faction as PrismaFaction,
  Player as PrismaPlayer,
} from "@prisma/client";

export class PlayerFactionAchievementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerFactionAchievementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerFactionAchievement.count(args);
  }

  async playerFactionAchievements(
    args: Prisma.PlayerFactionAchievementFindManyArgs
  ): Promise<PrismaPlayerFactionAchievement[]> {
    return this.prisma.playerFactionAchievement.findMany(args);
  }
  async playerFactionAchievement(
    args: Prisma.PlayerFactionAchievementFindUniqueArgs
  ): Promise<PrismaPlayerFactionAchievement | null> {
    return this.prisma.playerFactionAchievement.findUnique(args);
  }
  async createPlayerFactionAchievement(
    args: Prisma.PlayerFactionAchievementCreateArgs
  ): Promise<PrismaPlayerFactionAchievement> {
    return this.prisma.playerFactionAchievement.create(args);
  }
  async updatePlayerFactionAchievement(
    args: Prisma.PlayerFactionAchievementUpdateArgs
  ): Promise<PrismaPlayerFactionAchievement> {
    return this.prisma.playerFactionAchievement.update(args);
  }
  async deletePlayerFactionAchievement(
    args: Prisma.PlayerFactionAchievementDeleteArgs
  ): Promise<PrismaPlayerFactionAchievement> {
    return this.prisma.playerFactionAchievement.delete(args);
  }

  async getFaction(parentId: string): Promise<PrismaFaction | null> {
    return this.prisma.playerFactionAchievement
      .findUnique({
        where: { id: parentId },
      })
      .faction();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.playerFactionAchievement
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
