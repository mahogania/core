/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AchievementBehaviourCreateNestedManyWithoutAchievementsInput } from "./AchievementBehaviourCreateNestedManyWithoutAchievementsInput";
import { ValidateNested, IsOptional, IsInt, Min, Max } from "class-validator";
import { Type } from "class-transformer";
import { AchievementRewardWhereUniqueInput } from "../../achievementReward/base/AchievementRewardWhereUniqueInput";
import { PlayerWhereUniqueInput } from "../../player/base/PlayerWhereUniqueInput";

@InputType()
class AchievementCreateInput {
  @ApiProperty({
    required: false,
    type: () => AchievementBehaviourCreateNestedManyWithoutAchievementsInput,
  })
  @ValidateNested()
  @Type(() => AchievementBehaviourCreateNestedManyWithoutAchievementsInput)
  @IsOptional()
  @Field(() => AchievementBehaviourCreateNestedManyWithoutAchievementsInput, {
    nullable: true,
  })
  achievementBehaviours?: AchievementBehaviourCreateNestedManyWithoutAchievementsInput;

  @ApiProperty({
    required: true,
    type: () => AchievementRewardWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AchievementRewardWhereUniqueInput)
  @Field(() => AchievementRewardWhereUniqueInput)
  achievementRewards!: AchievementRewardWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  count?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  flags?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  map?: number | null;

  @ApiProperty({
    required: false,
    type: () => PlayerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PlayerWhereUniqueInput)
  @IsOptional()
  @Field(() => PlayerWhereUniqueInput, {
    nullable: true,
  })
  player?: PlayerWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  points?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  refAchievement?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  requiredFaction?: number | null;
}

export { AchievementCreateInput as AchievementCreateInput };
