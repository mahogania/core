/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerRewardItemService } from "../playerRewardItem.service";
import { PlayerRewardItemCreateInput } from "./PlayerRewardItemCreateInput";
import { PlayerRewardItemWhereInput } from "./PlayerRewardItemWhereInput";
import { PlayerRewardItemWhereUniqueInput } from "./PlayerRewardItemWhereUniqueInput";
import { PlayerRewardItemFindManyArgs } from "./PlayerRewardItemFindManyArgs";
import { PlayerRewardItemUpdateInput } from "./PlayerRewardItemUpdateInput";
import { PlayerRewardItem } from "./PlayerRewardItem";

export class PlayerRewardItemGrpcControllerBase {
  constructor(protected readonly service: PlayerRewardItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerRewardItem })
  @GrpcMethod("PlayerRewardItemService", "createPlayerRewardItem")
  async createPlayerRewardItem(
    @common.Body() data: PlayerRewardItemCreateInput
  ): Promise<PlayerRewardItem> {
    return await this.service.createPlayerRewardItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerRewardItem] })
  @ApiNestedQuery(PlayerRewardItemFindManyArgs)
  @GrpcMethod("PlayerRewardItemService", "playerRewardItems")
  async playerRewardItems(
    @common.Req() request: Request
  ): Promise<PlayerRewardItem[]> {
    const args = plainToClass(PlayerRewardItemFindManyArgs, request.query);
    return this.service.playerRewardItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerRewardItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerRewardItemService", "playerRewardItem")
  async playerRewardItem(
    @common.Param() params: PlayerRewardItemWhereUniqueInput
  ): Promise<PlayerRewardItem | null> {
    const result = await this.service.playerRewardItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerRewardItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerRewardItemService", "updatePlayerRewardItem")
  async updatePlayerRewardItem(
    @common.Param() params: PlayerRewardItemWhereUniqueInput,
    @common.Body() data: PlayerRewardItemUpdateInput
  ): Promise<PlayerRewardItem | null> {
    try {
      return await this.service.updatePlayerRewardItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerRewardItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerRewardItemService", "deletePlayerRewardItem")
  async deletePlayerRewardItem(
    @common.Param() params: PlayerRewardItemWhereUniqueInput
  ): Promise<PlayerRewardItem | null> {
    try {
      return await this.service.deletePlayerRewardItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
