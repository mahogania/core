/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlayerRewardItem } from "./PlayerRewardItem";
import { PlayerRewardItemCountArgs } from "./PlayerRewardItemCountArgs";
import { PlayerRewardItemFindManyArgs } from "./PlayerRewardItemFindManyArgs";
import { PlayerRewardItemFindUniqueArgs } from "./PlayerRewardItemFindUniqueArgs";
import { DeletePlayerRewardItemArgs } from "./DeletePlayerRewardItemArgs";
import { PlayerRewardItemService } from "../playerRewardItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerRewardItem)
export class PlayerRewardItemResolverBase {
  constructor(
    protected readonly service: PlayerRewardItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerRewardItem",
    action: "read",
    possession: "any",
  })
  async _playerRewardItemsMeta(
    @graphql.Args() args: PlayerRewardItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerRewardItem])
  @nestAccessControl.UseRoles({
    resource: "PlayerRewardItem",
    action: "read",
    possession: "any",
  })
  async playerRewardItems(
    @graphql.Args() args: PlayerRewardItemFindManyArgs
  ): Promise<PlayerRewardItem[]> {
    return this.service.playerRewardItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerRewardItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerRewardItem",
    action: "read",
    possession: "own",
  })
  async playerRewardItem(
    @graphql.Args() args: PlayerRewardItemFindUniqueArgs
  ): Promise<PlayerRewardItem | null> {
    const result = await this.service.playerRewardItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerRewardItem)
  @nestAccessControl.UseRoles({
    resource: "PlayerRewardItem",
    action: "delete",
    possession: "any",
  })
  async deletePlayerRewardItem(
    @graphql.Args() args: DeletePlayerRewardItemArgs
  ): Promise<PlayerRewardItem | null> {
    try {
      return await this.service.deletePlayerRewardItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
