/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PlayerRewardItem as PrismaPlayerRewardItem,
} from "@prisma/client";

export class PlayerRewardItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerRewardItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerRewardItem.count(args);
  }

  async playerRewardItems(
    args: Prisma.PlayerRewardItemFindManyArgs
  ): Promise<PrismaPlayerRewardItem[]> {
    return this.prisma.playerRewardItem.findMany(args);
  }
  async playerRewardItem(
    args: Prisma.PlayerRewardItemFindUniqueArgs
  ): Promise<PrismaPlayerRewardItem | null> {
    return this.prisma.playerRewardItem.findUnique(args);
  }
  async createPlayerRewardItem(
    args: Prisma.PlayerRewardItemCreateArgs
  ): Promise<PrismaPlayerRewardItem> {
    return this.prisma.playerRewardItem.create(args);
  }
  async updatePlayerRewardItem(
    args: Prisma.PlayerRewardItemUpdateArgs
  ): Promise<PrismaPlayerRewardItem> {
    return this.prisma.playerRewardItem.update(args);
  }
  async deletePlayerRewardItem(
    args: Prisma.PlayerRewardItemDeleteArgs
  ): Promise<PrismaPlayerRewardItem> {
    return this.prisma.playerRewardItem.delete(args);
  }
}
