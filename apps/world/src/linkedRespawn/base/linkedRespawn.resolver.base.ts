/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LinkedRespawn } from "./LinkedRespawn";
import { LinkedRespawnCountArgs } from "./LinkedRespawnCountArgs";
import { LinkedRespawnFindManyArgs } from "./LinkedRespawnFindManyArgs";
import { LinkedRespawnFindUniqueArgs } from "./LinkedRespawnFindUniqueArgs";
import { CreateLinkedRespawnArgs } from "./CreateLinkedRespawnArgs";
import { UpdateLinkedRespawnArgs } from "./UpdateLinkedRespawnArgs";
import { DeleteLinkedRespawnArgs } from "./DeleteLinkedRespawnArgs";
import { InstanceTemplateFindManyArgs } from "../../instanceTemplate/base/InstanceTemplateFindManyArgs";
import { InstanceTemplate } from "../../instanceTemplate/base/InstanceTemplate";
import { LinkedRespawnService } from "../linkedRespawn.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LinkedRespawn)
export class LinkedRespawnResolverBase {
  constructor(
    protected readonly service: LinkedRespawnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LinkedRespawn",
    action: "read",
    possession: "any",
  })
  async _linkedRespawnsMeta(
    @graphql.Args() args: LinkedRespawnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LinkedRespawn])
  @nestAccessControl.UseRoles({
    resource: "LinkedRespawn",
    action: "read",
    possession: "any",
  })
  async linkedRespawns(
    @graphql.Args() args: LinkedRespawnFindManyArgs
  ): Promise<LinkedRespawn[]> {
    return this.service.linkedRespawns(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LinkedRespawn, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LinkedRespawn",
    action: "read",
    possession: "own",
  })
  async linkedRespawn(
    @graphql.Args() args: LinkedRespawnFindUniqueArgs
  ): Promise<LinkedRespawn | null> {
    const result = await this.service.linkedRespawn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LinkedRespawn)
  @nestAccessControl.UseRoles({
    resource: "LinkedRespawn",
    action: "create",
    possession: "any",
  })
  async createLinkedRespawn(
    @graphql.Args() args: CreateLinkedRespawnArgs
  ): Promise<LinkedRespawn> {
    return await this.service.createLinkedRespawn({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LinkedRespawn)
  @nestAccessControl.UseRoles({
    resource: "LinkedRespawn",
    action: "update",
    possession: "any",
  })
  async updateLinkedRespawn(
    @graphql.Args() args: UpdateLinkedRespawnArgs
  ): Promise<LinkedRespawn | null> {
    try {
      return await this.service.updateLinkedRespawn({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LinkedRespawn)
  @nestAccessControl.UseRoles({
    resource: "LinkedRespawn",
    action: "delete",
    possession: "any",
  })
  async deleteLinkedRespawn(
    @graphql.Args() args: DeleteLinkedRespawnArgs
  ): Promise<LinkedRespawn | null> {
    try {
      return await this.service.deleteLinkedRespawn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InstanceTemplate], { name: "instanceTemplates" })
  @nestAccessControl.UseRoles({
    resource: "InstanceTemplate",
    action: "read",
    possession: "any",
  })
  async findInstanceTemplates(
    @graphql.Parent() parent: LinkedRespawn,
    @graphql.Args() args: InstanceTemplateFindManyArgs
  ): Promise<InstanceTemplate[]> {
    const results = await this.service.findInstanceTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
