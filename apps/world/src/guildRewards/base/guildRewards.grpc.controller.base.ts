/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GuildRewardsService } from "../guildRewards.service";
import { GuildRewardsCreateInput } from "./GuildRewardsCreateInput";
import { GuildRewardsWhereInput } from "./GuildRewardsWhereInput";
import { GuildRewardsWhereUniqueInput } from "./GuildRewardsWhereUniqueInput";
import { GuildRewardsFindManyArgs } from "./GuildRewardsFindManyArgs";
import { GuildRewardsUpdateInput } from "./GuildRewardsUpdateInput";
import { GuildRewards } from "./GuildRewards";

export class GuildRewardsGrpcControllerBase {
  constructor(protected readonly service: GuildRewardsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GuildRewards })
  @GrpcMethod("GuildRewardsService", "createGuildRewards")
  async createGuildRewards(
    @common.Body() data: GuildRewardsCreateInput
  ): Promise<GuildRewards> {
    return await this.service.createGuildRewards({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GuildRewards] })
  @ApiNestedQuery(GuildRewardsFindManyArgs)
  @GrpcMethod("GuildRewardsService", "guildRewardsItems")
  async guildRewardsItems(
    @common.Req() request: Request
  ): Promise<GuildRewards[]> {
    const args = plainToClass(GuildRewardsFindManyArgs, request.query);
    return this.service.guildRewardsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GuildRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GuildRewardsService", "guildRewards")
  async guildRewards(
    @common.Param() params: GuildRewardsWhereUniqueInput
  ): Promise<GuildRewards | null> {
    const result = await this.service.guildRewards({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GuildRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GuildRewardsService", "updateGuildRewards")
  async updateGuildRewards(
    @common.Param() params: GuildRewardsWhereUniqueInput,
    @common.Body() data: GuildRewardsUpdateInput
  ): Promise<GuildRewards | null> {
    try {
      return await this.service.updateGuildRewards({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GuildRewards })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GuildRewardsService", "deleteGuildRewards")
  async deleteGuildRewards(
    @common.Param() params: GuildRewardsWhereUniqueInput
  ): Promise<GuildRewards | null> {
    try {
      return await this.service.deleteGuildRewards({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
