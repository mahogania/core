/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameObjectTemplateService } from "../gameObjectTemplate.service";
import { GameObjectTemplateCreateInput } from "./GameObjectTemplateCreateInput";
import { GameObjectTemplateWhereInput } from "./GameObjectTemplateWhereInput";
import { GameObjectTemplateWhereUniqueInput } from "./GameObjectTemplateWhereUniqueInput";
import { GameObjectTemplateFindManyArgs } from "./GameObjectTemplateFindManyArgs";
import { GameObjectTemplateUpdateInput } from "./GameObjectTemplateUpdateInput";
import { GameObjectTemplate } from "./GameObjectTemplate";
import { GameObjectTemplateAddonFindManyArgs } from "../../gameObjectTemplateAddon/base/GameObjectTemplateAddonFindManyArgs";
import { GameObjectTemplateAddon } from "../../gameObjectTemplateAddon/base/GameObjectTemplateAddon";
import { GameObjectTemplateAddonWhereUniqueInput } from "../../gameObjectTemplateAddon/base/GameObjectTemplateAddonWhereUniqueInput";
import { GameObjectTemplateLocaleFindManyArgs } from "../../gameObjectTemplateLocale/base/GameObjectTemplateLocaleFindManyArgs";
import { GameObjectTemplateLocale } from "../../gameObjectTemplateLocale/base/GameObjectTemplateLocale";
import { GameObjectTemplateLocaleWhereUniqueInput } from "../../gameObjectTemplateLocale/base/GameObjectTemplateLocaleWhereUniqueInput";
import { GameObjectFindManyArgs } from "../../gameObject/base/GameObjectFindManyArgs";
import { GameObject } from "../../gameObject/base/GameObject";
import { GameObjectWhereUniqueInput } from "../../gameObject/base/GameObjectWhereUniqueInput";

export class GameObjectTemplateGrpcControllerBase {
  constructor(protected readonly service: GameObjectTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameObjectTemplate })
  @GrpcMethod("GameObjectTemplateService", "createGameObjectTemplate")
  async createGameObjectTemplate(
    @common.Body() data: GameObjectTemplateCreateInput
  ): Promise<GameObjectTemplate> {
    return await this.service.createGameObjectTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameObjectTemplate] })
  @ApiNestedQuery(GameObjectTemplateFindManyArgs)
  @GrpcMethod("GameObjectTemplateService", "gameObjectTemplates")
  async gameObjectTemplates(
    @common.Req() request: Request
  ): Promise<GameObjectTemplate[]> {
    const args = plainToClass(GameObjectTemplateFindManyArgs, request.query);
    return this.service.gameObjectTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameObjectTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectTemplateService", "gameObjectTemplate")
  async gameObjectTemplate(
    @common.Param() params: GameObjectTemplateWhereUniqueInput
  ): Promise<GameObjectTemplate | null> {
    const result = await this.service.gameObjectTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameObjectTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectTemplateService", "updateGameObjectTemplate")
  async updateGameObjectTemplate(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() data: GameObjectTemplateUpdateInput
  ): Promise<GameObjectTemplate | null> {
    try {
      return await this.service.updateGameObjectTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameObjectTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameObjectTemplateService", "deleteGameObjectTemplate")
  async deleteGameObjectTemplate(
    @common.Param() params: GameObjectTemplateWhereUniqueInput
  ): Promise<GameObjectTemplate | null> {
    try {
      return await this.service.deleteGameObjectTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/gameObjectTemplateAddons")
  @ApiNestedQuery(GameObjectTemplateAddonFindManyArgs)
  @GrpcMethod("GameObjectTemplateService", "findManyGameObjectTemplateAddons")
  async findManyGameObjectTemplateAddons(
    @common.Req() request: Request,
    @common.Param() params: GameObjectTemplateWhereUniqueInput
  ): Promise<GameObjectTemplateAddon[]> {
    const query = plainToClass(
      GameObjectTemplateAddonFindManyArgs,
      request.query
    );
    const results = await this.service.findGameObjectTemplateAddons(params.id, {
      ...query,
      select: {
        createdAt: true,

        gameObjectTemplate: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gameObjectTemplateAddons")
  @GrpcMethod("GameObjectTemplateService", "connectGameObjectTemplateAddons")
  async connectGameObjectTemplateAddons(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectTemplateAddonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjectTemplateAddons: {
        connect: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gameObjectTemplateAddons")
  @GrpcMethod("GameObjectTemplateService", "updateGameObjectTemplateAddons")
  async updateGameObjectTemplateAddons(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectTemplateAddonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjectTemplateAddons: {
        set: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gameObjectTemplateAddons")
  @GrpcMethod("GameObjectTemplateService", "disconnectGameObjectTemplateAddons")
  async disconnectGameObjectTemplateAddons(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectTemplateAddonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjectTemplateAddons: {
        disconnect: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gameObjectTemplateLocales")
  @ApiNestedQuery(GameObjectTemplateLocaleFindManyArgs)
  @GrpcMethod("GameObjectTemplateService", "findManyGameObjectTemplateLocales")
  async findManyGameObjectTemplateLocales(
    @common.Req() request: Request,
    @common.Param() params: GameObjectTemplateWhereUniqueInput
  ): Promise<GameObjectTemplateLocale[]> {
    const query = plainToClass(
      GameObjectTemplateLocaleFindManyArgs,
      request.query
    );
    const results = await this.service.findGameObjectTemplateLocales(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,

          gameObjectTemplate: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gameObjectTemplateLocales")
  @GrpcMethod("GameObjectTemplateService", "connectGameObjectTemplateLocales")
  async connectGameObjectTemplateLocales(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectTemplateLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjectTemplateLocales: {
        connect: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gameObjectTemplateLocales")
  @GrpcMethod("GameObjectTemplateService", "updateGameObjectTemplateLocales")
  async updateGameObjectTemplateLocales(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectTemplateLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjectTemplateLocales: {
        set: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gameObjectTemplateLocales")
  @GrpcMethod(
    "GameObjectTemplateService",
    "disconnectGameObjectTemplateLocales"
  )
  async disconnectGameObjectTemplateLocales(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectTemplateLocaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjectTemplateLocales: {
        disconnect: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/gameObjects")
  @ApiNestedQuery(GameObjectFindManyArgs)
  @GrpcMethod("GameObjectTemplateService", "findManyGameObjects")
  async findManyGameObjects(
    @common.Req() request: Request,
    @common.Param() params: GameObjectTemplateWhereUniqueInput
  ): Promise<GameObject[]> {
    const query = plainToClass(GameObjectFindManyArgs, request.query);
    const results = await this.service.findGameObjects(params.id, {
      ...query,
      select: {
        areaId: true,
        createdAt: true,

        gameObjectTemplate: {
          select: {
            id: true,
          },
        },

        id: true,
        mapId: true,
        phaseGroupId: true,
        phaseId: true,
        script: true,
        spawnTime: true,
        state: true,
        stringId: true,
        transformId: true,
        updatedAt: true,
        version: true,
        zoneId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/gameObjects")
  @GrpcMethod("GameObjectTemplateService", "connectGameObjects")
  async connectGameObjects(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjects: {
        connect: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/gameObjects")
  @GrpcMethod("GameObjectTemplateService", "updateGameObjects")
  async updateGameObjects(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjects: {
        set: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/gameObjects")
  @GrpcMethod("GameObjectTemplateService", "disconnectGameObjects")
  async disconnectGameObjects(
    @common.Param() params: GameObjectTemplateWhereUniqueInput,
    @common.Body() body: GameObjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      gameObjects: {
        disconnect: body,
      },
    };
    await this.service.updateGameObjectTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
