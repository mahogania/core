/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GameEventCreatureQuestService } from "../gameEventCreatureQuest.service";
import { GameEventCreatureQuestCreateInput } from "./GameEventCreatureQuestCreateInput";
import { GameEventCreatureQuestWhereInput } from "./GameEventCreatureQuestWhereInput";
import { GameEventCreatureQuestWhereUniqueInput } from "./GameEventCreatureQuestWhereUniqueInput";
import { GameEventCreatureQuestFindManyArgs } from "./GameEventCreatureQuestFindManyArgs";
import { GameEventCreatureQuestUpdateInput } from "./GameEventCreatureQuestUpdateInput";
import { GameEventCreatureQuest } from "./GameEventCreatureQuest";

export class GameEventCreatureQuestGrpcControllerBase {
  constructor(protected readonly service: GameEventCreatureQuestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventCreatureQuest })
  @GrpcMethod("GameEventCreatureQuestService", "createGameEventCreatureQuest")
  async createGameEventCreatureQuest(
    @common.Body() data: GameEventCreatureQuestCreateInput
  ): Promise<GameEventCreatureQuest> {
    return await this.service.createGameEventCreatureQuest({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventCreatureQuest] })
  @ApiNestedQuery(GameEventCreatureQuestFindManyArgs)
  @GrpcMethod("GameEventCreatureQuestService", "gameEventCreatureQuests")
  async gameEventCreatureQuests(
    @common.Req() request: Request
  ): Promise<GameEventCreatureQuest[]> {
    const args = plainToClass(
      GameEventCreatureQuestFindManyArgs,
      request.query
    );
    return this.service.gameEventCreatureQuests({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventCreatureQuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCreatureQuestService", "gameEventCreatureQuest")
  async gameEventCreatureQuest(
    @common.Param() params: GameEventCreatureQuestWhereUniqueInput
  ): Promise<GameEventCreatureQuest | null> {
    const result = await this.service.gameEventCreatureQuest({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventCreatureQuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCreatureQuestService", "updateGameEventCreatureQuest")
  async updateGameEventCreatureQuest(
    @common.Param() params: GameEventCreatureQuestWhereUniqueInput,
    @common.Body() data: GameEventCreatureQuestUpdateInput
  ): Promise<GameEventCreatureQuest | null> {
    try {
      return await this.service.updateGameEventCreatureQuest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          quest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventCreatureQuest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GameEventCreatureQuestService", "deleteGameEventCreatureQuest")
  async deleteGameEventCreatureQuest(
    @common.Param() params: GameEventCreatureQuestWhereUniqueInput
  ): Promise<GameEventCreatureQuest | null> {
    try {
      return await this.service.deleteGameEventCreatureQuest({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          quest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
