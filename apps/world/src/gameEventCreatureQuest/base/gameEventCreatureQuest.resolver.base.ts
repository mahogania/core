/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventCreatureQuest } from "./GameEventCreatureQuest";
import { GameEventCreatureQuestCountArgs } from "./GameEventCreatureQuestCountArgs";
import { GameEventCreatureQuestFindManyArgs } from "./GameEventCreatureQuestFindManyArgs";
import { GameEventCreatureQuestFindUniqueArgs } from "./GameEventCreatureQuestFindUniqueArgs";
import { CreateGameEventCreatureQuestArgs } from "./CreateGameEventCreatureQuestArgs";
import { UpdateGameEventCreatureQuestArgs } from "./UpdateGameEventCreatureQuestArgs";
import { DeleteGameEventCreatureQuestArgs } from "./DeleteGameEventCreatureQuestArgs";
import { GameEventCreatureQuestService } from "../gameEventCreatureQuest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventCreatureQuest)
export class GameEventCreatureQuestResolverBase {
  constructor(
    protected readonly service: GameEventCreatureQuestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreatureQuest",
    action: "read",
    possession: "any",
  })
  async _gameEventCreatureQuestsMeta(
    @graphql.Args() args: GameEventCreatureQuestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventCreatureQuest])
  @nestAccessControl.UseRoles({
    resource: "GameEventCreatureQuest",
    action: "read",
    possession: "any",
  })
  async gameEventCreatureQuests(
    @graphql.Args() args: GameEventCreatureQuestFindManyArgs
  ): Promise<GameEventCreatureQuest[]> {
    return this.service.gameEventCreatureQuests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventCreatureQuest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventCreatureQuest",
    action: "read",
    possession: "own",
  })
  async gameEventCreatureQuest(
    @graphql.Args() args: GameEventCreatureQuestFindUniqueArgs
  ): Promise<GameEventCreatureQuest | null> {
    const result = await this.service.gameEventCreatureQuest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCreatureQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreatureQuest",
    action: "create",
    possession: "any",
  })
  async createGameEventCreatureQuest(
    @graphql.Args() args: CreateGameEventCreatureQuestArgs
  ): Promise<GameEventCreatureQuest> {
    return await this.service.createGameEventCreatureQuest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventCreatureQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreatureQuest",
    action: "update",
    possession: "any",
  })
  async updateGameEventCreatureQuest(
    @graphql.Args() args: UpdateGameEventCreatureQuestArgs
  ): Promise<GameEventCreatureQuest | null> {
    try {
      return await this.service.updateGameEventCreatureQuest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventCreatureQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventCreatureQuest",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventCreatureQuest(
    @graphql.Args() args: DeleteGameEventCreatureQuestArgs
  ): Promise<GameEventCreatureQuest | null> {
    try {
      return await this.service.deleteGameEventCreatureQuest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
