/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlayerchoiceResponseReward } from "./PlayerchoiceResponseReward";
import { PlayerchoiceResponseRewardCountArgs } from "./PlayerchoiceResponseRewardCountArgs";
import { PlayerchoiceResponseRewardFindManyArgs } from "./PlayerchoiceResponseRewardFindManyArgs";
import { PlayerchoiceResponseRewardFindUniqueArgs } from "./PlayerchoiceResponseRewardFindUniqueArgs";
import { DeletePlayerchoiceResponseRewardArgs } from "./DeletePlayerchoiceResponseRewardArgs";
import { PlayerchoiceResponseRewardService } from "../playerchoiceResponseReward.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerchoiceResponseReward)
export class PlayerchoiceResponseRewardResolverBase {
  constructor(
    protected readonly service: PlayerchoiceResponseRewardService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerchoiceResponseReward",
    action: "read",
    possession: "any",
  })
  async _playerchoiceResponseRewardsMeta(
    @graphql.Args() args: PlayerchoiceResponseRewardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerchoiceResponseReward])
  @nestAccessControl.UseRoles({
    resource: "PlayerchoiceResponseReward",
    action: "read",
    possession: "any",
  })
  async playerchoiceResponseRewards(
    @graphql.Args() args: PlayerchoiceResponseRewardFindManyArgs
  ): Promise<PlayerchoiceResponseReward[]> {
    return this.service.playerchoiceResponseRewards(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerchoiceResponseReward, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerchoiceResponseReward",
    action: "read",
    possession: "own",
  })
  async playerchoiceResponseReward(
    @graphql.Args() args: PlayerchoiceResponseRewardFindUniqueArgs
  ): Promise<PlayerchoiceResponseReward | null> {
    const result = await this.service.playerchoiceResponseReward(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerchoiceResponseReward)
  @nestAccessControl.UseRoles({
    resource: "PlayerchoiceResponseReward",
    action: "delete",
    possession: "any",
  })
  async deletePlayerchoiceResponseReward(
    @graphql.Args() args: DeletePlayerchoiceResponseRewardArgs
  ): Promise<PlayerchoiceResponseReward | null> {
    try {
      return await this.service.deletePlayerchoiceResponseReward(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
