/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PlayerFactionReputation as PrismaPlayerFactionReputation,
  Faction as PrismaFaction,
  Player as PrismaPlayer,
} from "@prisma/client";

export class PlayerFactionReputationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PlayerFactionReputationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.playerFactionReputation.count(args);
  }

  async playerFactionReputations(
    args: Prisma.PlayerFactionReputationFindManyArgs
  ): Promise<PrismaPlayerFactionReputation[]> {
    return this.prisma.playerFactionReputation.findMany(args);
  }
  async playerFactionReputation(
    args: Prisma.PlayerFactionReputationFindUniqueArgs
  ): Promise<PrismaPlayerFactionReputation | null> {
    return this.prisma.playerFactionReputation.findUnique(args);
  }
  async createPlayerFactionReputation(
    args: Prisma.PlayerFactionReputationCreateArgs
  ): Promise<PrismaPlayerFactionReputation> {
    return this.prisma.playerFactionReputation.create(args);
  }
  async updatePlayerFactionReputation(
    args: Prisma.PlayerFactionReputationUpdateArgs
  ): Promise<PrismaPlayerFactionReputation> {
    return this.prisma.playerFactionReputation.update(args);
  }
  async deletePlayerFactionReputation(
    args: Prisma.PlayerFactionReputationDeleteArgs
  ): Promise<PrismaPlayerFactionReputation> {
    return this.prisma.playerFactionReputation.delete(args);
  }

  async getFaction(parentId: string): Promise<PrismaFaction | null> {
    return this.prisma.playerFactionReputation
      .findUnique({
        where: { id: parentId },
      })
      .faction();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.playerFactionReputation
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
