/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PlayerFactionReputation } from "./PlayerFactionReputation";
import { PlayerFactionReputationCountArgs } from "./PlayerFactionReputationCountArgs";
import { PlayerFactionReputationFindManyArgs } from "./PlayerFactionReputationFindManyArgs";
import { PlayerFactionReputationFindUniqueArgs } from "./PlayerFactionReputationFindUniqueArgs";
import { CreatePlayerFactionReputationArgs } from "./CreatePlayerFactionReputationArgs";
import { UpdatePlayerFactionReputationArgs } from "./UpdatePlayerFactionReputationArgs";
import { DeletePlayerFactionReputationArgs } from "./DeletePlayerFactionReputationArgs";
import { Faction } from "../../faction/base/Faction";
import { Player } from "../../player/base/Player";
import { PlayerFactionReputationService } from "../playerFactionReputation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerFactionReputation)
export class PlayerFactionReputationResolverBase {
  constructor(
    protected readonly service: PlayerFactionReputationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "read",
    possession: "any",
  })
  async _playerFactionReputationsMeta(
    @graphql.Args() args: PlayerFactionReputationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerFactionReputation])
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "read",
    possession: "any",
  })
  async playerFactionReputations(
    @graphql.Args() args: PlayerFactionReputationFindManyArgs
  ): Promise<PlayerFactionReputation[]> {
    return this.service.playerFactionReputations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerFactionReputation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "read",
    possession: "own",
  })
  async playerFactionReputation(
    @graphql.Args() args: PlayerFactionReputationFindUniqueArgs
  ): Promise<PlayerFactionReputation | null> {
    const result = await this.service.playerFactionReputation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerFactionReputation)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "create",
    possession: "any",
  })
  async createPlayerFactionReputation(
    @graphql.Args() args: CreatePlayerFactionReputationArgs
  ): Promise<PlayerFactionReputation> {
    return await this.service.createPlayerFactionReputation({
      ...args,
      data: {
        ...args.data,

        faction: args.data.faction
          ? {
              connect: args.data.faction,
            }
          : undefined,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PlayerFactionReputation)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "update",
    possession: "any",
  })
  async updatePlayerFactionReputation(
    @graphql.Args() args: UpdatePlayerFactionReputationArgs
  ): Promise<PlayerFactionReputation | null> {
    try {
      return await this.service.updatePlayerFactionReputation({
        ...args,
        data: {
          ...args.data,

          faction: args.data.faction
            ? {
                connect: args.data.faction,
              }
            : undefined,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PlayerFactionReputation)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionReputation",
    action: "delete",
    possession: "any",
  })
  async deletePlayerFactionReputation(
    @graphql.Args() args: DeletePlayerFactionReputationArgs
  ): Promise<PlayerFactionReputation | null> {
    try {
      return await this.service.deletePlayerFactionReputation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Faction, {
    nullable: true,
    name: "faction",
  })
  @nestAccessControl.UseRoles({
    resource: "Faction",
    action: "read",
    possession: "any",
  })
  async getFaction(
    @graphql.Parent() parent: PlayerFactionReputation
  ): Promise<Faction | null> {
    const result = await this.service.getFaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async getPlayer(
    @graphql.Parent() parent: PlayerFactionReputation
  ): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
