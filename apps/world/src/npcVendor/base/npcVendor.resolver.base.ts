/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NpcVendor } from "./NpcVendor";
import { NpcVendorCountArgs } from "./NpcVendorCountArgs";
import { NpcVendorFindManyArgs } from "./NpcVendorFindManyArgs";
import { NpcVendorFindUniqueArgs } from "./NpcVendorFindUniqueArgs";
import { DeleteNpcVendorArgs } from "./DeleteNpcVendorArgs";
import { NpcVendorService } from "../npcVendor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => NpcVendor)
export class NpcVendorResolverBase {
  constructor(
    protected readonly service: NpcVendorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "NpcVendor",
    action: "read",
    possession: "any",
  })
  async _npcVendorsMeta(
    @graphql.Args() args: NpcVendorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [NpcVendor])
  @nestAccessControl.UseRoles({
    resource: "NpcVendor",
    action: "read",
    possession: "any",
  })
  async npcVendors(
    @graphql.Args() args: NpcVendorFindManyArgs
  ): Promise<NpcVendor[]> {
    return this.service.npcVendors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => NpcVendor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "NpcVendor",
    action: "read",
    possession: "own",
  })
  async npcVendor(
    @graphql.Args() args: NpcVendorFindUniqueArgs
  ): Promise<NpcVendor | null> {
    const result = await this.service.npcVendor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NpcVendor)
  @nestAccessControl.UseRoles({
    resource: "NpcVendor",
    action: "delete",
    possession: "any",
  })
  async deleteNpcVendor(
    @graphql.Args() args: DeleteNpcVendorArgs
  ): Promise<NpcVendor | null> {
    try {
      return await this.service.deleteNpcVendor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
