/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NpcVendor as PrismaNpcVendor } from "@prisma/client";

export class NpcVendorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NpcVendorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.npcVendor.count(args);
  }

  async npcVendors(
    args: Prisma.NpcVendorFindManyArgs
  ): Promise<PrismaNpcVendor[]> {
    return this.prisma.npcVendor.findMany(args);
  }
  async npcVendor(
    args: Prisma.NpcVendorFindUniqueArgs
  ): Promise<PrismaNpcVendor | null> {
    return this.prisma.npcVendor.findUnique(args);
  }
  async createNpcVendor(
    args: Prisma.NpcVendorCreateArgs
  ): Promise<PrismaNpcVendor> {
    return this.prisma.npcVendor.create(args);
  }
  async updateNpcVendor(
    args: Prisma.NpcVendorUpdateArgs
  ): Promise<PrismaNpcVendor> {
    return this.prisma.npcVendor.update(args);
  }
  async deleteNpcVendor(
    args: Prisma.NpcVendorDeleteArgs
  ): Promise<PrismaNpcVendor> {
    return this.prisma.npcVendor.delete(args);
  }
}
