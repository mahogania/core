/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { LfgDungeonTemplateService } from "../lfgDungeonTemplate.service";
import { LfgDungeonTemplateCreateInput } from "./LfgDungeonTemplateCreateInput";
import { LfgDungeonTemplateWhereInput } from "./LfgDungeonTemplateWhereInput";
import { LfgDungeonTemplateWhereUniqueInput } from "./LfgDungeonTemplateWhereUniqueInput";
import { LfgDungeonTemplateFindManyArgs } from "./LfgDungeonTemplateFindManyArgs";
import { LfgDungeonTemplateUpdateInput } from "./LfgDungeonTemplateUpdateInput";
import { LfgDungeonTemplate } from "./LfgDungeonTemplate";

export class LfgDungeonTemplateGrpcControllerBase {
  constructor(protected readonly service: LfgDungeonTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LfgDungeonTemplate })
  @GrpcMethod("LfgDungeonTemplateService", "createLfgDungeonTemplate")
  async createLfgDungeonTemplate(
    @common.Body() data: LfgDungeonTemplateCreateInput
  ): Promise<LfgDungeonTemplate> {
    return await this.service.createLfgDungeonTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LfgDungeonTemplate] })
  @ApiNestedQuery(LfgDungeonTemplateFindManyArgs)
  @GrpcMethod("LfgDungeonTemplateService", "lfgDungeonTemplates")
  async lfgDungeonTemplates(
    @common.Req() request: Request
  ): Promise<LfgDungeonTemplate[]> {
    const args = plainToClass(LfgDungeonTemplateFindManyArgs, request.query);
    return this.service.lfgDungeonTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LfgDungeonTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LfgDungeonTemplateService", "lfgDungeonTemplate")
  async lfgDungeonTemplate(
    @common.Param() params: LfgDungeonTemplateWhereUniqueInput
  ): Promise<LfgDungeonTemplate | null> {
    const result = await this.service.lfgDungeonTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LfgDungeonTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LfgDungeonTemplateService", "updateLfgDungeonTemplate")
  async updateLfgDungeonTemplate(
    @common.Param() params: LfgDungeonTemplateWhereUniqueInput,
    @common.Body() data: LfgDungeonTemplateUpdateInput
  ): Promise<LfgDungeonTemplate | null> {
    try {
      return await this.service.updateLfgDungeonTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LfgDungeonTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LfgDungeonTemplateService", "deleteLfgDungeonTemplate")
  async deleteLfgDungeonTemplate(
    @common.Param() params: LfgDungeonTemplateWhereUniqueInput
  ): Promise<LfgDungeonTemplate | null> {
    try {
      return await this.service.deleteLfgDungeonTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
