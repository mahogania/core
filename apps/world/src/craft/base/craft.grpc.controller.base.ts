/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CraftService } from "../craft.service";
import { CraftCreateInput } from "./CraftCreateInput";
import { CraftWhereInput } from "./CraftWhereInput";
import { CraftWhereUniqueInput } from "./CraftWhereUniqueInput";
import { CraftFindManyArgs } from "./CraftFindManyArgs";
import { CraftUpdateInput } from "./CraftUpdateInput";
import { Craft } from "./Craft";
import { CraftLevelStatFindManyArgs } from "../../craftLevelStat/base/CraftLevelStatFindManyArgs";
import { CraftLevelStat } from "../../craftLevelStat/base/CraftLevelStat";
import { CraftLevelStatWhereUniqueInput } from "../../craftLevelStat/base/CraftLevelStatWhereUniqueInput";
import { PlayerCraftFindManyArgs } from "../../playerCraft/base/PlayerCraftFindManyArgs";
import { PlayerCraft } from "../../playerCraft/base/PlayerCraft";
import { PlayerCraftWhereUniqueInput } from "../../playerCraft/base/PlayerCraftWhereUniqueInput";

export class CraftGrpcControllerBase {
  constructor(protected readonly service: CraftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Craft })
  @GrpcMethod("CraftService", "createCraft")
  async createCraft(@common.Body() data: CraftCreateInput): Promise<Craft> {
    return await this.service.createCraft({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Craft] })
  @ApiNestedQuery(CraftFindManyArgs)
  @GrpcMethod("CraftService", "crafts")
  async crafts(@common.Req() request: Request): Promise<Craft[]> {
    const args = plainToClass(CraftFindManyArgs, request.query);
    return this.service.crafts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Craft })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CraftService", "craft")
  async craft(
    @common.Param() params: CraftWhereUniqueInput
  ): Promise<Craft | null> {
    const result = await this.service.craft({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Craft })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CraftService", "updateCraft")
  async updateCraft(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() data: CraftUpdateInput
  ): Promise<Craft | null> {
    try {
      return await this.service.updateCraft({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Craft })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CraftService", "deleteCraft")
  async deleteCraft(
    @common.Param() params: CraftWhereUniqueInput
  ): Promise<Craft | null> {
    try {
      return await this.service.deleteCraft({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/craftLevelStats")
  @ApiNestedQuery(CraftLevelStatFindManyArgs)
  @GrpcMethod("CraftService", "findManyCraftLevelStats")
  async findManyCraftLevelStats(
    @common.Req() request: Request,
    @common.Param() params: CraftWhereUniqueInput
  ): Promise<CraftLevelStat[]> {
    const query = plainToClass(CraftLevelStatFindManyArgs, request.query);
    const results = await this.service.findCraftLevelStats(params.id, {
      ...query,
      select: {
        craft: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        level: true,
        stat: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/craftLevelStats")
  @GrpcMethod("CraftService", "connectCraftLevelStats")
  async connectCraftLevelStats(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() body: CraftLevelStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      craftLevelStats: {
        connect: body,
      },
    };
    await this.service.updateCraft({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/craftLevelStats")
  @GrpcMethod("CraftService", "updateCraftLevelStats")
  async updateCraftLevelStats(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() body: CraftLevelStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      craftLevelStats: {
        set: body,
      },
    };
    await this.service.updateCraft({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/craftLevelStats")
  @GrpcMethod("CraftService", "disconnectCraftLevelStats")
  async disconnectCraftLevelStats(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() body: CraftLevelStatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      craftLevelStats: {
        disconnect: body,
      },
    };
    await this.service.updateCraft({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/playerCrafts")
  @ApiNestedQuery(PlayerCraftFindManyArgs)
  @GrpcMethod("CraftService", "findManyPlayerCrafts")
  async findManyPlayerCrafts(
    @common.Req() request: Request,
    @common.Param() params: CraftWhereUniqueInput
  ): Promise<PlayerCraft[]> {
    const query = plainToClass(PlayerCraftFindManyArgs, request.query);
    const results = await this.service.findPlayerCrafts(params.id, {
      ...query,
      select: {
        craft: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/playerCrafts")
  @GrpcMethod("CraftService", "connectPlayerCrafts")
  async connectPlayerCrafts(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() body: PlayerCraftWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      playerCrafts: {
        connect: body,
      },
    };
    await this.service.updateCraft({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/playerCrafts")
  @GrpcMethod("CraftService", "updatePlayerCrafts")
  async updatePlayerCrafts(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() body: PlayerCraftWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      playerCrafts: {
        set: body,
      },
    };
    await this.service.updateCraft({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/playerCrafts")
  @GrpcMethod("CraftService", "disconnectPlayerCrafts")
  async disconnectPlayerCrafts(
    @common.Param() params: CraftWhereUniqueInput,
    @common.Body() body: PlayerCraftWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      playerCrafts: {
        disconnect: body,
      },
    };
    await this.service.updateCraft({
      where: params,
      data,
      select: { id: true },
    });
  }
}
