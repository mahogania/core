/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Craft } from "./Craft";
import { CraftCountArgs } from "./CraftCountArgs";
import { CraftFindManyArgs } from "./CraftFindManyArgs";
import { CraftFindUniqueArgs } from "./CraftFindUniqueArgs";
import { CreateCraftArgs } from "./CreateCraftArgs";
import { UpdateCraftArgs } from "./UpdateCraftArgs";
import { DeleteCraftArgs } from "./DeleteCraftArgs";
import { CraftLevelStatFindManyArgs } from "../../craftLevelStat/base/CraftLevelStatFindManyArgs";
import { CraftLevelStat } from "../../craftLevelStat/base/CraftLevelStat";
import { PlayerCraftFindManyArgs } from "../../playerCraft/base/PlayerCraftFindManyArgs";
import { PlayerCraft } from "../../playerCraft/base/PlayerCraft";
import { CraftService } from "../craft.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Craft)
export class CraftResolverBase {
  constructor(
    protected readonly service: CraftService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "read",
    possession: "any",
  })
  async _craftsMeta(
    @graphql.Args() args: CraftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Craft])
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "read",
    possession: "any",
  })
  async crafts(@graphql.Args() args: CraftFindManyArgs): Promise<Craft[]> {
    return this.service.crafts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Craft, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "read",
    possession: "own",
  })
  async craft(
    @graphql.Args() args: CraftFindUniqueArgs
  ): Promise<Craft | null> {
    const result = await this.service.craft(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Craft)
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "create",
    possession: "any",
  })
  async createCraft(@graphql.Args() args: CreateCraftArgs): Promise<Craft> {
    return await this.service.createCraft({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Craft)
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "update",
    possession: "any",
  })
  async updateCraft(
    @graphql.Args() args: UpdateCraftArgs
  ): Promise<Craft | null> {
    try {
      return await this.service.updateCraft({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Craft)
  @nestAccessControl.UseRoles({
    resource: "Craft",
    action: "delete",
    possession: "any",
  })
  async deleteCraft(
    @graphql.Args() args: DeleteCraftArgs
  ): Promise<Craft | null> {
    try {
      return await this.service.deleteCraft(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CraftLevelStat], { name: "craftLevelStats" })
  @nestAccessControl.UseRoles({
    resource: "CraftLevelStat",
    action: "read",
    possession: "any",
  })
  async findCraftLevelStats(
    @graphql.Parent() parent: Craft,
    @graphql.Args() args: CraftLevelStatFindManyArgs
  ): Promise<CraftLevelStat[]> {
    const results = await this.service.findCraftLevelStats(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PlayerCraft], { name: "playerCrafts" })
  @nestAccessControl.UseRoles({
    resource: "PlayerCraft",
    action: "read",
    possession: "any",
  })
  async findPlayerCrafts(
    @graphql.Parent() parent: Craft,
    @graphql.Args() args: PlayerCraftFindManyArgs
  ): Promise<PlayerCraft[]> {
    const results = await this.service.findPlayerCrafts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
