/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Craft as PrismaCraft,
  CraftLevelStat as PrismaCraftLevelStat,
  PlayerCraft as PrismaPlayerCraft,
} from "@prisma/client";

export class CraftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CraftCountArgs, "select">): Promise<number> {
    return this.prisma.craft.count(args);
  }

  async crafts(args: Prisma.CraftFindManyArgs): Promise<PrismaCraft[]> {
    return this.prisma.craft.findMany(args);
  }
  async craft(args: Prisma.CraftFindUniqueArgs): Promise<PrismaCraft | null> {
    return this.prisma.craft.findUnique(args);
  }
  async createCraft(args: Prisma.CraftCreateArgs): Promise<PrismaCraft> {
    return this.prisma.craft.create(args);
  }
  async updateCraft(args: Prisma.CraftUpdateArgs): Promise<PrismaCraft> {
    return this.prisma.craft.update(args);
  }
  async deleteCraft(args: Prisma.CraftDeleteArgs): Promise<PrismaCraft> {
    return this.prisma.craft.delete(args);
  }

  async findCraftLevelStats(
    parentId: string,
    args: Prisma.CraftLevelStatFindManyArgs
  ): Promise<PrismaCraftLevelStat[]> {
    return this.prisma.craft
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .craftLevelStats(args);
  }

  async findPlayerCrafts(
    parentId: string,
    args: Prisma.PlayerCraftFindManyArgs
  ): Promise<PrismaPlayerCraft[]> {
    return this.prisma.craft
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playerCrafts(args);
  }
}
