/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GeneStat as PrismaGeneStat,
  Player as PrismaPlayer,
} from "@prisma/client";

export class GeneStatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GeneStatCountArgs, "select">): Promise<number> {
    return this.prisma.geneStat.count(args);
  }

  async geneStats(
    args: Prisma.GeneStatFindManyArgs
  ): Promise<PrismaGeneStat[]> {
    return this.prisma.geneStat.findMany(args);
  }
  async geneStat(
    args: Prisma.GeneStatFindUniqueArgs
  ): Promise<PrismaGeneStat | null> {
    return this.prisma.geneStat.findUnique(args);
  }
  async createGeneStat(
    args: Prisma.GeneStatCreateArgs
  ): Promise<PrismaGeneStat> {
    return this.prisma.geneStat.create(args);
  }
  async updateGeneStat(
    args: Prisma.GeneStatUpdateArgs
  ): Promise<PrismaGeneStat> {
    return this.prisma.geneStat.update(args);
  }
  async deleteGeneStat(
    args: Prisma.GeneStatDeleteArgs
  ): Promise<PrismaGeneStat> {
    return this.prisma.geneStat.delete(args);
  }

  async findPlayers(
    parentId: string,
    args: Prisma.PlayerFindManyArgs
  ): Promise<PrismaPlayer[]> {
    return this.prisma.geneStat
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .players(args);
  }
}
