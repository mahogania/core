/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { GeneStatService } from "../geneStat.service";
import { GeneStatCreateInput } from "./GeneStatCreateInput";
import { GeneStatWhereInput } from "./GeneStatWhereInput";
import { GeneStatWhereUniqueInput } from "./GeneStatWhereUniqueInput";
import { GeneStatFindManyArgs } from "./GeneStatFindManyArgs";
import { GeneStatUpdateInput } from "./GeneStatUpdateInput";
import { GeneStat } from "./GeneStat";
import { PlayerFindManyArgs } from "../../player/base/PlayerFindManyArgs";
import { Player } from "../../player/base/Player";
import { PlayerWhereUniqueInput } from "../../player/base/PlayerWhereUniqueInput";

export class GeneStatGrpcControllerBase {
  constructor(protected readonly service: GeneStatService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GeneStat })
  @GrpcMethod("GeneStatService", "createGeneStat")
  async createGeneStat(
    @common.Body() data: GeneStatCreateInput
  ): Promise<GeneStat> {
    return await this.service.createGeneStat({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GeneStat] })
  @ApiNestedQuery(GeneStatFindManyArgs)
  @GrpcMethod("GeneStatService", "geneStats")
  async geneStats(@common.Req() request: Request): Promise<GeneStat[]> {
    const args = plainToClass(GeneStatFindManyArgs, request.query);
    return this.service.geneStats({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GeneStat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GeneStatService", "geneStat")
  async geneStat(
    @common.Param() params: GeneStatWhereUniqueInput
  ): Promise<GeneStat | null> {
    const result = await this.service.geneStat({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GeneStat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GeneStatService", "updateGeneStat")
  async updateGeneStat(
    @common.Param() params: GeneStatWhereUniqueInput,
    @common.Body() data: GeneStatUpdateInput
  ): Promise<GeneStat | null> {
    try {
      return await this.service.updateGeneStat({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GeneStat })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("GeneStatService", "deleteGeneStat")
  async deleteGeneStat(
    @common.Param() params: GeneStatWhereUniqueInput
  ): Promise<GeneStat | null> {
    try {
      return await this.service.deleteGeneStat({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/players")
  @ApiNestedQuery(PlayerFindManyArgs)
  @GrpcMethod("GeneStatService", "findManyPlayers")
  async findManyPlayers(
    @common.Req() request: Request,
    @common.Param() params: GeneStatWhereUniqueInput
  ): Promise<Player[]> {
    const query = plainToClass(PlayerFindManyArgs, request.query);
    const results = await this.service.findPlayers(params.id, {
      ...query,
      select: {
        createdAt: true,

        geneStats: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/players")
  @GrpcMethod("GeneStatService", "connectPlayers")
  async connectPlayers(
    @common.Param() params: GeneStatWhereUniqueInput,
    @common.Body() body: PlayerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      players: {
        connect: body,
      },
    };
    await this.service.updateGeneStat({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/players")
  @GrpcMethod("GeneStatService", "updatePlayers")
  async updatePlayers(
    @common.Param() params: GeneStatWhereUniqueInput,
    @common.Body() body: PlayerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      players: {
        set: body,
      },
    };
    await this.service.updateGeneStat({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/players")
  @GrpcMethod("GeneStatService", "disconnectPlayers")
  async disconnectPlayers(
    @common.Param() params: GeneStatWhereUniqueInput,
    @common.Body() body: PlayerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      players: {
        disconnect: body,
      },
    };
    await this.service.updateGeneStat({
      where: params,
      data,
      select: { id: true },
    });
  }
}
