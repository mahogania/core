/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventPrerequisite } from "./GameEventPrerequisite";
import { GameEventPrerequisiteCountArgs } from "./GameEventPrerequisiteCountArgs";
import { GameEventPrerequisiteFindManyArgs } from "./GameEventPrerequisiteFindManyArgs";
import { GameEventPrerequisiteFindUniqueArgs } from "./GameEventPrerequisiteFindUniqueArgs";
import { CreateGameEventPrerequisiteArgs } from "./CreateGameEventPrerequisiteArgs";
import { UpdateGameEventPrerequisiteArgs } from "./UpdateGameEventPrerequisiteArgs";
import { DeleteGameEventPrerequisiteArgs } from "./DeleteGameEventPrerequisiteArgs";
import { GameEventPrerequisiteService } from "../gameEventPrerequisite.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventPrerequisite)
export class GameEventPrerequisiteResolverBase {
  constructor(
    protected readonly service: GameEventPrerequisiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "read",
    possession: "any",
  })
  async _gameEventPrerequisitesMeta(
    @graphql.Args() args: GameEventPrerequisiteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventPrerequisite])
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "read",
    possession: "any",
  })
  async gameEventPrerequisites(
    @graphql.Args() args: GameEventPrerequisiteFindManyArgs
  ): Promise<GameEventPrerequisite[]> {
    return this.service.gameEventPrerequisites(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventPrerequisite, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "read",
    possession: "own",
  })
  async gameEventPrerequisite(
    @graphql.Args() args: GameEventPrerequisiteFindUniqueArgs
  ): Promise<GameEventPrerequisite | null> {
    const result = await this.service.gameEventPrerequisite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventPrerequisite)
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "create",
    possession: "any",
  })
  async createGameEventPrerequisite(
    @graphql.Args() args: CreateGameEventPrerequisiteArgs
  ): Promise<GameEventPrerequisite> {
    return await this.service.createGameEventPrerequisite({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventPrerequisite)
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "update",
    possession: "any",
  })
  async updateGameEventPrerequisite(
    @graphql.Args() args: UpdateGameEventPrerequisiteArgs
  ): Promise<GameEventPrerequisite | null> {
    try {
      return await this.service.updateGameEventPrerequisite({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventPrerequisite)
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventPrerequisite(
    @graphql.Args() args: DeleteGameEventPrerequisiteArgs
  ): Promise<GameEventPrerequisite | null> {
    try {
      return await this.service.deleteGameEventPrerequisite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
