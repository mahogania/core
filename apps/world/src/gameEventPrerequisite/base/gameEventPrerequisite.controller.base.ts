/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GameEventPrerequisiteService } from "../gameEventPrerequisite.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GameEventPrerequisiteCreateInput } from "./GameEventPrerequisiteCreateInput";
import { GameEventPrerequisite } from "./GameEventPrerequisite";
import { GameEventPrerequisiteFindManyArgs } from "./GameEventPrerequisiteFindManyArgs";
import { GameEventPrerequisiteWhereUniqueInput } from "./GameEventPrerequisiteWhereUniqueInput";
import { GameEventPrerequisiteUpdateInput } from "./GameEventPrerequisiteUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GameEventPrerequisiteControllerBase {
  constructor(
    protected readonly service: GameEventPrerequisiteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GameEventPrerequisite })
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GameEventPrerequisiteCreateInput,
  })
  async createGameEventPrerequisite(
    @common.Body() data: GameEventPrerequisiteCreateInput
  ): Promise<GameEventPrerequisite> {
    return await this.service.createGameEventPrerequisite({
      data: data,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        prerequisiteEvent: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [GameEventPrerequisite] })
  @ApiNestedQuery(GameEventPrerequisiteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gameEventPrerequisites(
    @common.Req() request: Request
  ): Promise<GameEventPrerequisite[]> {
    const args = plainToClass(GameEventPrerequisiteFindManyArgs, request.query);
    return this.service.gameEventPrerequisites({
      ...args,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        prerequisiteEvent: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GameEventPrerequisite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async gameEventPrerequisite(
    @common.Param() params: GameEventPrerequisiteWhereUniqueInput
  ): Promise<GameEventPrerequisite | null> {
    const result = await this.service.gameEventPrerequisite({
      where: params,
      select: {
        createdAt: true,
        eventEntry: true,
        id: true,
        prerequisiteEvent: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GameEventPrerequisite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: GameEventPrerequisiteUpdateInput,
  })
  async updateGameEventPrerequisite(
    @common.Param() params: GameEventPrerequisiteWhereUniqueInput,
    @common.Body() data: GameEventPrerequisiteUpdateInput
  ): Promise<GameEventPrerequisite | null> {
    try {
      return await this.service.updateGameEventPrerequisite({
        where: params,
        data: data,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          prerequisiteEvent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GameEventPrerequisite })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GameEventPrerequisite",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGameEventPrerequisite(
    @common.Param() params: GameEventPrerequisiteWhereUniqueInput
  ): Promise<GameEventPrerequisite | null> {
    try {
      return await this.service.deleteGameEventPrerequisite({
        where: params,
        select: {
          createdAt: true,
          eventEntry: true,
          id: true,
          prerequisiteEvent: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
