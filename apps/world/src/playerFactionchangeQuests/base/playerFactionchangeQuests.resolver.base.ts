/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PlayerFactionchangeQuests } from "./PlayerFactionchangeQuests";
import { PlayerFactionchangeQuestsCountArgs } from "./PlayerFactionchangeQuestsCountArgs";
import { PlayerFactionchangeQuestsFindManyArgs } from "./PlayerFactionchangeQuestsFindManyArgs";
import { PlayerFactionchangeQuestsFindUniqueArgs } from "./PlayerFactionchangeQuestsFindUniqueArgs";
import { DeletePlayerFactionchangeQuestsArgs } from "./DeletePlayerFactionchangeQuestsArgs";
import { PlayerFactionchangeQuestsService } from "../playerFactionchangeQuests.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PlayerFactionchangeQuests)
export class PlayerFactionchangeQuestsResolverBase {
  constructor(
    protected readonly service: PlayerFactionchangeQuestsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeQuests",
    action: "read",
    possession: "any",
  })
  async _playerFactionchangeQuestsItemsMeta(
    @graphql.Args() args: PlayerFactionchangeQuestsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PlayerFactionchangeQuests])
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeQuests",
    action: "read",
    possession: "any",
  })
  async playerFactionchangeQuestsItems(
    @graphql.Args() args: PlayerFactionchangeQuestsFindManyArgs
  ): Promise<PlayerFactionchangeQuests[]> {
    return this.service.playerFactionchangeQuestsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PlayerFactionchangeQuests, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeQuests",
    action: "read",
    possession: "own",
  })
  async playerFactionchangeQuests(
    @graphql.Args() args: PlayerFactionchangeQuestsFindUniqueArgs
  ): Promise<PlayerFactionchangeQuests | null> {
    const result = await this.service.playerFactionchangeQuests(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PlayerFactionchangeQuests)
  @nestAccessControl.UseRoles({
    resource: "PlayerFactionchangeQuests",
    action: "delete",
    possession: "any",
  })
  async deletePlayerFactionchangeQuests(
    @graphql.Args() args: DeletePlayerFactionchangeQuestsArgs
  ): Promise<PlayerFactionchangeQuests | null> {
    try {
      return await this.service.deletePlayerFactionchangeQuests(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
