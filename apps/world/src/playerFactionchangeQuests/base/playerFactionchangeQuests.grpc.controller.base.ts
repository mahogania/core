/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { PlayerFactionchangeQuestsService } from "../playerFactionchangeQuests.service";
import { PlayerFactionchangeQuestsCreateInput } from "./PlayerFactionchangeQuestsCreateInput";
import { PlayerFactionchangeQuestsWhereInput } from "./PlayerFactionchangeQuestsWhereInput";
import { PlayerFactionchangeQuestsWhereUniqueInput } from "./PlayerFactionchangeQuestsWhereUniqueInput";
import { PlayerFactionchangeQuestsFindManyArgs } from "./PlayerFactionchangeQuestsFindManyArgs";
import { PlayerFactionchangeQuestsUpdateInput } from "./PlayerFactionchangeQuestsUpdateInput";
import { PlayerFactionchangeQuests } from "./PlayerFactionchangeQuests";

export class PlayerFactionchangeQuestsGrpcControllerBase {
  constructor(protected readonly service: PlayerFactionchangeQuestsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PlayerFactionchangeQuests })
  @GrpcMethod(
    "PlayerFactionchangeQuestsService",
    "createPlayerFactionchangeQuests"
  )
  async createPlayerFactionchangeQuests(
    @common.Body() data: PlayerFactionchangeQuestsCreateInput
  ): Promise<PlayerFactionchangeQuests> {
    return await this.service.createPlayerFactionchangeQuests({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PlayerFactionchangeQuests] })
  @ApiNestedQuery(PlayerFactionchangeQuestsFindManyArgs)
  @GrpcMethod(
    "PlayerFactionchangeQuestsService",
    "playerFactionchangeQuestsItems"
  )
  async playerFactionchangeQuestsItems(
    @common.Req() request: Request
  ): Promise<PlayerFactionchangeQuests[]> {
    const args = plainToClass(
      PlayerFactionchangeQuestsFindManyArgs,
      request.query
    );
    return this.service.playerFactionchangeQuestsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeQuests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("PlayerFactionchangeQuestsService", "playerFactionchangeQuests")
  async playerFactionchangeQuests(
    @common.Param() params: PlayerFactionchangeQuestsWhereUniqueInput
  ): Promise<PlayerFactionchangeQuests | null> {
    const result = await this.service.playerFactionchangeQuests({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeQuests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeQuestsService",
    "updatePlayerFactionchangeQuests"
  )
  async updatePlayerFactionchangeQuests(
    @common.Param() params: PlayerFactionchangeQuestsWhereUniqueInput,
    @common.Body() data: PlayerFactionchangeQuestsUpdateInput
  ): Promise<PlayerFactionchangeQuests | null> {
    try {
      return await this.service.updatePlayerFactionchangeQuests({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PlayerFactionchangeQuests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "PlayerFactionchangeQuestsService",
    "deletePlayerFactionchangeQuests"
  )
  async deletePlayerFactionchangeQuests(
    @common.Param() params: PlayerFactionchangeQuestsWhereUniqueInput
  ): Promise<PlayerFactionchangeQuests | null> {
    try {
      return await this.service.deletePlayerFactionchangeQuests({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
