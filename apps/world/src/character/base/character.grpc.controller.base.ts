/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CharacterService } from "../character.service";
import { CharacterCreateInput } from "./CharacterCreateInput";
import { CharacterWhereInput } from "./CharacterWhereInput";
import { CharacterWhereUniqueInput } from "./CharacterWhereUniqueInput";
import { CharacterFindManyArgs } from "./CharacterFindManyArgs";
import { CharacterUpdateInput } from "./CharacterUpdateInput";
import { Character } from "./Character";
import { CharacterDialogueFindManyArgs } from "../../characterDialogue/base/CharacterDialogueFindManyArgs";
import { CharacterDialogue } from "../../characterDialogue/base/CharacterDialogue";
import { CharacterDialogueWhereUniqueInput } from "../../characterDialogue/base/CharacterDialogueWhereUniqueInput";

export class CharacterGrpcControllerBase {
  constructor(protected readonly service: CharacterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Character })
  @GrpcMethod("CharacterService", "createCharacter")
  async createCharacter(
    @common.Body() data: CharacterCreateInput
  ): Promise<Character> {
    return await this.service.createCharacter({
      data: {
        ...data,

        characterSpells: data.characterSpells
          ? {
              connect: data.characterSpells,
            }
          : undefined,
      },
      select: {
        characterSpells: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Character] })
  @ApiNestedQuery(CharacterFindManyArgs)
  @GrpcMethod("CharacterService", "characters")
  async characters(@common.Req() request: Request): Promise<Character[]> {
    const args = plainToClass(CharacterFindManyArgs, request.query);
    return this.service.characters({
      ...args,
      select: {
        characterSpells: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Character })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CharacterService", "character")
  async character(
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<Character | null> {
    const result = await this.service.character({
      where: params,
      select: {
        characterSpells: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Character })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CharacterService", "updateCharacter")
  async updateCharacter(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() data: CharacterUpdateInput
  ): Promise<Character | null> {
    try {
      return await this.service.updateCharacter({
        where: params,
        data: {
          ...data,

          characterSpells: data.characterSpells
            ? {
                connect: data.characterSpells,
              }
            : undefined,
        },
        select: {
          characterSpells: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Character })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CharacterService", "deleteCharacter")
  async deleteCharacter(
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<Character | null> {
    try {
      return await this.service.deleteCharacter({
        where: params,
        select: {
          characterSpells: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/characterDialogues")
  @ApiNestedQuery(CharacterDialogueFindManyArgs)
  @GrpcMethod("CharacterService", "findManyCharacterDialogues")
  async findManyCharacterDialogues(
    @common.Req() request: Request,
    @common.Param() params: CharacterWhereUniqueInput
  ): Promise<CharacterDialogue[]> {
    const query = plainToClass(CharacterDialogueFindManyArgs, request.query);
    const results = await this.service.findCharacterDialogues(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/characterDialogues")
  @GrpcMethod("CharacterService", "connectCharacterDialogues")
  async connectCharacterDialogues(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: CharacterDialogueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characterDialogues: {
        connect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/characterDialogues")
  @GrpcMethod("CharacterService", "updateCharacterDialogues")
  async updateCharacterDialogues(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: CharacterDialogueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characterDialogues: {
        set: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/characterDialogues")
  @GrpcMethod("CharacterService", "disconnectCharacterDialogues")
  async disconnectCharacterDialogues(
    @common.Param() params: CharacterWhereUniqueInput,
    @common.Body() body: CharacterDialogueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      characterDialogues: {
        disconnect: body,
      },
    };
    await this.service.updateCharacter({
      where: params,
      data,
      select: { id: true },
    });
  }
}
