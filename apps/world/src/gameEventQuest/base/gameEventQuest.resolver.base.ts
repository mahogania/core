/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameEventQuest } from "./GameEventQuest";
import { GameEventQuestCountArgs } from "./GameEventQuestCountArgs";
import { GameEventQuestFindManyArgs } from "./GameEventQuestFindManyArgs";
import { GameEventQuestFindUniqueArgs } from "./GameEventQuestFindUniqueArgs";
import { CreateGameEventQuestArgs } from "./CreateGameEventQuestArgs";
import { UpdateGameEventQuestArgs } from "./UpdateGameEventQuestArgs";
import { DeleteGameEventQuestArgs } from "./DeleteGameEventQuestArgs";
import { GameEventFindManyArgs } from "../../gameEvent/base/GameEventFindManyArgs";
import { GameEvent } from "../../gameEvent/base/GameEvent";
import { GameEventQuestService } from "../gameEventQuest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameEventQuest)
export class GameEventQuestResolverBase {
  constructor(
    protected readonly service: GameEventQuestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuest",
    action: "read",
    possession: "any",
  })
  async _gameEventQuestsMeta(
    @graphql.Args() args: GameEventQuestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameEventQuest])
  @nestAccessControl.UseRoles({
    resource: "GameEventQuest",
    action: "read",
    possession: "any",
  })
  async gameEventQuests(
    @graphql.Args() args: GameEventQuestFindManyArgs
  ): Promise<GameEventQuest[]> {
    return this.service.gameEventQuests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameEventQuest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameEventQuest",
    action: "read",
    possession: "own",
  })
  async gameEventQuest(
    @graphql.Args() args: GameEventQuestFindUniqueArgs
  ): Promise<GameEventQuest | null> {
    const result = await this.service.gameEventQuest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuest",
    action: "create",
    possession: "any",
  })
  async createGameEventQuest(
    @graphql.Args() args: CreateGameEventQuestArgs
  ): Promise<GameEventQuest> {
    return await this.service.createGameEventQuest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameEventQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuest",
    action: "update",
    possession: "any",
  })
  async updateGameEventQuest(
    @graphql.Args() args: UpdateGameEventQuestArgs
  ): Promise<GameEventQuest | null> {
    try {
      return await this.service.updateGameEventQuest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameEventQuest)
  @nestAccessControl.UseRoles({
    resource: "GameEventQuest",
    action: "delete",
    possession: "any",
  })
  async deleteGameEventQuest(
    @graphql.Args() args: DeleteGameEventQuestArgs
  ): Promise<GameEventQuest | null> {
    try {
      return await this.service.deleteGameEventQuest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GameEvent], { name: "gameEvents" })
  @nestAccessControl.UseRoles({
    resource: "GameEvent",
    action: "read",
    possession: "any",
  })
  async findGameEvents(
    @graphql.Parent() parent: GameEventQuest,
    @graphql.Args() args: GameEventFindManyArgs
  ): Promise<GameEvent[]> {
    const results = await this.service.findGameEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
