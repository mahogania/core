/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GameTele } from "./GameTele";
import { GameTeleCountArgs } from "./GameTeleCountArgs";
import { GameTeleFindManyArgs } from "./GameTeleFindManyArgs";
import { GameTeleFindUniqueArgs } from "./GameTeleFindUniqueArgs";
import { CreateGameTeleArgs } from "./CreateGameTeleArgs";
import { UpdateGameTeleArgs } from "./UpdateGameTeleArgs";
import { DeleteGameTeleArgs } from "./DeleteGameTeleArgs";
import { GameTeleService } from "../gameTele.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GameTele)
export class GameTeleResolverBase {
  constructor(
    protected readonly service: GameTeleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GameTele",
    action: "read",
    possession: "any",
  })
  async _gameTelesMeta(
    @graphql.Args() args: GameTeleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GameTele])
  @nestAccessControl.UseRoles({
    resource: "GameTele",
    action: "read",
    possession: "any",
  })
  async gameTeles(
    @graphql.Args() args: GameTeleFindManyArgs
  ): Promise<GameTele[]> {
    return this.service.gameTeles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GameTele, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GameTele",
    action: "read",
    possession: "own",
  })
  async gameTele(
    @graphql.Args() args: GameTeleFindUniqueArgs
  ): Promise<GameTele | null> {
    const result = await this.service.gameTele(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameTele)
  @nestAccessControl.UseRoles({
    resource: "GameTele",
    action: "create",
    possession: "any",
  })
  async createGameTele(
    @graphql.Args() args: CreateGameTeleArgs
  ): Promise<GameTele> {
    return await this.service.createGameTele({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GameTele)
  @nestAccessControl.UseRoles({
    resource: "GameTele",
    action: "update",
    possession: "any",
  })
  async updateGameTele(
    @graphql.Args() args: UpdateGameTeleArgs
  ): Promise<GameTele | null> {
    try {
      return await this.service.updateGameTele({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GameTele)
  @nestAccessControl.UseRoles({
    resource: "GameTele",
    action: "delete",
    possession: "any",
  })
  async deleteGameTele(
    @graphql.Args() args: DeleteGameTeleArgs
  ): Promise<GameTele | null> {
    try {
      return await this.service.deleteGameTele(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
