/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EmployeeGroupService } from "../employeeGroup.service";
import { EmployeeGroupCreateInput } from "./EmployeeGroupCreateInput";
import { EmployeeGroupWhereInput } from "./EmployeeGroupWhereInput";
import { EmployeeGroupWhereUniqueInput } from "./EmployeeGroupWhereUniqueInput";
import { EmployeeGroupFindManyArgs } from "./EmployeeGroupFindManyArgs";
import { EmployeeGroupUpdateInput } from "./EmployeeGroupUpdateInput";
import { EmployeeGroup } from "./EmployeeGroup";

export class EmployeeGroupGrpcControllerBase {
  constructor(protected readonly service: EmployeeGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeGroup })
  @GrpcMethod("EmployeeGroupService", "createEmployeeGroup")
  async createEmployeeGroup(
    @common.Body() data: EmployeeGroupCreateInput
  ): Promise<EmployeeGroup> {
    return await this.service.createEmployeeGroup({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        employeeGroupName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeGroup] })
  @ApiNestedQuery(EmployeeGroupFindManyArgs)
  @GrpcMethod("EmployeeGroupService", "employeeGroups")
  async employeeGroups(
    @common.Req() request: Request
  ): Promise<EmployeeGroup[]> {
    const args = plainToClass(EmployeeGroupFindManyArgs, request.query);
    return this.service.employeeGroups({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        employeeGroupName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeGroupService", "employeeGroup")
  async employeeGroup(
    @common.Param() params: EmployeeGroupWhereUniqueInput
  ): Promise<EmployeeGroup | null> {
    const result = await this.service.employeeGroup({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        employeeGroupName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeGroupService", "updateEmployeeGroup")
  async updateEmployeeGroup(
    @common.Param() params: EmployeeGroupWhereUniqueInput,
    @common.Body() data: EmployeeGroupUpdateInput
  ): Promise<EmployeeGroup | null> {
    try {
      return await this.service.updateEmployeeGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          employeeGroupName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeGroupService", "deleteEmployeeGroup")
  async deleteEmployeeGroup(
    @common.Param() params: EmployeeGroupWhereUniqueInput
  ): Promise<EmployeeGroup | null> {
    try {
      return await this.service.deleteEmployeeGroup({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          employeeGroupName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
