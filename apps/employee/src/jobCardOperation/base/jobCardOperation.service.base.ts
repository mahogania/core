/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  JobCardOperation as PrismaJobCardOperation,
} from "@prisma/client";

export class JobCardOperationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobCardOperationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobCardOperation.count(args);
  }

  async jobCardOperations(
    args: Prisma.JobCardOperationFindManyArgs
  ): Promise<PrismaJobCardOperation[]> {
    return this.prisma.jobCardOperation.findMany(args);
  }
  async jobCardOperation(
    args: Prisma.JobCardOperationFindUniqueArgs
  ): Promise<PrismaJobCardOperation | null> {
    return this.prisma.jobCardOperation.findUnique(args);
  }
  async createJobCardOperation(
    args: Prisma.JobCardOperationCreateArgs
  ): Promise<PrismaJobCardOperation> {
    return this.prisma.jobCardOperation.create(args);
  }
  async updateJobCardOperation(
    args: Prisma.JobCardOperationUpdateArgs
  ): Promise<PrismaJobCardOperation> {
    return this.prisma.jobCardOperation.update(args);
  }
  async deleteJobCardOperation(
    args: Prisma.JobCardOperationDeleteArgs
  ): Promise<PrismaJobCardOperation> {
    return this.prisma.jobCardOperation.delete(args);
  }
}
