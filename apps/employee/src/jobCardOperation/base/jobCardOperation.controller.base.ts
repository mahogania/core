/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobCardOperationService } from "../jobCardOperation.service";
import { JobCardOperationCreateInput } from "./JobCardOperationCreateInput";
import { JobCardOperation } from "./JobCardOperation";
import { JobCardOperationFindManyArgs } from "./JobCardOperationFindManyArgs";
import { JobCardOperationWhereUniqueInput } from "./JobCardOperationWhereUniqueInput";
import { JobCardOperationUpdateInput } from "./JobCardOperationUpdateInput";

export class JobCardOperationControllerBase {
  constructor(protected readonly service: JobCardOperationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobCardOperation })
  @swagger.ApiBody({
    type: JobCardOperationCreateInput,
  })
  async createJobCardOperation(
    @common.Body() data: JobCardOperationCreateInput
  ): Promise<JobCardOperation> {
    return await this.service.createJobCardOperation({
      data: data,
      select: {
        completedQty: true,
        completedTime: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        status: true,
        subOperation: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobCardOperation] })
  @ApiNestedQuery(JobCardOperationFindManyArgs)
  async jobCardOperations(
    @common.Req() request: Request
  ): Promise<JobCardOperation[]> {
    const args = plainToClass(JobCardOperationFindManyArgs, request.query);
    return this.service.jobCardOperations({
      ...args,
      select: {
        completedQty: true,
        completedTime: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        status: true,
        subOperation: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobCardOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobCardOperation(
    @common.Param() params: JobCardOperationWhereUniqueInput
  ): Promise<JobCardOperation | null> {
    const result = await this.service.jobCardOperation({
      where: params,
      select: {
        completedQty: true,
        completedTime: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        status: true,
        subOperation: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobCardOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: JobCardOperationUpdateInput,
  })
  async updateJobCardOperation(
    @common.Param() params: JobCardOperationWhereUniqueInput,
    @common.Body() data: JobCardOperationUpdateInput
  ): Promise<JobCardOperation | null> {
    try {
      return await this.service.updateJobCardOperation({
        where: params,
        data: data,
        select: {
          completedQty: true,
          completedTime: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          status: true,
          subOperation: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobCardOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobCardOperation(
    @common.Param() params: JobCardOperationWhereUniqueInput
  ): Promise<JobCardOperation | null> {
    try {
      return await this.service.deleteJobCardOperation({
        where: params,
        select: {
          completedQty: true,
          completedTime: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          status: true,
          subOperation: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
