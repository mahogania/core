/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobCardScheduledTime } from "./JobCardScheduledTime";
import { JobCardScheduledTimeCountArgs } from "./JobCardScheduledTimeCountArgs";
import { JobCardScheduledTimeFindManyArgs } from "./JobCardScheduledTimeFindManyArgs";
import { JobCardScheduledTimeFindUniqueArgs } from "./JobCardScheduledTimeFindUniqueArgs";
import { CreateJobCardScheduledTimeArgs } from "./CreateJobCardScheduledTimeArgs";
import { UpdateJobCardScheduledTimeArgs } from "./UpdateJobCardScheduledTimeArgs";
import { DeleteJobCardScheduledTimeArgs } from "./DeleteJobCardScheduledTimeArgs";
import { JobCardScheduledTimeService } from "../jobCardScheduledTime.service";
@graphql.Resolver(() => JobCardScheduledTime)
export class JobCardScheduledTimeResolverBase {
  constructor(protected readonly service: JobCardScheduledTimeService) {}

  async _jobCardScheduledTimesMeta(
    @graphql.Args() args: JobCardScheduledTimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobCardScheduledTime])
  async jobCardScheduledTimes(
    @graphql.Args() args: JobCardScheduledTimeFindManyArgs
  ): Promise<JobCardScheduledTime[]> {
    return this.service.jobCardScheduledTimes(args);
  }

  @graphql.Query(() => JobCardScheduledTime, { nullable: true })
  async jobCardScheduledTime(
    @graphql.Args() args: JobCardScheduledTimeFindUniqueArgs
  ): Promise<JobCardScheduledTime | null> {
    const result = await this.service.jobCardScheduledTime(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobCardScheduledTime)
  async createJobCardScheduledTime(
    @graphql.Args() args: CreateJobCardScheduledTimeArgs
  ): Promise<JobCardScheduledTime> {
    return await this.service.createJobCardScheduledTime({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JobCardScheduledTime)
  async updateJobCardScheduledTime(
    @graphql.Args() args: UpdateJobCardScheduledTimeArgs
  ): Promise<JobCardScheduledTime | null> {
    try {
      return await this.service.updateJobCardScheduledTime({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobCardScheduledTime)
  async deleteJobCardScheduledTime(
    @graphql.Args() args: DeleteJobCardScheduledTimeArgs
  ): Promise<JobCardScheduledTime | null> {
    try {
      return await this.service.deleteJobCardScheduledTime(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
