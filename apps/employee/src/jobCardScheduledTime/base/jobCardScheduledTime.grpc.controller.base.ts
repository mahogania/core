/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { JobCardScheduledTimeService } from "../jobCardScheduledTime.service";
import { JobCardScheduledTimeCreateInput } from "./JobCardScheduledTimeCreateInput";
import { JobCardScheduledTimeWhereInput } from "./JobCardScheduledTimeWhereInput";
import { JobCardScheduledTimeWhereUniqueInput } from "./JobCardScheduledTimeWhereUniqueInput";
import { JobCardScheduledTimeFindManyArgs } from "./JobCardScheduledTimeFindManyArgs";
import { JobCardScheduledTimeUpdateInput } from "./JobCardScheduledTimeUpdateInput";
import { JobCardScheduledTime } from "./JobCardScheduledTime";

export class JobCardScheduledTimeGrpcControllerBase {
  constructor(protected readonly service: JobCardScheduledTimeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobCardScheduledTime })
  @GrpcMethod("JobCardScheduledTimeService", "createJobCardScheduledTime")
  async createJobCardScheduledTime(
    @common.Body() data: JobCardScheduledTimeCreateInput
  ): Promise<JobCardScheduledTime> {
    return await this.service.createJobCardScheduledTime({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        timeInMins: true,
        toTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobCardScheduledTime] })
  @ApiNestedQuery(JobCardScheduledTimeFindManyArgs)
  @GrpcMethod("JobCardScheduledTimeService", "jobCardScheduledTimes")
  async jobCardScheduledTimes(
    @common.Req() request: Request
  ): Promise<JobCardScheduledTime[]> {
    const args = plainToClass(JobCardScheduledTimeFindManyArgs, request.query);
    return this.service.jobCardScheduledTimes({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        timeInMins: true,
        toTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobCardScheduledTime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobCardScheduledTimeService", "jobCardScheduledTime")
  async jobCardScheduledTime(
    @common.Param() params: JobCardScheduledTimeWhereUniqueInput
  ): Promise<JobCardScheduledTime | null> {
    const result = await this.service.jobCardScheduledTime({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fromTime: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        timeInMins: true,
        toTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobCardScheduledTime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobCardScheduledTimeService", "updateJobCardScheduledTime")
  async updateJobCardScheduledTime(
    @common.Param() params: JobCardScheduledTimeWhereUniqueInput,
    @common.Body() data: JobCardScheduledTimeUpdateInput
  ): Promise<JobCardScheduledTime | null> {
    try {
      return await this.service.updateJobCardScheduledTime({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          fromTime: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          timeInMins: true,
          toTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobCardScheduledTime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobCardScheduledTimeService", "deleteJobCardScheduledTime")
  async deleteJobCardScheduledTime(
    @common.Param() params: JobCardScheduledTimeWhereUniqueInput
  ): Promise<JobCardScheduledTime | null> {
    try {
      return await this.service.deleteJobCardScheduledTime({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          fromTime: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          timeInMins: true,
          toTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
