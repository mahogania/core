/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeInternalWorkHistoryService } from "../employeeInternalWorkHistory.service";
import { EmployeeInternalWorkHistoryCreateInput } from "./EmployeeInternalWorkHistoryCreateInput";
import { EmployeeInternalWorkHistory } from "./EmployeeInternalWorkHistory";
import { EmployeeInternalWorkHistoryFindManyArgs } from "./EmployeeInternalWorkHistoryFindManyArgs";
import { EmployeeInternalWorkHistoryWhereUniqueInput } from "./EmployeeInternalWorkHistoryWhereUniqueInput";
import { EmployeeInternalWorkHistoryUpdateInput } from "./EmployeeInternalWorkHistoryUpdateInput";

export class EmployeeInternalWorkHistoryControllerBase {
  constructor(protected readonly service: EmployeeInternalWorkHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeInternalWorkHistory })
  @swagger.ApiBody({
    type: EmployeeInternalWorkHistoryCreateInput,
  })
  async createEmployeeInternalWorkHistory(
    @common.Body() data: EmployeeInternalWorkHistoryCreateInput
  ): Promise<EmployeeInternalWorkHistory> {
    return await this.service.createEmployeeInternalWorkHistory({
      data: data,
      select: {
        branch: true,
        createdAt: true,
        creation: true,
        department: true,
        designation: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        toDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeInternalWorkHistory] })
  @ApiNestedQuery(EmployeeInternalWorkHistoryFindManyArgs)
  async employeeInternalWorkHistories(
    @common.Req() request: Request
  ): Promise<EmployeeInternalWorkHistory[]> {
    const args = plainToClass(
      EmployeeInternalWorkHistoryFindManyArgs,
      request.query
    );
    return this.service.employeeInternalWorkHistories({
      ...args,
      select: {
        branch: true,
        createdAt: true,
        creation: true,
        department: true,
        designation: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        toDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeInternalWorkHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeInternalWorkHistory(
    @common.Param() params: EmployeeInternalWorkHistoryWhereUniqueInput
  ): Promise<EmployeeInternalWorkHistory | null> {
    const result = await this.service.employeeInternalWorkHistory({
      where: params,
      select: {
        branch: true,
        createdAt: true,
        creation: true,
        department: true,
        designation: true,
        docstatus: true,
        fromDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        toDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeInternalWorkHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: EmployeeInternalWorkHistoryUpdateInput,
  })
  async updateEmployeeInternalWorkHistory(
    @common.Param() params: EmployeeInternalWorkHistoryWhereUniqueInput,
    @common.Body() data: EmployeeInternalWorkHistoryUpdateInput
  ): Promise<EmployeeInternalWorkHistory | null> {
    try {
      return await this.service.updateEmployeeInternalWorkHistory({
        where: params,
        data: data,
        select: {
          branch: true,
          createdAt: true,
          creation: true,
          department: true,
          designation: true,
          docstatus: true,
          fromDate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          toDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeInternalWorkHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeInternalWorkHistory(
    @common.Param() params: EmployeeInternalWorkHistoryWhereUniqueInput
  ): Promise<EmployeeInternalWorkHistory | null> {
    try {
      return await this.service.deleteEmployeeInternalWorkHistory({
        where: params,
        select: {
          branch: true,
          createdAt: true,
          creation: true,
          department: true,
          designation: true,
          docstatus: true,
          fromDate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          toDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
