/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobCard } from "./JobCard";
import { JobCardCountArgs } from "./JobCardCountArgs";
import { JobCardFindManyArgs } from "./JobCardFindManyArgs";
import { JobCardFindUniqueArgs } from "./JobCardFindUniqueArgs";
import { CreateJobCardArgs } from "./CreateJobCardArgs";
import { UpdateJobCardArgs } from "./UpdateJobCardArgs";
import { DeleteJobCardArgs } from "./DeleteJobCardArgs";
import { JobCardService } from "../jobCard.service";
@graphql.Resolver(() => JobCard)
export class JobCardResolverBase {
  constructor(protected readonly service: JobCardService) {}

  async _jobCardsMeta(
    @graphql.Args() args: JobCardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobCard])
  async jobCards(
    @graphql.Args() args: JobCardFindManyArgs
  ): Promise<JobCard[]> {
    return this.service.jobCards(args);
  }

  @graphql.Query(() => JobCard, { nullable: true })
  async jobCard(
    @graphql.Args() args: JobCardFindUniqueArgs
  ): Promise<JobCard | null> {
    const result = await this.service.jobCard(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobCard)
  async createJobCard(
    @graphql.Args() args: CreateJobCardArgs
  ): Promise<JobCard> {
    return await this.service.createJobCard({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JobCard)
  async updateJobCard(
    @graphql.Args() args: UpdateJobCardArgs
  ): Promise<JobCard | null> {
    try {
      return await this.service.updateJobCard({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobCard)
  async deleteJobCard(
    @graphql.Args() args: DeleteJobCardArgs
  ): Promise<JobCard | null> {
    try {
      return await this.service.deleteJobCard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
