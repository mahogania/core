/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeGroupTable } from "./EmployeeGroupTable";
import { EmployeeGroupTableCountArgs } from "./EmployeeGroupTableCountArgs";
import { EmployeeGroupTableFindManyArgs } from "./EmployeeGroupTableFindManyArgs";
import { EmployeeGroupTableFindUniqueArgs } from "./EmployeeGroupTableFindUniqueArgs";
import { CreateEmployeeGroupTableArgs } from "./CreateEmployeeGroupTableArgs";
import { UpdateEmployeeGroupTableArgs } from "./UpdateEmployeeGroupTableArgs";
import { DeleteEmployeeGroupTableArgs } from "./DeleteEmployeeGroupTableArgs";
import { EmployeeGroupTableService } from "../employeeGroupTable.service";
@graphql.Resolver(() => EmployeeGroupTable)
export class EmployeeGroupTableResolverBase {
  constructor(protected readonly service: EmployeeGroupTableService) {}

  async _employeeGroupTablesMeta(
    @graphql.Args() args: EmployeeGroupTableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeGroupTable])
  async employeeGroupTables(
    @graphql.Args() args: EmployeeGroupTableFindManyArgs
  ): Promise<EmployeeGroupTable[]> {
    return this.service.employeeGroupTables(args);
  }

  @graphql.Query(() => EmployeeGroupTable, { nullable: true })
  async employeeGroupTable(
    @graphql.Args() args: EmployeeGroupTableFindUniqueArgs
  ): Promise<EmployeeGroupTable | null> {
    const result = await this.service.employeeGroupTable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeGroupTable)
  async createEmployeeGroupTable(
    @graphql.Args() args: CreateEmployeeGroupTableArgs
  ): Promise<EmployeeGroupTable> {
    return await this.service.createEmployeeGroupTable({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmployeeGroupTable)
  async updateEmployeeGroupTable(
    @graphql.Args() args: UpdateEmployeeGroupTableArgs
  ): Promise<EmployeeGroupTable | null> {
    try {
      return await this.service.updateEmployeeGroupTable({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeGroupTable)
  async deleteEmployeeGroupTable(
    @graphql.Args() args: DeleteEmployeeGroupTableArgs
  ): Promise<EmployeeGroupTable | null> {
    try {
      return await this.service.deleteEmployeeGroupTable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
