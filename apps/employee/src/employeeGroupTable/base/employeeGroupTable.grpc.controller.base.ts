/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EmployeeGroupTableService } from "../employeeGroupTable.service";
import { EmployeeGroupTableCreateInput } from "./EmployeeGroupTableCreateInput";
import { EmployeeGroupTableWhereInput } from "./EmployeeGroupTableWhereInput";
import { EmployeeGroupTableWhereUniqueInput } from "./EmployeeGroupTableWhereUniqueInput";
import { EmployeeGroupTableFindManyArgs } from "./EmployeeGroupTableFindManyArgs";
import { EmployeeGroupTableUpdateInput } from "./EmployeeGroupTableUpdateInput";
import { EmployeeGroupTable } from "./EmployeeGroupTable";

export class EmployeeGroupTableGrpcControllerBase {
  constructor(protected readonly service: EmployeeGroupTableService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeGroupTable })
  @GrpcMethod("EmployeeGroupTableService", "createEmployeeGroupTable")
  async createEmployeeGroupTable(
    @common.Body() data: EmployeeGroupTableCreateInput
  ): Promise<EmployeeGroupTable> {
    return await this.service.createEmployeeGroupTable({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        employee: true,
        employeeName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeGroupTable] })
  @ApiNestedQuery(EmployeeGroupTableFindManyArgs)
  @GrpcMethod("EmployeeGroupTableService", "employeeGroupTables")
  async employeeGroupTables(
    @common.Req() request: Request
  ): Promise<EmployeeGroupTable[]> {
    const args = plainToClass(EmployeeGroupTableFindManyArgs, request.query);
    return this.service.employeeGroupTables({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        employee: true,
        employeeName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeGroupTable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeGroupTableService", "employeeGroupTable")
  async employeeGroupTable(
    @common.Param() params: EmployeeGroupTableWhereUniqueInput
  ): Promise<EmployeeGroupTable | null> {
    const result = await this.service.employeeGroupTable({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        employee: true,
        employeeName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeGroupTable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeGroupTableService", "updateEmployeeGroupTable")
  async updateEmployeeGroupTable(
    @common.Param() params: EmployeeGroupTableWhereUniqueInput,
    @common.Body() data: EmployeeGroupTableUpdateInput
  ): Promise<EmployeeGroupTable | null> {
    try {
      return await this.service.updateEmployeeGroupTable({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          employee: true,
          employeeName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeGroupTable })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeGroupTableService", "deleteEmployeeGroupTable")
  async deleteEmployeeGroupTable(
    @common.Param() params: EmployeeGroupTableWhereUniqueInput
  ): Promise<EmployeeGroupTable | null> {
    try {
      return await this.service.deleteEmployeeGroupTable({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          employee: true,
          employeeName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
