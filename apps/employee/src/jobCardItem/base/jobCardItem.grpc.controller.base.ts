/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { JobCardItemService } from "../jobCardItem.service";
import { JobCardItemCreateInput } from "./JobCardItemCreateInput";
import { JobCardItemWhereInput } from "./JobCardItemWhereInput";
import { JobCardItemWhereUniqueInput } from "./JobCardItemWhereUniqueInput";
import { JobCardItemFindManyArgs } from "./JobCardItemFindManyArgs";
import { JobCardItemUpdateInput } from "./JobCardItemUpdateInput";
import { JobCardItem } from "./JobCardItem";

export class JobCardItemGrpcControllerBase {
  constructor(protected readonly service: JobCardItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobCardItem })
  @GrpcMethod("JobCardItemService", "createJobCardItem")
  async createJobCardItem(
    @common.Body() data: JobCardItemCreateInput
  ): Promise<JobCardItem> {
    return await this.service.createJobCardItem({
      data: data,
      select: {
        allowAlternativeItem: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        requiredQty: true,
        sourceWarehouse: true,
        stockUom: true,
        transferredQty: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobCardItem] })
  @ApiNestedQuery(JobCardItemFindManyArgs)
  @GrpcMethod("JobCardItemService", "jobCardItems")
  async jobCardItems(@common.Req() request: Request): Promise<JobCardItem[]> {
    const args = plainToClass(JobCardItemFindManyArgs, request.query);
    return this.service.jobCardItems({
      ...args,
      select: {
        allowAlternativeItem: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        requiredQty: true,
        sourceWarehouse: true,
        stockUom: true,
        transferredQty: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobCardItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobCardItemService", "jobCardItem")
  async jobCardItem(
    @common.Param() params: JobCardItemWhereUniqueInput
  ): Promise<JobCardItem | null> {
    const result = await this.service.jobCardItem({
      where: params,
      select: {
        allowAlternativeItem: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        requiredQty: true,
        sourceWarehouse: true,
        stockUom: true,
        transferredQty: true,
        uom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobCardItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobCardItemService", "updateJobCardItem")
  async updateJobCardItem(
    @common.Param() params: JobCardItemWhereUniqueInput,
    @common.Body() data: JobCardItemUpdateInput
  ): Promise<JobCardItem | null> {
    try {
      return await this.service.updateJobCardItem({
        where: params,
        data: data,
        select: {
          allowAlternativeItem: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemGroup: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          requiredQty: true,
          sourceWarehouse: true,
          stockUom: true,
          transferredQty: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobCardItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("JobCardItemService", "deleteJobCardItem")
  async deleteJobCardItem(
    @common.Param() params: JobCardItemWhereUniqueInput
  ): Promise<JobCardItem | null> {
    try {
      return await this.service.deleteJobCardItem({
        where: params,
        select: {
          allowAlternativeItem: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemGroup: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          requiredQty: true,
          sourceWarehouse: true,
          stockUom: true,
          transferredQty: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
