/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobCardItem } from "./JobCardItem";
import { JobCardItemCountArgs } from "./JobCardItemCountArgs";
import { JobCardItemFindManyArgs } from "./JobCardItemFindManyArgs";
import { JobCardItemFindUniqueArgs } from "./JobCardItemFindUniqueArgs";
import { CreateJobCardItemArgs } from "./CreateJobCardItemArgs";
import { UpdateJobCardItemArgs } from "./UpdateJobCardItemArgs";
import { DeleteJobCardItemArgs } from "./DeleteJobCardItemArgs";
import { JobCardItemService } from "../jobCardItem.service";
@graphql.Resolver(() => JobCardItem)
export class JobCardItemResolverBase {
  constructor(protected readonly service: JobCardItemService) {}

  async _jobCardItemsMeta(
    @graphql.Args() args: JobCardItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobCardItem])
  async jobCardItems(
    @graphql.Args() args: JobCardItemFindManyArgs
  ): Promise<JobCardItem[]> {
    return this.service.jobCardItems(args);
  }

  @graphql.Query(() => JobCardItem, { nullable: true })
  async jobCardItem(
    @graphql.Args() args: JobCardItemFindUniqueArgs
  ): Promise<JobCardItem | null> {
    const result = await this.service.jobCardItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobCardItem)
  async createJobCardItem(
    @graphql.Args() args: CreateJobCardItemArgs
  ): Promise<JobCardItem> {
    return await this.service.createJobCardItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JobCardItem)
  async updateJobCardItem(
    @graphql.Args() args: UpdateJobCardItemArgs
  ): Promise<JobCardItem | null> {
    try {
      return await this.service.updateJobCardItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobCardItem)
  async deleteJobCardItem(
    @graphql.Args() args: DeleteJobCardItemArgs
  ): Promise<JobCardItem | null> {
    try {
      return await this.service.deleteJobCardItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
