/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HolidayList } from "./HolidayList";
import { HolidayListCountArgs } from "./HolidayListCountArgs";
import { HolidayListFindManyArgs } from "./HolidayListFindManyArgs";
import { HolidayListFindUniqueArgs } from "./HolidayListFindUniqueArgs";
import { CreateHolidayListArgs } from "./CreateHolidayListArgs";
import { UpdateHolidayListArgs } from "./UpdateHolidayListArgs";
import { DeleteHolidayListArgs } from "./DeleteHolidayListArgs";
import { HolidayListService } from "../holidayList.service";
@graphql.Resolver(() => HolidayList)
export class HolidayListResolverBase {
  constructor(protected readonly service: HolidayListService) {}

  async _holidayListsMeta(
    @graphql.Args() args: HolidayListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HolidayList])
  async holidayLists(
    @graphql.Args() args: HolidayListFindManyArgs
  ): Promise<HolidayList[]> {
    return this.service.holidayLists(args);
  }

  @graphql.Query(() => HolidayList, { nullable: true })
  async holidayList(
    @graphql.Args() args: HolidayListFindUniqueArgs
  ): Promise<HolidayList | null> {
    const result = await this.service.holidayList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HolidayList)
  async createHolidayList(
    @graphql.Args() args: CreateHolidayListArgs
  ): Promise<HolidayList> {
    return await this.service.createHolidayList({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HolidayList)
  async updateHolidayList(
    @graphql.Args() args: UpdateHolidayListArgs
  ): Promise<HolidayList | null> {
    try {
      return await this.service.updateHolidayList({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HolidayList)
  async deleteHolidayList(
    @graphql.Args() args: DeleteHolidayListArgs
  ): Promise<HolidayList | null> {
    try {
      return await this.service.deleteHolidayList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
