/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HolidayListService } from "../holidayList.service";
import { HolidayListCreateInput } from "./HolidayListCreateInput";
import { HolidayList } from "./HolidayList";
import { HolidayListFindManyArgs } from "./HolidayListFindManyArgs";
import { HolidayListWhereUniqueInput } from "./HolidayListWhereUniqueInput";
import { HolidayListUpdateInput } from "./HolidayListUpdateInput";

export class HolidayListControllerBase {
  constructor(protected readonly service: HolidayListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HolidayList })
  @swagger.ApiBody({
    type: HolidayListCreateInput,
  })
  async createHolidayList(
    @common.Body() data: HolidayListCreateInput
  ): Promise<HolidayList> {
    return await this.service.createHolidayList({
      data: data,
      select: {
        color: true,
        country: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromDate: true,
        holidayListName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        subdivision: true,
        toDate: true,
        totalHolidays: true,
        updatedAt: true,
        weeklyOff: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HolidayList] })
  @ApiNestedQuery(HolidayListFindManyArgs)
  async holidayLists(@common.Req() request: Request): Promise<HolidayList[]> {
    const args = plainToClass(HolidayListFindManyArgs, request.query);
    return this.service.holidayLists({
      ...args,
      select: {
        color: true,
        country: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromDate: true,
        holidayListName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        subdivision: true,
        toDate: true,
        totalHolidays: true,
        updatedAt: true,
        weeklyOff: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HolidayList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async holidayList(
    @common.Param() params: HolidayListWhereUniqueInput
  ): Promise<HolidayList | null> {
    const result = await this.service.holidayList({
      where: params,
      select: {
        color: true,
        country: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromDate: true,
        holidayListName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        subdivision: true,
        toDate: true,
        totalHolidays: true,
        updatedAt: true,
        weeklyOff: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HolidayList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: HolidayListUpdateInput,
  })
  async updateHolidayList(
    @common.Param() params: HolidayListWhereUniqueInput,
    @common.Body() data: HolidayListUpdateInput
  ): Promise<HolidayList | null> {
    try {
      return await this.service.updateHolidayList({
        where: params,
        data: data,
        select: {
          color: true,
          country: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fromDate: true,
          holidayListName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          subdivision: true,
          toDate: true,
          totalHolidays: true,
          updatedAt: true,
          weeklyOff: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HolidayList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHolidayList(
    @common.Param() params: HolidayListWhereUniqueInput
  ): Promise<HolidayList | null> {
    try {
      return await this.service.deleteHolidayList({
        where: params,
        select: {
          color: true,
          country: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fromDate: true,
          holidayListName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          subdivision: true,
          toDate: true,
          totalHolidays: true,
          updatedAt: true,
          weeklyOff: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
