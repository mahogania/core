/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeEducation } from "./EmployeeEducation";
import { EmployeeEducationCountArgs } from "./EmployeeEducationCountArgs";
import { EmployeeEducationFindManyArgs } from "./EmployeeEducationFindManyArgs";
import { EmployeeEducationFindUniqueArgs } from "./EmployeeEducationFindUniqueArgs";
import { CreateEmployeeEducationArgs } from "./CreateEmployeeEducationArgs";
import { UpdateEmployeeEducationArgs } from "./UpdateEmployeeEducationArgs";
import { DeleteEmployeeEducationArgs } from "./DeleteEmployeeEducationArgs";
import { EmployeeEducationService } from "../employeeEducation.service";
@graphql.Resolver(() => EmployeeEducation)
export class EmployeeEducationResolverBase {
  constructor(protected readonly service: EmployeeEducationService) {}

  async _employeeEducationsMeta(
    @graphql.Args() args: EmployeeEducationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeEducation])
  async employeeEducations(
    @graphql.Args() args: EmployeeEducationFindManyArgs
  ): Promise<EmployeeEducation[]> {
    return this.service.employeeEducations(args);
  }

  @graphql.Query(() => EmployeeEducation, { nullable: true })
  async employeeEducation(
    @graphql.Args() args: EmployeeEducationFindUniqueArgs
  ): Promise<EmployeeEducation | null> {
    const result = await this.service.employeeEducation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeEducation)
  async createEmployeeEducation(
    @graphql.Args() args: CreateEmployeeEducationArgs
  ): Promise<EmployeeEducation> {
    return await this.service.createEmployeeEducation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmployeeEducation)
  async updateEmployeeEducation(
    @graphql.Args() args: UpdateEmployeeEducationArgs
  ): Promise<EmployeeEducation | null> {
    try {
      return await this.service.updateEmployeeEducation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeEducation)
  async deleteEmployeeEducation(
    @graphql.Args() args: DeleteEmployeeEducationArgs
  ): Promise<EmployeeEducation | null> {
    try {
      return await this.service.deleteEmployeeEducation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
