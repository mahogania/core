/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EmployeeEducationService } from "../employeeEducation.service";
import { EmployeeEducationCreateInput } from "./EmployeeEducationCreateInput";
import { EmployeeEducationWhereInput } from "./EmployeeEducationWhereInput";
import { EmployeeEducationWhereUniqueInput } from "./EmployeeEducationWhereUniqueInput";
import { EmployeeEducationFindManyArgs } from "./EmployeeEducationFindManyArgs";
import { EmployeeEducationUpdateInput } from "./EmployeeEducationUpdateInput";
import { EmployeeEducation } from "./EmployeeEducation";

export class EmployeeEducationGrpcControllerBase {
  constructor(protected readonly service: EmployeeEducationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeEducation })
  @GrpcMethod("EmployeeEducationService", "createEmployeeEducation")
  async createEmployeeEducation(
    @common.Body() data: EmployeeEducationCreateInput
  ): Promise<EmployeeEducation> {
    return await this.service.createEmployeeEducation({
      data: data,
      select: {
        classPer: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        level: true,
        majOptSubj: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qualification: true,
        schoolUniv: true,
        updatedAt: true,
        yearOfPassing: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeEducation] })
  @ApiNestedQuery(EmployeeEducationFindManyArgs)
  @GrpcMethod("EmployeeEducationService", "employeeEducations")
  async employeeEducations(
    @common.Req() request: Request
  ): Promise<EmployeeEducation[]> {
    const args = plainToClass(EmployeeEducationFindManyArgs, request.query);
    return this.service.employeeEducations({
      ...args,
      select: {
        classPer: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        level: true,
        majOptSubj: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qualification: true,
        schoolUniv: true,
        updatedAt: true,
        yearOfPassing: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeEducation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeEducationService", "employeeEducation")
  async employeeEducation(
    @common.Param() params: EmployeeEducationWhereUniqueInput
  ): Promise<EmployeeEducation | null> {
    const result = await this.service.employeeEducation({
      where: params,
      select: {
        classPer: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        level: true,
        majOptSubj: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qualification: true,
        schoolUniv: true,
        updatedAt: true,
        yearOfPassing: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeEducation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeEducationService", "updateEmployeeEducation")
  async updateEmployeeEducation(
    @common.Param() params: EmployeeEducationWhereUniqueInput,
    @common.Body() data: EmployeeEducationUpdateInput
  ): Promise<EmployeeEducation | null> {
    try {
      return await this.service.updateEmployeeEducation({
        where: params,
        data: data,
        select: {
          classPer: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          level: true,
          majOptSubj: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qualification: true,
          schoolUniv: true,
          updatedAt: true,
          yearOfPassing: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeEducation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EmployeeEducationService", "deleteEmployeeEducation")
  async deleteEmployeeEducation(
    @common.Param() params: EmployeeEducationWhereUniqueInput
  ): Promise<EmployeeEducation | null> {
    try {
      return await this.service.deleteEmployeeEducation({
        where: params,
        select: {
          classPer: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          level: true,
          majOptSubj: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qualification: true,
          schoolUniv: true,
          updatedAt: true,
          yearOfPassing: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
