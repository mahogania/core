/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeService } from "../employee.service";
import { EmployeeCreateInput } from "./EmployeeCreateInput";
import { Employee } from "./Employee";
import { EmployeeFindManyArgs } from "./EmployeeFindManyArgs";
import { EmployeeWhereUniqueInput } from "./EmployeeWhereUniqueInput";
import { EmployeeUpdateInput } from "./EmployeeUpdateInput";

export class EmployeeControllerBase {
  constructor(protected readonly service: EmployeeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employee })
  @swagger.ApiBody({
    type: EmployeeCreateInput,
  })
  async createEmployee(
    @common.Body() data: EmployeeCreateInput
  ): Promise<Employee> {
    return await this.service.createEmployee({
      data: data,
      select: {
        attendanceDeviceId: true,
        bankAcNo: true,
        bankName: true,
        bio: true,
        bloodGroup: true,
        branch: true,
        cellNumber: true,
        company: true,
        companyEmail: true,
        contractEndDate: true,
        createUserPermission: true,
        createdAt: true,
        creation: true,
        ctc: true,
        currentAccommodationType: true,
        currentAddress: true,
        dateOfBirth: true,
        dateOfIssue: true,
        dateOfJoining: true,
        dateOfRetirement: true,
        department: true,
        designation: true,
        docstatus: true,
        emergencyPhoneNumber: true,
        employee: true,
        employeeName: true,
        employeeNumber: true,
        encashmentDate: true,
        familyBackground: true,
        feedback: true,
        finalConfirmationDate: true,
        firstName: true,
        gender: true,
        healthDetails: true,
        heldOn: true,
        holidayList: true,
        iban: true,
        id: true,
        idx: true,
        image: true,
        lastName: true,
        leaveEncashed: true,
        lft: true,
        maritalStatus: true,
        middleName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        newWorkplace: true,
        noticeNumberOfDays: true,
        owner: true,
        passportNumber: true,
        permanentAccommodationType: true,
        permanentAddress: true,
        personToBeContacted: true,
        personalEmail: true,
        placeOfIssue: true,
        preferedContactEmail: true,
        preferedEmail: true,
        reasonForLeaving: true,
        relation: true,
        relievingDate: true,
        reportsTo: true,
        resignationLetterDate: true,
        rgt: true,
        salaryCurrency: true,
        salaryMode: true,
        salutation: true,
        scheduledConfirmationDate: true,
        status: true,
        unsubscribed: true,
        updatedAt: true,
        userId: true,
        validUpto: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Employee] })
  @ApiNestedQuery(EmployeeFindManyArgs)
  async employees(@common.Req() request: Request): Promise<Employee[]> {
    const args = plainToClass(EmployeeFindManyArgs, request.query);
    return this.service.employees({
      ...args,
      select: {
        attendanceDeviceId: true,
        bankAcNo: true,
        bankName: true,
        bio: true,
        bloodGroup: true,
        branch: true,
        cellNumber: true,
        company: true,
        companyEmail: true,
        contractEndDate: true,
        createUserPermission: true,
        createdAt: true,
        creation: true,
        ctc: true,
        currentAccommodationType: true,
        currentAddress: true,
        dateOfBirth: true,
        dateOfIssue: true,
        dateOfJoining: true,
        dateOfRetirement: true,
        department: true,
        designation: true,
        docstatus: true,
        emergencyPhoneNumber: true,
        employee: true,
        employeeName: true,
        employeeNumber: true,
        encashmentDate: true,
        familyBackground: true,
        feedback: true,
        finalConfirmationDate: true,
        firstName: true,
        gender: true,
        healthDetails: true,
        heldOn: true,
        holidayList: true,
        iban: true,
        id: true,
        idx: true,
        image: true,
        lastName: true,
        leaveEncashed: true,
        lft: true,
        maritalStatus: true,
        middleName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        newWorkplace: true,
        noticeNumberOfDays: true,
        owner: true,
        passportNumber: true,
        permanentAccommodationType: true,
        permanentAddress: true,
        personToBeContacted: true,
        personalEmail: true,
        placeOfIssue: true,
        preferedContactEmail: true,
        preferedEmail: true,
        reasonForLeaving: true,
        relation: true,
        relievingDate: true,
        reportsTo: true,
        resignationLetterDate: true,
        rgt: true,
        salaryCurrency: true,
        salaryMode: true,
        salutation: true,
        scheduledConfirmationDate: true,
        status: true,
        unsubscribed: true,
        updatedAt: true,
        userId: true,
        validUpto: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employee(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    const result = await this.service.employee({
      where: params,
      select: {
        attendanceDeviceId: true,
        bankAcNo: true,
        bankName: true,
        bio: true,
        bloodGroup: true,
        branch: true,
        cellNumber: true,
        company: true,
        companyEmail: true,
        contractEndDate: true,
        createUserPermission: true,
        createdAt: true,
        creation: true,
        ctc: true,
        currentAccommodationType: true,
        currentAddress: true,
        dateOfBirth: true,
        dateOfIssue: true,
        dateOfJoining: true,
        dateOfRetirement: true,
        department: true,
        designation: true,
        docstatus: true,
        emergencyPhoneNumber: true,
        employee: true,
        employeeName: true,
        employeeNumber: true,
        encashmentDate: true,
        familyBackground: true,
        feedback: true,
        finalConfirmationDate: true,
        firstName: true,
        gender: true,
        healthDetails: true,
        heldOn: true,
        holidayList: true,
        iban: true,
        id: true,
        idx: true,
        image: true,
        lastName: true,
        leaveEncashed: true,
        lft: true,
        maritalStatus: true,
        middleName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        newWorkplace: true,
        noticeNumberOfDays: true,
        owner: true,
        passportNumber: true,
        permanentAccommodationType: true,
        permanentAddress: true,
        personToBeContacted: true,
        personalEmail: true,
        placeOfIssue: true,
        preferedContactEmail: true,
        preferedEmail: true,
        reasonForLeaving: true,
        relation: true,
        relievingDate: true,
        reportsTo: true,
        resignationLetterDate: true,
        rgt: true,
        salaryCurrency: true,
        salaryMode: true,
        salutation: true,
        scheduledConfirmationDate: true,
        status: true,
        unsubscribed: true,
        updatedAt: true,
        userId: true,
        validUpto: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: EmployeeUpdateInput,
  })
  async updateEmployee(
    @common.Param() params: EmployeeWhereUniqueInput,
    @common.Body() data: EmployeeUpdateInput
  ): Promise<Employee | null> {
    try {
      return await this.service.updateEmployee({
        where: params,
        data: data,
        select: {
          attendanceDeviceId: true,
          bankAcNo: true,
          bankName: true,
          bio: true,
          bloodGroup: true,
          branch: true,
          cellNumber: true,
          company: true,
          companyEmail: true,
          contractEndDate: true,
          createUserPermission: true,
          createdAt: true,
          creation: true,
          ctc: true,
          currentAccommodationType: true,
          currentAddress: true,
          dateOfBirth: true,
          dateOfIssue: true,
          dateOfJoining: true,
          dateOfRetirement: true,
          department: true,
          designation: true,
          docstatus: true,
          emergencyPhoneNumber: true,
          employee: true,
          employeeName: true,
          employeeNumber: true,
          encashmentDate: true,
          familyBackground: true,
          feedback: true,
          finalConfirmationDate: true,
          firstName: true,
          gender: true,
          healthDetails: true,
          heldOn: true,
          holidayList: true,
          iban: true,
          id: true,
          idx: true,
          image: true,
          lastName: true,
          leaveEncashed: true,
          lft: true,
          maritalStatus: true,
          middleName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          newWorkplace: true,
          noticeNumberOfDays: true,
          owner: true,
          passportNumber: true,
          permanentAccommodationType: true,
          permanentAddress: true,
          personToBeContacted: true,
          personalEmail: true,
          placeOfIssue: true,
          preferedContactEmail: true,
          preferedEmail: true,
          reasonForLeaving: true,
          relation: true,
          relievingDate: true,
          reportsTo: true,
          resignationLetterDate: true,
          rgt: true,
          salaryCurrency: true,
          salaryMode: true,
          salutation: true,
          scheduledConfirmationDate: true,
          status: true,
          unsubscribed: true,
          updatedAt: true,
          userId: true,
          validUpto: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployee(
    @common.Param() params: EmployeeWhereUniqueInput
  ): Promise<Employee | null> {
    try {
      return await this.service.deleteEmployee({
        where: params,
        select: {
          attendanceDeviceId: true,
          bankAcNo: true,
          bankName: true,
          bio: true,
          bloodGroup: true,
          branch: true,
          cellNumber: true,
          company: true,
          companyEmail: true,
          contractEndDate: true,
          createUserPermission: true,
          createdAt: true,
          creation: true,
          ctc: true,
          currentAccommodationType: true,
          currentAddress: true,
          dateOfBirth: true,
          dateOfIssue: true,
          dateOfJoining: true,
          dateOfRetirement: true,
          department: true,
          designation: true,
          docstatus: true,
          emergencyPhoneNumber: true,
          employee: true,
          employeeName: true,
          employeeNumber: true,
          encashmentDate: true,
          familyBackground: true,
          feedback: true,
          finalConfirmationDate: true,
          firstName: true,
          gender: true,
          healthDetails: true,
          heldOn: true,
          holidayList: true,
          iban: true,
          id: true,
          idx: true,
          image: true,
          lastName: true,
          leaveEncashed: true,
          lft: true,
          maritalStatus: true,
          middleName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          newWorkplace: true,
          noticeNumberOfDays: true,
          owner: true,
          passportNumber: true,
          permanentAccommodationType: true,
          permanentAddress: true,
          personToBeContacted: true,
          personalEmail: true,
          placeOfIssue: true,
          preferedContactEmail: true,
          preferedEmail: true,
          reasonForLeaving: true,
          relation: true,
          relievingDate: true,
          reportsTo: true,
          resignationLetterDate: true,
          rgt: true,
          salaryCurrency: true,
          salaryMode: true,
          salutation: true,
          scheduledConfirmationDate: true,
          status: true,
          unsubscribed: true,
          updatedAt: true,
          userId: true,
          validUpto: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
