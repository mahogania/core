/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeExternalWorkHistoryService } from "../employeeExternalWorkHistory.service";
import { EmployeeExternalWorkHistoryCreateInput } from "./EmployeeExternalWorkHistoryCreateInput";
import { EmployeeExternalWorkHistory } from "./EmployeeExternalWorkHistory";
import { EmployeeExternalWorkHistoryFindManyArgs } from "./EmployeeExternalWorkHistoryFindManyArgs";
import { EmployeeExternalWorkHistoryWhereUniqueInput } from "./EmployeeExternalWorkHistoryWhereUniqueInput";
import { EmployeeExternalWorkHistoryUpdateInput } from "./EmployeeExternalWorkHistoryUpdateInput";

export class EmployeeExternalWorkHistoryControllerBase {
  constructor(protected readonly service: EmployeeExternalWorkHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeExternalWorkHistory })
  @swagger.ApiBody({
    type: EmployeeExternalWorkHistoryCreateInput,
  })
  async createEmployeeExternalWorkHistory(
    @common.Body() data: EmployeeExternalWorkHistoryCreateInput
  ): Promise<EmployeeExternalWorkHistory> {
    return await this.service.createEmployeeExternalWorkHistory({
      data: data,
      select: {
        address: true,
        companyName: true,
        contact: true,
        createdAt: true,
        creation: true,
        designation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        salary: true,
        totalExperience: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeExternalWorkHistory] })
  @ApiNestedQuery(EmployeeExternalWorkHistoryFindManyArgs)
  async employeeExternalWorkHistories(
    @common.Req() request: Request
  ): Promise<EmployeeExternalWorkHistory[]> {
    const args = plainToClass(
      EmployeeExternalWorkHistoryFindManyArgs,
      request.query
    );
    return this.service.employeeExternalWorkHistories({
      ...args,
      select: {
        address: true,
        companyName: true,
        contact: true,
        createdAt: true,
        creation: true,
        designation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        salary: true,
        totalExperience: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeExternalWorkHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeExternalWorkHistory(
    @common.Param() params: EmployeeExternalWorkHistoryWhereUniqueInput
  ): Promise<EmployeeExternalWorkHistory | null> {
    const result = await this.service.employeeExternalWorkHistory({
      where: params,
      select: {
        address: true,
        companyName: true,
        contact: true,
        createdAt: true,
        creation: true,
        designation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        salary: true,
        totalExperience: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeExternalWorkHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: EmployeeExternalWorkHistoryUpdateInput,
  })
  async updateEmployeeExternalWorkHistory(
    @common.Param() params: EmployeeExternalWorkHistoryWhereUniqueInput,
    @common.Body() data: EmployeeExternalWorkHistoryUpdateInput
  ): Promise<EmployeeExternalWorkHistory | null> {
    try {
      return await this.service.updateEmployeeExternalWorkHistory({
        where: params,
        data: data,
        select: {
          address: true,
          companyName: true,
          contact: true,
          createdAt: true,
          creation: true,
          designation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          salary: true,
          totalExperience: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeExternalWorkHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeExternalWorkHistory(
    @common.Param() params: EmployeeExternalWorkHistoryWhereUniqueInput
  ): Promise<EmployeeExternalWorkHistory | null> {
    try {
      return await this.service.deleteEmployeeExternalWorkHistory({
        where: params,
        select: {
          address: true,
          companyName: true,
          contact: true,
          createdAt: true,
          creation: true,
          designation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          salary: true,
          totalExperience: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
