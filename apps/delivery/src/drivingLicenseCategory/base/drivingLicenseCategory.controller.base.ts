/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DrivingLicenseCategoryService } from "../drivingLicenseCategory.service";
import { DrivingLicenseCategoryCreateInput } from "./DrivingLicenseCategoryCreateInput";
import { DrivingLicenseCategory } from "./DrivingLicenseCategory";
import { DrivingLicenseCategoryFindManyArgs } from "./DrivingLicenseCategoryFindManyArgs";
import { DrivingLicenseCategoryWhereUniqueInput } from "./DrivingLicenseCategoryWhereUniqueInput";
import { DrivingLicenseCategoryUpdateInput } from "./DrivingLicenseCategoryUpdateInput";

export class DrivingLicenseCategoryControllerBase {
  constructor(protected readonly service: DrivingLicenseCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DrivingLicenseCategory })
  async createDrivingLicenseCategory(
    @common.Body() data: DrivingLicenseCategoryCreateInput
  ): Promise<DrivingLicenseCategory> {
    return await this.service.createDrivingLicenseCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DrivingLicenseCategory] })
  @ApiNestedQuery(DrivingLicenseCategoryFindManyArgs)
  async drivingLicenseCategories(
    @common.Req() request: Request
  ): Promise<DrivingLicenseCategory[]> {
    const args = plainToClass(
      DrivingLicenseCategoryFindManyArgs,
      request.query
    );
    return this.service.drivingLicenseCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DrivingLicenseCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async drivingLicenseCategory(
    @common.Param() params: DrivingLicenseCategoryWhereUniqueInput
  ): Promise<DrivingLicenseCategory | null> {
    const result = await this.service.drivingLicenseCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DrivingLicenseCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDrivingLicenseCategory(
    @common.Param() params: DrivingLicenseCategoryWhereUniqueInput,
    @common.Body() data: DrivingLicenseCategoryUpdateInput
  ): Promise<DrivingLicenseCategory | null> {
    try {
      return await this.service.updateDrivingLicenseCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DrivingLicenseCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDrivingLicenseCategory(
    @common.Param() params: DrivingLicenseCategoryWhereUniqueInput
  ): Promise<DrivingLicenseCategory | null> {
    try {
      return await this.service.deleteDrivingLicenseCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
