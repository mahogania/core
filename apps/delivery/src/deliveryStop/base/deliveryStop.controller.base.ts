/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryStopService } from "../deliveryStop.service";
import { DeliveryStopCreateInput } from "./DeliveryStopCreateInput";
import { DeliveryStop } from "./DeliveryStop";
import { DeliveryStopFindManyArgs } from "./DeliveryStopFindManyArgs";
import { DeliveryStopWhereUniqueInput } from "./DeliveryStopWhereUniqueInput";
import { DeliveryStopUpdateInput } from "./DeliveryStopUpdateInput";

export class DeliveryStopControllerBase {
  constructor(protected readonly service: DeliveryStopService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryStop })
  async createDeliveryStop(
    @common.Body() data: DeliveryStopCreateInput
  ): Promise<DeliveryStop> {
    return await this.service.createDeliveryStop({
      data: data,
      select: {
        address: true,
        contact: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerAddress: true,
        customerContact: true,
        deliveryNote: true,
        details: true,
        distance: true,
        docstatus: true,
        emailSentTo: true,
        estimatedArrival: true,
        grandTotal: true,
        id: true,
        idx: true,
        lat: true,
        lng: true,
        locked: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        uom: true,
        updatedAt: true,
        visited: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryStop] })
  @ApiNestedQuery(DeliveryStopFindManyArgs)
  async deliveryStops(@common.Req() request: Request): Promise<DeliveryStop[]> {
    const args = plainToClass(DeliveryStopFindManyArgs, request.query);
    return this.service.deliveryStops({
      ...args,
      select: {
        address: true,
        contact: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerAddress: true,
        customerContact: true,
        deliveryNote: true,
        details: true,
        distance: true,
        docstatus: true,
        emailSentTo: true,
        estimatedArrival: true,
        grandTotal: true,
        id: true,
        idx: true,
        lat: true,
        lng: true,
        locked: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        uom: true,
        updatedAt: true,
        visited: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryStop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryStop(
    @common.Param() params: DeliveryStopWhereUniqueInput
  ): Promise<DeliveryStop | null> {
    const result = await this.service.deliveryStop({
      where: params,
      select: {
        address: true,
        contact: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerAddress: true,
        customerContact: true,
        deliveryNote: true,
        details: true,
        distance: true,
        docstatus: true,
        emailSentTo: true,
        estimatedArrival: true,
        grandTotal: true,
        id: true,
        idx: true,
        lat: true,
        lng: true,
        locked: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        uom: true,
        updatedAt: true,
        visited: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryStop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryStop(
    @common.Param() params: DeliveryStopWhereUniqueInput,
    @common.Body() data: DeliveryStopUpdateInput
  ): Promise<DeliveryStop | null> {
    try {
      return await this.service.updateDeliveryStop({
        where: params,
        data: data,
        select: {
          address: true,
          contact: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerAddress: true,
          customerContact: true,
          deliveryNote: true,
          details: true,
          distance: true,
          docstatus: true,
          emailSentTo: true,
          estimatedArrival: true,
          grandTotal: true,
          id: true,
          idx: true,
          lat: true,
          lng: true,
          locked: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          uom: true,
          updatedAt: true,
          visited: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryStop })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryStop(
    @common.Param() params: DeliveryStopWhereUniqueInput
  ): Promise<DeliveryStop | null> {
    try {
      return await this.service.deleteDeliveryStop({
        where: params,
        select: {
          address: true,
          contact: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerAddress: true,
          customerContact: true,
          deliveryNote: true,
          details: true,
          distance: true,
          docstatus: true,
          emailSentTo: true,
          estimatedArrival: true,
          grandTotal: true,
          id: true,
          idx: true,
          lat: true,
          lng: true,
          locked: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          uom: true,
          updatedAt: true,
          visited: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
