/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryNote } from "./DeliveryNote";
import { DeliveryNoteCountArgs } from "./DeliveryNoteCountArgs";
import { DeliveryNoteFindManyArgs } from "./DeliveryNoteFindManyArgs";
import { DeliveryNoteFindUniqueArgs } from "./DeliveryNoteFindUniqueArgs";
import { CreateDeliveryNoteArgs } from "./CreateDeliveryNoteArgs";
import { UpdateDeliveryNoteArgs } from "./UpdateDeliveryNoteArgs";
import { DeleteDeliveryNoteArgs } from "./DeleteDeliveryNoteArgs";
import { DeliveryNoteService } from "../deliveryNote.service";
@graphql.Resolver(() => DeliveryNote)
export class DeliveryNoteResolverBase {
  constructor(protected readonly service: DeliveryNoteService) {}

  async _deliveryNotesMeta(
    @graphql.Args() args: DeliveryNoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryNote])
  async deliveryNotes(
    @graphql.Args() args: DeliveryNoteFindManyArgs
  ): Promise<DeliveryNote[]> {
    return this.service.deliveryNotes(args);
  }

  @graphql.Query(() => DeliveryNote, { nullable: true })
  async deliveryNote(
    @graphql.Args() args: DeliveryNoteFindUniqueArgs
  ): Promise<DeliveryNote | null> {
    const result = await this.service.deliveryNote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryNote)
  async createDeliveryNote(
    @graphql.Args() args: CreateDeliveryNoteArgs
  ): Promise<DeliveryNote> {
    return await this.service.createDeliveryNote({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryNote)
  async updateDeliveryNote(
    @graphql.Args() args: UpdateDeliveryNoteArgs
  ): Promise<DeliveryNote | null> {
    try {
      return await this.service.updateDeliveryNote({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryNote)
  async deleteDeliveryNote(
    @graphql.Args() args: DeleteDeliveryNoteArgs
  ): Promise<DeliveryNote | null> {
    try {
      return await this.service.deleteDeliveryNote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
