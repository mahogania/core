/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryNoteItem } from "./DeliveryNoteItem";
import { DeliveryNoteItemCountArgs } from "./DeliveryNoteItemCountArgs";
import { DeliveryNoteItemFindManyArgs } from "./DeliveryNoteItemFindManyArgs";
import { DeliveryNoteItemFindUniqueArgs } from "./DeliveryNoteItemFindUniqueArgs";
import { CreateDeliveryNoteItemArgs } from "./CreateDeliveryNoteItemArgs";
import { UpdateDeliveryNoteItemArgs } from "./UpdateDeliveryNoteItemArgs";
import { DeleteDeliveryNoteItemArgs } from "./DeleteDeliveryNoteItemArgs";
import { DeliveryNoteItemService } from "../deliveryNoteItem.service";
@graphql.Resolver(() => DeliveryNoteItem)
export class DeliveryNoteItemResolverBase {
  constructor(protected readonly service: DeliveryNoteItemService) {}

  async _deliveryNoteItemsMeta(
    @graphql.Args() args: DeliveryNoteItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryNoteItem])
  async deliveryNoteItems(
    @graphql.Args() args: DeliveryNoteItemFindManyArgs
  ): Promise<DeliveryNoteItem[]> {
    return this.service.deliveryNoteItems(args);
  }

  @graphql.Query(() => DeliveryNoteItem, { nullable: true })
  async deliveryNoteItem(
    @graphql.Args() args: DeliveryNoteItemFindUniqueArgs
  ): Promise<DeliveryNoteItem | null> {
    const result = await this.service.deliveryNoteItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryNoteItem)
  async createDeliveryNoteItem(
    @graphql.Args() args: CreateDeliveryNoteItemArgs
  ): Promise<DeliveryNoteItem> {
    return await this.service.createDeliveryNoteItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryNoteItem)
  async updateDeliveryNoteItem(
    @graphql.Args() args: UpdateDeliveryNoteItemArgs
  ): Promise<DeliveryNoteItem | null> {
    try {
      return await this.service.updateDeliveryNoteItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryNoteItem)
  async deleteDeliveryNoteItem(
    @graphql.Args() args: DeleteDeliveryNoteItemArgs
  ): Promise<DeliveryNoteItem | null> {
    try {
      return await this.service.deleteDeliveryNoteItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
