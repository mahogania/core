/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryTripService } from "../deliveryTrip.service";
import { DeliveryTripCreateInput } from "./DeliveryTripCreateInput";
import { DeliveryTrip } from "./DeliveryTrip";
import { DeliveryTripFindManyArgs } from "./DeliveryTripFindManyArgs";
import { DeliveryTripWhereUniqueInput } from "./DeliveryTripWhereUniqueInput";
import { DeliveryTripUpdateInput } from "./DeliveryTripUpdateInput";

export class DeliveryTripControllerBase {
  constructor(protected readonly service: DeliveryTripService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryTrip })
  async createDeliveryTrip(
    @common.Body() data: DeliveryTripCreateInput
  ): Promise<DeliveryTrip> {
    return await this.service.createDeliveryTrip({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        departureTime: true,
        docstatus: true,
        driver: true,
        driverAddress: true,
        driverEmail: true,
        driverName: true,
        emailNotificationSent: true,
        employee: true,
        id: true,
        idx: true,
        name: true,
        namingSeries: true,
        owner: true,
        status: true,
        totalDistance: true,
        uom: true,
        updatedAt: true,
        vehicle: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryTrip] })
  @ApiNestedQuery(DeliveryTripFindManyArgs)
  async deliveryTrips(@common.Req() request: Request): Promise<DeliveryTrip[]> {
    const args = plainToClass(DeliveryTripFindManyArgs, request.query);
    return this.service.deliveryTrips({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        departureTime: true,
        docstatus: true,
        driver: true,
        driverAddress: true,
        driverEmail: true,
        driverName: true,
        emailNotificationSent: true,
        employee: true,
        id: true,
        idx: true,
        name: true,
        namingSeries: true,
        owner: true,
        status: true,
        totalDistance: true,
        uom: true,
        updatedAt: true,
        vehicle: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryTrip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryTrip(
    @common.Param() params: DeliveryTripWhereUniqueInput
  ): Promise<DeliveryTrip | null> {
    const result = await this.service.deliveryTrip({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        departureTime: true,
        docstatus: true,
        driver: true,
        driverAddress: true,
        driverEmail: true,
        driverName: true,
        emailNotificationSent: true,
        employee: true,
        id: true,
        idx: true,
        name: true,
        namingSeries: true,
        owner: true,
        status: true,
        totalDistance: true,
        uom: true,
        updatedAt: true,
        vehicle: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryTrip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryTrip(
    @common.Param() params: DeliveryTripWhereUniqueInput,
    @common.Body() data: DeliveryTripUpdateInput
  ): Promise<DeliveryTrip | null> {
    try {
      return await this.service.updateDeliveryTrip({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          departureTime: true,
          docstatus: true,
          driver: true,
          driverAddress: true,
          driverEmail: true,
          driverName: true,
          emailNotificationSent: true,
          employee: true,
          id: true,
          idx: true,
          name: true,
          namingSeries: true,
          owner: true,
          status: true,
          totalDistance: true,
          uom: true,
          updatedAt: true,
          vehicle: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryTrip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryTrip(
    @common.Param() params: DeliveryTripWhereUniqueInput
  ): Promise<DeliveryTrip | null> {
    try {
      return await this.service.deleteDeliveryTrip({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          departureTime: true,
          docstatus: true,
          driver: true,
          driverAddress: true,
          driverEmail: true,
          driverName: true,
          emailNotificationSent: true,
          employee: true,
          id: true,
          idx: true,
          name: true,
          namingSeries: true,
          owner: true,
          status: true,
          totalDistance: true,
          uom: true,
          updatedAt: true,
          vehicle: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
