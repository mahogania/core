/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryTrip } from "./DeliveryTrip";
import { DeliveryTripCountArgs } from "./DeliveryTripCountArgs";
import { DeliveryTripFindManyArgs } from "./DeliveryTripFindManyArgs";
import { DeliveryTripFindUniqueArgs } from "./DeliveryTripFindUniqueArgs";
import { CreateDeliveryTripArgs } from "./CreateDeliveryTripArgs";
import { UpdateDeliveryTripArgs } from "./UpdateDeliveryTripArgs";
import { DeleteDeliveryTripArgs } from "./DeleteDeliveryTripArgs";
import { DeliveryTripService } from "../deliveryTrip.service";
@graphql.Resolver(() => DeliveryTrip)
export class DeliveryTripResolverBase {
  constructor(protected readonly service: DeliveryTripService) {}

  async _deliveryTripsMeta(
    @graphql.Args() args: DeliveryTripCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryTrip])
  async deliveryTrips(
    @graphql.Args() args: DeliveryTripFindManyArgs
  ): Promise<DeliveryTrip[]> {
    return this.service.deliveryTrips(args);
  }

  @graphql.Query(() => DeliveryTrip, { nullable: true })
  async deliveryTrip(
    @graphql.Args() args: DeliveryTripFindUniqueArgs
  ): Promise<DeliveryTrip | null> {
    const result = await this.service.deliveryTrip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryTrip)
  async createDeliveryTrip(
    @graphql.Args() args: CreateDeliveryTripArgs
  ): Promise<DeliveryTrip> {
    return await this.service.createDeliveryTrip({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryTrip)
  async updateDeliveryTrip(
    @graphql.Args() args: UpdateDeliveryTripArgs
  ): Promise<DeliveryTrip | null> {
    try {
      return await this.service.updateDeliveryTrip({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryTrip)
  async deleteDeliveryTrip(
    @graphql.Args() args: DeleteDeliveryTripArgs
  ): Promise<DeliveryTrip | null> {
    try {
      return await this.service.deleteDeliveryTrip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
