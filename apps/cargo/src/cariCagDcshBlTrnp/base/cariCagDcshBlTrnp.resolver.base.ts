/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CariCagDcshBlTrnp } from "./CariCagDcshBlTrnp";
import { CariCagDcshBlTrnpCountArgs } from "./CariCagDcshBlTrnpCountArgs";
import { CariCagDcshBlTrnpFindManyArgs } from "./CariCagDcshBlTrnpFindManyArgs";
import { CariCagDcshBlTrnpFindUniqueArgs } from "./CariCagDcshBlTrnpFindUniqueArgs";
import { CreateCariCagDcshBlTrnpArgs } from "./CreateCariCagDcshBlTrnpArgs";
import { UpdateCariCagDcshBlTrnpArgs } from "./UpdateCariCagDcshBlTrnpArgs";
import { DeleteCariCagDcshBlTrnpArgs } from "./DeleteCariCagDcshBlTrnpArgs";
import { CariCagDcshBlTrnpService } from "../cariCagDcshBlTrnp.service";
@graphql.Resolver(() => CariCagDcshBlTrnp)
export class CariCagDcshBlTrnpResolverBase {
  constructor(protected readonly service: CariCagDcshBlTrnpService) {}

  async _cariCagDcshBlTrnpsMeta(
    @graphql.Args() args: CariCagDcshBlTrnpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CariCagDcshBlTrnp])
  async cariCagDcshBlTrnps(
    @graphql.Args() args: CariCagDcshBlTrnpFindManyArgs
  ): Promise<CariCagDcshBlTrnp[]> {
    return this.service.cariCagDcshBlTrnps(args);
  }

  @graphql.Query(() => CariCagDcshBlTrnp, { nullable: true })
  async cariCagDcshBlTrnp(
    @graphql.Args() args: CariCagDcshBlTrnpFindUniqueArgs
  ): Promise<CariCagDcshBlTrnp | null> {
    const result = await this.service.cariCagDcshBlTrnp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CariCagDcshBlTrnp)
  async createCariCagDcshBlTrnp(
    @graphql.Args() args: CreateCariCagDcshBlTrnpArgs
  ): Promise<CariCagDcshBlTrnp> {
    return await this.service.createCariCagDcshBlTrnp({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CariCagDcshBlTrnp)
  async updateCariCagDcshBlTrnp(
    @graphql.Args() args: UpdateCariCagDcshBlTrnpArgs
  ): Promise<CariCagDcshBlTrnp | null> {
    try {
      return await this.service.updateCariCagDcshBlTrnp({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CariCagDcshBlTrnp)
  async deleteCariCagDcshBlTrnp(
    @graphql.Args() args: DeleteCariCagDcshBlTrnpArgs
  ): Promise<CariCagDcshBlTrnp | null> {
    try {
      return await this.service.deleteCariCagDcshBlTrnp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
