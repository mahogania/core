/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CariCagDcshBlTrlr } from "./CariCagDcshBlTrlr";
import { CariCagDcshBlTrlrCountArgs } from "./CariCagDcshBlTrlrCountArgs";
import { CariCagDcshBlTrlrFindManyArgs } from "./CariCagDcshBlTrlrFindManyArgs";
import { CariCagDcshBlTrlrFindUniqueArgs } from "./CariCagDcshBlTrlrFindUniqueArgs";
import { CreateCariCagDcshBlTrlrArgs } from "./CreateCariCagDcshBlTrlrArgs";
import { UpdateCariCagDcshBlTrlrArgs } from "./UpdateCariCagDcshBlTrlrArgs";
import { DeleteCariCagDcshBlTrlrArgs } from "./DeleteCariCagDcshBlTrlrArgs";
import { CariCagDcshBlTrlrService } from "../cariCagDcshBlTrlr.service";
@graphql.Resolver(() => CariCagDcshBlTrlr)
export class CariCagDcshBlTrlrResolverBase {
  constructor(protected readonly service: CariCagDcshBlTrlrService) {}

  async _cariCagDcshBlTrlrsMeta(
    @graphql.Args() args: CariCagDcshBlTrlrCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CariCagDcshBlTrlr])
  async cariCagDcshBlTrlrs(
    @graphql.Args() args: CariCagDcshBlTrlrFindManyArgs
  ): Promise<CariCagDcshBlTrlr[]> {
    return this.service.cariCagDcshBlTrlrs(args);
  }

  @graphql.Query(() => CariCagDcshBlTrlr, { nullable: true })
  async cariCagDcshBlTrlr(
    @graphql.Args() args: CariCagDcshBlTrlrFindUniqueArgs
  ): Promise<CariCagDcshBlTrlr | null> {
    const result = await this.service.cariCagDcshBlTrlr(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CariCagDcshBlTrlr)
  async createCariCagDcshBlTrlr(
    @graphql.Args() args: CreateCariCagDcshBlTrlrArgs
  ): Promise<CariCagDcshBlTrlr> {
    return await this.service.createCariCagDcshBlTrlr({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CariCagDcshBlTrlr)
  async updateCariCagDcshBlTrlr(
    @graphql.Args() args: UpdateCariCagDcshBlTrlrArgs
  ): Promise<CariCagDcshBlTrlr | null> {
    try {
      return await this.service.updateCariCagDcshBlTrlr({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CariCagDcshBlTrlr)
  async deleteCariCagDcshBlTrlr(
    @graphql.Args() args: DeleteCariCagDcshBlTrlrArgs
  ): Promise<CariCagDcshBlTrlr | null> {
    try {
      return await this.service.deleteCariCagDcshBlTrlr(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
