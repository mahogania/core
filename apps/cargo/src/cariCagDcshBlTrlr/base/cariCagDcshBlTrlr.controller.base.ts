/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CariCagDcshBlTrlrService } from "../cariCagDcshBlTrlr.service";
import { CariCagDcshBlTrlrCreateInput } from "./CariCagDcshBlTrlrCreateInput";
import { CariCagDcshBlTrlr } from "./CariCagDcshBlTrlr";
import { CariCagDcshBlTrlrFindManyArgs } from "./CariCagDcshBlTrlrFindManyArgs";
import { CariCagDcshBlTrlrWhereUniqueInput } from "./CariCagDcshBlTrlrWhereUniqueInput";
import { CariCagDcshBlTrlrUpdateInput } from "./CariCagDcshBlTrlrUpdateInput";

export class CariCagDcshBlTrlrControllerBase {
  constructor(protected readonly service: CariCagDcshBlTrlrService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CariCagDcshBlTrlr })
  @swagger.ApiBody({
    type: CariCagDcshBlTrlrCreateInput,
  })
  async createCariCagDcshBlTrlr(
    @common.Body() data: CariCagDcshBlTrlrCreateInput
  ): Promise<CariCagDcshBlTrlr> {
    return await this.service.createCariCagDcshBlTrlr({
      data: data,
      select: {
        cagMgmtNo: true,
        chssNo: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trlrSrno: true,
        trlrStsz: true,
        updatedAt: true,
        vhclRgsrNo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CariCagDcshBlTrlr] })
  @ApiNestedQuery(CariCagDcshBlTrlrFindManyArgs)
  async cariCagDcshBlTrlrs(
    @common.Req() request: Request
  ): Promise<CariCagDcshBlTrlr[]> {
    const args = plainToClass(CariCagDcshBlTrlrFindManyArgs, request.query);
    return this.service.cariCagDcshBlTrlrs({
      ...args,
      select: {
        cagMgmtNo: true,
        chssNo: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trlrSrno: true,
        trlrStsz: true,
        updatedAt: true,
        vhclRgsrNo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CariCagDcshBlTrlr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cariCagDcshBlTrlr(
    @common.Param() params: CariCagDcshBlTrlrWhereUniqueInput
  ): Promise<CariCagDcshBlTrlr | null> {
    const result = await this.service.cariCagDcshBlTrlr({
      where: params,
      select: {
        cagMgmtNo: true,
        chssNo: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trlrSrno: true,
        trlrStsz: true,
        updatedAt: true,
        vhclRgsrNo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CariCagDcshBlTrlr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CariCagDcshBlTrlrUpdateInput,
  })
  async updateCariCagDcshBlTrlr(
    @common.Param() params: CariCagDcshBlTrlrWhereUniqueInput,
    @common.Body() data: CariCagDcshBlTrlrUpdateInput
  ): Promise<CariCagDcshBlTrlr | null> {
    try {
      return await this.service.updateCariCagDcshBlTrlr({
        where: params,
        data: data,
        select: {
          cagMgmtNo: true,
          chssNo: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          trlrSrno: true,
          trlrStsz: true,
          updatedAt: true,
          vhclRgsrNo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CariCagDcshBlTrlr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCariCagDcshBlTrlr(
    @common.Param() params: CariCagDcshBlTrlrWhereUniqueInput
  ): Promise<CariCagDcshBlTrlr | null> {
    try {
      return await this.service.deleteCariCagDcshBlTrlr({
        where: params,
        select: {
          cagMgmtNo: true,
          chssNo: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          trlrSrno: true,
          trlrStsz: true,
          updatedAt: true,
          vhclRgsrNo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
