/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CariCagDcshBlCntr } from "./CariCagDcshBlCntr";
import { CariCagDcshBlCntrCountArgs } from "./CariCagDcshBlCntrCountArgs";
import { CariCagDcshBlCntrFindManyArgs } from "./CariCagDcshBlCntrFindManyArgs";
import { CariCagDcshBlCntrFindUniqueArgs } from "./CariCagDcshBlCntrFindUniqueArgs";
import { CreateCariCagDcshBlCntrArgs } from "./CreateCariCagDcshBlCntrArgs";
import { UpdateCariCagDcshBlCntrArgs } from "./UpdateCariCagDcshBlCntrArgs";
import { DeleteCariCagDcshBlCntrArgs } from "./DeleteCariCagDcshBlCntrArgs";
import { CariCagDcshBlCntrService } from "../cariCagDcshBlCntr.service";
@graphql.Resolver(() => CariCagDcshBlCntr)
export class CariCagDcshBlCntrResolverBase {
  constructor(protected readonly service: CariCagDcshBlCntrService) {}

  async _cariCagDcshBlCntrsMeta(
    @graphql.Args() args: CariCagDcshBlCntrCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CariCagDcshBlCntr])
  async cariCagDcshBlCntrs(
    @graphql.Args() args: CariCagDcshBlCntrFindManyArgs
  ): Promise<CariCagDcshBlCntr[]> {
    return this.service.cariCagDcshBlCntrs(args);
  }

  @graphql.Query(() => CariCagDcshBlCntr, { nullable: true })
  async cariCagDcshBlCntr(
    @graphql.Args() args: CariCagDcshBlCntrFindUniqueArgs
  ): Promise<CariCagDcshBlCntr | null> {
    const result = await this.service.cariCagDcshBlCntr(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CariCagDcshBlCntr)
  async createCariCagDcshBlCntr(
    @graphql.Args() args: CreateCariCagDcshBlCntrArgs
  ): Promise<CariCagDcshBlCntr> {
    return await this.service.createCariCagDcshBlCntr({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CariCagDcshBlCntr)
  async updateCariCagDcshBlCntr(
    @graphql.Args() args: UpdateCariCagDcshBlCntrArgs
  ): Promise<CariCagDcshBlCntr | null> {
    try {
      return await this.service.updateCariCagDcshBlCntr({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CariCagDcshBlCntr)
  async deleteCariCagDcshBlCntr(
    @graphql.Args() args: DeleteCariCagDcshBlCntrArgs
  ): Promise<CariCagDcshBlCntr | null> {
    try {
      return await this.service.deleteCariCagDcshBlCntr(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
