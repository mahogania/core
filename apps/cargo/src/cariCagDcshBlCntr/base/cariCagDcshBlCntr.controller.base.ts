/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CariCagDcshBlCntrService } from "../cariCagDcshBlCntr.service";
import { CariCagDcshBlCntrCreateInput } from "./CariCagDcshBlCntrCreateInput";
import { CariCagDcshBlCntr } from "./CariCagDcshBlCntr";
import { CariCagDcshBlCntrFindManyArgs } from "./CariCagDcshBlCntrFindManyArgs";
import { CariCagDcshBlCntrWhereUniqueInput } from "./CariCagDcshBlCntrWhereUniqueInput";
import { CariCagDcshBlCntrUpdateInput } from "./CariCagDcshBlCntrUpdateInput";

export class CariCagDcshBlCntrControllerBase {
  constructor(protected readonly service: CariCagDcshBlCntrService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CariCagDcshBlCntr })
  @swagger.ApiBody({
    type: CariCagDcshBlCntrCreateInput,
  })
  async createCariCagDcshBlCntr(
    @common.Body() data: CariCagDcshBlCntrCreateInput
  ): Promise<CariCagDcshBlCntr> {
    return await this.service.createCariCagDcshBlCntr({
      data: data,
      select: {
        cagMgmtNo: true,
        cntrNo: true,
        cntrSrno: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        ecntrWght: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        pckgGcnt: true,
        pckgUtCd: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        ttwg: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CariCagDcshBlCntr] })
  @ApiNestedQuery(CariCagDcshBlCntrFindManyArgs)
  async cariCagDcshBlCntrs(
    @common.Req() request: Request
  ): Promise<CariCagDcshBlCntr[]> {
    const args = plainToClass(CariCagDcshBlCntrFindManyArgs, request.query);
    return this.service.cariCagDcshBlCntrs({
      ...args,
      select: {
        cagMgmtNo: true,
        cntrNo: true,
        cntrSrno: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        ecntrWght: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        pckgGcnt: true,
        pckgUtCd: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        ttwg: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CariCagDcshBlCntr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cariCagDcshBlCntr(
    @common.Param() params: CariCagDcshBlCntrWhereUniqueInput
  ): Promise<CariCagDcshBlCntr | null> {
    const result = await this.service.cariCagDcshBlCntr({
      where: params,
      select: {
        cagMgmtNo: true,
        cntrNo: true,
        cntrSrno: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        ecntrWght: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        pckgGcnt: true,
        pckgUtCd: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        ttwg: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CariCagDcshBlCntr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CariCagDcshBlCntrUpdateInput,
  })
  async updateCariCagDcshBlCntr(
    @common.Param() params: CariCagDcshBlCntrWhereUniqueInput,
    @common.Body() data: CariCagDcshBlCntrUpdateInput
  ): Promise<CariCagDcshBlCntr | null> {
    try {
      return await this.service.updateCariCagDcshBlCntr({
        where: params,
        data: data,
        select: {
          cagMgmtNo: true,
          cntrNo: true,
          cntrSrno: true,
          cntrTpCd: true,
          createdAt: true,
          delYn: true,
          ecntrWght: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          pckgGcnt: true,
          pckgUtCd: true,
          sealChpn1: true,
          sealChpn2: true,
          sealChpn3: true,
          sealNo1: true,
          sealNo2: true,
          sealNo3: true,
          ttwg: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CariCagDcshBlCntr })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCariCagDcshBlCntr(
    @common.Param() params: CariCagDcshBlCntrWhereUniqueInput
  ): Promise<CariCagDcshBlCntr | null> {
    try {
      return await this.service.deleteCariCagDcshBlCntr({
        where: params,
        select: {
          cagMgmtNo: true,
          cntrNo: true,
          cntrSrno: true,
          cntrTpCd: true,
          createdAt: true,
          delYn: true,
          ecntrWght: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          pckgGcnt: true,
          pckgUtCd: true,
          sealChpn1: true,
          sealChpn2: true,
          sealChpn3: true,
          sealNo1: true,
          sealNo2: true,
          sealNo3: true,
          ttwg: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
