/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CargoDeclarationContainerService } from "../cargoDeclarationContainer.service";
import { CargoDeclarationContainerCreateInput } from "./CargoDeclarationContainerCreateInput";
import { CargoDeclarationContainer } from "./CargoDeclarationContainer";
import { CargoDeclarationContainerFindManyArgs } from "./CargoDeclarationContainerFindManyArgs";
import { CargoDeclarationContainerWhereUniqueInput } from "./CargoDeclarationContainerWhereUniqueInput";
import { CargoDeclarationContainerUpdateInput } from "./CargoDeclarationContainerUpdateInput";

export class CargoDeclarationContainerControllerBase {
  constructor(protected readonly service: CargoDeclarationContainerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CargoDeclarationContainer })
  @swagger.ApiBody({
    type: CargoDeclarationContainerCreateInput,
  })
  async createCargoDeclarationContainer(
    @common.Body() data: CargoDeclarationContainerCreateInput
  ): Promise<CargoDeclarationContainer> {
    return await this.service.createCargoDeclarationContainer({
      data: data,
      select: {
        cagMgmtNo: true,
        cntrNo: true,
        cntrSrno: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        ecntrWght: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        pckgGcnt: true,
        pckgUtCd: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        ttwg: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CargoDeclarationContainer] })
  @ApiNestedQuery(CargoDeclarationContainerFindManyArgs)
  async cargoDeclarationContainers(
    @common.Req() request: Request
  ): Promise<CargoDeclarationContainer[]> {
    const args = plainToClass(
      CargoDeclarationContainerFindManyArgs,
      request.query
    );
    return this.service.cargoDeclarationContainers({
      ...args,
      select: {
        cagMgmtNo: true,
        cntrNo: true,
        cntrSrno: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        ecntrWght: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        pckgGcnt: true,
        pckgUtCd: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        ttwg: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationContainer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cargoDeclarationContainer(
    @common.Param() params: CargoDeclarationContainerWhereUniqueInput
  ): Promise<CargoDeclarationContainer | null> {
    const result = await this.service.cargoDeclarationContainer({
      where: params,
      select: {
        cagMgmtNo: true,
        cntrNo: true,
        cntrSrno: true,
        cntrTpCd: true,
        createdAt: true,
        delYn: true,
        ecntrWght: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        pckgGcnt: true,
        pckgUtCd: true,
        sealChpn1: true,
        sealChpn2: true,
        sealChpn3: true,
        sealNo1: true,
        sealNo2: true,
        sealNo3: true,
        ttwg: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationContainer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CargoDeclarationContainerUpdateInput,
  })
  async updateCargoDeclarationContainer(
    @common.Param() params: CargoDeclarationContainerWhereUniqueInput,
    @common.Body() data: CargoDeclarationContainerUpdateInput
  ): Promise<CargoDeclarationContainer | null> {
    try {
      return await this.service.updateCargoDeclarationContainer({
        where: params,
        data: data,
        select: {
          cagMgmtNo: true,
          cntrNo: true,
          cntrSrno: true,
          cntrTpCd: true,
          createdAt: true,
          delYn: true,
          ecntrWght: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          pckgGcnt: true,
          pckgUtCd: true,
          sealChpn1: true,
          sealChpn2: true,
          sealChpn3: true,
          sealNo1: true,
          sealNo2: true,
          sealNo3: true,
          ttwg: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationContainer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCargoDeclarationContainer(
    @common.Param() params: CargoDeclarationContainerWhereUniqueInput
  ): Promise<CargoDeclarationContainer | null> {
    try {
      return await this.service.deleteCargoDeclarationContainer({
        where: params,
        select: {
          cagMgmtNo: true,
          cntrNo: true,
          cntrSrno: true,
          cntrTpCd: true,
          createdAt: true,
          delYn: true,
          ecntrWght: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          pckgGcnt: true,
          pckgUtCd: true,
          sealChpn1: true,
          sealChpn2: true,
          sealChpn3: true,
          sealNo1: true,
          sealNo2: true,
          sealNo3: true,
          ttwg: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
