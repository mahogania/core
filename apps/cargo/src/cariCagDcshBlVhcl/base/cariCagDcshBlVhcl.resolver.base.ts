/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CariCagDcshBlVhcl } from "./CariCagDcshBlVhcl";
import { CariCagDcshBlVhclCountArgs } from "./CariCagDcshBlVhclCountArgs";
import { CariCagDcshBlVhclFindManyArgs } from "./CariCagDcshBlVhclFindManyArgs";
import { CariCagDcshBlVhclFindUniqueArgs } from "./CariCagDcshBlVhclFindUniqueArgs";
import { CreateCariCagDcshBlVhclArgs } from "./CreateCariCagDcshBlVhclArgs";
import { UpdateCariCagDcshBlVhclArgs } from "./UpdateCariCagDcshBlVhclArgs";
import { DeleteCariCagDcshBlVhclArgs } from "./DeleteCariCagDcshBlVhclArgs";
import { CariCagDcshBlVhclService } from "../cariCagDcshBlVhcl.service";
@graphql.Resolver(() => CariCagDcshBlVhcl)
export class CariCagDcshBlVhclResolverBase {
  constructor(protected readonly service: CariCagDcshBlVhclService) {}

  async _cariCagDcshBlVhclsMeta(
    @graphql.Args() args: CariCagDcshBlVhclCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CariCagDcshBlVhcl])
  async cariCagDcshBlVhcls(
    @graphql.Args() args: CariCagDcshBlVhclFindManyArgs
  ): Promise<CariCagDcshBlVhcl[]> {
    return this.service.cariCagDcshBlVhcls(args);
  }

  @graphql.Query(() => CariCagDcshBlVhcl, { nullable: true })
  async cariCagDcshBlVhcl(
    @graphql.Args() args: CariCagDcshBlVhclFindUniqueArgs
  ): Promise<CariCagDcshBlVhcl | null> {
    const result = await this.service.cariCagDcshBlVhcl(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CariCagDcshBlVhcl)
  async createCariCagDcshBlVhcl(
    @graphql.Args() args: CreateCariCagDcshBlVhclArgs
  ): Promise<CariCagDcshBlVhcl> {
    return await this.service.createCariCagDcshBlVhcl({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CariCagDcshBlVhcl)
  async updateCariCagDcshBlVhcl(
    @graphql.Args() args: UpdateCariCagDcshBlVhclArgs
  ): Promise<CariCagDcshBlVhcl | null> {
    try {
      return await this.service.updateCariCagDcshBlVhcl({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CariCagDcshBlVhcl)
  async deleteCariCagDcshBlVhcl(
    @graphql.Args() args: DeleteCariCagDcshBlVhclArgs
  ): Promise<CariCagDcshBlVhcl | null> {
    try {
      return await this.service.deleteCariCagDcshBlVhcl(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
