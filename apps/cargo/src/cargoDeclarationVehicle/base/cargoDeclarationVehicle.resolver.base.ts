/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CargoDeclarationVehicle } from "./CargoDeclarationVehicle";
import { CargoDeclarationVehicleCountArgs } from "./CargoDeclarationVehicleCountArgs";
import { CargoDeclarationVehicleFindManyArgs } from "./CargoDeclarationVehicleFindManyArgs";
import { CargoDeclarationVehicleFindUniqueArgs } from "./CargoDeclarationVehicleFindUniqueArgs";
import { CreateCargoDeclarationVehicleArgs } from "./CreateCargoDeclarationVehicleArgs";
import { UpdateCargoDeclarationVehicleArgs } from "./UpdateCargoDeclarationVehicleArgs";
import { DeleteCargoDeclarationVehicleArgs } from "./DeleteCargoDeclarationVehicleArgs";
import { CargoDeclarationVehicleService } from "../cargoDeclarationVehicle.service";
@graphql.Resolver(() => CargoDeclarationVehicle)
export class CargoDeclarationVehicleResolverBase {
  constructor(protected readonly service: CargoDeclarationVehicleService) {}

  async _cargoDeclarationVehiclesMeta(
    @graphql.Args() args: CargoDeclarationVehicleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CargoDeclarationVehicle])
  async cargoDeclarationVehicles(
    @graphql.Args() args: CargoDeclarationVehicleFindManyArgs
  ): Promise<CargoDeclarationVehicle[]> {
    return this.service.cargoDeclarationVehicles(args);
  }

  @graphql.Query(() => CargoDeclarationVehicle, { nullable: true })
  async cargoDeclarationVehicle(
    @graphql.Args() args: CargoDeclarationVehicleFindUniqueArgs
  ): Promise<CargoDeclarationVehicle | null> {
    const result = await this.service.cargoDeclarationVehicle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CargoDeclarationVehicle)
  async createCargoDeclarationVehicle(
    @graphql.Args() args: CreateCargoDeclarationVehicleArgs
  ): Promise<CargoDeclarationVehicle> {
    return await this.service.createCargoDeclarationVehicle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CargoDeclarationVehicle)
  async updateCargoDeclarationVehicle(
    @graphql.Args() args: UpdateCargoDeclarationVehicleArgs
  ): Promise<CargoDeclarationVehicle | null> {
    try {
      return await this.service.updateCargoDeclarationVehicle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CargoDeclarationVehicle)
  async deleteCargoDeclarationVehicle(
    @graphql.Args() args: DeleteCargoDeclarationVehicleArgs
  ): Promise<CargoDeclarationVehicle | null> {
    try {
      return await this.service.deleteCargoDeclarationVehicle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
