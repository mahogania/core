/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CargoDeclaration } from "./CargoDeclaration";
import { CargoDeclarationCountArgs } from "./CargoDeclarationCountArgs";
import { CargoDeclarationFindManyArgs } from "./CargoDeclarationFindManyArgs";
import { CargoDeclarationFindUniqueArgs } from "./CargoDeclarationFindUniqueArgs";
import { CreateCargoDeclarationArgs } from "./CreateCargoDeclarationArgs";
import { UpdateCargoDeclarationArgs } from "./UpdateCargoDeclarationArgs";
import { DeleteCargoDeclarationArgs } from "./DeleteCargoDeclarationArgs";
import { CargoDeclarationService } from "../cargoDeclaration.service";
@graphql.Resolver(() => CargoDeclaration)
export class CargoDeclarationResolverBase {
  constructor(protected readonly service: CargoDeclarationService) {}

  async _cargoDeclarationsMeta(
    @graphql.Args() args: CargoDeclarationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CargoDeclaration])
  async cargoDeclarations(
    @graphql.Args() args: CargoDeclarationFindManyArgs
  ): Promise<CargoDeclaration[]> {
    return this.service.cargoDeclarations(args);
  }

  @graphql.Query(() => CargoDeclaration, { nullable: true })
  async cargoDeclaration(
    @graphql.Args() args: CargoDeclarationFindUniqueArgs
  ): Promise<CargoDeclaration | null> {
    const result = await this.service.cargoDeclaration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CargoDeclaration)
  async createCargoDeclaration(
    @graphql.Args() args: CreateCargoDeclarationArgs
  ): Promise<CargoDeclaration> {
    return await this.service.createCargoDeclaration({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CargoDeclaration)
  async updateCargoDeclaration(
    @graphql.Args() args: UpdateCargoDeclarationArgs
  ): Promise<CargoDeclaration | null> {
    try {
      return await this.service.updateCargoDeclaration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CargoDeclaration)
  async deleteCargoDeclaration(
    @graphql.Args() args: DeleteCargoDeclarationArgs
  ): Promise<CargoDeclaration | null> {
    try {
      return await this.service.deleteCargoDeclaration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
