/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CargoDeclaration as PrismaCargoDeclaration,
} from "@prisma/client";

export class CargoDeclarationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CargoDeclarationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cargoDeclaration.count(args);
  }

  async cargoDeclarations(
    args: Prisma.CargoDeclarationFindManyArgs
  ): Promise<PrismaCargoDeclaration[]> {
    return this.prisma.cargoDeclaration.findMany(args);
  }
  async cargoDeclaration(
    args: Prisma.CargoDeclarationFindUniqueArgs
  ): Promise<PrismaCargoDeclaration | null> {
    return this.prisma.cargoDeclaration.findUnique(args);
  }
  async createCargoDeclaration(
    args: Prisma.CargoDeclarationCreateArgs
  ): Promise<PrismaCargoDeclaration> {
    return this.prisma.cargoDeclaration.create(args);
  }
  async updateCargoDeclaration(
    args: Prisma.CargoDeclarationUpdateArgs
  ): Promise<PrismaCargoDeclaration> {
    return this.prisma.cargoDeclaration.update(args);
  }
  async deleteCargoDeclaration(
    args: Prisma.CargoDeclarationDeleteArgs
  ): Promise<PrismaCargoDeclaration> {
    return this.prisma.cargoDeclaration.delete(args);
  }
}
