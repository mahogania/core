/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CargoDeclarationTransportService } from "../cargoDeclarationTransport.service";
import { CargoDeclarationTransportCreateInput } from "./CargoDeclarationTransportCreateInput";
import { CargoDeclarationTransport } from "./CargoDeclarationTransport";
import { CargoDeclarationTransportFindManyArgs } from "./CargoDeclarationTransportFindManyArgs";
import { CargoDeclarationTransportWhereUniqueInput } from "./CargoDeclarationTransportWhereUniqueInput";
import { CargoDeclarationTransportUpdateInput } from "./CargoDeclarationTransportUpdateInput";

export class CargoDeclarationTransportControllerBase {
  constructor(protected readonly service: CargoDeclarationTransportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CargoDeclarationTransport })
  @swagger.ApiBody({
    type: CargoDeclarationTransportCreateInput,
  })
  async createCargoDeclarationTransport(
    @common.Body() data: CargoDeclarationTransportCreateInput
  ): Promise<CargoDeclarationTransport> {
    return await this.service.createCargoDeclarationTransport({
      data: data,
      select: {
        chssNo: true,
        createdAt: true,
        delYn: true,
        drvrNm: true,
        drvrPsprNo: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trnpMethNatCd: true,
        updatedAt: true,
        vhclMnurCd: true,
        vhclNttn: true,
        vhclPtCd: true,
        vhclRgsrNo: true,
        vhclSrno: true,
        vhclTtn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CargoDeclarationTransport] })
  @ApiNestedQuery(CargoDeclarationTransportFindManyArgs)
  async cargoDeclarationTransports(
    @common.Req() request: Request
  ): Promise<CargoDeclarationTransport[]> {
    const args = plainToClass(
      CargoDeclarationTransportFindManyArgs,
      request.query
    );
    return this.service.cargoDeclarationTransports({
      ...args,
      select: {
        chssNo: true,
        createdAt: true,
        delYn: true,
        drvrNm: true,
        drvrPsprNo: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trnpMethNatCd: true,
        updatedAt: true,
        vhclMnurCd: true,
        vhclNttn: true,
        vhclPtCd: true,
        vhclRgsrNo: true,
        vhclSrno: true,
        vhclTtn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationTransport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cargoDeclarationTransport(
    @common.Param() params: CargoDeclarationTransportWhereUniqueInput
  ): Promise<CargoDeclarationTransport | null> {
    const result = await this.service.cargoDeclarationTransport({
      where: params,
      select: {
        chssNo: true,
        createdAt: true,
        delYn: true,
        drvrNm: true,
        drvrPsprNo: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trnpMethNatCd: true,
        updatedAt: true,
        vhclMnurCd: true,
        vhclNttn: true,
        vhclPtCd: true,
        vhclRgsrNo: true,
        vhclSrno: true,
        vhclTtn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationTransport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CargoDeclarationTransportUpdateInput,
  })
  async updateCargoDeclarationTransport(
    @common.Param() params: CargoDeclarationTransportWhereUniqueInput,
    @common.Body() data: CargoDeclarationTransportUpdateInput
  ): Promise<CargoDeclarationTransport | null> {
    try {
      return await this.service.updateCargoDeclarationTransport({
        where: params,
        data: data,
        select: {
          chssNo: true,
          createdAt: true,
          delYn: true,
          drvrNm: true,
          drvrPsprNo: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          trnpMethNatCd: true,
          updatedAt: true,
          vhclMnurCd: true,
          vhclNttn: true,
          vhclPtCd: true,
          vhclRgsrNo: true,
          vhclSrno: true,
          vhclTtn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationTransport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCargoDeclarationTransport(
    @common.Param() params: CargoDeclarationTransportWhereUniqueInput
  ): Promise<CargoDeclarationTransport | null> {
    try {
      return await this.service.deleteCargoDeclarationTransport({
        where: params,
        select: {
          chssNo: true,
          createdAt: true,
          delYn: true,
          drvrNm: true,
          drvrPsprNo: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          trnpMethNatCd: true,
          updatedAt: true,
          vhclMnurCd: true,
          vhclNttn: true,
          vhclPtCd: true,
          vhclRgsrNo: true,
          vhclSrno: true,
          vhclTtn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
