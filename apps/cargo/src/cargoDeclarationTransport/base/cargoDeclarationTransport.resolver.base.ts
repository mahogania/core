/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CargoDeclarationTransport } from "./CargoDeclarationTransport";
import { CargoDeclarationTransportCountArgs } from "./CargoDeclarationTransportCountArgs";
import { CargoDeclarationTransportFindManyArgs } from "./CargoDeclarationTransportFindManyArgs";
import { CargoDeclarationTransportFindUniqueArgs } from "./CargoDeclarationTransportFindUniqueArgs";
import { CreateCargoDeclarationTransportArgs } from "./CreateCargoDeclarationTransportArgs";
import { UpdateCargoDeclarationTransportArgs } from "./UpdateCargoDeclarationTransportArgs";
import { DeleteCargoDeclarationTransportArgs } from "./DeleteCargoDeclarationTransportArgs";
import { CargoDeclarationTransportService } from "../cargoDeclarationTransport.service";
@graphql.Resolver(() => CargoDeclarationTransport)
export class CargoDeclarationTransportResolverBase {
  constructor(protected readonly service: CargoDeclarationTransportService) {}

  async _cargoDeclarationTransportsMeta(
    @graphql.Args() args: CargoDeclarationTransportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CargoDeclarationTransport])
  async cargoDeclarationTransports(
    @graphql.Args() args: CargoDeclarationTransportFindManyArgs
  ): Promise<CargoDeclarationTransport[]> {
    return this.service.cargoDeclarationTransports(args);
  }

  @graphql.Query(() => CargoDeclarationTransport, { nullable: true })
  async cargoDeclarationTransport(
    @graphql.Args() args: CargoDeclarationTransportFindUniqueArgs
  ): Promise<CargoDeclarationTransport | null> {
    const result = await this.service.cargoDeclarationTransport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CargoDeclarationTransport)
  async createCargoDeclarationTransport(
    @graphql.Args() args: CreateCargoDeclarationTransportArgs
  ): Promise<CargoDeclarationTransport> {
    return await this.service.createCargoDeclarationTransport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CargoDeclarationTransport)
  async updateCargoDeclarationTransport(
    @graphql.Args() args: UpdateCargoDeclarationTransportArgs
  ): Promise<CargoDeclarationTransport | null> {
    try {
      return await this.service.updateCargoDeclarationTransport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CargoDeclarationTransport)
  async deleteCargoDeclarationTransport(
    @graphql.Args() args: DeleteCargoDeclarationTransportArgs
  ): Promise<CargoDeclarationTransport | null> {
    try {
      return await this.service.deleteCargoDeclarationTransport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
