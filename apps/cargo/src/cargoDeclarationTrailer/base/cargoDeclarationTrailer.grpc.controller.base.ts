/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CargoDeclarationTrailerService } from "../cargoDeclarationTrailer.service";
import { CargoDeclarationTrailerCreateInput } from "./CargoDeclarationTrailerCreateInput";
import { CargoDeclarationTrailerWhereInput } from "./CargoDeclarationTrailerWhereInput";
import { CargoDeclarationTrailerWhereUniqueInput } from "./CargoDeclarationTrailerWhereUniqueInput";
import { CargoDeclarationTrailerFindManyArgs } from "./CargoDeclarationTrailerFindManyArgs";
import { CargoDeclarationTrailerUpdateInput } from "./CargoDeclarationTrailerUpdateInput";
import { CargoDeclarationTrailer } from "./CargoDeclarationTrailer";

export class CargoDeclarationTrailerGrpcControllerBase {
  constructor(protected readonly service: CargoDeclarationTrailerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CargoDeclarationTrailer })
  @GrpcMethod("CargoDeclarationTrailerService", "createCargoDeclarationTrailer")
  async createCargoDeclarationTrailer(
    @common.Body() data: CargoDeclarationTrailerCreateInput
  ): Promise<CargoDeclarationTrailer> {
    return await this.service.createCargoDeclarationTrailer({
      data: data,
      select: {
        cagMgmtNo: true,
        chssNo: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trlrSrno: true,
        trlrStsz: true,
        updatedAt: true,
        vhclRgsrNo: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CargoDeclarationTrailer] })
  @ApiNestedQuery(CargoDeclarationTrailerFindManyArgs)
  @GrpcMethod("CargoDeclarationTrailerService", "cargoDeclarationTrailers")
  async cargoDeclarationTrailers(
    @common.Req() request: Request
  ): Promise<CargoDeclarationTrailer[]> {
    const args = plainToClass(
      CargoDeclarationTrailerFindManyArgs,
      request.query
    );
    return this.service.cargoDeclarationTrailers({
      ...args,
      select: {
        cagMgmtNo: true,
        chssNo: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trlrSrno: true,
        trlrStsz: true,
        updatedAt: true,
        vhclRgsrNo: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationTrailer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CargoDeclarationTrailerService", "cargoDeclarationTrailer")
  async cargoDeclarationTrailer(
    @common.Param() params: CargoDeclarationTrailerWhereUniqueInput
  ): Promise<CargoDeclarationTrailer | null> {
    const result = await this.service.cargoDeclarationTrailer({
      where: params,
      select: {
        cagMgmtNo: true,
        chssNo: true,
        createdAt: true,
        delYn: true,
        frstRegstId: true,
        frstRgsrDttm: true,
        id: true,
        lastChgDttm: true,
        lastChprId: true,
        mrn: true,
        trlrSrno: true,
        trlrStsz: true,
        updatedAt: true,
        vhclRgsrNo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationTrailer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CargoDeclarationTrailerService", "updateCargoDeclarationTrailer")
  async updateCargoDeclarationTrailer(
    @common.Param() params: CargoDeclarationTrailerWhereUniqueInput,
    @common.Body() data: CargoDeclarationTrailerUpdateInput
  ): Promise<CargoDeclarationTrailer | null> {
    try {
      return await this.service.updateCargoDeclarationTrailer({
        where: params,
        data: data,
        select: {
          cagMgmtNo: true,
          chssNo: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          trlrSrno: true,
          trlrStsz: true,
          updatedAt: true,
          vhclRgsrNo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CargoDeclarationTrailer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CargoDeclarationTrailerService", "deleteCargoDeclarationTrailer")
  async deleteCargoDeclarationTrailer(
    @common.Param() params: CargoDeclarationTrailerWhereUniqueInput
  ): Promise<CargoDeclarationTrailer | null> {
    try {
      return await this.service.deleteCargoDeclarationTrailer({
        where: params,
        select: {
          cagMgmtNo: true,
          chssNo: true,
          createdAt: true,
          delYn: true,
          frstRegstId: true,
          frstRgsrDttm: true,
          id: true,
          lastChgDttm: true,
          lastChprId: true,
          mrn: true,
          trlrSrno: true,
          trlrStsz: true,
          updatedAt: true,
          vhclRgsrNo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
