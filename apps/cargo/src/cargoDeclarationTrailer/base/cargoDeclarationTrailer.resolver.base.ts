/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CargoDeclarationTrailer } from "./CargoDeclarationTrailer";
import { CargoDeclarationTrailerCountArgs } from "./CargoDeclarationTrailerCountArgs";
import { CargoDeclarationTrailerFindManyArgs } from "./CargoDeclarationTrailerFindManyArgs";
import { CargoDeclarationTrailerFindUniqueArgs } from "./CargoDeclarationTrailerFindUniqueArgs";
import { CreateCargoDeclarationTrailerArgs } from "./CreateCargoDeclarationTrailerArgs";
import { UpdateCargoDeclarationTrailerArgs } from "./UpdateCargoDeclarationTrailerArgs";
import { DeleteCargoDeclarationTrailerArgs } from "./DeleteCargoDeclarationTrailerArgs";
import { CargoDeclarationTrailerService } from "../cargoDeclarationTrailer.service";
@graphql.Resolver(() => CargoDeclarationTrailer)
export class CargoDeclarationTrailerResolverBase {
  constructor(protected readonly service: CargoDeclarationTrailerService) {}

  async _cargoDeclarationTrailersMeta(
    @graphql.Args() args: CargoDeclarationTrailerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CargoDeclarationTrailer])
  async cargoDeclarationTrailers(
    @graphql.Args() args: CargoDeclarationTrailerFindManyArgs
  ): Promise<CargoDeclarationTrailer[]> {
    return this.service.cargoDeclarationTrailers(args);
  }

  @graphql.Query(() => CargoDeclarationTrailer, { nullable: true })
  async cargoDeclarationTrailer(
    @graphql.Args() args: CargoDeclarationTrailerFindUniqueArgs
  ): Promise<CargoDeclarationTrailer | null> {
    const result = await this.service.cargoDeclarationTrailer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CargoDeclarationTrailer)
  async createCargoDeclarationTrailer(
    @graphql.Args() args: CreateCargoDeclarationTrailerArgs
  ): Promise<CargoDeclarationTrailer> {
    return await this.service.createCargoDeclarationTrailer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CargoDeclarationTrailer)
  async updateCargoDeclarationTrailer(
    @graphql.Args() args: UpdateCargoDeclarationTrailerArgs
  ): Promise<CargoDeclarationTrailer | null> {
    try {
      return await this.service.updateCargoDeclarationTrailer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CargoDeclarationTrailer)
  async deleteCargoDeclarationTrailer(
    @graphql.Args() args: DeleteCargoDeclarationTrailerArgs
  ): Promise<CargoDeclarationTrailer | null> {
    try {
      return await this.service.deleteCargoDeclarationTrailer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
