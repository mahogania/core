/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Weakness } from "./Weakness";
import { WeaknessCountArgs } from "./WeaknessCountArgs";
import { WeaknessFindManyArgs } from "./WeaknessFindManyArgs";
import { WeaknessFindUniqueArgs } from "./WeaknessFindUniqueArgs";
import { CreateWeaknessArgs } from "./CreateWeaknessArgs";
import { UpdateWeaknessArgs } from "./UpdateWeaknessArgs";
import { DeleteWeaknessArgs } from "./DeleteWeaknessArgs";
import { FeatureFindManyArgs } from "../../feature/base/FeatureFindManyArgs";
import { Feature } from "../../feature/base/Feature";
import { Business } from "../../business/base/Business";
import { WeaknessService } from "../weakness.service";
@graphql.Resolver(() => Weakness)
export class WeaknessResolverBase {
  constructor(protected readonly service: WeaknessService) {}

  async _weaknessesMeta(
    @graphql.Args() args: WeaknessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Weakness])
  async weaknesses(
    @graphql.Args() args: WeaknessFindManyArgs
  ): Promise<Weakness[]> {
    return this.service.weaknesses(args);
  }

  @graphql.Query(() => Weakness, { nullable: true })
  async weakness(
    @graphql.Args() args: WeaknessFindUniqueArgs
  ): Promise<Weakness | null> {
    const result = await this.service.weakness(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Weakness)
  async createWeakness(
    @graphql.Args() args: CreateWeaknessArgs
  ): Promise<Weakness> {
    return await this.service.createWeakness({
      ...args,
      data: {
        ...args.data,

        competitor: args.data.competitor
          ? {
              connect: args.data.competitor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Weakness)
  async updateWeakness(
    @graphql.Args() args: UpdateWeaknessArgs
  ): Promise<Weakness | null> {
    try {
      return await this.service.updateWeakness({
        ...args,
        data: {
          ...args.data,

          competitor: args.data.competitor
            ? {
                connect: args.data.competitor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Weakness)
  async deleteWeakness(
    @graphql.Args() args: DeleteWeaknessArgs
  ): Promise<Weakness | null> {
    try {
      return await this.service.deleteWeakness(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Feature], { name: "features" })
  async findFeatures(
    @graphql.Parent() parent: Weakness,
    @graphql.Args() args: FeatureFindManyArgs
  ): Promise<Feature[]> {
    const results = await this.service.findFeatures(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Business, {
    nullable: true,
    name: "competitor",
  })
  async getCompetitor(
    @graphql.Parent() parent: Weakness
  ): Promise<Business | null> {
    const result = await this.service.getCompetitor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
