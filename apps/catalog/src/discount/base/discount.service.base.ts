/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Discount as PrismaDiscount,
  Option as PrismaOption,
  Currency as PrismaCurrency,
} from "@prisma/client";

export class DiscountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DiscountCountArgs, "select">): Promise<number> {
    return this.prisma.discount.count(args);
  }

  async discounts(
    args: Prisma.DiscountFindManyArgs
  ): Promise<PrismaDiscount[]> {
    return this.prisma.discount.findMany(args);
  }
  async discount(
    args: Prisma.DiscountFindUniqueArgs
  ): Promise<PrismaDiscount | null> {
    return this.prisma.discount.findUnique(args);
  }
  async createDiscount(
    args: Prisma.DiscountCreateArgs
  ): Promise<PrismaDiscount> {
    return this.prisma.discount.create(args);
  }
  async updateDiscount(
    args: Prisma.DiscountUpdateArgs
  ): Promise<PrismaDiscount> {
    return this.prisma.discount.update(args);
  }
  async deleteDiscount(
    args: Prisma.DiscountDeleteArgs
  ): Promise<PrismaDiscount> {
    return this.prisma.discount.delete(args);
  }

  async findOptions(
    parentId: string,
    args: Prisma.OptionFindManyArgs
  ): Promise<PrismaOption[]> {
    return this.prisma.discount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .options(args);
  }

  async getCurrency(parentId: string): Promise<PrismaCurrency | null> {
    return this.prisma.discount
      .findUnique({
        where: { id: parentId },
      })
      .currency();
  }
}
