/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { IndustryService } from "../industry.service";
import { IndustryCreateInput } from "./IndustryCreateInput";
import { IndustryWhereInput } from "./IndustryWhereInput";
import { IndustryWhereUniqueInput } from "./IndustryWhereUniqueInput";
import { IndustryFindManyArgs } from "./IndustryFindManyArgs";
import { IndustryUpdateInput } from "./IndustryUpdateInput";
import { Industry } from "./Industry";
import { BusinessFindManyArgs } from "../../business/base/BusinessFindManyArgs";
import { Business } from "../../business/base/Business";
import { BusinessWhereUniqueInput } from "../../business/base/BusinessWhereUniqueInput";
import { RelationFindManyArgs } from "../../relation/base/RelationFindManyArgs";
import { Relation } from "../../relation/base/Relation";
import { RelationWhereUniqueInput } from "../../relation/base/RelationWhereUniqueInput";

export class IndustryGrpcControllerBase {
  constructor(protected readonly service: IndustryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Industry })
  @GrpcMethod("IndustryService", "createIndustry")
  async createIndustry(
    @common.Body() data: IndustryCreateInput
  ): Promise<Industry> {
    return await this.service.createIndustry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Industry] })
  @ApiNestedQuery(IndustryFindManyArgs)
  @GrpcMethod("IndustryService", "industries")
  async industries(@common.Req() request: Request): Promise<Industry[]> {
    const args = plainToClass(IndustryFindManyArgs, request.query);
    return this.service.industries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Industry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("IndustryService", "industry")
  async industry(
    @common.Param() params: IndustryWhereUniqueInput
  ): Promise<Industry | null> {
    const result = await this.service.industry({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Industry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("IndustryService", "updateIndustry")
  async updateIndustry(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() data: IndustryUpdateInput
  ): Promise<Industry | null> {
    try {
      return await this.service.updateIndustry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Industry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("IndustryService", "deleteIndustry")
  async deleteIndustry(
    @common.Param() params: IndustryWhereUniqueInput
  ): Promise<Industry | null> {
    try {
      return await this.service.deleteIndustry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/businesses")
  @ApiNestedQuery(BusinessFindManyArgs)
  @GrpcMethod("IndustryService", "findManyBusinesses")
  async findManyBusinesses(
    @common.Req() request: Request,
    @common.Param() params: IndustryWhereUniqueInput
  ): Promise<Business[]> {
    const query = plainToClass(BusinessFindManyArgs, request.query);
    const results = await this.service.findBusinesses(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        industry: {
          select: {
            id: true,
          },
        },

        name: true,

        succesorRelations: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/businesses")
  @GrpcMethod("IndustryService", "connectBusinesses")
  async connectBusinesses(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() body: BusinessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businesses: {
        connect: body,
      },
    };
    await this.service.updateIndustry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/businesses")
  @GrpcMethod("IndustryService", "updateBusinesses")
  async updateBusinesses(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() body: BusinessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businesses: {
        set: body,
      },
    };
    await this.service.updateIndustry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/businesses")
  @GrpcMethod("IndustryService", "disconnectBusinesses")
  async disconnectBusinesses(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() body: BusinessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businesses: {
        disconnect: body,
      },
    };
    await this.service.updateIndustry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/relations")
  @ApiNestedQuery(RelationFindManyArgs)
  @GrpcMethod("IndustryService", "findManyRelations")
  async findManyRelations(
    @common.Req() request: Request,
    @common.Param() params: IndustryWhereUniqueInput
  ): Promise<Relation[]> {
    const query = plainToClass(RelationFindManyArgs, request.query);
    const results = await this.service.findRelations(params.id, {
      ...query,
      select: {
        ascendantBusiness: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        descendantBusiness: {
          select: {
            id: true,
          },
        },

        id: true,

        industry: {
          select: {
            id: true,
          },
        },

        kind: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/relations")
  @GrpcMethod("IndustryService", "connectRelations")
  async connectRelations(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() body: RelationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      relations: {
        connect: body,
      },
    };
    await this.service.updateIndustry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/relations")
  @GrpcMethod("IndustryService", "updateRelations")
  async updateRelations(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() body: RelationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      relations: {
        set: body,
      },
    };
    await this.service.updateIndustry({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/relations")
  @GrpcMethod("IndustryService", "disconnectRelations")
  async disconnectRelations(
    @common.Param() params: IndustryWhereUniqueInput,
    @common.Body() body: RelationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      relations: {
        disconnect: body,
      },
    };
    await this.service.updateIndustry({
      where: params,
      data,
      select: { id: true },
    });
  }
}
