/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Quote as PrismaQuote,
  Item as PrismaItem,
  Proposal as PrismaProposal,
} from "@prisma/client";

export class QuoteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.QuoteCountArgs, "select">): Promise<number> {
    return this.prisma.quote.count(args);
  }

  async quotes(args: Prisma.QuoteFindManyArgs): Promise<PrismaQuote[]> {
    return this.prisma.quote.findMany(args);
  }
  async quote(args: Prisma.QuoteFindUniqueArgs): Promise<PrismaQuote | null> {
    return this.prisma.quote.findUnique(args);
  }
  async createQuote(args: Prisma.QuoteCreateArgs): Promise<PrismaQuote> {
    return this.prisma.quote.create(args);
  }
  async updateQuote(args: Prisma.QuoteUpdateArgs): Promise<PrismaQuote> {
    return this.prisma.quote.update(args);
  }
  async deleteQuote(args: Prisma.QuoteDeleteArgs): Promise<PrismaQuote> {
    return this.prisma.quote.delete(args);
  }

  async findLineItems(
    parentId: string,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.quote
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lineItems(args);
  }

  async getProposal(parentId: string): Promise<PrismaProposal | null> {
    return this.prisma.quote
      .findUnique({
        where: { id: parentId },
      })
      .proposal();
  }
}
