/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Constraint } from "./Constraint";
import { ConstraintCountArgs } from "./ConstraintCountArgs";
import { ConstraintFindManyArgs } from "./ConstraintFindManyArgs";
import { ConstraintFindUniqueArgs } from "./ConstraintFindUniqueArgs";
import { CreateConstraintArgs } from "./CreateConstraintArgs";
import { UpdateConstraintArgs } from "./UpdateConstraintArgs";
import { DeleteConstraintArgs } from "./DeleteConstraintArgs";
import { Option } from "../../option/base/Option";
import { ConstraintService } from "../constraint.service";
@graphql.Resolver(() => Constraint)
export class ConstraintResolverBase {
  constructor(protected readonly service: ConstraintService) {}

  async _constraintsMeta(
    @graphql.Args() args: ConstraintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Constraint])
  async constraints(
    @graphql.Args() args: ConstraintFindManyArgs
  ): Promise<Constraint[]> {
    return this.service.constraints(args);
  }

  @graphql.Query(() => Constraint, { nullable: true })
  async constraint(
    @graphql.Args() args: ConstraintFindUniqueArgs
  ): Promise<Constraint | null> {
    const result = await this.service.constraint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Constraint)
  async createConstraint(
    @graphql.Args() args: CreateConstraintArgs
  ): Promise<Constraint> {
    return await this.service.createConstraint({
      ...args,
      data: {
        ...args.data,

        drivenOption: args.data.drivenOption
          ? {
              connect: args.data.drivenOption,
            }
          : undefined,

        drivingOption: args.data.drivingOption
          ? {
              connect: args.data.drivingOption,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Constraint)
  async updateConstraint(
    @graphql.Args() args: UpdateConstraintArgs
  ): Promise<Constraint | null> {
    try {
      return await this.service.updateConstraint({
        ...args,
        data: {
          ...args.data,

          drivenOption: args.data.drivenOption
            ? {
                connect: args.data.drivenOption,
              }
            : undefined,

          drivingOption: args.data.drivingOption
            ? {
                connect: args.data.drivingOption,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Constraint)
  async deleteConstraint(
    @graphql.Args() args: DeleteConstraintArgs
  ): Promise<Constraint | null> {
    try {
      return await this.service.deleteConstraint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Option, {
    nullable: true,
    name: "drivenOption",
  })
  async getDrivenOption(
    @graphql.Parent() parent: Constraint
  ): Promise<Option | null> {
    const result = await this.service.getDrivenOption(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Option, {
    nullable: true,
    name: "drivingOption",
  })
  async getDrivingOption(
    @graphql.Parent() parent: Constraint
  ): Promise<Option | null> {
    const result = await this.service.getDrivingOption(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
