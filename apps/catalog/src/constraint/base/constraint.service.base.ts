/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Constraint as PrismaConstraint,
  Option as PrismaOption,
} from "@prisma/client";

export class ConstraintServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConstraintCountArgs, "select">
  ): Promise<number> {
    return this.prisma.constraint.count(args);
  }

  async constraints(
    args: Prisma.ConstraintFindManyArgs
  ): Promise<PrismaConstraint[]> {
    return this.prisma.constraint.findMany(args);
  }
  async constraint(
    args: Prisma.ConstraintFindUniqueArgs
  ): Promise<PrismaConstraint | null> {
    return this.prisma.constraint.findUnique(args);
  }
  async createConstraint(
    args: Prisma.ConstraintCreateArgs
  ): Promise<PrismaConstraint> {
    return this.prisma.constraint.create(args);
  }
  async updateConstraint(
    args: Prisma.ConstraintUpdateArgs
  ): Promise<PrismaConstraint> {
    return this.prisma.constraint.update(args);
  }
  async deleteConstraint(
    args: Prisma.ConstraintDeleteArgs
  ): Promise<PrismaConstraint> {
    return this.prisma.constraint.delete(args);
  }

  async getDrivenOption(parentId: string): Promise<PrismaOption | null> {
    return this.prisma.constraint
      .findUnique({
        where: { id: parentId },
      })
      .drivenOption();
  }

  async getDrivingOption(parentId: string): Promise<PrismaOption | null> {
    return this.prisma.constraint
      .findUnique({
        where: { id: parentId },
      })
      .drivingOption();
  }
}
