/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { LeadService } from "../lead.service";
import { LeadCreateInput } from "./LeadCreateInput";
import { LeadWhereInput } from "./LeadWhereInput";
import { LeadWhereUniqueInput } from "./LeadWhereUniqueInput";
import { LeadFindManyArgs } from "./LeadFindManyArgs";
import { LeadUpdateInput } from "./LeadUpdateInput";
import { Lead } from "./Lead";

export class LeadGrpcControllerBase {
  constructor(protected readonly service: LeadService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lead })
  @GrpcMethod("LeadService", "createLead")
  async createLead(@common.Body() data: LeadCreateInput): Promise<Lead> {
    return await this.service.createLead({
      data: data,
      select: {
        annualRevenue: true,
        blogSubscriber: true,
        campaignName: true,
        city: true,
        company: true,
        companyName: true,
        country: true,
        createdAt: true,
        creation: true,
        customer: true,
        disabled: true,
        docstatus: true,
        emailId: true,
        fax: true,
        firstName: true,
        gender: true,
        id: true,
        idx: true,
        image: true,
        industry: true,
        jobTitle: true,
        language: true,
        lastName: true,
        leadName: true,
        leadOwner: true,
        marketSegment: true,
        middleName: true,
        mobileNo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        noOfEmployees: true,
        owner: true,
        phone: true,
        phoneExt: true,
        qualificationStatus: true,
        qualifiedBy: true,
        qualifiedOn: true,
        requestType: true,
        salutation: true,
        source: true,
        state: true,
        status: true,
        territory: true,
        title: true,
        typeField: true,
        unsubscribed: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lead] })
  @ApiNestedQuery(LeadFindManyArgs)
  @GrpcMethod("LeadService", "leads")
  async leads(@common.Req() request: Request): Promise<Lead[]> {
    const args = plainToClass(LeadFindManyArgs, request.query);
    return this.service.leads({
      ...args,
      select: {
        annualRevenue: true,
        blogSubscriber: true,
        campaignName: true,
        city: true,
        company: true,
        companyName: true,
        country: true,
        createdAt: true,
        creation: true,
        customer: true,
        disabled: true,
        docstatus: true,
        emailId: true,
        fax: true,
        firstName: true,
        gender: true,
        id: true,
        idx: true,
        image: true,
        industry: true,
        jobTitle: true,
        language: true,
        lastName: true,
        leadName: true,
        leadOwner: true,
        marketSegment: true,
        middleName: true,
        mobileNo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        noOfEmployees: true,
        owner: true,
        phone: true,
        phoneExt: true,
        qualificationStatus: true,
        qualifiedBy: true,
        qualifiedOn: true,
        requestType: true,
        salutation: true,
        source: true,
        state: true,
        status: true,
        territory: true,
        title: true,
        typeField: true,
        unsubscribed: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lead })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LeadService", "lead")
  async lead(
    @common.Param() params: LeadWhereUniqueInput
  ): Promise<Lead | null> {
    const result = await this.service.lead({
      where: params,
      select: {
        annualRevenue: true,
        blogSubscriber: true,
        campaignName: true,
        city: true,
        company: true,
        companyName: true,
        country: true,
        createdAt: true,
        creation: true,
        customer: true,
        disabled: true,
        docstatus: true,
        emailId: true,
        fax: true,
        firstName: true,
        gender: true,
        id: true,
        idx: true,
        image: true,
        industry: true,
        jobTitle: true,
        language: true,
        lastName: true,
        leadName: true,
        leadOwner: true,
        marketSegment: true,
        middleName: true,
        mobileNo: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        noOfEmployees: true,
        owner: true,
        phone: true,
        phoneExt: true,
        qualificationStatus: true,
        qualifiedBy: true,
        qualifiedOn: true,
        requestType: true,
        salutation: true,
        source: true,
        state: true,
        status: true,
        territory: true,
        title: true,
        typeField: true,
        unsubscribed: true,
        updatedAt: true,
        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lead })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LeadService", "updateLead")
  async updateLead(
    @common.Param() params: LeadWhereUniqueInput,
    @common.Body() data: LeadUpdateInput
  ): Promise<Lead | null> {
    try {
      return await this.service.updateLead({
        where: params,
        data: data,
        select: {
          annualRevenue: true,
          blogSubscriber: true,
          campaignName: true,
          city: true,
          company: true,
          companyName: true,
          country: true,
          createdAt: true,
          creation: true,
          customer: true,
          disabled: true,
          docstatus: true,
          emailId: true,
          fax: true,
          firstName: true,
          gender: true,
          id: true,
          idx: true,
          image: true,
          industry: true,
          jobTitle: true,
          language: true,
          lastName: true,
          leadName: true,
          leadOwner: true,
          marketSegment: true,
          middleName: true,
          mobileNo: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          noOfEmployees: true,
          owner: true,
          phone: true,
          phoneExt: true,
          qualificationStatus: true,
          qualifiedBy: true,
          qualifiedOn: true,
          requestType: true,
          salutation: true,
          source: true,
          state: true,
          status: true,
          territory: true,
          title: true,
          typeField: true,
          unsubscribed: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lead })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("LeadService", "deleteLead")
  async deleteLead(
    @common.Param() params: LeadWhereUniqueInput
  ): Promise<Lead | null> {
    try {
      return await this.service.deleteLead({
        where: params,
        select: {
          annualRevenue: true,
          blogSubscriber: true,
          campaignName: true,
          city: true,
          company: true,
          companyName: true,
          country: true,
          createdAt: true,
          creation: true,
          customer: true,
          disabled: true,
          docstatus: true,
          emailId: true,
          fax: true,
          firstName: true,
          gender: true,
          id: true,
          idx: true,
          image: true,
          industry: true,
          jobTitle: true,
          language: true,
          lastName: true,
          leadName: true,
          leadOwner: true,
          marketSegment: true,
          middleName: true,
          mobileNo: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          noOfEmployees: true,
          owner: true,
          phone: true,
          phoneExt: true,
          qualificationStatus: true,
          qualifiedBy: true,
          qualifiedOn: true,
          requestType: true,
          salutation: true,
          source: true,
          state: true,
          status: true,
          territory: true,
          title: true,
          typeField: true,
          unsubscribed: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
