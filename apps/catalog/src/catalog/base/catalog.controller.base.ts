/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CatalogService } from "../catalog.service";
import { CatalogCreateInput } from "./CatalogCreateInput";
import { Catalog } from "./Catalog";
import { CatalogFindManyArgs } from "./CatalogFindManyArgs";
import { CatalogWhereUniqueInput } from "./CatalogWhereUniqueInput";
import { CatalogUpdateInput } from "./CatalogUpdateInput";
import { ConfigurationFindManyArgs } from "../../configuration/base/ConfigurationFindManyArgs";
import { Configuration } from "../../configuration/base/Configuration";
import { ConfigurationWhereUniqueInput } from "../../configuration/base/ConfigurationWhereUniqueInput";

export class CatalogControllerBase {
  constructor(protected readonly service: CatalogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Catalog })
  @swagger.ApiBody({
    type: CatalogCreateInput,
  })
  async createCatalog(
    @common.Body() data: CatalogCreateInput
  ): Promise<Catalog> {
    return await this.service.createCatalog({
      data: {
        ...data,

        unit: data.unit
          ? {
              connect: data.unit,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Catalog] })
  @ApiNestedQuery(CatalogFindManyArgs)
  async catalogs(@common.Req() request: Request): Promise<Catalog[]> {
    const args = plainToClass(CatalogFindManyArgs, request.query);
    return this.service.catalogs({
      ...args,
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Catalog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async catalog(
    @common.Param() params: CatalogWhereUniqueInput
  ): Promise<Catalog | null> {
    const result = await this.service.catalog({
      where: params,
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Catalog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CatalogUpdateInput,
  })
  async updateCatalog(
    @common.Param() params: CatalogWhereUniqueInput,
    @common.Body() data: CatalogUpdateInput
  ): Promise<Catalog | null> {
    try {
      return await this.service.updateCatalog({
        where: params,
        data: {
          ...data,

          unit: data.unit
            ? {
                connect: data.unit,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          displayName: true,
          id: true,
          name: true,

          unit: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Catalog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCatalog(
    @common.Param() params: CatalogWhereUniqueInput
  ): Promise<Catalog | null> {
    try {
      return await this.service.deleteCatalog({
        where: params,
        select: {
          createdAt: true,
          description: true,
          displayName: true,
          id: true,
          name: true,

          unit: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/configurations")
  @ApiNestedQuery(ConfigurationFindManyArgs)
  async findConfigurations(
    @common.Req() request: Request,
    @common.Param() params: CatalogWhereUniqueInput
  ): Promise<Configuration[]> {
    const query = plainToClass(ConfigurationFindManyArgs, request.query);
    const results = await this.service.findConfigurations(params.id, {
      ...query,
      select: {
        bundle: {
          select: {
            id: true,
          },
        },

        catalog: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        pipeline: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/configurations")
  async connectConfigurations(
    @common.Param() params: CatalogWhereUniqueInput,
    @common.Body() body: ConfigurationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      configurations: {
        connect: body,
      },
    };
    await this.service.updateCatalog({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/configurations")
  async updateConfigurations(
    @common.Param() params: CatalogWhereUniqueInput,
    @common.Body() body: ConfigurationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      configurations: {
        set: body,
      },
    };
    await this.service.updateCatalog({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/configurations")
  async disconnectConfigurations(
    @common.Param() params: CatalogWhereUniqueInput,
    @common.Body() body: ConfigurationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      configurations: {
        disconnect: body,
      },
    };
    await this.service.updateCatalog({
      where: params,
      data,
      select: { id: true },
    });
  }
}
