/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Relation } from "./Relation";
import { RelationCountArgs } from "./RelationCountArgs";
import { RelationFindManyArgs } from "./RelationFindManyArgs";
import { RelationFindUniqueArgs } from "./RelationFindUniqueArgs";
import { CreateRelationArgs } from "./CreateRelationArgs";
import { UpdateRelationArgs } from "./UpdateRelationArgs";
import { DeleteRelationArgs } from "./DeleteRelationArgs";
import { Business } from "../../business/base/Business";
import { Industry } from "../../industry/base/Industry";
import { RelationService } from "../relation.service";
@graphql.Resolver(() => Relation)
export class RelationResolverBase {
  constructor(protected readonly service: RelationService) {}

  async _relationsMeta(
    @graphql.Args() args: RelationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Relation])
  async relations(
    @graphql.Args() args: RelationFindManyArgs
  ): Promise<Relation[]> {
    return this.service.relations(args);
  }

  @graphql.Query(() => Relation, { nullable: true })
  async relation(
    @graphql.Args() args: RelationFindUniqueArgs
  ): Promise<Relation | null> {
    const result = await this.service.relation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Relation)
  async createRelation(
    @graphql.Args() args: CreateRelationArgs
  ): Promise<Relation> {
    return await this.service.createRelation({
      ...args,
      data: {
        ...args.data,

        ascendantBusiness: args.data.ascendantBusiness
          ? {
              connect: args.data.ascendantBusiness,
            }
          : undefined,

        descendantBusiness: args.data.descendantBusiness
          ? {
              connect: args.data.descendantBusiness,
            }
          : undefined,

        industry: args.data.industry
          ? {
              connect: args.data.industry,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Relation)
  async updateRelation(
    @graphql.Args() args: UpdateRelationArgs
  ): Promise<Relation | null> {
    try {
      return await this.service.updateRelation({
        ...args,
        data: {
          ...args.data,

          ascendantBusiness: args.data.ascendantBusiness
            ? {
                connect: args.data.ascendantBusiness,
              }
            : undefined,

          descendantBusiness: args.data.descendantBusiness
            ? {
                connect: args.data.descendantBusiness,
              }
            : undefined,

          industry: args.data.industry
            ? {
                connect: args.data.industry,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Relation)
  async deleteRelation(
    @graphql.Args() args: DeleteRelationArgs
  ): Promise<Relation | null> {
    try {
      return await this.service.deleteRelation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Business, {
    nullable: true,
    name: "ascendantBusiness",
  })
  async getAscendantBusiness(
    @graphql.Parent() parent: Relation
  ): Promise<Business | null> {
    const result = await this.service.getAscendantBusiness(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Business, {
    nullable: true,
    name: "descendantBusiness",
  })
  async getDescendantBusiness(
    @graphql.Parent() parent: Relation
  ): Promise<Business | null> {
    const result = await this.service.getDescendantBusiness(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Industry, {
    nullable: true,
    name: "industry",
  })
  async getIndustry(
    @graphql.Parent() parent: Relation
  ): Promise<Industry | null> {
    const result = await this.service.getIndustry(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
