/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Unit as PrismaUnit,
  Catalog as PrismaCatalog,
  Deal as PrismaDeal,
  Opportunity as PrismaOpportunity,
  Threat as PrismaThreat,
  Address as PrismaAddress,
  Business as PrismaBusiness,
} from "@prisma/client";

export class UnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UnitCountArgs, "select">): Promise<number> {
    return this.prisma.unit.count(args);
  }

  async units(args: Prisma.UnitFindManyArgs): Promise<PrismaUnit[]> {
    return this.prisma.unit.findMany(args);
  }
  async unit(args: Prisma.UnitFindUniqueArgs): Promise<PrismaUnit | null> {
    return this.prisma.unit.findUnique(args);
  }
  async createUnit(args: Prisma.UnitCreateArgs): Promise<PrismaUnit> {
    return this.prisma.unit.create(args);
  }
  async updateUnit(args: Prisma.UnitUpdateArgs): Promise<PrismaUnit> {
    return this.prisma.unit.update(args);
  }
  async deleteUnit(args: Prisma.UnitDeleteArgs): Promise<PrismaUnit> {
    return this.prisma.unit.delete(args);
  }

  async findCatalogs(
    parentId: string,
    args: Prisma.CatalogFindManyArgs
  ): Promise<PrismaCatalog[]> {
    return this.prisma.unit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .catalogs(args);
  }

  async findDeals(
    parentId: string,
    args: Prisma.DealFindManyArgs
  ): Promise<PrismaDeal[]> {
    return this.prisma.unit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .deals(args);
  }

  async findOpportunities(
    parentId: string,
    args: Prisma.OpportunityFindManyArgs
  ): Promise<PrismaOpportunity[]> {
    return this.prisma.unit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .opportunities(args);
  }

  async findThreats(
    parentId: string,
    args: Prisma.ThreatFindManyArgs
  ): Promise<PrismaThreat[]> {
    return this.prisma.unit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .threats(args);
  }

  async getAddress(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.unit
      .findUnique({
        where: { id: parentId },
      })
      .address();
  }

  async getCompetitor(parentId: string): Promise<PrismaBusiness | null> {
    return this.prisma.unit
      .findUnique({
        where: { id: parentId },
      })
      .competitor();
  }
}
