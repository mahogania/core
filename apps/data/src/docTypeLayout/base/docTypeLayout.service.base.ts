/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DocTypeLayout as PrismaDocTypeLayout } from "@prisma/client";

export class DocTypeLayoutServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocTypeLayoutCountArgs, "select">
  ): Promise<number> {
    return this.prisma.docTypeLayout.count(args);
  }

  async docTypeLayouts(
    args: Prisma.DocTypeLayoutFindManyArgs
  ): Promise<PrismaDocTypeLayout[]> {
    return this.prisma.docTypeLayout.findMany(args);
  }
  async docTypeLayout(
    args: Prisma.DocTypeLayoutFindUniqueArgs
  ): Promise<PrismaDocTypeLayout | null> {
    return this.prisma.docTypeLayout.findUnique(args);
  }
  async createDocTypeLayout(
    args: Prisma.DocTypeLayoutCreateArgs
  ): Promise<PrismaDocTypeLayout> {
    return this.prisma.docTypeLayout.create(args);
  }
  async updateDocTypeLayout(
    args: Prisma.DocTypeLayoutUpdateArgs
  ): Promise<PrismaDocTypeLayout> {
    return this.prisma.docTypeLayout.update(args);
  }
  async deleteDocTypeLayout(
    args: Prisma.DocTypeLayoutDeleteArgs
  ): Promise<PrismaDocTypeLayout> {
    return this.prisma.docTypeLayout.delete(args);
  }
}
