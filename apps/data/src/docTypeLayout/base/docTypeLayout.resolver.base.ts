/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocTypeLayout } from "./DocTypeLayout";
import { DocTypeLayoutCountArgs } from "./DocTypeLayoutCountArgs";
import { DocTypeLayoutFindManyArgs } from "./DocTypeLayoutFindManyArgs";
import { DocTypeLayoutFindUniqueArgs } from "./DocTypeLayoutFindUniqueArgs";
import { CreateDocTypeLayoutArgs } from "./CreateDocTypeLayoutArgs";
import { UpdateDocTypeLayoutArgs } from "./UpdateDocTypeLayoutArgs";
import { DeleteDocTypeLayoutArgs } from "./DeleteDocTypeLayoutArgs";
import { DocTypeLayoutService } from "../docTypeLayout.service";
@graphql.Resolver(() => DocTypeLayout)
export class DocTypeLayoutResolverBase {
  constructor(protected readonly service: DocTypeLayoutService) {}

  async _docTypeLayoutsMeta(
    @graphql.Args() args: DocTypeLayoutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocTypeLayout])
  async docTypeLayouts(
    @graphql.Args() args: DocTypeLayoutFindManyArgs
  ): Promise<DocTypeLayout[]> {
    return this.service.docTypeLayouts(args);
  }

  @graphql.Query(() => DocTypeLayout, { nullable: true })
  async docTypeLayout(
    @graphql.Args() args: DocTypeLayoutFindUniqueArgs
  ): Promise<DocTypeLayout | null> {
    const result = await this.service.docTypeLayout(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocTypeLayout)
  async createDocTypeLayout(
    @graphql.Args() args: CreateDocTypeLayoutArgs
  ): Promise<DocTypeLayout> {
    return await this.service.createDocTypeLayout({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocTypeLayout)
  async updateDocTypeLayout(
    @graphql.Args() args: UpdateDocTypeLayoutArgs
  ): Promise<DocTypeLayout | null> {
    try {
      return await this.service.updateDocTypeLayout({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocTypeLayout)
  async deleteDocTypeLayout(
    @graphql.Args() args: DeleteDocTypeLayoutArgs
  ): Promise<DocTypeLayout | null> {
    try {
      return await this.service.deleteDocTypeLayout(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
