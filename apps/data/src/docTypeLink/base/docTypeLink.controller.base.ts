/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocTypeLinkService } from "../docTypeLink.service";
import { DocTypeLinkCreateInput } from "./DocTypeLinkCreateInput";
import { DocTypeLink } from "./DocTypeLink";
import { DocTypeLinkFindManyArgs } from "./DocTypeLinkFindManyArgs";
import { DocTypeLinkWhereUniqueInput } from "./DocTypeLinkWhereUniqueInput";
import { DocTypeLinkUpdateInput } from "./DocTypeLinkUpdateInput";

export class DocTypeLinkControllerBase {
  constructor(protected readonly service: DocTypeLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocTypeLink })
  async createDocTypeLink(
    @common.Body() data: DocTypeLinkCreateInput
  ): Promise<DocTypeLink> {
    return await this.service.createDocTypeLink({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        custom: true,
        docstatus: true,
        group: true,
        hidden: true,
        id: true,
        idx: true,
        isChildTable: true,
        linkDoctype: true,
        linkFieldname: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentDoctype: true,
        parentfield: true,
        parenttype: true,
        tableFieldname: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocTypeLink] })
  @ApiNestedQuery(DocTypeLinkFindManyArgs)
  async docTypeLinks(@common.Req() request: Request): Promise<DocTypeLink[]> {
    const args = plainToClass(DocTypeLinkFindManyArgs, request.query);
    return this.service.docTypeLinks({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        custom: true,
        docstatus: true,
        group: true,
        hidden: true,
        id: true,
        idx: true,
        isChildTable: true,
        linkDoctype: true,
        linkFieldname: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentDoctype: true,
        parentfield: true,
        parenttype: true,
        tableFieldname: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocTypeLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async docTypeLink(
    @common.Param() params: DocTypeLinkWhereUniqueInput
  ): Promise<DocTypeLink | null> {
    const result = await this.service.docTypeLink({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        custom: true,
        docstatus: true,
        group: true,
        hidden: true,
        id: true,
        idx: true,
        isChildTable: true,
        linkDoctype: true,
        linkFieldname: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentDoctype: true,
        parentfield: true,
        parenttype: true,
        tableFieldname: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocTypeLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocTypeLink(
    @common.Param() params: DocTypeLinkWhereUniqueInput,
    @common.Body() data: DocTypeLinkUpdateInput
  ): Promise<DocTypeLink | null> {
    try {
      return await this.service.updateDocTypeLink({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          custom: true,
          docstatus: true,
          group: true,
          hidden: true,
          id: true,
          idx: true,
          isChildTable: true,
          linkDoctype: true,
          linkFieldname: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentDoctype: true,
          parentfield: true,
          parenttype: true,
          tableFieldname: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocTypeLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocTypeLink(
    @common.Param() params: DocTypeLinkWhereUniqueInput
  ): Promise<DocTypeLink | null> {
    try {
      return await this.service.deleteDocTypeLink({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          custom: true,
          docstatus: true,
          group: true,
          hidden: true,
          id: true,
          idx: true,
          isChildTable: true,
          linkDoctype: true,
          linkFieldname: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentDoctype: true,
          parentfield: true,
          parenttype: true,
          tableFieldname: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
