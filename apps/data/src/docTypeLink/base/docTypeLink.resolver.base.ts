/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocTypeLink } from "./DocTypeLink";
import { DocTypeLinkCountArgs } from "./DocTypeLinkCountArgs";
import { DocTypeLinkFindManyArgs } from "./DocTypeLinkFindManyArgs";
import { DocTypeLinkFindUniqueArgs } from "./DocTypeLinkFindUniqueArgs";
import { CreateDocTypeLinkArgs } from "./CreateDocTypeLinkArgs";
import { UpdateDocTypeLinkArgs } from "./UpdateDocTypeLinkArgs";
import { DeleteDocTypeLinkArgs } from "./DeleteDocTypeLinkArgs";
import { DocTypeLinkService } from "../docTypeLink.service";
@graphql.Resolver(() => DocTypeLink)
export class DocTypeLinkResolverBase {
  constructor(protected readonly service: DocTypeLinkService) {}

  async _docTypeLinksMeta(
    @graphql.Args() args: DocTypeLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocTypeLink])
  async docTypeLinks(
    @graphql.Args() args: DocTypeLinkFindManyArgs
  ): Promise<DocTypeLink[]> {
    return this.service.docTypeLinks(args);
  }

  @graphql.Query(() => DocTypeLink, { nullable: true })
  async docTypeLink(
    @graphql.Args() args: DocTypeLinkFindUniqueArgs
  ): Promise<DocTypeLink | null> {
    const result = await this.service.docTypeLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocTypeLink)
  async createDocTypeLink(
    @graphql.Args() args: CreateDocTypeLinkArgs
  ): Promise<DocTypeLink> {
    return await this.service.createDocTypeLink({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocTypeLink)
  async updateDocTypeLink(
    @graphql.Args() args: UpdateDocTypeLinkArgs
  ): Promise<DocTypeLink | null> {
    try {
      return await this.service.updateDocTypeLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocTypeLink)
  async deleteDocTypeLink(
    @graphql.Args() args: DeleteDocTypeLinkArgs
  ): Promise<DocTypeLink | null> {
    try {
      return await this.service.deleteDocTypeLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
