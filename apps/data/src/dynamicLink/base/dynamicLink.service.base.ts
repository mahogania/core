/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DynamicLink as PrismaDynamicLink } from "@prisma/client";

export class DynamicLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DynamicLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dynamicLink.count(args);
  }

  async dynamicLinks(
    args: Prisma.DynamicLinkFindManyArgs
  ): Promise<PrismaDynamicLink[]> {
    return this.prisma.dynamicLink.findMany(args);
  }
  async dynamicLink(
    args: Prisma.DynamicLinkFindUniqueArgs
  ): Promise<PrismaDynamicLink | null> {
    return this.prisma.dynamicLink.findUnique(args);
  }
  async createDynamicLink(
    args: Prisma.DynamicLinkCreateArgs
  ): Promise<PrismaDynamicLink> {
    return this.prisma.dynamicLink.create(args);
  }
  async updateDynamicLink(
    args: Prisma.DynamicLinkUpdateArgs
  ): Promise<PrismaDynamicLink> {
    return this.prisma.dynamicLink.update(args);
  }
  async deleteDynamicLink(
    args: Prisma.DynamicLinkDeleteArgs
  ): Promise<PrismaDynamicLink> {
    return this.prisma.dynamicLink.delete(args);
  }
}
