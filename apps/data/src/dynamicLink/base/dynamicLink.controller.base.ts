/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DynamicLinkService } from "../dynamicLink.service";
import { DynamicLinkCreateInput } from "./DynamicLinkCreateInput";
import { DynamicLink } from "./DynamicLink";
import { DynamicLinkFindManyArgs } from "./DynamicLinkFindManyArgs";
import { DynamicLinkWhereUniqueInput } from "./DynamicLinkWhereUniqueInput";
import { DynamicLinkUpdateInput } from "./DynamicLinkUpdateInput";

export class DynamicLinkControllerBase {
  constructor(protected readonly service: DynamicLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DynamicLink })
  async createDynamicLink(
    @common.Body() data: DynamicLinkCreateInput
  ): Promise<DynamicLink> {
    return await this.service.createDynamicLink({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        linkDoctype: true,
        linkName: true,
        linkTitle: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DynamicLink] })
  @ApiNestedQuery(DynamicLinkFindManyArgs)
  async dynamicLinks(@common.Req() request: Request): Promise<DynamicLink[]> {
    const args = plainToClass(DynamicLinkFindManyArgs, request.query);
    return this.service.dynamicLinks({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        linkDoctype: true,
        linkName: true,
        linkTitle: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DynamicLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dynamicLink(
    @common.Param() params: DynamicLinkWhereUniqueInput
  ): Promise<DynamicLink | null> {
    const result = await this.service.dynamicLink({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        linkDoctype: true,
        linkName: true,
        linkTitle: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DynamicLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDynamicLink(
    @common.Param() params: DynamicLinkWhereUniqueInput,
    @common.Body() data: DynamicLinkUpdateInput
  ): Promise<DynamicLink | null> {
    try {
      return await this.service.updateDynamicLink({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          linkDoctype: true,
          linkName: true,
          linkTitle: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DynamicLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDynamicLink(
    @common.Param() params: DynamicLinkWhereUniqueInput
  ): Promise<DynamicLink | null> {
    try {
      return await this.service.deleteDynamicLink({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          linkDoctype: true,
          linkName: true,
          linkTitle: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
