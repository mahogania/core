/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DocShare as PrismaDocShare } from "@prisma/client";

export class DocShareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DocShareCountArgs, "select">): Promise<number> {
    return this.prisma.docShare.count(args);
  }

  async docShares(
    args: Prisma.DocShareFindManyArgs
  ): Promise<PrismaDocShare[]> {
    return this.prisma.docShare.findMany(args);
  }
  async docShare(
    args: Prisma.DocShareFindUniqueArgs
  ): Promise<PrismaDocShare | null> {
    return this.prisma.docShare.findUnique(args);
  }
  async createDocShare(
    args: Prisma.DocShareCreateArgs
  ): Promise<PrismaDocShare> {
    return this.prisma.docShare.create(args);
  }
  async updateDocShare(
    args: Prisma.DocShareUpdateArgs
  ): Promise<PrismaDocShare> {
    return this.prisma.docShare.update(args);
  }
  async deleteDocShare(
    args: Prisma.DocShareDeleteArgs
  ): Promise<PrismaDocShare> {
    return this.prisma.docShare.delete(args);
  }
}
