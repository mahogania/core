/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocShareService } from "../docShare.service";
import { DocShareCreateInput } from "./DocShareCreateInput";
import { DocShare } from "./DocShare";
import { DocShareFindManyArgs } from "./DocShareFindManyArgs";
import { DocShareWhereUniqueInput } from "./DocShareWhereUniqueInput";
import { DocShareUpdateInput } from "./DocShareUpdateInput";

export class DocShareControllerBase {
  constructor(protected readonly service: DocShareService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocShare })
  async createDocShare(
    @common.Body() data: DocShareCreateInput
  ): Promise<DocShare> {
    return await this.service.createDocShare({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        everyone: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        notifyByEmail: true,
        owner: true,
        read: true,
        share: true,
        shareDoctype: true,
        shareName: true,
        submit: true,
        updatedAt: true,
        user: true,
        write: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocShare] })
  @ApiNestedQuery(DocShareFindManyArgs)
  async docShares(@common.Req() request: Request): Promise<DocShare[]> {
    const args = plainToClass(DocShareFindManyArgs, request.query);
    return this.service.docShares({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        everyone: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        notifyByEmail: true,
        owner: true,
        read: true,
        share: true,
        shareDoctype: true,
        shareName: true,
        submit: true,
        updatedAt: true,
        user: true,
        write: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocShare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async docShare(
    @common.Param() params: DocShareWhereUniqueInput
  ): Promise<DocShare | null> {
    const result = await this.service.docShare({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        everyone: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        notifyByEmail: true,
        owner: true,
        read: true,
        share: true,
        shareDoctype: true,
        shareName: true,
        submit: true,
        updatedAt: true,
        user: true,
        write: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocShare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocShare(
    @common.Param() params: DocShareWhereUniqueInput,
    @common.Body() data: DocShareUpdateInput
  ): Promise<DocShare | null> {
    try {
      return await this.service.updateDocShare({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          everyone: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          notifyByEmail: true,
          owner: true,
          read: true,
          share: true,
          shareDoctype: true,
          shareName: true,
          submit: true,
          updatedAt: true,
          user: true,
          write: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocShare })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocShare(
    @common.Param() params: DocShareWhereUniqueInput
  ): Promise<DocShare | null> {
    try {
      return await this.service.deleteDocShare({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          everyone: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          notifyByEmail: true,
          owner: true,
          read: true,
          share: true,
          shareDoctype: true,
          shareName: true,
          submit: true,
          updatedAt: true,
          user: true,
          write: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
