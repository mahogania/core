/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocShare } from "./DocShare";
import { DocShareCountArgs } from "./DocShareCountArgs";
import { DocShareFindManyArgs } from "./DocShareFindManyArgs";
import { DocShareFindUniqueArgs } from "./DocShareFindUniqueArgs";
import { CreateDocShareArgs } from "./CreateDocShareArgs";
import { UpdateDocShareArgs } from "./UpdateDocShareArgs";
import { DeleteDocShareArgs } from "./DeleteDocShareArgs";
import { DocShareService } from "../docShare.service";
@graphql.Resolver(() => DocShare)
export class DocShareResolverBase {
  constructor(protected readonly service: DocShareService) {}

  async _docSharesMeta(
    @graphql.Args() args: DocShareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocShare])
  async docShares(
    @graphql.Args() args: DocShareFindManyArgs
  ): Promise<DocShare[]> {
    return this.service.docShares(args);
  }

  @graphql.Query(() => DocShare, { nullable: true })
  async docShare(
    @graphql.Args() args: DocShareFindUniqueArgs
  ): Promise<DocShare | null> {
    const result = await this.service.docShare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocShare)
  async createDocShare(
    @graphql.Args() args: CreateDocShareArgs
  ): Promise<DocShare> {
    return await this.service.createDocShare({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocShare)
  async updateDocShare(
    @graphql.Args() args: UpdateDocShareArgs
  ): Promise<DocShare | null> {
    try {
      return await this.service.updateDocShare({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocShare)
  async deleteDocShare(
    @graphql.Args() args: DeleteDocShareArgs
  ): Promise<DocShare | null> {
    try {
      return await this.service.deleteDocShare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
