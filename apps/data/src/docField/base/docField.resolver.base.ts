/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocField } from "./DocField";
import { DocFieldCountArgs } from "./DocFieldCountArgs";
import { DocFieldFindManyArgs } from "./DocFieldFindManyArgs";
import { DocFieldFindUniqueArgs } from "./DocFieldFindUniqueArgs";
import { CreateDocFieldArgs } from "./CreateDocFieldArgs";
import { UpdateDocFieldArgs } from "./UpdateDocFieldArgs";
import { DeleteDocFieldArgs } from "./DeleteDocFieldArgs";
import { DocFieldService } from "../docField.service";
@graphql.Resolver(() => DocField)
export class DocFieldResolverBase {
  constructor(protected readonly service: DocFieldService) {}

  async _docFieldsMeta(
    @graphql.Args() args: DocFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocField])
  async docFields(
    @graphql.Args() args: DocFieldFindManyArgs
  ): Promise<DocField[]> {
    return this.service.docFields(args);
  }

  @graphql.Query(() => DocField, { nullable: true })
  async docField(
    @graphql.Args() args: DocFieldFindUniqueArgs
  ): Promise<DocField | null> {
    const result = await this.service.docField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocField)
  async createDocField(
    @graphql.Args() args: CreateDocFieldArgs
  ): Promise<DocField> {
    return await this.service.createDocField({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocField)
  async updateDocField(
    @graphql.Args() args: UpdateDocFieldArgs
  ): Promise<DocField | null> {
    try {
      return await this.service.updateDocField({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocField)
  async deleteDocField(
    @graphql.Args() args: DeleteDocFieldArgs
  ): Promise<DocField | null> {
    try {
      return await this.service.deleteDocField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
