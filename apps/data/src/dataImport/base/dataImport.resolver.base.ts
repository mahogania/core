/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DataImport } from "./DataImport";
import { DataImportCountArgs } from "./DataImportCountArgs";
import { DataImportFindManyArgs } from "./DataImportFindManyArgs";
import { DataImportFindUniqueArgs } from "./DataImportFindUniqueArgs";
import { CreateDataImportArgs } from "./CreateDataImportArgs";
import { UpdateDataImportArgs } from "./UpdateDataImportArgs";
import { DeleteDataImportArgs } from "./DeleteDataImportArgs";
import { DataImportLogFindManyArgs } from "../../dataImportLog/base/DataImportLogFindManyArgs";
import { DataImportLog } from "../../dataImportLog/base/DataImportLog";
import { DataImportService } from "../dataImport.service";
@graphql.Resolver(() => DataImport)
export class DataImportResolverBase {
  constructor(protected readonly service: DataImportService) {}

  async _dataImportsMeta(
    @graphql.Args() args: DataImportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DataImport])
  async dataImports(
    @graphql.Args() args: DataImportFindManyArgs
  ): Promise<DataImport[]> {
    return this.service.dataImports(args);
  }

  @graphql.Query(() => DataImport, { nullable: true })
  async dataImport(
    @graphql.Args() args: DataImportFindUniqueArgs
  ): Promise<DataImport | null> {
    const result = await this.service.dataImport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DataImport)
  async createDataImport(
    @graphql.Args() args: CreateDataImportArgs
  ): Promise<DataImport> {
    return await this.service.createDataImport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DataImport)
  async updateDataImport(
    @graphql.Args() args: UpdateDataImportArgs
  ): Promise<DataImport | null> {
    try {
      return await this.service.updateDataImport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataImport)
  async deleteDataImport(
    @graphql.Args() args: DeleteDataImportArgs
  ): Promise<DataImport | null> {
    try {
      return await this.service.deleteDataImport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DataImportLog], { name: "dataImportLogs" })
  async findDataImportLogs(
    @graphql.Parent() parent: DataImport,
    @graphql.Args() args: DataImportLogFindManyArgs
  ): Promise<DataImportLog[]> {
    const results = await this.service.findDataImportLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
