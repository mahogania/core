/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocTypeLayoutFieldService } from "../docTypeLayoutField.service";
import { DocTypeLayoutFieldCreateInput } from "./DocTypeLayoutFieldCreateInput";
import { DocTypeLayoutField } from "./DocTypeLayoutField";
import { DocTypeLayoutFieldFindManyArgs } from "./DocTypeLayoutFieldFindManyArgs";
import { DocTypeLayoutFieldWhereUniqueInput } from "./DocTypeLayoutFieldWhereUniqueInput";
import { DocTypeLayoutFieldUpdateInput } from "./DocTypeLayoutFieldUpdateInput";

export class DocTypeLayoutFieldControllerBase {
  constructor(protected readonly service: DocTypeLayoutFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocTypeLayoutField })
  async createDocTypeLayoutField(
    @common.Body() data: DocTypeLayoutFieldCreateInput
  ): Promise<DocTypeLayoutField> {
    return await this.service.createDocTypeLayoutField({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fieldname: true,
        id: true,
        idx: true,
        label: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocTypeLayoutField] })
  @ApiNestedQuery(DocTypeLayoutFieldFindManyArgs)
  async docTypeLayoutFields(
    @common.Req() request: Request
  ): Promise<DocTypeLayoutField[]> {
    const args = plainToClass(DocTypeLayoutFieldFindManyArgs, request.query);
    return this.service.docTypeLayoutFields({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fieldname: true,
        id: true,
        idx: true,
        label: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocTypeLayoutField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async docTypeLayoutField(
    @common.Param() params: DocTypeLayoutFieldWhereUniqueInput
  ): Promise<DocTypeLayoutField | null> {
    const result = await this.service.docTypeLayoutField({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fieldname: true,
        id: true,
        idx: true,
        label: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocTypeLayoutField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocTypeLayoutField(
    @common.Param() params: DocTypeLayoutFieldWhereUniqueInput,
    @common.Body() data: DocTypeLayoutFieldUpdateInput
  ): Promise<DocTypeLayoutField | null> {
    try {
      return await this.service.updateDocTypeLayoutField({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          fieldname: true,
          id: true,
          idx: true,
          label: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocTypeLayoutField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocTypeLayoutField(
    @common.Param() params: DocTypeLayoutFieldWhereUniqueInput
  ): Promise<DocTypeLayoutField | null> {
    try {
      return await this.service.deleteDocTypeLayoutField({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          fieldname: true,
          id: true,
          idx: true,
          label: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
