/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocTypeService } from "../docType.service";
import { DocTypeCreateInput } from "./DocTypeCreateInput";
import { DocType } from "./DocType";
import { DocTypeFindManyArgs } from "./DocTypeFindManyArgs";
import { DocTypeWhereUniqueInput } from "./DocTypeWhereUniqueInput";
import { DocTypeUpdateInput } from "./DocTypeUpdateInput";

export class DocTypeControllerBase {
  constructor(protected readonly service: DocTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocType })
  async createDocType(
    @common.Body() data: DocTypeCreateInput
  ): Promise<DocType> {
    return await this.service.createDocType({
      data: data,
      select: {
        allowAutoRepeat: true,
        allowCopy: true,
        allowEventsInTimeline: true,
        allowGuestToView: true,
        allowImport: true,
        allowRename: true,
        appField: true,
        autoname: true,
        beta: true,
        color: true,
        colour: true,
        createdAt: true,
        creation: true,
        custom: true,
        defaultEmailTemplate: true,
        defaultPrintFormat: true,
        defaultView: true,
        description: true,
        docstatus: true,
        documentType: true,
        documentation: true,
        editableGrid: true,
        emailAppendTo: true,
        engine: true,
        forceReRouteToDefaultView: true,
        hasWebView: true,
        hideToolbar: true,
        icon: true,
        id: true,
        idx: true,
        imageField: true,
        inCreate: true,
        indexWebPagesForSearch: true,
        isCalendarAndGantt: true,
        isPublishedField: true,
        isSubmittable: true,
        isTree: true,
        isVirtual: true,
        issingle: true,
        istable: true,
        lastUpdate: true,
        makeAttachmentsPublic: true,
        maxAttachments: true,
        menuIndex: true,
        migrationHash: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        name: true,
        namingRule: true,
        nsmParentField: true,
        owner: true,
        parentNode: true,
        printOutline: true,
        queueInBackground: true,
        quickEntry: true,
        readOnly: true,
        restrictToDomain: true,
        route: true,
        searchFields: true,
        senderField: true,
        senderNameField: true,
        showNameInGlobalSearch: true,
        showPreviewPopup: true,
        showTitleFieldInLink: true,
        smallicon: true,
        sortField: true,
        sortOrder: true,
        subject: true,
        subjectField: true,
        tagFields: true,
        timelineField: true,
        titleField: true,
        trackChanges: true,
        trackSeen: true,
        trackViews: true,
        translatedDoctype: true,
        updatedAt: true,
        userTags: true,
        websiteSearchField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocType] })
  @ApiNestedQuery(DocTypeFindManyArgs)
  async docTypes(@common.Req() request: Request): Promise<DocType[]> {
    const args = plainToClass(DocTypeFindManyArgs, request.query);
    return this.service.docTypes({
      ...args,
      select: {
        allowAutoRepeat: true,
        allowCopy: true,
        allowEventsInTimeline: true,
        allowGuestToView: true,
        allowImport: true,
        allowRename: true,
        appField: true,
        autoname: true,
        beta: true,
        color: true,
        colour: true,
        createdAt: true,
        creation: true,
        custom: true,
        defaultEmailTemplate: true,
        defaultPrintFormat: true,
        defaultView: true,
        description: true,
        docstatus: true,
        documentType: true,
        documentation: true,
        editableGrid: true,
        emailAppendTo: true,
        engine: true,
        forceReRouteToDefaultView: true,
        hasWebView: true,
        hideToolbar: true,
        icon: true,
        id: true,
        idx: true,
        imageField: true,
        inCreate: true,
        indexWebPagesForSearch: true,
        isCalendarAndGantt: true,
        isPublishedField: true,
        isSubmittable: true,
        isTree: true,
        isVirtual: true,
        issingle: true,
        istable: true,
        lastUpdate: true,
        makeAttachmentsPublic: true,
        maxAttachments: true,
        menuIndex: true,
        migrationHash: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        name: true,
        namingRule: true,
        nsmParentField: true,
        owner: true,
        parentNode: true,
        printOutline: true,
        queueInBackground: true,
        quickEntry: true,
        readOnly: true,
        restrictToDomain: true,
        route: true,
        searchFields: true,
        senderField: true,
        senderNameField: true,
        showNameInGlobalSearch: true,
        showPreviewPopup: true,
        showTitleFieldInLink: true,
        smallicon: true,
        sortField: true,
        sortOrder: true,
        subject: true,
        subjectField: true,
        tagFields: true,
        timelineField: true,
        titleField: true,
        trackChanges: true,
        trackSeen: true,
        trackViews: true,
        translatedDoctype: true,
        updatedAt: true,
        userTags: true,
        websiteSearchField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async docType(
    @common.Param() params: DocTypeWhereUniqueInput
  ): Promise<DocType | null> {
    const result = await this.service.docType({
      where: params,
      select: {
        allowAutoRepeat: true,
        allowCopy: true,
        allowEventsInTimeline: true,
        allowGuestToView: true,
        allowImport: true,
        allowRename: true,
        appField: true,
        autoname: true,
        beta: true,
        color: true,
        colour: true,
        createdAt: true,
        creation: true,
        custom: true,
        defaultEmailTemplate: true,
        defaultPrintFormat: true,
        defaultView: true,
        description: true,
        docstatus: true,
        documentType: true,
        documentation: true,
        editableGrid: true,
        emailAppendTo: true,
        engine: true,
        forceReRouteToDefaultView: true,
        hasWebView: true,
        hideToolbar: true,
        icon: true,
        id: true,
        idx: true,
        imageField: true,
        inCreate: true,
        indexWebPagesForSearch: true,
        isCalendarAndGantt: true,
        isPublishedField: true,
        isSubmittable: true,
        isTree: true,
        isVirtual: true,
        issingle: true,
        istable: true,
        lastUpdate: true,
        makeAttachmentsPublic: true,
        maxAttachments: true,
        menuIndex: true,
        migrationHash: true,
        modified: true,
        modifiedBy: true,
        moduleField: true,
        name: true,
        namingRule: true,
        nsmParentField: true,
        owner: true,
        parentNode: true,
        printOutline: true,
        queueInBackground: true,
        quickEntry: true,
        readOnly: true,
        restrictToDomain: true,
        route: true,
        searchFields: true,
        senderField: true,
        senderNameField: true,
        showNameInGlobalSearch: true,
        showPreviewPopup: true,
        showTitleFieldInLink: true,
        smallicon: true,
        sortField: true,
        sortOrder: true,
        subject: true,
        subjectField: true,
        tagFields: true,
        timelineField: true,
        titleField: true,
        trackChanges: true,
        trackSeen: true,
        trackViews: true,
        translatedDoctype: true,
        updatedAt: true,
        userTags: true,
        websiteSearchField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocType(
    @common.Param() params: DocTypeWhereUniqueInput,
    @common.Body() data: DocTypeUpdateInput
  ): Promise<DocType | null> {
    try {
      return await this.service.updateDocType({
        where: params,
        data: data,
        select: {
          allowAutoRepeat: true,
          allowCopy: true,
          allowEventsInTimeline: true,
          allowGuestToView: true,
          allowImport: true,
          allowRename: true,
          appField: true,
          autoname: true,
          beta: true,
          color: true,
          colour: true,
          createdAt: true,
          creation: true,
          custom: true,
          defaultEmailTemplate: true,
          defaultPrintFormat: true,
          defaultView: true,
          description: true,
          docstatus: true,
          documentType: true,
          documentation: true,
          editableGrid: true,
          emailAppendTo: true,
          engine: true,
          forceReRouteToDefaultView: true,
          hasWebView: true,
          hideToolbar: true,
          icon: true,
          id: true,
          idx: true,
          imageField: true,
          inCreate: true,
          indexWebPagesForSearch: true,
          isCalendarAndGantt: true,
          isPublishedField: true,
          isSubmittable: true,
          isTree: true,
          isVirtual: true,
          issingle: true,
          istable: true,
          lastUpdate: true,
          makeAttachmentsPublic: true,
          maxAttachments: true,
          menuIndex: true,
          migrationHash: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          name: true,
          namingRule: true,
          nsmParentField: true,
          owner: true,
          parentNode: true,
          printOutline: true,
          queueInBackground: true,
          quickEntry: true,
          readOnly: true,
          restrictToDomain: true,
          route: true,
          searchFields: true,
          senderField: true,
          senderNameField: true,
          showNameInGlobalSearch: true,
          showPreviewPopup: true,
          showTitleFieldInLink: true,
          smallicon: true,
          sortField: true,
          sortOrder: true,
          subject: true,
          subjectField: true,
          tagFields: true,
          timelineField: true,
          titleField: true,
          trackChanges: true,
          trackSeen: true,
          trackViews: true,
          translatedDoctype: true,
          updatedAt: true,
          userTags: true,
          websiteSearchField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocType(
    @common.Param() params: DocTypeWhereUniqueInput
  ): Promise<DocType | null> {
    try {
      return await this.service.deleteDocType({
        where: params,
        select: {
          allowAutoRepeat: true,
          allowCopy: true,
          allowEventsInTimeline: true,
          allowGuestToView: true,
          allowImport: true,
          allowRename: true,
          appField: true,
          autoname: true,
          beta: true,
          color: true,
          colour: true,
          createdAt: true,
          creation: true,
          custom: true,
          defaultEmailTemplate: true,
          defaultPrintFormat: true,
          defaultView: true,
          description: true,
          docstatus: true,
          documentType: true,
          documentation: true,
          editableGrid: true,
          emailAppendTo: true,
          engine: true,
          forceReRouteToDefaultView: true,
          hasWebView: true,
          hideToolbar: true,
          icon: true,
          id: true,
          idx: true,
          imageField: true,
          inCreate: true,
          indexWebPagesForSearch: true,
          isCalendarAndGantt: true,
          isPublishedField: true,
          isSubmittable: true,
          isTree: true,
          isVirtual: true,
          issingle: true,
          istable: true,
          lastUpdate: true,
          makeAttachmentsPublic: true,
          maxAttachments: true,
          menuIndex: true,
          migrationHash: true,
          modified: true,
          modifiedBy: true,
          moduleField: true,
          name: true,
          namingRule: true,
          nsmParentField: true,
          owner: true,
          parentNode: true,
          printOutline: true,
          queueInBackground: true,
          quickEntry: true,
          readOnly: true,
          restrictToDomain: true,
          route: true,
          searchFields: true,
          senderField: true,
          senderNameField: true,
          showNameInGlobalSearch: true,
          showPreviewPopup: true,
          showTitleFieldInLink: true,
          smallicon: true,
          sortField: true,
          sortOrder: true,
          subject: true,
          subjectField: true,
          tagFields: true,
          timelineField: true,
          titleField: true,
          trackChanges: true,
          trackSeen: true,
          trackViews: true,
          translatedDoctype: true,
          updatedAt: true,
          userTags: true,
          websiteSearchField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
