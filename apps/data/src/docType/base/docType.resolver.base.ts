/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocType } from "./DocType";
import { DocTypeCountArgs } from "./DocTypeCountArgs";
import { DocTypeFindManyArgs } from "./DocTypeFindManyArgs";
import { DocTypeFindUniqueArgs } from "./DocTypeFindUniqueArgs";
import { CreateDocTypeArgs } from "./CreateDocTypeArgs";
import { UpdateDocTypeArgs } from "./UpdateDocTypeArgs";
import { DeleteDocTypeArgs } from "./DeleteDocTypeArgs";
import { DocTypeService } from "../docType.service";
@graphql.Resolver(() => DocType)
export class DocTypeResolverBase {
  constructor(protected readonly service: DocTypeService) {}

  async _docTypesMeta(
    @graphql.Args() args: DocTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocType])
  async docTypes(
    @graphql.Args() args: DocTypeFindManyArgs
  ): Promise<DocType[]> {
    return this.service.docTypes(args);
  }

  @graphql.Query(() => DocType, { nullable: true })
  async docType(
    @graphql.Args() args: DocTypeFindUniqueArgs
  ): Promise<DocType | null> {
    const result = await this.service.docType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocType)
  async createDocType(
    @graphql.Args() args: CreateDocTypeArgs
  ): Promise<DocType> {
    return await this.service.createDocType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocType)
  async updateDocType(
    @graphql.Args() args: UpdateDocTypeArgs
  ): Promise<DocType | null> {
    try {
      return await this.service.updateDocType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocType)
  async deleteDocType(
    @graphql.Args() args: DeleteDocTypeArgs
  ): Promise<DocType | null> {
    try {
      return await this.service.deleteDocType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
