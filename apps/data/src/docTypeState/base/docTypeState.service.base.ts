/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DocTypeState as PrismaDocTypeState } from "@prisma/client";

export class DocTypeStateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocTypeStateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.docTypeState.count(args);
  }

  async docTypeStates(
    args: Prisma.DocTypeStateFindManyArgs
  ): Promise<PrismaDocTypeState[]> {
    return this.prisma.docTypeState.findMany(args);
  }
  async docTypeState(
    args: Prisma.DocTypeStateFindUniqueArgs
  ): Promise<PrismaDocTypeState | null> {
    return this.prisma.docTypeState.findUnique(args);
  }
  async createDocTypeState(
    args: Prisma.DocTypeStateCreateArgs
  ): Promise<PrismaDocTypeState> {
    return this.prisma.docTypeState.create(args);
  }
  async updateDocTypeState(
    args: Prisma.DocTypeStateUpdateArgs
  ): Promise<PrismaDocTypeState> {
    return this.prisma.docTypeState.update(args);
  }
  async deleteDocTypeState(
    args: Prisma.DocTypeStateDeleteArgs
  ): Promise<PrismaDocTypeState> {
    return this.prisma.docTypeState.delete(args);
  }
}
