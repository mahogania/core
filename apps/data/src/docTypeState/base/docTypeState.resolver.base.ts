/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocTypeState } from "./DocTypeState";
import { DocTypeStateCountArgs } from "./DocTypeStateCountArgs";
import { DocTypeStateFindManyArgs } from "./DocTypeStateFindManyArgs";
import { DocTypeStateFindUniqueArgs } from "./DocTypeStateFindUniqueArgs";
import { CreateDocTypeStateArgs } from "./CreateDocTypeStateArgs";
import { UpdateDocTypeStateArgs } from "./UpdateDocTypeStateArgs";
import { DeleteDocTypeStateArgs } from "./DeleteDocTypeStateArgs";
import { DocTypeStateService } from "../docTypeState.service";
@graphql.Resolver(() => DocTypeState)
export class DocTypeStateResolverBase {
  constructor(protected readonly service: DocTypeStateService) {}

  async _docTypeStatesMeta(
    @graphql.Args() args: DocTypeStateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocTypeState])
  async docTypeStates(
    @graphql.Args() args: DocTypeStateFindManyArgs
  ): Promise<DocTypeState[]> {
    return this.service.docTypeStates(args);
  }

  @graphql.Query(() => DocTypeState, { nullable: true })
  async docTypeState(
    @graphql.Args() args: DocTypeStateFindUniqueArgs
  ): Promise<DocTypeState | null> {
    const result = await this.service.docTypeState(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocTypeState)
  async createDocTypeState(
    @graphql.Args() args: CreateDocTypeStateArgs
  ): Promise<DocTypeState> {
    return await this.service.createDocTypeState({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocTypeState)
  async updateDocTypeState(
    @graphql.Args() args: UpdateDocTypeStateArgs
  ): Promise<DocTypeState | null> {
    try {
      return await this.service.updateDocTypeState({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocTypeState)
  async deleteDocTypeState(
    @graphql.Args() args: DeleteDocTypeStateArgs
  ): Promise<DocTypeState | null> {
    try {
      return await this.service.deleteDocTypeState(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
