/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocPerm } from "./DocPerm";
import { DocPermCountArgs } from "./DocPermCountArgs";
import { DocPermFindManyArgs } from "./DocPermFindManyArgs";
import { DocPermFindUniqueArgs } from "./DocPermFindUniqueArgs";
import { CreateDocPermArgs } from "./CreateDocPermArgs";
import { UpdateDocPermArgs } from "./UpdateDocPermArgs";
import { DeleteDocPermArgs } from "./DeleteDocPermArgs";
import { DocPermService } from "../docPerm.service";
@graphql.Resolver(() => DocPerm)
export class DocPermResolverBase {
  constructor(protected readonly service: DocPermService) {}

  async _docPermsMeta(
    @graphql.Args() args: DocPermCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocPerm])
  async docPerms(
    @graphql.Args() args: DocPermFindManyArgs
  ): Promise<DocPerm[]> {
    return this.service.docPerms(args);
  }

  @graphql.Query(() => DocPerm, { nullable: true })
  async docPerm(
    @graphql.Args() args: DocPermFindUniqueArgs
  ): Promise<DocPerm | null> {
    const result = await this.service.docPerm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocPerm)
  async createDocPerm(
    @graphql.Args() args: CreateDocPermArgs
  ): Promise<DocPerm> {
    return await this.service.createDocPerm({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocPerm)
  async updateDocPerm(
    @graphql.Args() args: UpdateDocPermArgs
  ): Promise<DocPerm | null> {
    try {
      return await this.service.updateDocPerm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocPerm)
  async deleteDocPerm(
    @graphql.Args() args: DeleteDocPermArgs
  ): Promise<DocPerm | null> {
    try {
      return await this.service.deleteDocPerm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
