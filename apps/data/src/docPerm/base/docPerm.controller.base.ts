/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocPermService } from "../docPerm.service";
import { DocPermCreateInput } from "./DocPermCreateInput";
import { DocPerm } from "./DocPerm";
import { DocPermFindManyArgs } from "./DocPermFindManyArgs";
import { DocPermWhereUniqueInput } from "./DocPermWhereUniqueInput";
import { DocPermUpdateInput } from "./DocPermUpdateInput";

export class DocPermControllerBase {
  constructor(protected readonly service: DocPermService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocPerm })
  async createDocPerm(
    @common.Body() data: DocPermCreateInput
  ): Promise<DocPerm> {
    return await this.service.createDocPerm({
      data: data,
      select: {
        amend: true,
        cancel: true,
        create: true,
        createdAt: true,
        creation: true,
        deleteField: true,
        docstatus: true,
        email: true,
        exportField: true,
        id: true,
        idx: true,
        ifOwner: true,
        importField: true,
        match: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        permlevel: true,
        print: true,
        read: true,
        report: true,
        role: true,
        select: true,
        share: true,
        submit: true,
        updatedAt: true,
        write: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocPerm] })
  @ApiNestedQuery(DocPermFindManyArgs)
  async docPerms(@common.Req() request: Request): Promise<DocPerm[]> {
    const args = plainToClass(DocPermFindManyArgs, request.query);
    return this.service.docPerms({
      ...args,
      select: {
        amend: true,
        cancel: true,
        create: true,
        createdAt: true,
        creation: true,
        deleteField: true,
        docstatus: true,
        email: true,
        exportField: true,
        id: true,
        idx: true,
        ifOwner: true,
        importField: true,
        match: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        permlevel: true,
        print: true,
        read: true,
        report: true,
        role: true,
        select: true,
        share: true,
        submit: true,
        updatedAt: true,
        write: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocPerm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async docPerm(
    @common.Param() params: DocPermWhereUniqueInput
  ): Promise<DocPerm | null> {
    const result = await this.service.docPerm({
      where: params,
      select: {
        amend: true,
        cancel: true,
        create: true,
        createdAt: true,
        creation: true,
        deleteField: true,
        docstatus: true,
        email: true,
        exportField: true,
        id: true,
        idx: true,
        ifOwner: true,
        importField: true,
        match: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        permlevel: true,
        print: true,
        read: true,
        report: true,
        role: true,
        select: true,
        share: true,
        submit: true,
        updatedAt: true,
        write: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocPerm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocPerm(
    @common.Param() params: DocPermWhereUniqueInput,
    @common.Body() data: DocPermUpdateInput
  ): Promise<DocPerm | null> {
    try {
      return await this.service.updateDocPerm({
        where: params,
        data: data,
        select: {
          amend: true,
          cancel: true,
          create: true,
          createdAt: true,
          creation: true,
          deleteField: true,
          docstatus: true,
          email: true,
          exportField: true,
          id: true,
          idx: true,
          ifOwner: true,
          importField: true,
          match: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          permlevel: true,
          print: true,
          read: true,
          report: true,
          role: true,
          select: true,
          share: true,
          submit: true,
          updatedAt: true,
          write: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocPerm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocPerm(
    @common.Param() params: DocPermWhereUniqueInput
  ): Promise<DocPerm | null> {
    try {
      return await this.service.deleteDocPerm({
        where: params,
        select: {
          amend: true,
          cancel: true,
          create: true,
          createdAt: true,
          creation: true,
          deleteField: true,
          docstatus: true,
          email: true,
          exportField: true,
          id: true,
          idx: true,
          ifOwner: true,
          importField: true,
          match: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          permlevel: true,
          print: true,
          read: true,
          report: true,
          role: true,
          select: true,
          share: true,
          submit: true,
          updatedAt: true,
          write: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
