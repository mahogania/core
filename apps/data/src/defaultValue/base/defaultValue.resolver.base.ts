/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DefaultValue } from "./DefaultValue";
import { DefaultValueCountArgs } from "./DefaultValueCountArgs";
import { DefaultValueFindManyArgs } from "./DefaultValueFindManyArgs";
import { DefaultValueFindUniqueArgs } from "./DefaultValueFindUniqueArgs";
import { CreateDefaultValueArgs } from "./CreateDefaultValueArgs";
import { UpdateDefaultValueArgs } from "./UpdateDefaultValueArgs";
import { DeleteDefaultValueArgs } from "./DeleteDefaultValueArgs";
import { DefaultValueService } from "../defaultValue.service";
@graphql.Resolver(() => DefaultValue)
export class DefaultValueResolverBase {
  constructor(protected readonly service: DefaultValueService) {}

  async _defaultValuesMeta(
    @graphql.Args() args: DefaultValueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DefaultValue])
  async defaultValues(
    @graphql.Args() args: DefaultValueFindManyArgs
  ): Promise<DefaultValue[]> {
    return this.service.defaultValues(args);
  }

  @graphql.Query(() => DefaultValue, { nullable: true })
  async defaultValue(
    @graphql.Args() args: DefaultValueFindUniqueArgs
  ): Promise<DefaultValue | null> {
    const result = await this.service.defaultValue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DefaultValue)
  async createDefaultValue(
    @graphql.Args() args: CreateDefaultValueArgs
  ): Promise<DefaultValue> {
    return await this.service.createDefaultValue({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DefaultValue)
  async updateDefaultValue(
    @graphql.Args() args: UpdateDefaultValueArgs
  ): Promise<DefaultValue | null> {
    try {
      return await this.service.updateDefaultValue({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DefaultValue)
  async deleteDefaultValue(
    @graphql.Args() args: DeleteDefaultValueArgs
  ): Promise<DefaultValue | null> {
    try {
      return await this.service.deleteDefaultValue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
