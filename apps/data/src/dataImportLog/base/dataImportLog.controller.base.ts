/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DataImportLogService } from "../dataImportLog.service";
import { DataImportLogCreateInput } from "./DataImportLogCreateInput";
import { DataImportLog } from "./DataImportLog";
import { DataImportLogFindManyArgs } from "./DataImportLogFindManyArgs";
import { DataImportLogWhereUniqueInput } from "./DataImportLogWhereUniqueInput";
import { DataImportLogUpdateInput } from "./DataImportLogUpdateInput";

export class DataImportLogControllerBase {
  constructor(protected readonly service: DataImportLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DataImportLog })
  async createDataImportLog(
    @common.Body() data: DataImportLogCreateInput
  ): Promise<DataImportLog> {
    return await this.service.createDataImportLog({
      data: {
        ...data,

        dataImport: data.dataImport
          ? {
              connect: data.dataImport,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        creation: true,

        dataImport: {
          select: {
            id: true,
          },
        },

        docname: true,
        docstatus: true,
        exception: true,
        id: true,
        idx: true,
        logIndex: true,
        messages: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rowIndexes: true,
        success: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DataImportLog] })
  @ApiNestedQuery(DataImportLogFindManyArgs)
  async dataImportLogs(
    @common.Req() request: Request
  ): Promise<DataImportLog[]> {
    const args = plainToClass(DataImportLogFindManyArgs, request.query);
    return this.service.dataImportLogs({
      ...args,
      select: {
        createdAt: true,
        creation: true,

        dataImport: {
          select: {
            id: true,
          },
        },

        docname: true,
        docstatus: true,
        exception: true,
        id: true,
        idx: true,
        logIndex: true,
        messages: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rowIndexes: true,
        success: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DataImportLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dataImportLog(
    @common.Param() params: DataImportLogWhereUniqueInput
  ): Promise<DataImportLog | null> {
    const result = await this.service.dataImportLog({
      where: params,
      select: {
        createdAt: true,
        creation: true,

        dataImport: {
          select: {
            id: true,
          },
        },

        docname: true,
        docstatus: true,
        exception: true,
        id: true,
        idx: true,
        logIndex: true,
        messages: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rowIndexes: true,
        success: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DataImportLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDataImportLog(
    @common.Param() params: DataImportLogWhereUniqueInput,
    @common.Body() data: DataImportLogUpdateInput
  ): Promise<DataImportLog | null> {
    try {
      return await this.service.updateDataImportLog({
        where: params,
        data: {
          ...data,

          dataImport: data.dataImport
            ? {
                connect: data.dataImport,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          creation: true,

          dataImport: {
            select: {
              id: true,
            },
          },

          docname: true,
          docstatus: true,
          exception: true,
          id: true,
          idx: true,
          logIndex: true,
          messages: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          rowIndexes: true,
          success: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DataImportLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDataImportLog(
    @common.Param() params: DataImportLogWhereUniqueInput
  ): Promise<DataImportLog | null> {
    try {
      return await this.service.deleteDataImportLog({
        where: params,
        select: {
          createdAt: true,
          creation: true,

          dataImport: {
            select: {
              id: true,
            },
          },

          docname: true,
          docstatus: true,
          exception: true,
          id: true,
          idx: true,
          logIndex: true,
          messages: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          rowIndexes: true,
          success: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
