/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DocTypeAction as PrismaDocTypeAction } from "@prisma/client";

export class DocTypeActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DocTypeActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.docTypeAction.count(args);
  }

  async docTypeActions(
    args: Prisma.DocTypeActionFindManyArgs
  ): Promise<PrismaDocTypeAction[]> {
    return this.prisma.docTypeAction.findMany(args);
  }
  async docTypeAction(
    args: Prisma.DocTypeActionFindUniqueArgs
  ): Promise<PrismaDocTypeAction | null> {
    return this.prisma.docTypeAction.findUnique(args);
  }
  async createDocTypeAction(
    args: Prisma.DocTypeActionCreateArgs
  ): Promise<PrismaDocTypeAction> {
    return this.prisma.docTypeAction.create(args);
  }
  async updateDocTypeAction(
    args: Prisma.DocTypeActionUpdateArgs
  ): Promise<PrismaDocTypeAction> {
    return this.prisma.docTypeAction.update(args);
  }
  async deleteDocTypeAction(
    args: Prisma.DocTypeActionDeleteArgs
  ): Promise<PrismaDocTypeAction> {
    return this.prisma.docTypeAction.delete(args);
  }
}
