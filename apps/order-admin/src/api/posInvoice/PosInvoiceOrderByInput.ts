import { SortOrder } from "../../util/SortOrder";

export type PosInvoiceOrderByInput = {
  accountForChangeAmount?: SortOrder;
  additionalDiscountPercentage?: SortOrder;
  addressDisplay?: SortOrder;
  againstIncomeAccount?: SortOrder;
  allocateAdvancesAutomatically?: SortOrder;
  amendedFrom?: SortOrder;
  amountEligibleForCommission?: SortOrder;
  applyDiscountOn?: SortOrder;
  autoRepeat?: SortOrder;
  baseChangeAmount?: SortOrder;
  baseDiscountAmount?: SortOrder;
  baseGrandTotal?: SortOrder;
  baseInWords?: SortOrder;
  baseNetTotal?: SortOrder;
  basePaidAmount?: SortOrder;
  baseRoundedTotal?: SortOrder;
  baseRoundingAdjustment?: SortOrder;
  baseTotal?: SortOrder;
  baseTotalTaxesAndCharges?: SortOrder;
  baseWriteOffAmount?: SortOrder;
  campaign?: SortOrder;
  cashBankAccount?: SortOrder;
  changeAmount?: SortOrder;
  commissionRate?: SortOrder;
  company?: SortOrder;
  companyAddress?: SortOrder;
  companyAddressDisplay?: SortOrder;
  consolidatedInvoice?: SortOrder;
  contactDisplay?: SortOrder;
  contactEmail?: SortOrder;
  contactMobile?: SortOrder;
  contactPerson?: SortOrder;
  conversionRate?: SortOrder;
  costCenter?: SortOrder;
  couponCode?: SortOrder;
  createdAt?: SortOrder;
  creation?: SortOrder;
  currency?: SortOrder;
  customer?: SortOrder;
  customerAddress?: SortOrder;
  customerGroup?: SortOrder;
  customerName?: SortOrder;
  debitTo?: SortOrder;
  discountAmount?: SortOrder;
  docStatus?: SortOrder;
  dueDate?: SortOrder;
  fromDate?: SortOrder;
  grandTotal?: SortOrder;
  groupSameItems?: SortOrder;
  id?: SortOrder;
  idx?: SortOrder;
  ignorePricingRule?: SortOrder;
  inWords?: SortOrder;
  interCompanyInvoiceReference?: SortOrder;
  isDiscounted?: SortOrder;
  isOpening?: SortOrder;
  isPos?: SortOrder;
  isReturn?: SortOrder;
  language?: SortOrder;
  letterHead?: SortOrder;
  loyaltyAmount?: SortOrder;
  loyaltyPoints?: SortOrder;
  loyaltyProgram?: SortOrder;
  loyaltyRedemptionAccount?: SortOrder;
  loyaltyRedemptionCostCenter?: SortOrder;
  modified?: SortOrder;
  modifiedBy?: SortOrder;
  name?: SortOrder;
  namingSeries?: SortOrder;
  netTotal?: SortOrder;
  otherChargesCalculation?: SortOrder;
  outstandingAmount?: SortOrder;
  owner?: SortOrder;
  paidAmount?: SortOrder;
  partyAccountCurrency?: SortOrder;
  paymentTermsTemplate?: SortOrder;
  plcConversionRate?: SortOrder;
  poDate?: SortOrder;
  poNo?: SortOrder;
  posProfile?: SortOrder;
  postingDate?: SortOrder;
  postingTime?: SortOrder;
  priceListCurrency?: SortOrder;
  project?: SortOrder;
  redeemLoyaltyPoints?: SortOrder;
  remarks?: SortOrder;
  returnAgainst?: SortOrder;
  roundedTotal?: SortOrder;
  roundingAdjustment?: SortOrder;
  salesPartner?: SortOrder;
  scanBarcode?: SortOrder;
  selectPrintHeading?: SortOrder;
  sellingPriceList?: SortOrder;
  setPostingTime?: SortOrder;
  setWarehouse?: SortOrder;
  shippingAddress?: SortOrder;
  shippingAddressName?: SortOrder;
  shippingRule?: SortOrder;
  source?: SortOrder;
  status?: SortOrder;
  taxCategory?: SortOrder;
  taxId?: SortOrder;
  taxesAndCharges?: SortOrder;
  tcName?: SortOrder;
  terms?: SortOrder;
  territory?: SortOrder;
  title?: SortOrder;
  toDate?: SortOrder;
  total?: SortOrder;
  totalAdvance?: SortOrder;
  totalBillingAmount?: SortOrder;
  totalCommission?: SortOrder;
  totalNetWeight?: SortOrder;
  totalQty?: SortOrder;
  totalTaxesAndCharges?: SortOrder;
  updateBilledAmountInDeliveryNote?: SortOrder;
  updateBilledAmountInSalesOrder?: SortOrder;
  updateStock?: SortOrder;
  updatedAt?: SortOrder;
  writeOffAccount?: SortOrder;
  writeOffAmount?: SortOrder;
  writeOffCostCenter?: SortOrder;
  writeOffOutstandingAmountAutomatically?: SortOrder;
};
