import { StringNullableFilter } from "../../util/StringNullableFilter";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringFilter } from "../../util/StringFilter";

export type SalesInvoiceWhereInput = {
  accountForChangeAmount?: StringNullableFilter;
  additionalDiscountAccount?: StringNullableFilter;
  additionalDiscountPercentage?: FloatNullableFilter;
  addressDisplay?: StringNullableFilter;
  againstIncomeAccount?: StringNullableFilter;
  allocateAdvancesAutomatically?: IntNullableFilter;
  amendedFrom?: StringNullableFilter;
  amountEligibleForCommission?: FloatNullableFilter;
  applyDiscountOn?: StringNullableFilter;
  autoRepeat?: StringNullableFilter;
  baseChangeAmount?: FloatNullableFilter;
  baseDiscountAmount?: FloatNullableFilter;
  baseGrandTotal?: FloatNullableFilter;
  baseInWords?: StringNullableFilter;
  baseNetTotal?: FloatNullableFilter;
  basePaidAmount?: FloatNullableFilter;
  baseRoundedTotal?: FloatNullableFilter;
  baseRoundingAdjustment?: FloatNullableFilter;
  baseTotal?: FloatNullableFilter;
  baseTotalTaxesAndCharges?: FloatNullableFilter;
  baseWriteOffAmount?: FloatNullableFilter;
  campaign?: StringNullableFilter;
  cashBankAccount?: StringNullableFilter;
  changeAmount?: FloatNullableFilter;
  commissionRate?: FloatNullableFilter;
  company?: StringNullableFilter;
  companyAddress?: StringNullableFilter;
  companyAddressDisplay?: StringNullableFilter;
  companyTaxId?: StringNullableFilter;
  contactDisplay?: StringNullableFilter;
  contactEmail?: StringNullableFilter;
  contactMobile?: StringNullableFilter;
  contactPerson?: StringNullableFilter;
  conversionRate?: FloatNullableFilter;
  costCenter?: StringNullableFilter;
  creation?: DateTimeNullableFilter;
  currency?: StringNullableFilter;
  customer?: StringNullableFilter;
  customerAddress?: StringNullableFilter;
  customerGroup?: StringNullableFilter;
  customerName?: StringNullableFilter;
  debitTo?: StringNullableFilter;
  disableRoundedTotal?: IntNullableFilter;
  discountAmount?: FloatNullableFilter;
  dispatchAddress?: StringNullableFilter;
  dispatchAddressName?: StringNullableFilter;
  docstatus?: IntNullableFilter;
  dueDate?: DateTimeNullableFilter;
  fromDate?: DateTimeNullableFilter;
  grandTotal?: FloatNullableFilter;
  groupSameItems?: IntNullableFilter;
  id?: StringFilter;
  idx?: IntNullableFilter;
  ignoreDefaultPaymentTermsTemplate?: IntNullableFilter;
  ignorePricingRule?: IntNullableFilter;
  inWords?: StringNullableFilter;
  incoterm?: StringNullableFilter;
  interCompanyInvoiceReference?: StringNullableFilter;
  isCashOrNonTradeDiscount?: IntNullableFilter;
  isConsolidated?: IntNullableFilter;
  isDebitNote?: IntNullableFilter;
  isDiscounted?: IntNullableFilter;
  isInternalCustomer?: IntNullableFilter;
  isOpening?: StringNullableFilter;
  isPos?: IntNullableFilter;
  isReturn?: IntNullableFilter;
  language?: StringNullableFilter;
  letterHead?: StringNullableFilter;
  loyaltyAmount?: FloatNullableFilter;
  loyaltyPoints?: IntNullableFilter;
  loyaltyProgram?: StringNullableFilter;
  loyaltyRedemptionAccount?: StringNullableFilter;
  loyaltyRedemptionCostCenter?: StringNullableFilter;
  modified?: DateTimeNullableFilter;
  modifiedBy?: StringNullableFilter;
  name?: StringNullableFilter;
  namedPlace?: StringNullableFilter;
  namingSeries?: StringNullableFilter;
  netTotal?: FloatNullableFilter;
  onlyIncludeAllocatedPayments?: IntNullableFilter;
  otherChargesCalculation?: StringNullableFilter;
  outstandingAmount?: FloatNullableFilter;
  owner?: StringNullableFilter;
  paidAmount?: FloatNullableFilter;
  partyAccountCurrency?: StringNullableFilter;
  paymentTermsTemplate?: StringNullableFilter;
  plcConversionRate?: FloatNullableFilter;
  poDate?: DateTimeNullableFilter;
  poNo?: StringNullableFilter;
  posProfile?: StringNullableFilter;
  postingDate?: DateTimeNullableFilter;
  postingTime?: StringNullableFilter;
  priceListCurrency?: StringNullableFilter;
  project?: StringNullableFilter;
  redeemLoyaltyPoints?: IntNullableFilter;
  remarks?: StringNullableFilter;
  representsCompany?: StringNullableFilter;
  returnAgainst?: StringNullableFilter;
  roundedTotal?: FloatNullableFilter;
  roundingAdjustment?: FloatNullableFilter;
  salesPartner?: StringNullableFilter;
  scanBarcode?: StringNullableFilter;
  selectPrintHeading?: StringNullableFilter;
  sellingPriceList?: StringNullableFilter;
  setPostingTime?: IntNullableFilter;
  setTargetWarehouse?: StringNullableFilter;
  setWarehouse?: StringNullableFilter;
  shippingAddress?: StringNullableFilter;
  shippingAddressName?: StringNullableFilter;
  shippingRule?: StringNullableFilter;
  source?: StringNullableFilter;
  status?: StringNullableFilter;
  subscription?: StringNullableFilter;
  taxCategory?: StringNullableFilter;
  taxId?: StringNullableFilter;
  taxesAndCharges?: StringNullableFilter;
  tcName?: StringNullableFilter;
  terms?: StringNullableFilter;
  territory?: StringNullableFilter;
  title?: StringNullableFilter;
  toDate?: DateTimeNullableFilter;
  total?: FloatNullableFilter;
  totalAdvance?: FloatNullableFilter;
  totalBillingAmount?: FloatNullableFilter;
  totalBillingHours?: FloatNullableFilter;
  totalCommission?: FloatNullableFilter;
  totalNetWeight?: FloatNullableFilter;
  totalQty?: FloatNullableFilter;
  totalTaxesAndCharges?: FloatNullableFilter;
  unrealizedProfitLossAccount?: StringNullableFilter;
  updateBilledAmountInDeliveryNote?: IntNullableFilter;
  updateBilledAmountInSalesOrder?: IntNullableFilter;
  updateOutstandingForSelf?: IntNullableFilter;
  updateStock?: IntNullableFilter;
  useCompanyRoundoffCostCenter?: IntNullableFilter;
  writeOffAccount?: StringNullableFilter;
  writeOffAmount?: FloatNullableFilter;
  writeOffCostCenter?: StringNullableFilter;
  writeOffOutstandingAmountAutomatically?: IntNullableFilter;
};
