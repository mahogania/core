/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankGuaranteeService } from "../bankGuarantee.service";
import { BankGuaranteeCreateInput } from "./BankGuaranteeCreateInput";
import { BankGuarantee } from "./BankGuarantee";
import { BankGuaranteeFindManyArgs } from "./BankGuaranteeFindManyArgs";
import { BankGuaranteeWhereUniqueInput } from "./BankGuaranteeWhereUniqueInput";
import { BankGuaranteeUpdateInput } from "./BankGuaranteeUpdateInput";

export class BankGuaranteeControllerBase {
  constructor(protected readonly service: BankGuaranteeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankGuarantee })
  async createBankGuarantee(
    @common.Body() data: BankGuaranteeCreateInput
  ): Promise<BankGuarantee> {
    return await this.service.createBankGuarantee({
      data: data,
      select: {
        account: true,
        amendedFrom: true,
        amount: true,
        bank: true,
        bankAccount: true,
        bankAccountNo: true,
        bankGuaranteeNumber: true,
        bgType: true,
        branchCode: true,
        charges: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        endDate: true,
        fixedDepositNumber: true,
        iban: true,
        id: true,
        idx: true,
        marginMoney: true,
        modified: true,
        modifiedBy: true,
        moreInformation: true,
        name: true,
        nameOfBeneficiary: true,
        owner: true,
        project: true,
        referenceDocname: true,
        referenceDoctype: true,
        startDate: true,
        supplier: true,
        swiftNumber: true,
        updatedAt: true,
        validity: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankGuarantee] })
  @ApiNestedQuery(BankGuaranteeFindManyArgs)
  async bankGuarantees(
    @common.Req() request: Request
  ): Promise<BankGuarantee[]> {
    const args = plainToClass(BankGuaranteeFindManyArgs, request.query);
    return this.service.bankGuarantees({
      ...args,
      select: {
        account: true,
        amendedFrom: true,
        amount: true,
        bank: true,
        bankAccount: true,
        bankAccountNo: true,
        bankGuaranteeNumber: true,
        bgType: true,
        branchCode: true,
        charges: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        endDate: true,
        fixedDepositNumber: true,
        iban: true,
        id: true,
        idx: true,
        marginMoney: true,
        modified: true,
        modifiedBy: true,
        moreInformation: true,
        name: true,
        nameOfBeneficiary: true,
        owner: true,
        project: true,
        referenceDocname: true,
        referenceDoctype: true,
        startDate: true,
        supplier: true,
        swiftNumber: true,
        updatedAt: true,
        validity: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankGuarantee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankGuarantee(
    @common.Param() params: BankGuaranteeWhereUniqueInput
  ): Promise<BankGuarantee | null> {
    const result = await this.service.bankGuarantee({
      where: params,
      select: {
        account: true,
        amendedFrom: true,
        amount: true,
        bank: true,
        bankAccount: true,
        bankAccountNo: true,
        bankGuaranteeNumber: true,
        bgType: true,
        branchCode: true,
        charges: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        endDate: true,
        fixedDepositNumber: true,
        iban: true,
        id: true,
        idx: true,
        marginMoney: true,
        modified: true,
        modifiedBy: true,
        moreInformation: true,
        name: true,
        nameOfBeneficiary: true,
        owner: true,
        project: true,
        referenceDocname: true,
        referenceDoctype: true,
        startDate: true,
        supplier: true,
        swiftNumber: true,
        updatedAt: true,
        validity: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankGuarantee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankGuarantee(
    @common.Param() params: BankGuaranteeWhereUniqueInput,
    @common.Body() data: BankGuaranteeUpdateInput
  ): Promise<BankGuarantee | null> {
    try {
      return await this.service.updateBankGuarantee({
        where: params,
        data: data,
        select: {
          account: true,
          amendedFrom: true,
          amount: true,
          bank: true,
          bankAccount: true,
          bankAccountNo: true,
          bankGuaranteeNumber: true,
          bgType: true,
          branchCode: true,
          charges: true,
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          endDate: true,
          fixedDepositNumber: true,
          iban: true,
          id: true,
          idx: true,
          marginMoney: true,
          modified: true,
          modifiedBy: true,
          moreInformation: true,
          name: true,
          nameOfBeneficiary: true,
          owner: true,
          project: true,
          referenceDocname: true,
          referenceDoctype: true,
          startDate: true,
          supplier: true,
          swiftNumber: true,
          updatedAt: true,
          validity: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankGuarantee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankGuarantee(
    @common.Param() params: BankGuaranteeWhereUniqueInput
  ): Promise<BankGuarantee | null> {
    try {
      return await this.service.deleteBankGuarantee({
        where: params,
        select: {
          account: true,
          amendedFrom: true,
          amount: true,
          bank: true,
          bankAccount: true,
          bankAccountNo: true,
          bankGuaranteeNumber: true,
          bgType: true,
          branchCode: true,
          charges: true,
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          endDate: true,
          fixedDepositNumber: true,
          iban: true,
          id: true,
          idx: true,
          marginMoney: true,
          modified: true,
          modifiedBy: true,
          moreInformation: true,
          name: true,
          nameOfBeneficiary: true,
          owner: true,
          project: true,
          referenceDocname: true,
          referenceDoctype: true,
          startDate: true,
          supplier: true,
          swiftNumber: true,
          updatedAt: true,
          validity: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
