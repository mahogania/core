/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BankGuarantee } from "./BankGuarantee";
import { BankGuaranteeCountArgs } from "./BankGuaranteeCountArgs";
import { BankGuaranteeFindManyArgs } from "./BankGuaranteeFindManyArgs";
import { BankGuaranteeFindUniqueArgs } from "./BankGuaranteeFindUniqueArgs";
import { CreateBankGuaranteeArgs } from "./CreateBankGuaranteeArgs";
import { UpdateBankGuaranteeArgs } from "./UpdateBankGuaranteeArgs";
import { DeleteBankGuaranteeArgs } from "./DeleteBankGuaranteeArgs";
import { BankGuaranteeService } from "../bankGuarantee.service";
@graphql.Resolver(() => BankGuarantee)
export class BankGuaranteeResolverBase {
  constructor(protected readonly service: BankGuaranteeService) {}

  async _bankGuaranteesMeta(
    @graphql.Args() args: BankGuaranteeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BankGuarantee])
  async bankGuarantees(
    @graphql.Args() args: BankGuaranteeFindManyArgs
  ): Promise<BankGuarantee[]> {
    return this.service.bankGuarantees(args);
  }

  @graphql.Query(() => BankGuarantee, { nullable: true })
  async bankGuarantee(
    @graphql.Args() args: BankGuaranteeFindUniqueArgs
  ): Promise<BankGuarantee | null> {
    const result = await this.service.bankGuarantee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BankGuarantee)
  async createBankGuarantee(
    @graphql.Args() args: CreateBankGuaranteeArgs
  ): Promise<BankGuarantee> {
    return await this.service.createBankGuarantee({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BankGuarantee)
  async updateBankGuarantee(
    @graphql.Args() args: UpdateBankGuaranteeArgs
  ): Promise<BankGuarantee | null> {
    try {
      return await this.service.updateBankGuarantee({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BankGuarantee)
  async deleteBankGuarantee(
    @graphql.Args() args: DeleteBankGuaranteeArgs
  ): Promise<BankGuarantee | null> {
    try {
      return await this.service.deleteBankGuarantee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
