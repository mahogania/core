/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankAccountSubtypeService } from "../bankAccountSubtype.service";
import { BankAccountSubtypeCreateInput } from "./BankAccountSubtypeCreateInput";
import { BankAccountSubtype } from "./BankAccountSubtype";
import { BankAccountSubtypeFindManyArgs } from "./BankAccountSubtypeFindManyArgs";
import { BankAccountSubtypeWhereUniqueInput } from "./BankAccountSubtypeWhereUniqueInput";
import { BankAccountSubtypeUpdateInput } from "./BankAccountSubtypeUpdateInput";

export class BankAccountSubtypeControllerBase {
  constructor(protected readonly service: BankAccountSubtypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankAccountSubtype })
  async createBankAccountSubtype(
    @common.Body() data: BankAccountSubtypeCreateInput
  ): Promise<BankAccountSubtype> {
    return await this.service.createBankAccountSubtype({
      data: data,
      select: {
        accountSubtype: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankAccountSubtype] })
  @ApiNestedQuery(BankAccountSubtypeFindManyArgs)
  async bankAccountSubtypes(
    @common.Req() request: Request
  ): Promise<BankAccountSubtype[]> {
    const args = plainToClass(BankAccountSubtypeFindManyArgs, request.query);
    return this.service.bankAccountSubtypes({
      ...args,
      select: {
        accountSubtype: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankAccountSubtype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankAccountSubtype(
    @common.Param() params: BankAccountSubtypeWhereUniqueInput
  ): Promise<BankAccountSubtype | null> {
    const result = await this.service.bankAccountSubtype({
      where: params,
      select: {
        accountSubtype: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankAccountSubtype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankAccountSubtype(
    @common.Param() params: BankAccountSubtypeWhereUniqueInput,
    @common.Body() data: BankAccountSubtypeUpdateInput
  ): Promise<BankAccountSubtype | null> {
    try {
      return await this.service.updateBankAccountSubtype({
        where: params,
        data: data,
        select: {
          accountSubtype: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankAccountSubtype })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankAccountSubtype(
    @common.Param() params: BankAccountSubtypeWhereUniqueInput
  ): Promise<BankAccountSubtype | null> {
    try {
      return await this.service.deleteBankAccountSubtype({
        where: params,
        select: {
          accountSubtype: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
