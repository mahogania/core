/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BankAccountSubtype } from "./BankAccountSubtype";
import { BankAccountSubtypeCountArgs } from "./BankAccountSubtypeCountArgs";
import { BankAccountSubtypeFindManyArgs } from "./BankAccountSubtypeFindManyArgs";
import { BankAccountSubtypeFindUniqueArgs } from "./BankAccountSubtypeFindUniqueArgs";
import { CreateBankAccountSubtypeArgs } from "./CreateBankAccountSubtypeArgs";
import { UpdateBankAccountSubtypeArgs } from "./UpdateBankAccountSubtypeArgs";
import { DeleteBankAccountSubtypeArgs } from "./DeleteBankAccountSubtypeArgs";
import { BankAccountSubtypeService } from "../bankAccountSubtype.service";
@graphql.Resolver(() => BankAccountSubtype)
export class BankAccountSubtypeResolverBase {
  constructor(protected readonly service: BankAccountSubtypeService) {}

  async _bankAccountSubtypesMeta(
    @graphql.Args() args: BankAccountSubtypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BankAccountSubtype])
  async bankAccountSubtypes(
    @graphql.Args() args: BankAccountSubtypeFindManyArgs
  ): Promise<BankAccountSubtype[]> {
    return this.service.bankAccountSubtypes(args);
  }

  @graphql.Query(() => BankAccountSubtype, { nullable: true })
  async bankAccountSubtype(
    @graphql.Args() args: BankAccountSubtypeFindUniqueArgs
  ): Promise<BankAccountSubtype | null> {
    const result = await this.service.bankAccountSubtype(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BankAccountSubtype)
  async createBankAccountSubtype(
    @graphql.Args() args: CreateBankAccountSubtypeArgs
  ): Promise<BankAccountSubtype> {
    return await this.service.createBankAccountSubtype({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BankAccountSubtype)
  async updateBankAccountSubtype(
    @graphql.Args() args: UpdateBankAccountSubtypeArgs
  ): Promise<BankAccountSubtype | null> {
    try {
      return await this.service.updateBankAccountSubtype({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BankAccountSubtype)
  async deleteBankAccountSubtype(
    @graphql.Args() args: DeleteBankAccountSubtypeArgs
  ): Promise<BankAccountSubtype | null> {
    try {
      return await this.service.deleteBankAccountSubtype(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
