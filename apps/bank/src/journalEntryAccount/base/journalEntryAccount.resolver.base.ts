/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JournalEntryAccount } from "./JournalEntryAccount";
import { JournalEntryAccountCountArgs } from "./JournalEntryAccountCountArgs";
import { JournalEntryAccountFindManyArgs } from "./JournalEntryAccountFindManyArgs";
import { JournalEntryAccountFindUniqueArgs } from "./JournalEntryAccountFindUniqueArgs";
import { CreateJournalEntryAccountArgs } from "./CreateJournalEntryAccountArgs";
import { UpdateJournalEntryAccountArgs } from "./UpdateJournalEntryAccountArgs";
import { DeleteJournalEntryAccountArgs } from "./DeleteJournalEntryAccountArgs";
import { JournalEntryAccountService } from "../journalEntryAccount.service";
@graphql.Resolver(() => JournalEntryAccount)
export class JournalEntryAccountResolverBase {
  constructor(protected readonly service: JournalEntryAccountService) {}

  async _journalEntryAccountsMeta(
    @graphql.Args() args: JournalEntryAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JournalEntryAccount])
  async journalEntryAccounts(
    @graphql.Args() args: JournalEntryAccountFindManyArgs
  ): Promise<JournalEntryAccount[]> {
    return this.service.journalEntryAccounts(args);
  }

  @graphql.Query(() => JournalEntryAccount, { nullable: true })
  async journalEntryAccount(
    @graphql.Args() args: JournalEntryAccountFindUniqueArgs
  ): Promise<JournalEntryAccount | null> {
    const result = await this.service.journalEntryAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JournalEntryAccount)
  async createJournalEntryAccount(
    @graphql.Args() args: CreateJournalEntryAccountArgs
  ): Promise<JournalEntryAccount> {
    return await this.service.createJournalEntryAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JournalEntryAccount)
  async updateJournalEntryAccount(
    @graphql.Args() args: UpdateJournalEntryAccountArgs
  ): Promise<JournalEntryAccount | null> {
    try {
      return await this.service.updateJournalEntryAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JournalEntryAccount)
  async deleteJournalEntryAccount(
    @graphql.Args() args: DeleteJournalEntryAccountArgs
  ): Promise<JournalEntryAccount | null> {
    try {
      return await this.service.deleteJournalEntryAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
