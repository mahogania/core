/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bank } from "./Bank";
import { BankCountArgs } from "./BankCountArgs";
import { BankFindManyArgs } from "./BankFindManyArgs";
import { BankFindUniqueArgs } from "./BankFindUniqueArgs";
import { CreateBankArgs } from "./CreateBankArgs";
import { UpdateBankArgs } from "./UpdateBankArgs";
import { DeleteBankArgs } from "./DeleteBankArgs";
import { BankService } from "../bank.service";
@graphql.Resolver(() => Bank)
export class BankResolverBase {
  constructor(protected readonly service: BankService) {}

  async _banksMeta(
    @graphql.Args() args: BankCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bank])
  async banks(@graphql.Args() args: BankFindManyArgs): Promise<Bank[]> {
    return this.service.banks(args);
  }

  @graphql.Query(() => Bank, { nullable: true })
  async bank(@graphql.Args() args: BankFindUniqueArgs): Promise<Bank | null> {
    const result = await this.service.bank(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bank)
  async createBank(@graphql.Args() args: CreateBankArgs): Promise<Bank> {
    return await this.service.createBank({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bank)
  async updateBank(@graphql.Args() args: UpdateBankArgs): Promise<Bank | null> {
    try {
      return await this.service.updateBank({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bank)
  async deleteBank(@graphql.Args() args: DeleteBankArgs): Promise<Bank | null> {
    try {
      return await this.service.deleteBank(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
