/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankService } from "../bank.service";
import { BankCreateInput } from "./BankCreateInput";
import { Bank } from "./Bank";
import { BankFindManyArgs } from "./BankFindManyArgs";
import { BankWhereUniqueInput } from "./BankWhereUniqueInput";
import { BankUpdateInput } from "./BankUpdateInput";

export class BankControllerBase {
  constructor(protected readonly service: BankService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bank })
  async createBank(@common.Body() data: BankCreateInput): Promise<Bank> {
    return await this.service.createBank({
      data: data,
      select: {
        bankName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        plaidAccessToken: true,
        swiftNumber: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bank] })
  @ApiNestedQuery(BankFindManyArgs)
  async banks(@common.Req() request: Request): Promise<Bank[]> {
    const args = plainToClass(BankFindManyArgs, request.query);
    return this.service.banks({
      ...args,
      select: {
        bankName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        plaidAccessToken: true,
        swiftNumber: true,
        updatedAt: true,
        website: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bank(
    @common.Param() params: BankWhereUniqueInput
  ): Promise<Bank | null> {
    const result = await this.service.bank({
      where: params,
      select: {
        bankName: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        plaidAccessToken: true,
        swiftNumber: true,
        updatedAt: true,
        website: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBank(
    @common.Param() params: BankWhereUniqueInput,
    @common.Body() data: BankUpdateInput
  ): Promise<Bank | null> {
    try {
      return await this.service.updateBank({
        where: params,
        data: data,
        select: {
          bankName: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          plaidAccessToken: true,
          swiftNumber: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bank })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBank(
    @common.Param() params: BankWhereUniqueInput
  ): Promise<Bank | null> {
    try {
      return await this.service.deleteBank({
        where: params,
        select: {
          bankName: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          plaidAccessToken: true,
          swiftNumber: true,
          updatedAt: true,
          website: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
