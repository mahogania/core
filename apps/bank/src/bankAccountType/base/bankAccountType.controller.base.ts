/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankAccountTypeService } from "../bankAccountType.service";
import { BankAccountTypeCreateInput } from "./BankAccountTypeCreateInput";
import { BankAccountType } from "./BankAccountType";
import { BankAccountTypeFindManyArgs } from "./BankAccountTypeFindManyArgs";
import { BankAccountTypeWhereUniqueInput } from "./BankAccountTypeWhereUniqueInput";
import { BankAccountTypeUpdateInput } from "./BankAccountTypeUpdateInput";

export class BankAccountTypeControllerBase {
  constructor(protected readonly service: BankAccountTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankAccountType })
  async createBankAccountType(
    @common.Body() data: BankAccountTypeCreateInput
  ): Promise<BankAccountType> {
    return await this.service.createBankAccountType({
      data: data,
      select: {
        accountType: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankAccountType] })
  @ApiNestedQuery(BankAccountTypeFindManyArgs)
  async bankAccountTypes(
    @common.Req() request: Request
  ): Promise<BankAccountType[]> {
    const args = plainToClass(BankAccountTypeFindManyArgs, request.query);
    return this.service.bankAccountTypes({
      ...args,
      select: {
        accountType: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankAccountType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankAccountType(
    @common.Param() params: BankAccountTypeWhereUniqueInput
  ): Promise<BankAccountType | null> {
    const result = await this.service.bankAccountType({
      where: params,
      select: {
        accountType: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankAccountType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankAccountType(
    @common.Param() params: BankAccountTypeWhereUniqueInput,
    @common.Body() data: BankAccountTypeUpdateInput
  ): Promise<BankAccountType | null> {
    try {
      return await this.service.updateBankAccountType({
        where: params,
        data: data,
        select: {
          accountType: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankAccountType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankAccountType(
    @common.Param() params: BankAccountTypeWhereUniqueInput
  ): Promise<BankAccountType | null> {
    try {
      return await this.service.deleteBankAccountType({
        where: params,
        select: {
          accountType: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
