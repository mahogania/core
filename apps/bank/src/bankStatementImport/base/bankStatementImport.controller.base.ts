/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankStatementImportService } from "../bankStatementImport.service";
import { BankStatementImportCreateInput } from "./BankStatementImportCreateInput";
import { BankStatementImport } from "./BankStatementImport";
import { BankStatementImportFindManyArgs } from "./BankStatementImportFindManyArgs";
import { BankStatementImportWhereUniqueInput } from "./BankStatementImportWhereUniqueInput";
import { BankStatementImportUpdateInput } from "./BankStatementImportUpdateInput";

export class BankStatementImportControllerBase {
  constructor(protected readonly service: BankStatementImportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankStatementImport })
  async createBankStatementImport(
    @common.Body() data: BankStatementImportCreateInput
  ): Promise<BankStatementImport> {
    return await this.service.createBankStatementImport({
      data: data,
      select: {
        bank: true,
        bankAccount: true,
        company: true,
        createdAt: true,
        creation: true,
        customDelimiters: true,
        delimiterOptions: true,
        docstatus: true,
        googleSheetsUrl: true,
        id: true,
        idx: true,
        importFile: true,
        importType: true,
        modified: true,
        modifiedBy: true,
        muteEmails: true,
        name: true,
        owner: true,
        referenceDoctype: true,
        showFailedLogs: true,
        status: true,
        submitAfterImport: true,
        templateOptions: true,
        templateWarnings: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankStatementImport] })
  @ApiNestedQuery(BankStatementImportFindManyArgs)
  async bankStatementImports(
    @common.Req() request: Request
  ): Promise<BankStatementImport[]> {
    const args = plainToClass(BankStatementImportFindManyArgs, request.query);
    return this.service.bankStatementImports({
      ...args,
      select: {
        bank: true,
        bankAccount: true,
        company: true,
        createdAt: true,
        creation: true,
        customDelimiters: true,
        delimiterOptions: true,
        docstatus: true,
        googleSheetsUrl: true,
        id: true,
        idx: true,
        importFile: true,
        importType: true,
        modified: true,
        modifiedBy: true,
        muteEmails: true,
        name: true,
        owner: true,
        referenceDoctype: true,
        showFailedLogs: true,
        status: true,
        submitAfterImport: true,
        templateOptions: true,
        templateWarnings: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankStatementImport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankStatementImport(
    @common.Param() params: BankStatementImportWhereUniqueInput
  ): Promise<BankStatementImport | null> {
    const result = await this.service.bankStatementImport({
      where: params,
      select: {
        bank: true,
        bankAccount: true,
        company: true,
        createdAt: true,
        creation: true,
        customDelimiters: true,
        delimiterOptions: true,
        docstatus: true,
        googleSheetsUrl: true,
        id: true,
        idx: true,
        importFile: true,
        importType: true,
        modified: true,
        modifiedBy: true,
        muteEmails: true,
        name: true,
        owner: true,
        referenceDoctype: true,
        showFailedLogs: true,
        status: true,
        submitAfterImport: true,
        templateOptions: true,
        templateWarnings: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankStatementImport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankStatementImport(
    @common.Param() params: BankStatementImportWhereUniqueInput,
    @common.Body() data: BankStatementImportUpdateInput
  ): Promise<BankStatementImport | null> {
    try {
      return await this.service.updateBankStatementImport({
        where: params,
        data: data,
        select: {
          bank: true,
          bankAccount: true,
          company: true,
          createdAt: true,
          creation: true,
          customDelimiters: true,
          delimiterOptions: true,
          docstatus: true,
          googleSheetsUrl: true,
          id: true,
          idx: true,
          importFile: true,
          importType: true,
          modified: true,
          modifiedBy: true,
          muteEmails: true,
          name: true,
          owner: true,
          referenceDoctype: true,
          showFailedLogs: true,
          status: true,
          submitAfterImport: true,
          templateOptions: true,
          templateWarnings: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankStatementImport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankStatementImport(
    @common.Param() params: BankStatementImportWhereUniqueInput
  ): Promise<BankStatementImport | null> {
    try {
      return await this.service.deleteBankStatementImport({
        where: params,
        select: {
          bank: true,
          bankAccount: true,
          company: true,
          createdAt: true,
          creation: true,
          customDelimiters: true,
          delimiterOptions: true,
          docstatus: true,
          googleSheetsUrl: true,
          id: true,
          idx: true,
          importFile: true,
          importType: true,
          modified: true,
          modifiedBy: true,
          muteEmails: true,
          name: true,
          owner: true,
          referenceDoctype: true,
          showFailedLogs: true,
          status: true,
          submitAfterImport: true,
          templateOptions: true,
          templateWarnings: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
