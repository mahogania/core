/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BankStatementImport as PrismaBankStatementImport,
} from "@prisma/client";

export class BankStatementImportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankStatementImportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankStatementImport.count(args);
  }

  async bankStatementImports(
    args: Prisma.BankStatementImportFindManyArgs
  ): Promise<PrismaBankStatementImport[]> {
    return this.prisma.bankStatementImport.findMany(args);
  }
  async bankStatementImport(
    args: Prisma.BankStatementImportFindUniqueArgs
  ): Promise<PrismaBankStatementImport | null> {
    return this.prisma.bankStatementImport.findUnique(args);
  }
  async createBankStatementImport(
    args: Prisma.BankStatementImportCreateArgs
  ): Promise<PrismaBankStatementImport> {
    return this.prisma.bankStatementImport.create(args);
  }
  async updateBankStatementImport(
    args: Prisma.BankStatementImportUpdateArgs
  ): Promise<PrismaBankStatementImport> {
    return this.prisma.bankStatementImport.update(args);
  }
  async deleteBankStatementImport(
    args: Prisma.BankStatementImportDeleteArgs
  ): Promise<PrismaBankStatementImport> {
    return this.prisma.bankStatementImport.delete(args);
  }
}
