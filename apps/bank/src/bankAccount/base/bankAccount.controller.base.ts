/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankAccountService } from "../bankAccount.service";
import { BankAccountCreateInput } from "./BankAccountCreateInput";
import { BankAccount } from "./BankAccount";
import { BankAccountFindManyArgs } from "./BankAccountFindManyArgs";
import { BankAccountWhereUniqueInput } from "./BankAccountWhereUniqueInput";
import { BankAccountUpdateInput } from "./BankAccountUpdateInput";

export class BankAccountControllerBase {
  constructor(protected readonly service: BankAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankAccount })
  async createBankAccount(
    @common.Body() data: BankAccountCreateInput
  ): Promise<BankAccount> {
    return await this.service.createBankAccount({
      data: data,
      select: {
        account: true,
        accountName: true,
        accountSubtype: true,
        accountType: true,
        bank: true,
        bankAccountNo: true,
        branchCode: true,
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        iban: true,
        id: true,
        idx: true,
        integrationId: true,
        isCompanyAccount: true,
        isDefault: true,
        lastIntegrationDate: true,
        mask: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        party: true,
        partyType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankAccount] })
  @ApiNestedQuery(BankAccountFindManyArgs)
  async bankAccounts(@common.Req() request: Request): Promise<BankAccount[]> {
    const args = plainToClass(BankAccountFindManyArgs, request.query);
    return this.service.bankAccounts({
      ...args,
      select: {
        account: true,
        accountName: true,
        accountSubtype: true,
        accountType: true,
        bank: true,
        bankAccountNo: true,
        branchCode: true,
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        iban: true,
        id: true,
        idx: true,
        integrationId: true,
        isCompanyAccount: true,
        isDefault: true,
        lastIntegrationDate: true,
        mask: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        party: true,
        partyType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankAccount(
    @common.Param() params: BankAccountWhereUniqueInput
  ): Promise<BankAccount | null> {
    const result = await this.service.bankAccount({
      where: params,
      select: {
        account: true,
        accountName: true,
        accountSubtype: true,
        accountType: true,
        bank: true,
        bankAccountNo: true,
        branchCode: true,
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        iban: true,
        id: true,
        idx: true,
        integrationId: true,
        isCompanyAccount: true,
        isDefault: true,
        lastIntegrationDate: true,
        mask: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        party: true,
        partyType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankAccount(
    @common.Param() params: BankAccountWhereUniqueInput,
    @common.Body() data: BankAccountUpdateInput
  ): Promise<BankAccount | null> {
    try {
      return await this.service.updateBankAccount({
        where: params,
        data: data,
        select: {
          account: true,
          accountName: true,
          accountSubtype: true,
          accountType: true,
          bank: true,
          bankAccountNo: true,
          branchCode: true,
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          iban: true,
          id: true,
          idx: true,
          integrationId: true,
          isCompanyAccount: true,
          isDefault: true,
          lastIntegrationDate: true,
          mask: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          party: true,
          partyType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankAccount(
    @common.Param() params: BankAccountWhereUniqueInput
  ): Promise<BankAccount | null> {
    try {
      return await this.service.deleteBankAccount({
        where: params,
        select: {
          account: true,
          accountName: true,
          accountSubtype: true,
          accountType: true,
          bank: true,
          bankAccountNo: true,
          branchCode: true,
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          iban: true,
          id: true,
          idx: true,
          integrationId: true,
          isCompanyAccount: true,
          isDefault: true,
          lastIntegrationDate: true,
          mask: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          party: true,
          partyType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
