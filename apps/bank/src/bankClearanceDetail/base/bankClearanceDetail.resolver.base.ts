/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BankClearanceDetail } from "./BankClearanceDetail";
import { BankClearanceDetailCountArgs } from "./BankClearanceDetailCountArgs";
import { BankClearanceDetailFindManyArgs } from "./BankClearanceDetailFindManyArgs";
import { BankClearanceDetailFindUniqueArgs } from "./BankClearanceDetailFindUniqueArgs";
import { CreateBankClearanceDetailArgs } from "./CreateBankClearanceDetailArgs";
import { UpdateBankClearanceDetailArgs } from "./UpdateBankClearanceDetailArgs";
import { DeleteBankClearanceDetailArgs } from "./DeleteBankClearanceDetailArgs";
import { BankClearanceDetailService } from "../bankClearanceDetail.service";
@graphql.Resolver(() => BankClearanceDetail)
export class BankClearanceDetailResolverBase {
  constructor(protected readonly service: BankClearanceDetailService) {}

  async _bankClearanceDetailsMeta(
    @graphql.Args() args: BankClearanceDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BankClearanceDetail])
  async bankClearanceDetails(
    @graphql.Args() args: BankClearanceDetailFindManyArgs
  ): Promise<BankClearanceDetail[]> {
    return this.service.bankClearanceDetails(args);
  }

  @graphql.Query(() => BankClearanceDetail, { nullable: true })
  async bankClearanceDetail(
    @graphql.Args() args: BankClearanceDetailFindUniqueArgs
  ): Promise<BankClearanceDetail | null> {
    const result = await this.service.bankClearanceDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BankClearanceDetail)
  async createBankClearanceDetail(
    @graphql.Args() args: CreateBankClearanceDetailArgs
  ): Promise<BankClearanceDetail> {
    return await this.service.createBankClearanceDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BankClearanceDetail)
  async updateBankClearanceDetail(
    @graphql.Args() args: UpdateBankClearanceDetailArgs
  ): Promise<BankClearanceDetail | null> {
    try {
      return await this.service.updateBankClearanceDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BankClearanceDetail)
  async deleteBankClearanceDetail(
    @graphql.Args() args: DeleteBankClearanceDetailArgs
  ): Promise<BankClearanceDetail | null> {
    try {
      return await this.service.deleteBankClearanceDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
