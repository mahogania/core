/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankClearanceDetailService } from "../bankClearanceDetail.service";
import { BankClearanceDetailCreateInput } from "./BankClearanceDetailCreateInput";
import { BankClearanceDetail } from "./BankClearanceDetail";
import { BankClearanceDetailFindManyArgs } from "./BankClearanceDetailFindManyArgs";
import { BankClearanceDetailWhereUniqueInput } from "./BankClearanceDetailWhereUniqueInput";
import { BankClearanceDetailUpdateInput } from "./BankClearanceDetailUpdateInput";

export class BankClearanceDetailControllerBase {
  constructor(protected readonly service: BankClearanceDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankClearanceDetail })
  async createBankClearanceDetail(
    @common.Body() data: BankClearanceDetailCreateInput
  ): Promise<BankClearanceDetail> {
    return await this.service.createBankClearanceDetail({
      data: data,
      select: {
        againstAccount: true,
        amount: true,
        chequeDate: true,
        chequeNumber: true,
        clearanceDate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentDocument: true,
        paymentEntry: true,
        postingDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankClearanceDetail] })
  @ApiNestedQuery(BankClearanceDetailFindManyArgs)
  async bankClearanceDetails(
    @common.Req() request: Request
  ): Promise<BankClearanceDetail[]> {
    const args = plainToClass(BankClearanceDetailFindManyArgs, request.query);
    return this.service.bankClearanceDetails({
      ...args,
      select: {
        againstAccount: true,
        amount: true,
        chequeDate: true,
        chequeNumber: true,
        clearanceDate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentDocument: true,
        paymentEntry: true,
        postingDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankClearanceDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankClearanceDetail(
    @common.Param() params: BankClearanceDetailWhereUniqueInput
  ): Promise<BankClearanceDetail | null> {
    const result = await this.service.bankClearanceDetail({
      where: params,
      select: {
        againstAccount: true,
        amount: true,
        chequeDate: true,
        chequeNumber: true,
        clearanceDate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        paymentDocument: true,
        paymentEntry: true,
        postingDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankClearanceDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankClearanceDetail(
    @common.Param() params: BankClearanceDetailWhereUniqueInput,
    @common.Body() data: BankClearanceDetailUpdateInput
  ): Promise<BankClearanceDetail | null> {
    try {
      return await this.service.updateBankClearanceDetail({
        where: params,
        data: data,
        select: {
          againstAccount: true,
          amount: true,
          chequeDate: true,
          chequeNumber: true,
          clearanceDate: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          paymentDocument: true,
          paymentEntry: true,
          postingDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankClearanceDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankClearanceDetail(
    @common.Param() params: BankClearanceDetailWhereUniqueInput
  ): Promise<BankClearanceDetail | null> {
    try {
      return await this.service.deleteBankClearanceDetail({
        where: params,
        select: {
          againstAccount: true,
          amount: true,
          chequeDate: true,
          chequeNumber: true,
          clearanceDate: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          paymentDocument: true,
          paymentEntry: true,
          postingDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
