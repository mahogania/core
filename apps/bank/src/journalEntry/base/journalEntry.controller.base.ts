/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JournalEntryService } from "../journalEntry.service";
import { JournalEntryCreateInput } from "./JournalEntryCreateInput";
import { JournalEntry } from "./JournalEntry";
import { JournalEntryFindManyArgs } from "./JournalEntryFindManyArgs";
import { JournalEntryWhereUniqueInput } from "./JournalEntryWhereUniqueInput";
import { JournalEntryUpdateInput } from "./JournalEntryUpdateInput";

export class JournalEntryControllerBase {
  constructor(protected readonly service: JournalEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JournalEntry })
  async createJournalEntry(
    @common.Body() data: JournalEntryCreateInput
  ): Promise<JournalEntry> {
    return await this.service.createJournalEntry({
      data: data,
      select: {
        amendedFrom: true,
        applyTds: true,
        autoRepeat: true,
        billDate: true,
        billNo: true,
        chequeDate: true,
        chequeNo: true,
        clearanceDate: true,
        company: true,
        createdAt: true,
        creation: true,
        difference: true,
        docstatus: true,
        dueDate: true,
        financeBook: true,
        fromTemplate: true,
        id: true,
        idx: true,
        interCompanyJournalEntryReference: true,
        isOpening: true,
        isSystemGenerated: true,
        letterHead: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        multiCurrency: true,
        namingSeries: true,
        owner: true,
        paidLoan: true,
        payToRecdFrom: true,
        paymentOrder: true,
        postingDate: true,
        processDeferredAccounting: true,
        remark: true,
        reversalOf: true,
        selectPrintHeading: true,
        stockEntry: true,
        taxWithholdingCategory: true,
        title: true,
        totalAmount: true,
        totalAmountCurrency: true,
        totalAmountInWords: true,
        totalCredit: true,
        totalDebit: true,
        updatedAt: true,
        userRemark: true,
        voucherType: true,
        writeOffAmount: true,
        writeOffBasedOn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JournalEntry] })
  @ApiNestedQuery(JournalEntryFindManyArgs)
  async journalEntries(
    @common.Req() request: Request
  ): Promise<JournalEntry[]> {
    const args = plainToClass(JournalEntryFindManyArgs, request.query);
    return this.service.journalEntries({
      ...args,
      select: {
        amendedFrom: true,
        applyTds: true,
        autoRepeat: true,
        billDate: true,
        billNo: true,
        chequeDate: true,
        chequeNo: true,
        clearanceDate: true,
        company: true,
        createdAt: true,
        creation: true,
        difference: true,
        docstatus: true,
        dueDate: true,
        financeBook: true,
        fromTemplate: true,
        id: true,
        idx: true,
        interCompanyJournalEntryReference: true,
        isOpening: true,
        isSystemGenerated: true,
        letterHead: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        multiCurrency: true,
        namingSeries: true,
        owner: true,
        paidLoan: true,
        payToRecdFrom: true,
        paymentOrder: true,
        postingDate: true,
        processDeferredAccounting: true,
        remark: true,
        reversalOf: true,
        selectPrintHeading: true,
        stockEntry: true,
        taxWithholdingCategory: true,
        title: true,
        totalAmount: true,
        totalAmountCurrency: true,
        totalAmountInWords: true,
        totalCredit: true,
        totalDebit: true,
        updatedAt: true,
        userRemark: true,
        voucherType: true,
        writeOffAmount: true,
        writeOffBasedOn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JournalEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async journalEntry(
    @common.Param() params: JournalEntryWhereUniqueInput
  ): Promise<JournalEntry | null> {
    const result = await this.service.journalEntry({
      where: params,
      select: {
        amendedFrom: true,
        applyTds: true,
        autoRepeat: true,
        billDate: true,
        billNo: true,
        chequeDate: true,
        chequeNo: true,
        clearanceDate: true,
        company: true,
        createdAt: true,
        creation: true,
        difference: true,
        docstatus: true,
        dueDate: true,
        financeBook: true,
        fromTemplate: true,
        id: true,
        idx: true,
        interCompanyJournalEntryReference: true,
        isOpening: true,
        isSystemGenerated: true,
        letterHead: true,
        modeOfPayment: true,
        modified: true,
        modifiedBy: true,
        multiCurrency: true,
        namingSeries: true,
        owner: true,
        paidLoan: true,
        payToRecdFrom: true,
        paymentOrder: true,
        postingDate: true,
        processDeferredAccounting: true,
        remark: true,
        reversalOf: true,
        selectPrintHeading: true,
        stockEntry: true,
        taxWithholdingCategory: true,
        title: true,
        totalAmount: true,
        totalAmountCurrency: true,
        totalAmountInWords: true,
        totalCredit: true,
        totalDebit: true,
        updatedAt: true,
        userRemark: true,
        voucherType: true,
        writeOffAmount: true,
        writeOffBasedOn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JournalEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJournalEntry(
    @common.Param() params: JournalEntryWhereUniqueInput,
    @common.Body() data: JournalEntryUpdateInput
  ): Promise<JournalEntry | null> {
    try {
      return await this.service.updateJournalEntry({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          applyTds: true,
          autoRepeat: true,
          billDate: true,
          billNo: true,
          chequeDate: true,
          chequeNo: true,
          clearanceDate: true,
          company: true,
          createdAt: true,
          creation: true,
          difference: true,
          docstatus: true,
          dueDate: true,
          financeBook: true,
          fromTemplate: true,
          id: true,
          idx: true,
          interCompanyJournalEntryReference: true,
          isOpening: true,
          isSystemGenerated: true,
          letterHead: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          multiCurrency: true,
          namingSeries: true,
          owner: true,
          paidLoan: true,
          payToRecdFrom: true,
          paymentOrder: true,
          postingDate: true,
          processDeferredAccounting: true,
          remark: true,
          reversalOf: true,
          selectPrintHeading: true,
          stockEntry: true,
          taxWithholdingCategory: true,
          title: true,
          totalAmount: true,
          totalAmountCurrency: true,
          totalAmountInWords: true,
          totalCredit: true,
          totalDebit: true,
          updatedAt: true,
          userRemark: true,
          voucherType: true,
          writeOffAmount: true,
          writeOffBasedOn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JournalEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJournalEntry(
    @common.Param() params: JournalEntryWhereUniqueInput
  ): Promise<JournalEntry | null> {
    try {
      return await this.service.deleteJournalEntry({
        where: params,
        select: {
          amendedFrom: true,
          applyTds: true,
          autoRepeat: true,
          billDate: true,
          billNo: true,
          chequeDate: true,
          chequeNo: true,
          clearanceDate: true,
          company: true,
          createdAt: true,
          creation: true,
          difference: true,
          docstatus: true,
          dueDate: true,
          financeBook: true,
          fromTemplate: true,
          id: true,
          idx: true,
          interCompanyJournalEntryReference: true,
          isOpening: true,
          isSystemGenerated: true,
          letterHead: true,
          modeOfPayment: true,
          modified: true,
          modifiedBy: true,
          multiCurrency: true,
          namingSeries: true,
          owner: true,
          paidLoan: true,
          payToRecdFrom: true,
          paymentOrder: true,
          postingDate: true,
          processDeferredAccounting: true,
          remark: true,
          reversalOf: true,
          selectPrintHeading: true,
          stockEntry: true,
          taxWithholdingCategory: true,
          title: true,
          totalAmount: true,
          totalAmountCurrency: true,
          totalAmountInWords: true,
          totalCredit: true,
          totalDebit: true,
          updatedAt: true,
          userRemark: true,
          voucherType: true,
          writeOffAmount: true,
          writeOffBasedOn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
