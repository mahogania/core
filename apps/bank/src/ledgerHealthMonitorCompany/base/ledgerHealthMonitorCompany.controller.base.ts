/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LedgerHealthMonitorCompanyService } from "../ledgerHealthMonitorCompany.service";
import { LedgerHealthMonitorCompanyCreateInput } from "./LedgerHealthMonitorCompanyCreateInput";
import { LedgerHealthMonitorCompany } from "./LedgerHealthMonitorCompany";
import { LedgerHealthMonitorCompanyFindManyArgs } from "./LedgerHealthMonitorCompanyFindManyArgs";
import { LedgerHealthMonitorCompanyWhereUniqueInput } from "./LedgerHealthMonitorCompanyWhereUniqueInput";
import { LedgerHealthMonitorCompanyUpdateInput } from "./LedgerHealthMonitorCompanyUpdateInput";

export class LedgerHealthMonitorCompanyControllerBase {
  constructor(protected readonly service: LedgerHealthMonitorCompanyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LedgerHealthMonitorCompany })
  async createLedgerHealthMonitorCompany(
    @common.Body() data: LedgerHealthMonitorCompanyCreateInput
  ): Promise<LedgerHealthMonitorCompany> {
    return await this.service.createLedgerHealthMonitorCompany({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LedgerHealthMonitorCompany] })
  @ApiNestedQuery(LedgerHealthMonitorCompanyFindManyArgs)
  async ledgerHealthMonitorCompanies(
    @common.Req() request: Request
  ): Promise<LedgerHealthMonitorCompany[]> {
    const args = plainToClass(
      LedgerHealthMonitorCompanyFindManyArgs,
      request.query
    );
    return this.service.ledgerHealthMonitorCompanies({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LedgerHealthMonitorCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ledgerHealthMonitorCompany(
    @common.Param() params: LedgerHealthMonitorCompanyWhereUniqueInput
  ): Promise<LedgerHealthMonitorCompany | null> {
    const result = await this.service.ledgerHealthMonitorCompany({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LedgerHealthMonitorCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLedgerHealthMonitorCompany(
    @common.Param() params: LedgerHealthMonitorCompanyWhereUniqueInput,
    @common.Body() data: LedgerHealthMonitorCompanyUpdateInput
  ): Promise<LedgerHealthMonitorCompany | null> {
    try {
      return await this.service.updateLedgerHealthMonitorCompany({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LedgerHealthMonitorCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLedgerHealthMonitorCompany(
    @common.Param() params: LedgerHealthMonitorCompanyWhereUniqueInput
  ): Promise<LedgerHealthMonitorCompany | null> {
    try {
      return await this.service.deleteLedgerHealthMonitorCompany({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
