/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BankTransaction as PrismaBankTransaction,
} from "@prisma/client";

export class BankTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankTransaction.count(args);
  }

  async bankTransactions(
    args: Prisma.BankTransactionFindManyArgs
  ): Promise<PrismaBankTransaction[]> {
    return this.prisma.bankTransaction.findMany(args);
  }
  async bankTransaction(
    args: Prisma.BankTransactionFindUniqueArgs
  ): Promise<PrismaBankTransaction | null> {
    return this.prisma.bankTransaction.findUnique(args);
  }
  async createBankTransaction(
    args: Prisma.BankTransactionCreateArgs
  ): Promise<PrismaBankTransaction> {
    return this.prisma.bankTransaction.create(args);
  }
  async updateBankTransaction(
    args: Prisma.BankTransactionUpdateArgs
  ): Promise<PrismaBankTransaction> {
    return this.prisma.bankTransaction.update(args);
  }
  async deleteBankTransaction(
    args: Prisma.BankTransactionDeleteArgs
  ): Promise<PrismaBankTransaction> {
    return this.prisma.bankTransaction.delete(args);
  }
}
