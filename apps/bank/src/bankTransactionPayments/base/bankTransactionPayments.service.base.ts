/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BankTransactionPayments as PrismaBankTransactionPayments,
} from "@prisma/client";

export class BankTransactionPaymentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankTransactionPaymentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankTransactionPayments.count(args);
  }

  async bankTransactionPaymentsItems(
    args: Prisma.BankTransactionPaymentsFindManyArgs
  ): Promise<PrismaBankTransactionPayments[]> {
    return this.prisma.bankTransactionPayments.findMany(args);
  }
  async bankTransactionPayments(
    args: Prisma.BankTransactionPaymentsFindUniqueArgs
  ): Promise<PrismaBankTransactionPayments | null> {
    return this.prisma.bankTransactionPayments.findUnique(args);
  }
  async createBankTransactionPayments(
    args: Prisma.BankTransactionPaymentsCreateArgs
  ): Promise<PrismaBankTransactionPayments> {
    return this.prisma.bankTransactionPayments.create(args);
  }
  async updateBankTransactionPayments(
    args: Prisma.BankTransactionPaymentsUpdateArgs
  ): Promise<PrismaBankTransactionPayments> {
    return this.prisma.bankTransactionPayments.update(args);
  }
  async deleteBankTransactionPayments(
    args: Prisma.BankTransactionPaymentsDeleteArgs
  ): Promise<PrismaBankTransactionPayments> {
    return this.prisma.bankTransactionPayments.delete(args);
  }
}
