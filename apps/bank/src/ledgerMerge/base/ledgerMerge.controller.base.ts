/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LedgerMergeService } from "../ledgerMerge.service";
import { LedgerMergeCreateInput } from "./LedgerMergeCreateInput";
import { LedgerMerge } from "./LedgerMerge";
import { LedgerMergeFindManyArgs } from "./LedgerMergeFindManyArgs";
import { LedgerMergeWhereUniqueInput } from "./LedgerMergeWhereUniqueInput";
import { LedgerMergeUpdateInput } from "./LedgerMergeUpdateInput";

export class LedgerMergeControllerBase {
  constructor(protected readonly service: LedgerMergeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LedgerMerge })
  async createLedgerMerge(
    @common.Body() data: LedgerMergeCreateInput
  ): Promise<LedgerMerge> {
    return await this.service.createLedgerMerge({
      data: data,
      select: {
        account: true,
        accountName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isGroup: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rootType: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LedgerMerge] })
  @ApiNestedQuery(LedgerMergeFindManyArgs)
  async ledgerMerges(@common.Req() request: Request): Promise<LedgerMerge[]> {
    const args = plainToClass(LedgerMergeFindManyArgs, request.query);
    return this.service.ledgerMerges({
      ...args,
      select: {
        account: true,
        accountName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isGroup: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rootType: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LedgerMerge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ledgerMerge(
    @common.Param() params: LedgerMergeWhereUniqueInput
  ): Promise<LedgerMerge | null> {
    const result = await this.service.ledgerMerge({
      where: params,
      select: {
        account: true,
        accountName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isGroup: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        rootType: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LedgerMerge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLedgerMerge(
    @common.Param() params: LedgerMergeWhereUniqueInput,
    @common.Body() data: LedgerMergeUpdateInput
  ): Promise<LedgerMerge | null> {
    try {
      return await this.service.updateLedgerMerge({
        where: params,
        data: data,
        select: {
          account: true,
          accountName: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isGroup: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          rootType: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LedgerMerge })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLedgerMerge(
    @common.Param() params: LedgerMergeWhereUniqueInput
  ): Promise<LedgerMerge | null> {
    try {
      return await this.service.deleteLedgerMerge({
        where: params,
        select: {
          account: true,
          accountName: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isGroup: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          rootType: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
