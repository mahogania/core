/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LedgerHealthService } from "../ledgerHealth.service";
import { LedgerHealthCreateInput } from "./LedgerHealthCreateInput";
import { LedgerHealth } from "./LedgerHealth";
import { LedgerHealthFindManyArgs } from "./LedgerHealthFindManyArgs";
import { LedgerHealthWhereUniqueInput } from "./LedgerHealthWhereUniqueInput";
import { LedgerHealthUpdateInput } from "./LedgerHealthUpdateInput";

export class LedgerHealthControllerBase {
  constructor(protected readonly service: LedgerHealthService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LedgerHealth })
  async createLedgerHealth(
    @common.Body() data: LedgerHealthCreateInput
  ): Promise<LedgerHealth> {
    return await this.service.createLedgerHealth({
      data: data,
      select: {
        checkedOn: true,
        createdAt: true,
        creation: true,
        debitCreditMismatch: true,
        docstatus: true,
        generalAndPaymentLedgerMismatch: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        voucherNo: true,
        voucherType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LedgerHealth] })
  @ApiNestedQuery(LedgerHealthFindManyArgs)
  async ledgerHealths(@common.Req() request: Request): Promise<LedgerHealth[]> {
    const args = plainToClass(LedgerHealthFindManyArgs, request.query);
    return this.service.ledgerHealths({
      ...args,
      select: {
        checkedOn: true,
        createdAt: true,
        creation: true,
        debitCreditMismatch: true,
        docstatus: true,
        generalAndPaymentLedgerMismatch: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        voucherNo: true,
        voucherType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LedgerHealth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ledgerHealth(
    @common.Param() params: LedgerHealthWhereUniqueInput
  ): Promise<LedgerHealth | null> {
    const result = await this.service.ledgerHealth({
      where: params,
      select: {
        checkedOn: true,
        createdAt: true,
        creation: true,
        debitCreditMismatch: true,
        docstatus: true,
        generalAndPaymentLedgerMismatch: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        voucherNo: true,
        voucherType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LedgerHealth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLedgerHealth(
    @common.Param() params: LedgerHealthWhereUniqueInput,
    @common.Body() data: LedgerHealthUpdateInput
  ): Promise<LedgerHealth | null> {
    try {
      return await this.service.updateLedgerHealth({
        where: params,
        data: data,
        select: {
          checkedOn: true,
          createdAt: true,
          creation: true,
          debitCreditMismatch: true,
          docstatus: true,
          generalAndPaymentLedgerMismatch: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
          voucherNo: true,
          voucherType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LedgerHealth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLedgerHealth(
    @common.Param() params: LedgerHealthWhereUniqueInput
  ): Promise<LedgerHealth | null> {
    try {
      return await this.service.deleteLedgerHealth({
        where: params,
        select: {
          checkedOn: true,
          createdAt: true,
          creation: true,
          debitCreditMismatch: true,
          docstatus: true,
          generalAndPaymentLedgerMismatch: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
          voucherNo: true,
          voucherType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
