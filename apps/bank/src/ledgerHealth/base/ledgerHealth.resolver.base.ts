/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LedgerHealth } from "./LedgerHealth";
import { LedgerHealthCountArgs } from "./LedgerHealthCountArgs";
import { LedgerHealthFindManyArgs } from "./LedgerHealthFindManyArgs";
import { LedgerHealthFindUniqueArgs } from "./LedgerHealthFindUniqueArgs";
import { CreateLedgerHealthArgs } from "./CreateLedgerHealthArgs";
import { UpdateLedgerHealthArgs } from "./UpdateLedgerHealthArgs";
import { DeleteLedgerHealthArgs } from "./DeleteLedgerHealthArgs";
import { LedgerHealthService } from "../ledgerHealth.service";
@graphql.Resolver(() => LedgerHealth)
export class LedgerHealthResolverBase {
  constructor(protected readonly service: LedgerHealthService) {}

  async _ledgerHealthsMeta(
    @graphql.Args() args: LedgerHealthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LedgerHealth])
  async ledgerHealths(
    @graphql.Args() args: LedgerHealthFindManyArgs
  ): Promise<LedgerHealth[]> {
    return this.service.ledgerHealths(args);
  }

  @graphql.Query(() => LedgerHealth, { nullable: true })
  async ledgerHealth(
    @graphql.Args() args: LedgerHealthFindUniqueArgs
  ): Promise<LedgerHealth | null> {
    const result = await this.service.ledgerHealth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LedgerHealth)
  async createLedgerHealth(
    @graphql.Args() args: CreateLedgerHealthArgs
  ): Promise<LedgerHealth> {
    return await this.service.createLedgerHealth({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LedgerHealth)
  async updateLedgerHealth(
    @graphql.Args() args: UpdateLedgerHealthArgs
  ): Promise<LedgerHealth | null> {
    try {
      return await this.service.updateLedgerHealth({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LedgerHealth)
  async deleteLedgerHealth(
    @graphql.Args() args: DeleteLedgerHealthArgs
  ): Promise<LedgerHealth | null> {
    try {
      return await this.service.deleteLedgerHealth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
