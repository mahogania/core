/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JournalEntryTemplateService } from "../journalEntryTemplate.service";
import { JournalEntryTemplateCreateInput } from "./JournalEntryTemplateCreateInput";
import { JournalEntryTemplate } from "./JournalEntryTemplate";
import { JournalEntryTemplateFindManyArgs } from "./JournalEntryTemplateFindManyArgs";
import { JournalEntryTemplateWhereUniqueInput } from "./JournalEntryTemplateWhereUniqueInput";
import { JournalEntryTemplateUpdateInput } from "./JournalEntryTemplateUpdateInput";

export class JournalEntryTemplateControllerBase {
  constructor(protected readonly service: JournalEntryTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JournalEntryTemplate })
  async createJournalEntryTemplate(
    @common.Body() data: JournalEntryTemplateCreateInput
  ): Promise<JournalEntryTemplate> {
    return await this.service.createJournalEntryTemplate({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isOpening: true,
        modified: true,
        modifiedBy: true,
        multiCurrency: true,
        namingSeries: true,
        owner: true,
        templateTitle: true,
        updatedAt: true,
        voucherType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JournalEntryTemplate] })
  @ApiNestedQuery(JournalEntryTemplateFindManyArgs)
  async journalEntryTemplates(
    @common.Req() request: Request
  ): Promise<JournalEntryTemplate[]> {
    const args = plainToClass(JournalEntryTemplateFindManyArgs, request.query);
    return this.service.journalEntryTemplates({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isOpening: true,
        modified: true,
        modifiedBy: true,
        multiCurrency: true,
        namingSeries: true,
        owner: true,
        templateTitle: true,
        updatedAt: true,
        voucherType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JournalEntryTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async journalEntryTemplate(
    @common.Param() params: JournalEntryTemplateWhereUniqueInput
  ): Promise<JournalEntryTemplate | null> {
    const result = await this.service.journalEntryTemplate({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isOpening: true,
        modified: true,
        modifiedBy: true,
        multiCurrency: true,
        namingSeries: true,
        owner: true,
        templateTitle: true,
        updatedAt: true,
        voucherType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JournalEntryTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJournalEntryTemplate(
    @common.Param() params: JournalEntryTemplateWhereUniqueInput,
    @common.Body() data: JournalEntryTemplateUpdateInput
  ): Promise<JournalEntryTemplate | null> {
    try {
      return await this.service.updateJournalEntryTemplate({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isOpening: true,
          modified: true,
          modifiedBy: true,
          multiCurrency: true,
          namingSeries: true,
          owner: true,
          templateTitle: true,
          updatedAt: true,
          voucherType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JournalEntryTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJournalEntryTemplate(
    @common.Param() params: JournalEntryTemplateWhereUniqueInput
  ): Promise<JournalEntryTemplate | null> {
    try {
      return await this.service.deleteJournalEntryTemplate({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isOpening: true,
          modified: true,
          modifiedBy: true,
          multiCurrency: true,
          namingSeries: true,
          owner: true,
          templateTitle: true,
          updatedAt: true,
          voucherType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
