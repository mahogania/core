/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JournalEntryTemplate } from "./JournalEntryTemplate";
import { JournalEntryTemplateCountArgs } from "./JournalEntryTemplateCountArgs";
import { JournalEntryTemplateFindManyArgs } from "./JournalEntryTemplateFindManyArgs";
import { JournalEntryTemplateFindUniqueArgs } from "./JournalEntryTemplateFindUniqueArgs";
import { CreateJournalEntryTemplateArgs } from "./CreateJournalEntryTemplateArgs";
import { UpdateJournalEntryTemplateArgs } from "./UpdateJournalEntryTemplateArgs";
import { DeleteJournalEntryTemplateArgs } from "./DeleteJournalEntryTemplateArgs";
import { JournalEntryTemplateService } from "../journalEntryTemplate.service";
@graphql.Resolver(() => JournalEntryTemplate)
export class JournalEntryTemplateResolverBase {
  constructor(protected readonly service: JournalEntryTemplateService) {}

  async _journalEntryTemplatesMeta(
    @graphql.Args() args: JournalEntryTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JournalEntryTemplate])
  async journalEntryTemplates(
    @graphql.Args() args: JournalEntryTemplateFindManyArgs
  ): Promise<JournalEntryTemplate[]> {
    return this.service.journalEntryTemplates(args);
  }

  @graphql.Query(() => JournalEntryTemplate, { nullable: true })
  async journalEntryTemplate(
    @graphql.Args() args: JournalEntryTemplateFindUniqueArgs
  ): Promise<JournalEntryTemplate | null> {
    const result = await this.service.journalEntryTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JournalEntryTemplate)
  async createJournalEntryTemplate(
    @graphql.Args() args: CreateJournalEntryTemplateArgs
  ): Promise<JournalEntryTemplate> {
    return await this.service.createJournalEntryTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JournalEntryTemplate)
  async updateJournalEntryTemplate(
    @graphql.Args() args: UpdateJournalEntryTemplateArgs
  ): Promise<JournalEntryTemplate | null> {
    try {
      return await this.service.updateJournalEntryTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JournalEntryTemplate)
  async deleteJournalEntryTemplate(
    @graphql.Args() args: DeleteJournalEntryTemplateArgs
  ): Promise<JournalEntryTemplate | null> {
    try {
      return await this.service.deleteJournalEntryTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
