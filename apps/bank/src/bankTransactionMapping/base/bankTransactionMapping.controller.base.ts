/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BankTransactionMappingService } from "../bankTransactionMapping.service";
import { BankTransactionMappingCreateInput } from "./BankTransactionMappingCreateInput";
import { BankTransactionMapping } from "./BankTransactionMapping";
import { BankTransactionMappingFindManyArgs } from "./BankTransactionMappingFindManyArgs";
import { BankTransactionMappingWhereUniqueInput } from "./BankTransactionMappingWhereUniqueInput";
import { BankTransactionMappingUpdateInput } from "./BankTransactionMappingUpdateInput";

export class BankTransactionMappingControllerBase {
  constructor(protected readonly service: BankTransactionMappingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BankTransactionMapping })
  async createBankTransactionMapping(
    @common.Body() data: BankTransactionMappingCreateInput
  ): Promise<BankTransactionMapping> {
    return await this.service.createBankTransactionMapping({
      data: data,
      select: {
        bankTransactionField: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fileField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BankTransactionMapping] })
  @ApiNestedQuery(BankTransactionMappingFindManyArgs)
  async bankTransactionMappings(
    @common.Req() request: Request
  ): Promise<BankTransactionMapping[]> {
    const args = plainToClass(
      BankTransactionMappingFindManyArgs,
      request.query
    );
    return this.service.bankTransactionMappings({
      ...args,
      select: {
        bankTransactionField: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fileField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BankTransactionMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bankTransactionMapping(
    @common.Param() params: BankTransactionMappingWhereUniqueInput
  ): Promise<BankTransactionMapping | null> {
    const result = await this.service.bankTransactionMapping({
      where: params,
      select: {
        bankTransactionField: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fileField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BankTransactionMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBankTransactionMapping(
    @common.Param() params: BankTransactionMappingWhereUniqueInput,
    @common.Body() data: BankTransactionMappingUpdateInput
  ): Promise<BankTransactionMapping | null> {
    try {
      return await this.service.updateBankTransactionMapping({
        where: params,
        data: data,
        select: {
          bankTransactionField: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fileField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BankTransactionMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBankTransactionMapping(
    @common.Param() params: BankTransactionMappingWhereUniqueInput
  ): Promise<BankTransactionMapping | null> {
    try {
      return await this.service.deleteBankTransactionMapping({
        where: params,
        select: {
          bankTransactionField: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fileField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
