/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BankTransactionMapping as PrismaBankTransactionMapping,
} from "@prisma/client";

export class BankTransactionMappingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BankTransactionMappingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bankTransactionMapping.count(args);
  }

  async bankTransactionMappings(
    args: Prisma.BankTransactionMappingFindManyArgs
  ): Promise<PrismaBankTransactionMapping[]> {
    return this.prisma.bankTransactionMapping.findMany(args);
  }
  async bankTransactionMapping(
    args: Prisma.BankTransactionMappingFindUniqueArgs
  ): Promise<PrismaBankTransactionMapping | null> {
    return this.prisma.bankTransactionMapping.findUnique(args);
  }
  async createBankTransactionMapping(
    args: Prisma.BankTransactionMappingCreateArgs
  ): Promise<PrismaBankTransactionMapping> {
    return this.prisma.bankTransactionMapping.create(args);
  }
  async updateBankTransactionMapping(
    args: Prisma.BankTransactionMappingUpdateArgs
  ): Promise<PrismaBankTransactionMapping> {
    return this.prisma.bankTransactionMapping.update(args);
  }
  async deleteBankTransactionMapping(
    args: Prisma.BankTransactionMappingDeleteArgs
  ): Promise<PrismaBankTransactionMapping> {
    return this.prisma.bankTransactionMapping.delete(args);
  }
}
