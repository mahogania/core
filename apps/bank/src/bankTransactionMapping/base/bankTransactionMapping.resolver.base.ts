/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BankTransactionMapping } from "./BankTransactionMapping";
import { BankTransactionMappingCountArgs } from "./BankTransactionMappingCountArgs";
import { BankTransactionMappingFindManyArgs } from "./BankTransactionMappingFindManyArgs";
import { BankTransactionMappingFindUniqueArgs } from "./BankTransactionMappingFindUniqueArgs";
import { CreateBankTransactionMappingArgs } from "./CreateBankTransactionMappingArgs";
import { UpdateBankTransactionMappingArgs } from "./UpdateBankTransactionMappingArgs";
import { DeleteBankTransactionMappingArgs } from "./DeleteBankTransactionMappingArgs";
import { BankTransactionMappingService } from "../bankTransactionMapping.service";
@graphql.Resolver(() => BankTransactionMapping)
export class BankTransactionMappingResolverBase {
  constructor(protected readonly service: BankTransactionMappingService) {}

  async _bankTransactionMappingsMeta(
    @graphql.Args() args: BankTransactionMappingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BankTransactionMapping])
  async bankTransactionMappings(
    @graphql.Args() args: BankTransactionMappingFindManyArgs
  ): Promise<BankTransactionMapping[]> {
    return this.service.bankTransactionMappings(args);
  }

  @graphql.Query(() => BankTransactionMapping, { nullable: true })
  async bankTransactionMapping(
    @graphql.Args() args: BankTransactionMappingFindUniqueArgs
  ): Promise<BankTransactionMapping | null> {
    const result = await this.service.bankTransactionMapping(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BankTransactionMapping)
  async createBankTransactionMapping(
    @graphql.Args() args: CreateBankTransactionMappingArgs
  ): Promise<BankTransactionMapping> {
    return await this.service.createBankTransactionMapping({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BankTransactionMapping)
  async updateBankTransactionMapping(
    @graphql.Args() args: UpdateBankTransactionMappingArgs
  ): Promise<BankTransactionMapping | null> {
    try {
      return await this.service.updateBankTransactionMapping({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BankTransactionMapping)
  async deleteBankTransactionMapping(
    @graphql.Args() args: DeleteBankTransactionMappingArgs
  ): Promise<BankTransactionMapping | null> {
    try {
      return await this.service.deleteBankTransactionMapping(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
