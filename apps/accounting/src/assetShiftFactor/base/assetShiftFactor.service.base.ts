/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AssetShiftFactor as PrismaAssetShiftFactor,
} from "@prisma/client";

export class AssetShiftFactorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetShiftFactorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetShiftFactor.count(args);
  }

  async assetShiftFactors(
    args: Prisma.AssetShiftFactorFindManyArgs
  ): Promise<PrismaAssetShiftFactor[]> {
    return this.prisma.assetShiftFactor.findMany(args);
  }
  async assetShiftFactor(
    args: Prisma.AssetShiftFactorFindUniqueArgs
  ): Promise<PrismaAssetShiftFactor | null> {
    return this.prisma.assetShiftFactor.findUnique(args);
  }
  async createAssetShiftFactor(
    args: Prisma.AssetShiftFactorCreateArgs
  ): Promise<PrismaAssetShiftFactor> {
    return this.prisma.assetShiftFactor.create(args);
  }
  async updateAssetShiftFactor(
    args: Prisma.AssetShiftFactorUpdateArgs
  ): Promise<PrismaAssetShiftFactor> {
    return this.prisma.assetShiftFactor.update(args);
  }
  async deleteAssetShiftFactor(
    args: Prisma.AssetShiftFactorDeleteArgs
  ): Promise<PrismaAssetShiftFactor> {
    return this.prisma.assetShiftFactor.delete(args);
  }
}
