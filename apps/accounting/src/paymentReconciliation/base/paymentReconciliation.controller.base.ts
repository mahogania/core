/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentReconciliationService } from "../paymentReconciliation.service";
import { PaymentReconciliationCreateInput } from "./PaymentReconciliationCreateInput";
import { PaymentReconciliation } from "./PaymentReconciliation";
import { PaymentReconciliationFindManyArgs } from "./PaymentReconciliationFindManyArgs";
import { PaymentReconciliationWhereUniqueInput } from "./PaymentReconciliationWhereUniqueInput";
import { PaymentReconciliationUpdateInput } from "./PaymentReconciliationUpdateInput";

export class PaymentReconciliationControllerBase {
  constructor(protected readonly service: PaymentReconciliationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentReconciliation })
  async createPaymentReconciliation(
    @common.Body() data: PaymentReconciliationCreateInput
  ): Promise<PaymentReconciliation> {
    return await this.service.createPaymentReconciliation({
      data: data,
      select: {
        amendedFrom: true,
        bankCashAccount: true,
        company: true,
        costCenter: true,
        createdAt: true,
        defaultAdvanceAccount: true,
        docstatus: true,
        errorLog: true,
        fromInvoiceDate: true,
        fromPaymentDate: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        party: true,
        partyType: true,
        receivablePayableAccount: true,
        status: true,
        toInvoiceDate: true,
        toPaymentDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentReconciliation] })
  @ApiNestedQuery(PaymentReconciliationFindManyArgs)
  async paymentReconciliations(
    @common.Req() request: Request
  ): Promise<PaymentReconciliation[]> {
    const args = plainToClass(PaymentReconciliationFindManyArgs, request.query);
    return this.service.paymentReconciliations({
      ...args,
      select: {
        amendedFrom: true,
        bankCashAccount: true,
        company: true,
        costCenter: true,
        createdAt: true,
        defaultAdvanceAccount: true,
        docstatus: true,
        errorLog: true,
        fromInvoiceDate: true,
        fromPaymentDate: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        party: true,
        partyType: true,
        receivablePayableAccount: true,
        status: true,
        toInvoiceDate: true,
        toPaymentDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentReconciliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentReconciliation(
    @common.Param() params: PaymentReconciliationWhereUniqueInput
  ): Promise<PaymentReconciliation | null> {
    const result = await this.service.paymentReconciliation({
      where: params,
      select: {
        amendedFrom: true,
        bankCashAccount: true,
        company: true,
        costCenter: true,
        createdAt: true,
        defaultAdvanceAccount: true,
        docstatus: true,
        errorLog: true,
        fromInvoiceDate: true,
        fromPaymentDate: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        party: true,
        partyType: true,
        receivablePayableAccount: true,
        status: true,
        toInvoiceDate: true,
        toPaymentDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentReconciliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentReconciliation(
    @common.Param() params: PaymentReconciliationWhereUniqueInput,
    @common.Body() data: PaymentReconciliationUpdateInput
  ): Promise<PaymentReconciliation | null> {
    try {
      return await this.service.updatePaymentReconciliation({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          bankCashAccount: true,
          company: true,
          costCenter: true,
          createdAt: true,
          defaultAdvanceAccount: true,
          docstatus: true,
          errorLog: true,
          fromInvoiceDate: true,
          fromPaymentDate: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          party: true,
          partyType: true,
          receivablePayableAccount: true,
          status: true,
          toInvoiceDate: true,
          toPaymentDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentReconciliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentReconciliation(
    @common.Param() params: PaymentReconciliationWhereUniqueInput
  ): Promise<PaymentReconciliation | null> {
    try {
      return await this.service.deletePaymentReconciliation({
        where: params,
        select: {
          amendedFrom: true,
          bankCashAccount: true,
          company: true,
          costCenter: true,
          createdAt: true,
          defaultAdvanceAccount: true,
          docstatus: true,
          errorLog: true,
          fromInvoiceDate: true,
          fromPaymentDate: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          party: true,
          partyType: true,
          receivablePayableAccount: true,
          status: true,
          toInvoiceDate: true,
          toPaymentDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
