/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepreciationScheduleService } from "../depreciationSchedule.service";
import { DepreciationScheduleCreateInput } from "./DepreciationScheduleCreateInput";
import { DepreciationSchedule } from "./DepreciationSchedule";
import { DepreciationScheduleFindManyArgs } from "./DepreciationScheduleFindManyArgs";
import { DepreciationScheduleWhereUniqueInput } from "./DepreciationScheduleWhereUniqueInput";
import { DepreciationScheduleUpdateInput } from "./DepreciationScheduleUpdateInput";

export class DepreciationScheduleControllerBase {
  constructor(protected readonly service: DepreciationScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DepreciationSchedule })
  async createDepreciationSchedule(
    @common.Body() data: DepreciationScheduleCreateInput
  ): Promise<DepreciationSchedule> {
    return await this.service.createDepreciationSchedule({
      data: data,
      select: {
        accumulatedDepreciationAmount: true,
        createdAt: true,
        creation: true,
        depreciationAmount: true,
        docstatus: true,
        id: true,
        idx: true,
        journalEntry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        scheduleDate: true,
        shift: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DepreciationSchedule] })
  @ApiNestedQuery(DepreciationScheduleFindManyArgs)
  async depreciationSchedules(
    @common.Req() request: Request
  ): Promise<DepreciationSchedule[]> {
    const args = plainToClass(DepreciationScheduleFindManyArgs, request.query);
    return this.service.depreciationSchedules({
      ...args,
      select: {
        accumulatedDepreciationAmount: true,
        createdAt: true,
        creation: true,
        depreciationAmount: true,
        docstatus: true,
        id: true,
        idx: true,
        journalEntry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        scheduleDate: true,
        shift: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DepreciationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async depreciationSchedule(
    @common.Param() params: DepreciationScheduleWhereUniqueInput
  ): Promise<DepreciationSchedule | null> {
    const result = await this.service.depreciationSchedule({
      where: params,
      select: {
        accumulatedDepreciationAmount: true,
        createdAt: true,
        creation: true,
        depreciationAmount: true,
        docstatus: true,
        id: true,
        idx: true,
        journalEntry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        scheduleDate: true,
        shift: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DepreciationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepreciationSchedule(
    @common.Param() params: DepreciationScheduleWhereUniqueInput,
    @common.Body() data: DepreciationScheduleUpdateInput
  ): Promise<DepreciationSchedule | null> {
    try {
      return await this.service.updateDepreciationSchedule({
        where: params,
        data: data,
        select: {
          accumulatedDepreciationAmount: true,
          createdAt: true,
          creation: true,
          depreciationAmount: true,
          docstatus: true,
          id: true,
          idx: true,
          journalEntry: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          scheduleDate: true,
          shift: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DepreciationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepreciationSchedule(
    @common.Param() params: DepreciationScheduleWhereUniqueInput
  ): Promise<DepreciationSchedule | null> {
    try {
      return await this.service.deleteDepreciationSchedule({
        where: params,
        select: {
          accumulatedDepreciationAmount: true,
          createdAt: true,
          creation: true,
          depreciationAmount: true,
          docstatus: true,
          id: true,
          idx: true,
          journalEntry: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          scheduleDate: true,
          shift: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
