/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetMaintenanceService } from "../assetMaintenance.service";
import { AssetMaintenanceCreateInput } from "./AssetMaintenanceCreateInput";
import { AssetMaintenance } from "./AssetMaintenance";
import { AssetMaintenanceFindManyArgs } from "./AssetMaintenanceFindManyArgs";
import { AssetMaintenanceWhereUniqueInput } from "./AssetMaintenanceWhereUniqueInput";
import { AssetMaintenanceUpdateInput } from "./AssetMaintenanceUpdateInput";

export class AssetMaintenanceControllerBase {
  constructor(protected readonly service: AssetMaintenanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetMaintenance })
  async createAssetMaintenance(
    @common.Body() data: AssetMaintenanceCreateInput
  ): Promise<AssetMaintenance> {
    return await this.service.createAssetMaintenance({
      data: data,
      select: {
        assetCategory: true,
        assetName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        maintenanceManager: true,
        maintenanceManagerName: true,
        maintenanceTeam: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetMaintenance] })
  @ApiNestedQuery(AssetMaintenanceFindManyArgs)
  async assetMaintenances(
    @common.Req() request: Request
  ): Promise<AssetMaintenance[]> {
    const args = plainToClass(AssetMaintenanceFindManyArgs, request.query);
    return this.service.assetMaintenances({
      ...args,
      select: {
        assetCategory: true,
        assetName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        maintenanceManager: true,
        maintenanceManagerName: true,
        maintenanceTeam: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetMaintenance(
    @common.Param() params: AssetMaintenanceWhereUniqueInput
  ): Promise<AssetMaintenance | null> {
    const result = await this.service.assetMaintenance({
      where: params,
      select: {
        assetCategory: true,
        assetName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        maintenanceManager: true,
        maintenanceManagerName: true,
        maintenanceTeam: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetMaintenance(
    @common.Param() params: AssetMaintenanceWhereUniqueInput,
    @common.Body() data: AssetMaintenanceUpdateInput
  ): Promise<AssetMaintenance | null> {
    try {
      return await this.service.updateAssetMaintenance({
        where: params,
        data: data,
        select: {
          assetCategory: true,
          assetName: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          maintenanceManager: true,
          maintenanceManagerName: true,
          maintenanceTeam: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetMaintenance(
    @common.Param() params: AssetMaintenanceWhereUniqueInput
  ): Promise<AssetMaintenance | null> {
    try {
      return await this.service.deleteAssetMaintenance({
        where: params,
        select: {
          assetCategory: true,
          assetName: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          maintenanceManager: true,
          maintenanceManagerName: true,
          maintenanceTeam: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
