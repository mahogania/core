/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetRepairConsumedItemService } from "../assetRepairConsumedItem.service";
import { AssetRepairConsumedItemCreateInput } from "./AssetRepairConsumedItemCreateInput";
import { AssetRepairConsumedItem } from "./AssetRepairConsumedItem";
import { AssetRepairConsumedItemFindManyArgs } from "./AssetRepairConsumedItemFindManyArgs";
import { AssetRepairConsumedItemWhereUniqueInput } from "./AssetRepairConsumedItemWhereUniqueInput";
import { AssetRepairConsumedItemUpdateInput } from "./AssetRepairConsumedItemUpdateInput";

export class AssetRepairConsumedItemControllerBase {
  constructor(protected readonly service: AssetRepairConsumedItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetRepairConsumedItem })
  async createAssetRepairConsumedItem(
    @common.Body() data: AssetRepairConsumedItemCreateInput
  ): Promise<AssetRepairConsumedItem> {
    return await this.service.createAssetRepairConsumedItem({
      data: data,
      select: {
        consumedQuantity: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        serialAndBatchBundle: true,
        serialNo: true,
        totalValue: true,
        updatedAt: true,
        valuationRate: true,
        warehouse: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetRepairConsumedItem] })
  @ApiNestedQuery(AssetRepairConsumedItemFindManyArgs)
  async assetRepairConsumedItems(
    @common.Req() request: Request
  ): Promise<AssetRepairConsumedItem[]> {
    const args = plainToClass(
      AssetRepairConsumedItemFindManyArgs,
      request.query
    );
    return this.service.assetRepairConsumedItems({
      ...args,
      select: {
        consumedQuantity: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        serialAndBatchBundle: true,
        serialNo: true,
        totalValue: true,
        updatedAt: true,
        valuationRate: true,
        warehouse: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetRepairConsumedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetRepairConsumedItem(
    @common.Param() params: AssetRepairConsumedItemWhereUniqueInput
  ): Promise<AssetRepairConsumedItem | null> {
    const result = await this.service.assetRepairConsumedItem({
      where: params,
      select: {
        consumedQuantity: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        serialAndBatchBundle: true,
        serialNo: true,
        totalValue: true,
        updatedAt: true,
        valuationRate: true,
        warehouse: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetRepairConsumedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetRepairConsumedItem(
    @common.Param() params: AssetRepairConsumedItemWhereUniqueInput,
    @common.Body() data: AssetRepairConsumedItemUpdateInput
  ): Promise<AssetRepairConsumedItem | null> {
    try {
      return await this.service.updateAssetRepairConsumedItem({
        where: params,
        data: data,
        select: {
          consumedQuantity: true,
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          serialAndBatchBundle: true,
          serialNo: true,
          totalValue: true,
          updatedAt: true,
          valuationRate: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetRepairConsumedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetRepairConsumedItem(
    @common.Param() params: AssetRepairConsumedItemWhereUniqueInput
  ): Promise<AssetRepairConsumedItem | null> {
    try {
      return await this.service.deleteAssetRepairConsumedItem({
        where: params,
        select: {
          consumedQuantity: true,
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          serialAndBatchBundle: true,
          serialNo: true,
          totalValue: true,
          updatedAt: true,
          valuationRate: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
