/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AutoEmailReportService } from "../autoEmailReport.service";
import { AutoEmailReportCreateInput } from "./AutoEmailReportCreateInput";
import { AutoEmailReport } from "./AutoEmailReport";
import { AutoEmailReportFindManyArgs } from "./AutoEmailReportFindManyArgs";
import { AutoEmailReportWhereUniqueInput } from "./AutoEmailReportWhereUniqueInput";
import { AutoEmailReportUpdateInput } from "./AutoEmailReportUpdateInput";

export class AutoEmailReportControllerBase {
  constructor(protected readonly service: AutoEmailReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AutoEmailReport })
  async createAutoEmailReport(
    @common.Body() data: AutoEmailReportCreateInput
  ): Promise<AutoEmailReport> {
    return await this.service.createAutoEmailReport({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        dataModifiedTill: true,
        dayOfWeek: true,
        description: true,
        docstatus: true,
        dynamicDatePeriod: true,
        emailTo: true,
        enabled: true,
        filterMeta: true,
        filters: true,
        format: true,
        frequency: true,
        fromDateField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noOfRows: true,
        owner: true,
        referenceReport: true,
        report: true,
        reportType: true,
        sendIfData: true,
        sender: true,
        toDateField: true,
        updatedAt: true,
        useFirstDayOfPeriod: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AutoEmailReport] })
  @ApiNestedQuery(AutoEmailReportFindManyArgs)
  async autoEmailReports(
    @common.Req() request: Request
  ): Promise<AutoEmailReport[]> {
    const args = plainToClass(AutoEmailReportFindManyArgs, request.query);
    return this.service.autoEmailReports({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        dataModifiedTill: true,
        dayOfWeek: true,
        description: true,
        docstatus: true,
        dynamicDatePeriod: true,
        emailTo: true,
        enabled: true,
        filterMeta: true,
        filters: true,
        format: true,
        frequency: true,
        fromDateField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noOfRows: true,
        owner: true,
        referenceReport: true,
        report: true,
        reportType: true,
        sendIfData: true,
        sender: true,
        toDateField: true,
        updatedAt: true,
        useFirstDayOfPeriod: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AutoEmailReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async autoEmailReport(
    @common.Param() params: AutoEmailReportWhereUniqueInput
  ): Promise<AutoEmailReport | null> {
    const result = await this.service.autoEmailReport({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        dataModifiedTill: true,
        dayOfWeek: true,
        description: true,
        docstatus: true,
        dynamicDatePeriod: true,
        emailTo: true,
        enabled: true,
        filterMeta: true,
        filters: true,
        format: true,
        frequency: true,
        fromDateField: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        noOfRows: true,
        owner: true,
        referenceReport: true,
        report: true,
        reportType: true,
        sendIfData: true,
        sender: true,
        toDateField: true,
        updatedAt: true,
        useFirstDayOfPeriod: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AutoEmailReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAutoEmailReport(
    @common.Param() params: AutoEmailReportWhereUniqueInput,
    @common.Body() data: AutoEmailReportUpdateInput
  ): Promise<AutoEmailReport | null> {
    try {
      return await this.service.updateAutoEmailReport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          dataModifiedTill: true,
          dayOfWeek: true,
          description: true,
          docstatus: true,
          dynamicDatePeriod: true,
          emailTo: true,
          enabled: true,
          filterMeta: true,
          filters: true,
          format: true,
          frequency: true,
          fromDateField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          noOfRows: true,
          owner: true,
          referenceReport: true,
          report: true,
          reportType: true,
          sendIfData: true,
          sender: true,
          toDateField: true,
          updatedAt: true,
          useFirstDayOfPeriod: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AutoEmailReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAutoEmailReport(
    @common.Param() params: AutoEmailReportWhereUniqueInput
  ): Promise<AutoEmailReport | null> {
    try {
      return await this.service.deleteAutoEmailReport({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          dataModifiedTill: true,
          dayOfWeek: true,
          description: true,
          docstatus: true,
          dynamicDatePeriod: true,
          emailTo: true,
          enabled: true,
          filterMeta: true,
          filters: true,
          format: true,
          frequency: true,
          fromDateField: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          noOfRows: true,
          owner: true,
          referenceReport: true,
          report: true,
          reportType: true,
          sendIfData: true,
          sender: true,
          toDateField: true,
          updatedAt: true,
          useFirstDayOfPeriod: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
