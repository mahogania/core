/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AutoEmailReport } from "./AutoEmailReport";
import { AutoEmailReportCountArgs } from "./AutoEmailReportCountArgs";
import { AutoEmailReportFindManyArgs } from "./AutoEmailReportFindManyArgs";
import { AutoEmailReportFindUniqueArgs } from "./AutoEmailReportFindUniqueArgs";
import { CreateAutoEmailReportArgs } from "./CreateAutoEmailReportArgs";
import { UpdateAutoEmailReportArgs } from "./UpdateAutoEmailReportArgs";
import { DeleteAutoEmailReportArgs } from "./DeleteAutoEmailReportArgs";
import { AutoEmailReportService } from "../autoEmailReport.service";
@graphql.Resolver(() => AutoEmailReport)
export class AutoEmailReportResolverBase {
  constructor(protected readonly service: AutoEmailReportService) {}

  async _autoEmailReportsMeta(
    @graphql.Args() args: AutoEmailReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AutoEmailReport])
  async autoEmailReports(
    @graphql.Args() args: AutoEmailReportFindManyArgs
  ): Promise<AutoEmailReport[]> {
    return this.service.autoEmailReports(args);
  }

  @graphql.Query(() => AutoEmailReport, { nullable: true })
  async autoEmailReport(
    @graphql.Args() args: AutoEmailReportFindUniqueArgs
  ): Promise<AutoEmailReport | null> {
    const result = await this.service.autoEmailReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AutoEmailReport)
  async createAutoEmailReport(
    @graphql.Args() args: CreateAutoEmailReportArgs
  ): Promise<AutoEmailReport> {
    return await this.service.createAutoEmailReport({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AutoEmailReport)
  async updateAutoEmailReport(
    @graphql.Args() args: UpdateAutoEmailReportArgs
  ): Promise<AutoEmailReport | null> {
    try {
      return await this.service.updateAutoEmailReport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AutoEmailReport)
  async deleteAutoEmailReport(
    @graphql.Args() args: DeleteAutoEmailReportArgs
  ): Promise<AutoEmailReport | null> {
    try {
      return await this.service.deleteAutoEmailReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
