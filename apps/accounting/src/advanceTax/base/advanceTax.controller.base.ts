/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdvanceTaxService } from "../advanceTax.service";
import { AdvanceTaxCreateInput } from "./AdvanceTaxCreateInput";
import { AdvanceTax } from "./AdvanceTax";
import { AdvanceTaxFindManyArgs } from "./AdvanceTaxFindManyArgs";
import { AdvanceTaxWhereUniqueInput } from "./AdvanceTaxWhereUniqueInput";
import { AdvanceTaxUpdateInput } from "./AdvanceTaxUpdateInput";

export class AdvanceTaxControllerBase {
  constructor(protected readonly service: AdvanceTaxService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdvanceTax })
  async createAdvanceTax(
    @common.Body() data: AdvanceTaxCreateInput
  ): Promise<AdvanceTax> {
    return await this.service.createAdvanceTax({
      data: data,
      select: {
        accountHead: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        referenceDetail: true,
        referenceName: true,
        referenceType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdvanceTax] })
  @ApiNestedQuery(AdvanceTaxFindManyArgs)
  async advanceTaxes(@common.Req() request: Request): Promise<AdvanceTax[]> {
    const args = plainToClass(AdvanceTaxFindManyArgs, request.query);
    return this.service.advanceTaxes({
      ...args,
      select: {
        accountHead: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        referenceDetail: true,
        referenceName: true,
        referenceType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdvanceTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async advanceTax(
    @common.Param() params: AdvanceTaxWhereUniqueInput
  ): Promise<AdvanceTax | null> {
    const result = await this.service.advanceTax({
      where: params,
      select: {
        accountHead: true,
        allocatedAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        referenceDetail: true,
        referenceName: true,
        referenceType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdvanceTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdvanceTax(
    @common.Param() params: AdvanceTaxWhereUniqueInput,
    @common.Body() data: AdvanceTaxUpdateInput
  ): Promise<AdvanceTax | null> {
    try {
      return await this.service.updateAdvanceTax({
        where: params,
        data: data,
        select: {
          accountHead: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          referenceDetail: true,
          referenceName: true,
          referenceType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdvanceTax })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdvanceTax(
    @common.Param() params: AdvanceTaxWhereUniqueInput
  ): Promise<AdvanceTax | null> {
    try {
      return await this.service.deleteAdvanceTax({
        where: params,
        select: {
          accountHead: true,
          allocatedAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          referenceDetail: true,
          referenceName: true,
          referenceType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
