/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdvanceTax } from "./AdvanceTax";
import { AdvanceTaxCountArgs } from "./AdvanceTaxCountArgs";
import { AdvanceTaxFindManyArgs } from "./AdvanceTaxFindManyArgs";
import { AdvanceTaxFindUniqueArgs } from "./AdvanceTaxFindUniqueArgs";
import { CreateAdvanceTaxArgs } from "./CreateAdvanceTaxArgs";
import { UpdateAdvanceTaxArgs } from "./UpdateAdvanceTaxArgs";
import { DeleteAdvanceTaxArgs } from "./DeleteAdvanceTaxArgs";
import { AdvanceTaxService } from "../advanceTax.service";
@graphql.Resolver(() => AdvanceTax)
export class AdvanceTaxResolverBase {
  constructor(protected readonly service: AdvanceTaxService) {}

  async _advanceTaxesMeta(
    @graphql.Args() args: AdvanceTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdvanceTax])
  async advanceTaxes(
    @graphql.Args() args: AdvanceTaxFindManyArgs
  ): Promise<AdvanceTax[]> {
    return this.service.advanceTaxes(args);
  }

  @graphql.Query(() => AdvanceTax, { nullable: true })
  async advanceTax(
    @graphql.Args() args: AdvanceTaxFindUniqueArgs
  ): Promise<AdvanceTax | null> {
    const result = await this.service.advanceTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdvanceTax)
  async createAdvanceTax(
    @graphql.Args() args: CreateAdvanceTaxArgs
  ): Promise<AdvanceTax> {
    return await this.service.createAdvanceTax({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdvanceTax)
  async updateAdvanceTax(
    @graphql.Args() args: UpdateAdvanceTaxArgs
  ): Promise<AdvanceTax | null> {
    try {
      return await this.service.updateAdvanceTax({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdvanceTax)
  async deleteAdvanceTax(
    @graphql.Args() args: DeleteAdvanceTaxArgs
  ): Promise<AdvanceTax | null> {
    try {
      return await this.service.deleteAdvanceTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
