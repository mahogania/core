/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StatementOfAccounts } from "./StatementOfAccounts";
import { StatementOfAccountsCountArgs } from "./StatementOfAccountsCountArgs";
import { StatementOfAccountsFindManyArgs } from "./StatementOfAccountsFindManyArgs";
import { StatementOfAccountsFindUniqueArgs } from "./StatementOfAccountsFindUniqueArgs";
import { CreateStatementOfAccountsArgs } from "./CreateStatementOfAccountsArgs";
import { UpdateStatementOfAccountsArgs } from "./UpdateStatementOfAccountsArgs";
import { DeleteStatementOfAccountsArgs } from "./DeleteStatementOfAccountsArgs";
import { StatementOfAccountsService } from "../statementOfAccounts.service";
@graphql.Resolver(() => StatementOfAccounts)
export class StatementOfAccountsResolverBase {
  constructor(protected readonly service: StatementOfAccountsService) {}

  async _statementOfAccountsItemsMeta(
    @graphql.Args() args: StatementOfAccountsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StatementOfAccounts])
  async statementOfAccountsItems(
    @graphql.Args() args: StatementOfAccountsFindManyArgs
  ): Promise<StatementOfAccounts[]> {
    return this.service.statementOfAccountsItems(args);
  }

  @graphql.Query(() => StatementOfAccounts, { nullable: true })
  async statementOfAccounts(
    @graphql.Args() args: StatementOfAccountsFindUniqueArgs
  ): Promise<StatementOfAccounts | null> {
    const result = await this.service.statementOfAccounts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StatementOfAccounts)
  async createStatementOfAccounts(
    @graphql.Args() args: CreateStatementOfAccountsArgs
  ): Promise<StatementOfAccounts> {
    return await this.service.createStatementOfAccounts({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StatementOfAccounts)
  async updateStatementOfAccounts(
    @graphql.Args() args: UpdateStatementOfAccountsArgs
  ): Promise<StatementOfAccounts | null> {
    try {
      return await this.service.updateStatementOfAccounts({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StatementOfAccounts)
  async deleteStatementOfAccounts(
    @graphql.Args() args: DeleteStatementOfAccountsArgs
  ): Promise<StatementOfAccounts | null> {
    try {
      return await this.service.deleteStatementOfAccounts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
