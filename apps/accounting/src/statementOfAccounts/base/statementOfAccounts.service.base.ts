/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StatementOfAccounts as PrismaStatementOfAccounts,
} from "@prisma/client";

export class StatementOfAccountsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StatementOfAccountsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.statementOfAccounts.count(args);
  }

  async statementOfAccountsItems(
    args: Prisma.StatementOfAccountsFindManyArgs
  ): Promise<PrismaStatementOfAccounts[]> {
    return this.prisma.statementOfAccounts.findMany(args);
  }
  async statementOfAccounts(
    args: Prisma.StatementOfAccountsFindUniqueArgs
  ): Promise<PrismaStatementOfAccounts | null> {
    return this.prisma.statementOfAccounts.findUnique(args);
  }
  async createStatementOfAccounts(
    args: Prisma.StatementOfAccountsCreateArgs
  ): Promise<PrismaStatementOfAccounts> {
    return this.prisma.statementOfAccounts.create(args);
  }
  async updateStatementOfAccounts(
    args: Prisma.StatementOfAccountsUpdateArgs
  ): Promise<PrismaStatementOfAccounts> {
    return this.prisma.statementOfAccounts.update(args);
  }
  async deleteStatementOfAccounts(
    args: Prisma.StatementOfAccountsDeleteArgs
  ): Promise<PrismaStatementOfAccounts> {
    return this.prisma.statementOfAccounts.delete(args);
  }
}
