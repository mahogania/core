/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AmendedDocumentNamingSettingsService } from "../amendedDocumentNamingSettings.service";
import { AmendedDocumentNamingSettingsCreateInput } from "./AmendedDocumentNamingSettingsCreateInput";
import { AmendedDocumentNamingSettings } from "./AmendedDocumentNamingSettings";
import { AmendedDocumentNamingSettingsFindManyArgs } from "./AmendedDocumentNamingSettingsFindManyArgs";
import { AmendedDocumentNamingSettingsWhereUniqueInput } from "./AmendedDocumentNamingSettingsWhereUniqueInput";
import { AmendedDocumentNamingSettingsUpdateInput } from "./AmendedDocumentNamingSettingsUpdateInput";

export class AmendedDocumentNamingSettingsControllerBase {
  constructor(
    protected readonly service: AmendedDocumentNamingSettingsService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AmendedDocumentNamingSettings })
  async createAmendedDocumentNamingSettings(
    @common.Body() data: AmendedDocumentNamingSettingsCreateInput
  ): Promise<AmendedDocumentNamingSettings> {
    return await this.service.createAmendedDocumentNamingSettings({
      data: data,
      select: {
        action: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        documentType: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AmendedDocumentNamingSettings] })
  @ApiNestedQuery(AmendedDocumentNamingSettingsFindManyArgs)
  async amendedDocumentNamingSettingsItems(
    @common.Req() request: Request
  ): Promise<AmendedDocumentNamingSettings[]> {
    const args = plainToClass(
      AmendedDocumentNamingSettingsFindManyArgs,
      request.query
    );
    return this.service.amendedDocumentNamingSettingsItems({
      ...args,
      select: {
        action: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        documentType: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AmendedDocumentNamingSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async amendedDocumentNamingSettings(
    @common.Param() params: AmendedDocumentNamingSettingsWhereUniqueInput
  ): Promise<AmendedDocumentNamingSettings | null> {
    const result = await this.service.amendedDocumentNamingSettings({
      where: params,
      select: {
        action: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        documentType: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AmendedDocumentNamingSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAmendedDocumentNamingSettings(
    @common.Param() params: AmendedDocumentNamingSettingsWhereUniqueInput,
    @common.Body() data: AmendedDocumentNamingSettingsUpdateInput
  ): Promise<AmendedDocumentNamingSettings | null> {
    try {
      return await this.service.updateAmendedDocumentNamingSettings({
        where: params,
        data: data,
        select: {
          action: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          documentType: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AmendedDocumentNamingSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAmendedDocumentNamingSettings(
    @common.Param() params: AmendedDocumentNamingSettingsWhereUniqueInput
  ): Promise<AmendedDocumentNamingSettings | null> {
    try {
      return await this.service.deleteAmendedDocumentNamingSettings({
        where: params,
        select: {
          action: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          documentType: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
