/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AutoRepeatDay } from "./AutoRepeatDay";
import { AutoRepeatDayCountArgs } from "./AutoRepeatDayCountArgs";
import { AutoRepeatDayFindManyArgs } from "./AutoRepeatDayFindManyArgs";
import { AutoRepeatDayFindUniqueArgs } from "./AutoRepeatDayFindUniqueArgs";
import { CreateAutoRepeatDayArgs } from "./CreateAutoRepeatDayArgs";
import { UpdateAutoRepeatDayArgs } from "./UpdateAutoRepeatDayArgs";
import { DeleteAutoRepeatDayArgs } from "./DeleteAutoRepeatDayArgs";
import { AutoRepeatDayService } from "../autoRepeatDay.service";
@graphql.Resolver(() => AutoRepeatDay)
export class AutoRepeatDayResolverBase {
  constructor(protected readonly service: AutoRepeatDayService) {}

  async _autoRepeatDaysMeta(
    @graphql.Args() args: AutoRepeatDayCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AutoRepeatDay])
  async autoRepeatDays(
    @graphql.Args() args: AutoRepeatDayFindManyArgs
  ): Promise<AutoRepeatDay[]> {
    return this.service.autoRepeatDays(args);
  }

  @graphql.Query(() => AutoRepeatDay, { nullable: true })
  async autoRepeatDay(
    @graphql.Args() args: AutoRepeatDayFindUniqueArgs
  ): Promise<AutoRepeatDay | null> {
    const result = await this.service.autoRepeatDay(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AutoRepeatDay)
  async createAutoRepeatDay(
    @graphql.Args() args: CreateAutoRepeatDayArgs
  ): Promise<AutoRepeatDay> {
    return await this.service.createAutoRepeatDay({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AutoRepeatDay)
  async updateAutoRepeatDay(
    @graphql.Args() args: UpdateAutoRepeatDayArgs
  ): Promise<AutoRepeatDay | null> {
    try {
      return await this.service.updateAutoRepeatDay({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AutoRepeatDay)
  async deleteAutoRepeatDay(
    @graphql.Args() args: DeleteAutoRepeatDayArgs
  ): Promise<AutoRepeatDay | null> {
    try {
      return await this.service.deleteAutoRepeatDay(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
