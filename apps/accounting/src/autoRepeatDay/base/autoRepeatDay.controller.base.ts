/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AutoRepeatDayService } from "../autoRepeatDay.service";
import { AutoRepeatDayCreateInput } from "./AutoRepeatDayCreateInput";
import { AutoRepeatDay } from "./AutoRepeatDay";
import { AutoRepeatDayFindManyArgs } from "./AutoRepeatDayFindManyArgs";
import { AutoRepeatDayWhereUniqueInput } from "./AutoRepeatDayWhereUniqueInput";
import { AutoRepeatDayUpdateInput } from "./AutoRepeatDayUpdateInput";

export class AutoRepeatDayControllerBase {
  constructor(protected readonly service: AutoRepeatDayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AutoRepeatDay })
  async createAutoRepeatDay(
    @common.Body() data: AutoRepeatDayCreateInput
  ): Promise<AutoRepeatDay> {
    return await this.service.createAutoRepeatDay({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        day: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AutoRepeatDay] })
  @ApiNestedQuery(AutoRepeatDayFindManyArgs)
  async autoRepeatDays(
    @common.Req() request: Request
  ): Promise<AutoRepeatDay[]> {
    const args = plainToClass(AutoRepeatDayFindManyArgs, request.query);
    return this.service.autoRepeatDays({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        day: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AutoRepeatDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async autoRepeatDay(
    @common.Param() params: AutoRepeatDayWhereUniqueInput
  ): Promise<AutoRepeatDay | null> {
    const result = await this.service.autoRepeatDay({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        day: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AutoRepeatDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAutoRepeatDay(
    @common.Param() params: AutoRepeatDayWhereUniqueInput,
    @common.Body() data: AutoRepeatDayUpdateInput
  ): Promise<AutoRepeatDay | null> {
    try {
      return await this.service.updateAutoRepeatDay({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          day: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AutoRepeatDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAutoRepeatDay(
    @common.Param() params: AutoRepeatDayWhereUniqueInput
  ): Promise<AutoRepeatDay | null> {
    try {
      return await this.service.deleteAutoRepeatDay({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          day: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
