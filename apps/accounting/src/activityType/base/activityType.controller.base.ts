/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActivityTypeService } from "../activityType.service";
import { ActivityTypeCreateInput } from "./ActivityTypeCreateInput";
import { ActivityType } from "./ActivityType";
import { ActivityTypeFindManyArgs } from "./ActivityTypeFindManyArgs";
import { ActivityTypeWhereUniqueInput } from "./ActivityTypeWhereUniqueInput";
import { ActivityTypeUpdateInput } from "./ActivityTypeUpdateInput";

export class ActivityTypeControllerBase {
  constructor(protected readonly service: ActivityTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ActivityType })
  async createActivityType(
    @common.Body() data: ActivityTypeCreateInput
  ): Promise<ActivityType> {
    return await this.service.createActivityType({
      data: data,
      select: {
        activityType: true,
        billingRate: true,
        costingRate: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ActivityType] })
  @ApiNestedQuery(ActivityTypeFindManyArgs)
  async activityTypes(@common.Req() request: Request): Promise<ActivityType[]> {
    const args = plainToClass(ActivityTypeFindManyArgs, request.query);
    return this.service.activityTypes({
      ...args,
      select: {
        activityType: true,
        billingRate: true,
        costingRate: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ActivityType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async activityType(
    @common.Param() params: ActivityTypeWhereUniqueInput
  ): Promise<ActivityType | null> {
    const result = await this.service.activityType({
      where: params,
      select: {
        activityType: true,
        billingRate: true,
        costingRate: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ActivityType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActivityType(
    @common.Param() params: ActivityTypeWhereUniqueInput,
    @common.Body() data: ActivityTypeUpdateInput
  ): Promise<ActivityType | null> {
    try {
      return await this.service.updateActivityType({
        where: params,
        data: data,
        select: {
          activityType: true,
          billingRate: true,
          costingRate: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ActivityType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActivityType(
    @common.Param() params: ActivityTypeWhereUniqueInput
  ): Promise<ActivityType | null> {
    try {
      return await this.service.deleteActivityType({
        where: params,
        select: {
          activityType: true,
          billingRate: true,
          costingRate: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
