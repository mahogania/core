/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetCapitalizationAssetItemService } from "../assetCapitalizationAssetItem.service";
import { AssetCapitalizationAssetItemCreateInput } from "./AssetCapitalizationAssetItemCreateInput";
import { AssetCapitalizationAssetItem } from "./AssetCapitalizationAssetItem";
import { AssetCapitalizationAssetItemFindManyArgs } from "./AssetCapitalizationAssetItemFindManyArgs";
import { AssetCapitalizationAssetItemWhereUniqueInput } from "./AssetCapitalizationAssetItemWhereUniqueInput";
import { AssetCapitalizationAssetItemUpdateInput } from "./AssetCapitalizationAssetItemUpdateInput";

export class AssetCapitalizationAssetItemControllerBase {
  constructor(
    protected readonly service: AssetCapitalizationAssetItemService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetCapitalizationAssetItem })
  async createAssetCapitalizationAssetItem(
    @common.Body() data: AssetCapitalizationAssetItemCreateInput
  ): Promise<AssetCapitalizationAssetItem> {
    return await this.service.createAssetCapitalizationAssetItem({
      data: data,
      select: {
        asset: true,
        assetName: true,
        assetValue: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currentAssetValue: true,
        docstatus: true,
        financeBook: true,
        fixedAssetAccount: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetCapitalizationAssetItem] })
  @ApiNestedQuery(AssetCapitalizationAssetItemFindManyArgs)
  async assetCapitalizationAssetItems(
    @common.Req() request: Request
  ): Promise<AssetCapitalizationAssetItem[]> {
    const args = plainToClass(
      AssetCapitalizationAssetItemFindManyArgs,
      request.query
    );
    return this.service.assetCapitalizationAssetItems({
      ...args,
      select: {
        asset: true,
        assetName: true,
        assetValue: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currentAssetValue: true,
        docstatus: true,
        financeBook: true,
        fixedAssetAccount: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetCapitalizationAssetItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetCapitalizationAssetItem(
    @common.Param() params: AssetCapitalizationAssetItemWhereUniqueInput
  ): Promise<AssetCapitalizationAssetItem | null> {
    const result = await this.service.assetCapitalizationAssetItem({
      where: params,
      select: {
        asset: true,
        assetName: true,
        assetValue: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currentAssetValue: true,
        docstatus: true,
        financeBook: true,
        fixedAssetAccount: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetCapitalizationAssetItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetCapitalizationAssetItem(
    @common.Param() params: AssetCapitalizationAssetItemWhereUniqueInput,
    @common.Body() data: AssetCapitalizationAssetItemUpdateInput
  ): Promise<AssetCapitalizationAssetItem | null> {
    try {
      return await this.service.updateAssetCapitalizationAssetItem({
        where: params,
        data: data,
        select: {
          asset: true,
          assetName: true,
          assetValue: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currentAssetValue: true,
          docstatus: true,
          financeBook: true,
          fixedAssetAccount: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetCapitalizationAssetItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetCapitalizationAssetItem(
    @common.Param() params: AssetCapitalizationAssetItemWhereUniqueInput
  ): Promise<AssetCapitalizationAssetItem | null> {
    try {
      return await this.service.deleteAssetCapitalizationAssetItem({
        where: params,
        select: {
          asset: true,
          assetName: true,
          assetValue: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currentAssetValue: true,
          docstatus: true,
          financeBook: true,
          fixedAssetAccount: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
