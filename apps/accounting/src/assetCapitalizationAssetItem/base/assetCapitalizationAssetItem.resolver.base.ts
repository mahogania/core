/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetCapitalizationAssetItem } from "./AssetCapitalizationAssetItem";
import { AssetCapitalizationAssetItemCountArgs } from "./AssetCapitalizationAssetItemCountArgs";
import { AssetCapitalizationAssetItemFindManyArgs } from "./AssetCapitalizationAssetItemFindManyArgs";
import { AssetCapitalizationAssetItemFindUniqueArgs } from "./AssetCapitalizationAssetItemFindUniqueArgs";
import { CreateAssetCapitalizationAssetItemArgs } from "./CreateAssetCapitalizationAssetItemArgs";
import { UpdateAssetCapitalizationAssetItemArgs } from "./UpdateAssetCapitalizationAssetItemArgs";
import { DeleteAssetCapitalizationAssetItemArgs } from "./DeleteAssetCapitalizationAssetItemArgs";
import { AssetCapitalizationAssetItemService } from "../assetCapitalizationAssetItem.service";
@graphql.Resolver(() => AssetCapitalizationAssetItem)
export class AssetCapitalizationAssetItemResolverBase {
  constructor(
    protected readonly service: AssetCapitalizationAssetItemService
  ) {}

  async _assetCapitalizationAssetItemsMeta(
    @graphql.Args() args: AssetCapitalizationAssetItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetCapitalizationAssetItem])
  async assetCapitalizationAssetItems(
    @graphql.Args() args: AssetCapitalizationAssetItemFindManyArgs
  ): Promise<AssetCapitalizationAssetItem[]> {
    return this.service.assetCapitalizationAssetItems(args);
  }

  @graphql.Query(() => AssetCapitalizationAssetItem, { nullable: true })
  async assetCapitalizationAssetItem(
    @graphql.Args() args: AssetCapitalizationAssetItemFindUniqueArgs
  ): Promise<AssetCapitalizationAssetItem | null> {
    const result = await this.service.assetCapitalizationAssetItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetCapitalizationAssetItem)
  async createAssetCapitalizationAssetItem(
    @graphql.Args() args: CreateAssetCapitalizationAssetItemArgs
  ): Promise<AssetCapitalizationAssetItem> {
    return await this.service.createAssetCapitalizationAssetItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetCapitalizationAssetItem)
  async updateAssetCapitalizationAssetItem(
    @graphql.Args() args: UpdateAssetCapitalizationAssetItemArgs
  ): Promise<AssetCapitalizationAssetItem | null> {
    try {
      return await this.service.updateAssetCapitalizationAssetItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetCapitalizationAssetItem)
  async deleteAssetCapitalizationAssetItem(
    @graphql.Args() args: DeleteAssetCapitalizationAssetItemArgs
  ): Promise<AssetCapitalizationAssetItem | null> {
    try {
      return await this.service.deleteAssetCapitalizationAssetItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
