/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeferredAccounting } from "./DeferredAccounting";
import { DeferredAccountingCountArgs } from "./DeferredAccountingCountArgs";
import { DeferredAccountingFindManyArgs } from "./DeferredAccountingFindManyArgs";
import { DeferredAccountingFindUniqueArgs } from "./DeferredAccountingFindUniqueArgs";
import { CreateDeferredAccountingArgs } from "./CreateDeferredAccountingArgs";
import { UpdateDeferredAccountingArgs } from "./UpdateDeferredAccountingArgs";
import { DeleteDeferredAccountingArgs } from "./DeleteDeferredAccountingArgs";
import { DeferredAccountingService } from "../deferredAccounting.service";
@graphql.Resolver(() => DeferredAccounting)
export class DeferredAccountingResolverBase {
  constructor(protected readonly service: DeferredAccountingService) {}

  async _deferredAccountingsMeta(
    @graphql.Args() args: DeferredAccountingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeferredAccounting])
  async deferredAccountings(
    @graphql.Args() args: DeferredAccountingFindManyArgs
  ): Promise<DeferredAccounting[]> {
    return this.service.deferredAccountings(args);
  }

  @graphql.Query(() => DeferredAccounting, { nullable: true })
  async deferredAccounting(
    @graphql.Args() args: DeferredAccountingFindUniqueArgs
  ): Promise<DeferredAccounting | null> {
    const result = await this.service.deferredAccounting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeferredAccounting)
  async createDeferredAccounting(
    @graphql.Args() args: CreateDeferredAccountingArgs
  ): Promise<DeferredAccounting> {
    return await this.service.createDeferredAccounting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeferredAccounting)
  async updateDeferredAccounting(
    @graphql.Args() args: UpdateDeferredAccountingArgs
  ): Promise<DeferredAccounting | null> {
    try {
      return await this.service.updateDeferredAccounting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeferredAccounting)
  async deleteDeferredAccounting(
    @graphql.Args() args: DeleteDeferredAccountingArgs
  ): Promise<DeferredAccounting | null> {
    try {
      return await this.service.deleteDeferredAccounting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
