/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DeferredAccounting as PrismaDeferredAccounting,
} from "@prisma/client";

export class DeferredAccountingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeferredAccountingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deferredAccounting.count(args);
  }

  async deferredAccountings(
    args: Prisma.DeferredAccountingFindManyArgs
  ): Promise<PrismaDeferredAccounting[]> {
    return this.prisma.deferredAccounting.findMany(args);
  }
  async deferredAccounting(
    args: Prisma.DeferredAccountingFindUniqueArgs
  ): Promise<PrismaDeferredAccounting | null> {
    return this.prisma.deferredAccounting.findUnique(args);
  }
  async createDeferredAccounting(
    args: Prisma.DeferredAccountingCreateArgs
  ): Promise<PrismaDeferredAccounting> {
    return this.prisma.deferredAccounting.create(args);
  }
  async updateDeferredAccounting(
    args: Prisma.DeferredAccountingUpdateArgs
  ): Promise<PrismaDeferredAccounting> {
    return this.prisma.deferredAccounting.update(args);
  }
  async deleteDeferredAccounting(
    args: Prisma.DeferredAccountingDeleteArgs
  ): Promise<PrismaDeferredAccounting> {
    return this.prisma.deferredAccounting.delete(args);
  }
}
