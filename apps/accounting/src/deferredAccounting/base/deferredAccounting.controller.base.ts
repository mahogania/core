/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeferredAccountingService } from "../deferredAccounting.service";
import { DeferredAccountingCreateInput } from "./DeferredAccountingCreateInput";
import { DeferredAccounting } from "./DeferredAccounting";
import { DeferredAccountingFindManyArgs } from "./DeferredAccountingFindManyArgs";
import { DeferredAccountingWhereUniqueInput } from "./DeferredAccountingWhereUniqueInput";
import { DeferredAccountingUpdateInput } from "./DeferredAccountingUpdateInput";

export class DeferredAccountingControllerBase {
  constructor(protected readonly service: DeferredAccountingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeferredAccounting })
  async createDeferredAccounting(
    @common.Body() data: DeferredAccountingCreateInput
  ): Promise<DeferredAccounting> {
    return await this.service.createDeferredAccounting({
      data: data,
      select: {
        account: true,
        amendedFrom: true,
        company: true,
        createdAt: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        postingDate: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeferredAccounting] })
  @ApiNestedQuery(DeferredAccountingFindManyArgs)
  async deferredAccountings(
    @common.Req() request: Request
  ): Promise<DeferredAccounting[]> {
    const args = plainToClass(DeferredAccountingFindManyArgs, request.query);
    return this.service.deferredAccountings({
      ...args,
      select: {
        account: true,
        amendedFrom: true,
        company: true,
        createdAt: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        postingDate: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeferredAccounting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deferredAccounting(
    @common.Param() params: DeferredAccountingWhereUniqueInput
  ): Promise<DeferredAccounting | null> {
    const result = await this.service.deferredAccounting({
      where: params,
      select: {
        account: true,
        amendedFrom: true,
        company: true,
        createdAt: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        postingDate: true,
        startDate: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeferredAccounting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeferredAccounting(
    @common.Param() params: DeferredAccountingWhereUniqueInput,
    @common.Body() data: DeferredAccountingUpdateInput
  ): Promise<DeferredAccounting | null> {
    try {
      return await this.service.updateDeferredAccounting({
        where: params,
        data: data,
        select: {
          account: true,
          amendedFrom: true,
          company: true,
          createdAt: true,
          docstatus: true,
          endDate: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          postingDate: true,
          startDate: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeferredAccounting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeferredAccounting(
    @common.Param() params: DeferredAccountingWhereUniqueInput
  ): Promise<DeferredAccounting | null> {
    try {
      return await this.service.deleteDeferredAccounting({
        where: params,
        select: {
          account: true,
          amendedFrom: true,
          company: true,
          createdAt: true,
          docstatus: true,
          endDate: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          postingDate: true,
          startDate: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
