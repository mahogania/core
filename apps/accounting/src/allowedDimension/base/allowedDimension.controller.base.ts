/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AllowedDimensionService } from "../allowedDimension.service";
import { AllowedDimensionCreateInput } from "./AllowedDimensionCreateInput";
import { AllowedDimension } from "./AllowedDimension";
import { AllowedDimensionFindManyArgs } from "./AllowedDimensionFindManyArgs";
import { AllowedDimensionWhereUniqueInput } from "./AllowedDimensionWhereUniqueInput";
import { AllowedDimensionUpdateInput } from "./AllowedDimensionUpdateInput";

export class AllowedDimensionControllerBase {
  constructor(protected readonly service: AllowedDimensionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AllowedDimension })
  async createAllowedDimension(
    @common.Body() data: AllowedDimensionCreateInput
  ): Promise<AllowedDimension> {
    return await this.service.createAllowedDimension({
      data: data,
      select: {
        accountingDimension: true,
        createdAt: true,
        creation: true,
        dimensionValue: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AllowedDimension] })
  @ApiNestedQuery(AllowedDimensionFindManyArgs)
  async allowedDimensions(
    @common.Req() request: Request
  ): Promise<AllowedDimension[]> {
    const args = plainToClass(AllowedDimensionFindManyArgs, request.query);
    return this.service.allowedDimensions({
      ...args,
      select: {
        accountingDimension: true,
        createdAt: true,
        creation: true,
        dimensionValue: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AllowedDimension })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async allowedDimension(
    @common.Param() params: AllowedDimensionWhereUniqueInput
  ): Promise<AllowedDimension | null> {
    const result = await this.service.allowedDimension({
      where: params,
      select: {
        accountingDimension: true,
        createdAt: true,
        creation: true,
        dimensionValue: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AllowedDimension })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAllowedDimension(
    @common.Param() params: AllowedDimensionWhereUniqueInput,
    @common.Body() data: AllowedDimensionUpdateInput
  ): Promise<AllowedDimension | null> {
    try {
      return await this.service.updateAllowedDimension({
        where: params,
        data: data,
        select: {
          accountingDimension: true,
          createdAt: true,
          creation: true,
          dimensionValue: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AllowedDimension })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAllowedDimension(
    @common.Param() params: AllowedDimensionWhereUniqueInput
  ): Promise<AllowedDimension | null> {
    try {
      return await this.service.deleteAllowedDimension({
        where: params,
        select: {
          accountingDimension: true,
          createdAt: true,
          creation: true,
          dimensionValue: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
