/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AllowedDimension } from "./AllowedDimension";
import { AllowedDimensionCountArgs } from "./AllowedDimensionCountArgs";
import { AllowedDimensionFindManyArgs } from "./AllowedDimensionFindManyArgs";
import { AllowedDimensionFindUniqueArgs } from "./AllowedDimensionFindUniqueArgs";
import { CreateAllowedDimensionArgs } from "./CreateAllowedDimensionArgs";
import { UpdateAllowedDimensionArgs } from "./UpdateAllowedDimensionArgs";
import { DeleteAllowedDimensionArgs } from "./DeleteAllowedDimensionArgs";
import { AllowedDimensionService } from "../allowedDimension.service";
@graphql.Resolver(() => AllowedDimension)
export class AllowedDimensionResolverBase {
  constructor(protected readonly service: AllowedDimensionService) {}

  async _allowedDimensionsMeta(
    @graphql.Args() args: AllowedDimensionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AllowedDimension])
  async allowedDimensions(
    @graphql.Args() args: AllowedDimensionFindManyArgs
  ): Promise<AllowedDimension[]> {
    return this.service.allowedDimensions(args);
  }

  @graphql.Query(() => AllowedDimension, { nullable: true })
  async allowedDimension(
    @graphql.Args() args: AllowedDimensionFindUniqueArgs
  ): Promise<AllowedDimension | null> {
    const result = await this.service.allowedDimension(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AllowedDimension)
  async createAllowedDimension(
    @graphql.Args() args: CreateAllowedDimensionArgs
  ): Promise<AllowedDimension> {
    return await this.service.createAllowedDimension({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AllowedDimension)
  async updateAllowedDimension(
    @graphql.Args() args: UpdateAllowedDimensionArgs
  ): Promise<AllowedDimension | null> {
    try {
      return await this.service.updateAllowedDimension({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AllowedDimension)
  async deleteAllowedDimension(
    @graphql.Args() args: DeleteAllowedDimensionArgs
  ): Promise<AllowedDimension | null> {
    try {
      return await this.service.deleteAllowedDimension(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
