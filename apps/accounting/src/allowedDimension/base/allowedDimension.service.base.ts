/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AllowedDimension as PrismaAllowedDimension,
} from "@prisma/client";

export class AllowedDimensionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AllowedDimensionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.allowedDimension.count(args);
  }

  async allowedDimensions(
    args: Prisma.AllowedDimensionFindManyArgs
  ): Promise<PrismaAllowedDimension[]> {
    return this.prisma.allowedDimension.findMany(args);
  }
  async allowedDimension(
    args: Prisma.AllowedDimensionFindUniqueArgs
  ): Promise<PrismaAllowedDimension | null> {
    return this.prisma.allowedDimension.findUnique(args);
  }
  async createAllowedDimension(
    args: Prisma.AllowedDimensionCreateArgs
  ): Promise<PrismaAllowedDimension> {
    return this.prisma.allowedDimension.create(args);
  }
  async updateAllowedDimension(
    args: Prisma.AllowedDimensionUpdateArgs
  ): Promise<PrismaAllowedDimension> {
    return this.prisma.allowedDimension.update(args);
  }
  async deleteAllowedDimension(
    args: Prisma.AllowedDimensionDeleteArgs
  ): Promise<PrismaAllowedDimension> {
    return this.prisma.allowedDimension.delete(args);
  }
}
