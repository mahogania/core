/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductBundleItemService } from "../productBundleItem.service";
import { ProductBundleItemCreateInput } from "./ProductBundleItemCreateInput";
import { ProductBundleItem } from "./ProductBundleItem";
import { ProductBundleItemFindManyArgs } from "./ProductBundleItemFindManyArgs";
import { ProductBundleItemWhereUniqueInput } from "./ProductBundleItemWhereUniqueInput";
import { ProductBundleItemUpdateInput } from "./ProductBundleItemUpdateInput";

export class ProductBundleItemControllerBase {
  constructor(protected readonly service: ProductBundleItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductBundleItem })
  async createProductBundleItem(
    @common.Body() data: ProductBundleItemCreateInput
  ): Promise<ProductBundleItem> {
    return await this.service.createProductBundleItem({
      data: data,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        rate: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductBundleItem] })
  @ApiNestedQuery(ProductBundleItemFindManyArgs)
  async productBundleItems(
    @common.Req() request: Request
  ): Promise<ProductBundleItem[]> {
    const args = plainToClass(ProductBundleItemFindManyArgs, request.query);
    return this.service.productBundleItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        rate: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductBundleItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productBundleItem(
    @common.Param() params: ProductBundleItemWhereUniqueInput
  ): Promise<ProductBundleItem | null> {
    const result = await this.service.productBundleItem({
      where: params,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        rate: true,
        uom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductBundleItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductBundleItem(
    @common.Param() params: ProductBundleItemWhereUniqueInput,
    @common.Body() data: ProductBundleItemUpdateInput
  ): Promise<ProductBundleItem | null> {
    try {
      return await this.service.updateProductBundleItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          rate: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductBundleItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductBundleItem(
    @common.Param() params: ProductBundleItemWhereUniqueInput
  ): Promise<ProductBundleItem | null> {
    try {
      return await this.service.deleteProductBundleItem({
        where: params,
        select: {
          createdAt: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          rate: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
