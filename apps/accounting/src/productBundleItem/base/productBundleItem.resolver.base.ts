/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductBundleItem } from "./ProductBundleItem";
import { ProductBundleItemCountArgs } from "./ProductBundleItemCountArgs";
import { ProductBundleItemFindManyArgs } from "./ProductBundleItemFindManyArgs";
import { ProductBundleItemFindUniqueArgs } from "./ProductBundleItemFindUniqueArgs";
import { CreateProductBundleItemArgs } from "./CreateProductBundleItemArgs";
import { UpdateProductBundleItemArgs } from "./UpdateProductBundleItemArgs";
import { DeleteProductBundleItemArgs } from "./DeleteProductBundleItemArgs";
import { ProductBundleItemService } from "../productBundleItem.service";
@graphql.Resolver(() => ProductBundleItem)
export class ProductBundleItemResolverBase {
  constructor(protected readonly service: ProductBundleItemService) {}

  async _productBundleItemsMeta(
    @graphql.Args() args: ProductBundleItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductBundleItem])
  async productBundleItems(
    @graphql.Args() args: ProductBundleItemFindManyArgs
  ): Promise<ProductBundleItem[]> {
    return this.service.productBundleItems(args);
  }

  @graphql.Query(() => ProductBundleItem, { nullable: true })
  async productBundleItem(
    @graphql.Args() args: ProductBundleItemFindUniqueArgs
  ): Promise<ProductBundleItem | null> {
    const result = await this.service.productBundleItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductBundleItem)
  async createProductBundleItem(
    @graphql.Args() args: CreateProductBundleItemArgs
  ): Promise<ProductBundleItem> {
    return await this.service.createProductBundleItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductBundleItem)
  async updateProductBundleItem(
    @graphql.Args() args: UpdateProductBundleItemArgs
  ): Promise<ProductBundleItem | null> {
    try {
      return await this.service.updateProductBundleItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductBundleItem)
  async deleteProductBundleItem(
    @graphql.Args() args: DeleteProductBundleItemArgs
  ): Promise<ProductBundleItem | null> {
    try {
      return await this.service.deleteProductBundleItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
