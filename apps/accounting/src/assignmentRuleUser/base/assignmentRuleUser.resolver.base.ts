/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssignmentRuleUser } from "./AssignmentRuleUser";
import { AssignmentRuleUserCountArgs } from "./AssignmentRuleUserCountArgs";
import { AssignmentRuleUserFindManyArgs } from "./AssignmentRuleUserFindManyArgs";
import { AssignmentRuleUserFindUniqueArgs } from "./AssignmentRuleUserFindUniqueArgs";
import { CreateAssignmentRuleUserArgs } from "./CreateAssignmentRuleUserArgs";
import { UpdateAssignmentRuleUserArgs } from "./UpdateAssignmentRuleUserArgs";
import { DeleteAssignmentRuleUserArgs } from "./DeleteAssignmentRuleUserArgs";
import { AssignmentRuleUserService } from "../assignmentRuleUser.service";
@graphql.Resolver(() => AssignmentRuleUser)
export class AssignmentRuleUserResolverBase {
  constructor(protected readonly service: AssignmentRuleUserService) {}

  async _assignmentRuleUsersMeta(
    @graphql.Args() args: AssignmentRuleUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssignmentRuleUser])
  async assignmentRuleUsers(
    @graphql.Args() args: AssignmentRuleUserFindManyArgs
  ): Promise<AssignmentRuleUser[]> {
    return this.service.assignmentRuleUsers(args);
  }

  @graphql.Query(() => AssignmentRuleUser, { nullable: true })
  async assignmentRuleUser(
    @graphql.Args() args: AssignmentRuleUserFindUniqueArgs
  ): Promise<AssignmentRuleUser | null> {
    const result = await this.service.assignmentRuleUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssignmentRuleUser)
  async createAssignmentRuleUser(
    @graphql.Args() args: CreateAssignmentRuleUserArgs
  ): Promise<AssignmentRuleUser> {
    return await this.service.createAssignmentRuleUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssignmentRuleUser)
  async updateAssignmentRuleUser(
    @graphql.Args() args: UpdateAssignmentRuleUserArgs
  ): Promise<AssignmentRuleUser | null> {
    try {
      return await this.service.updateAssignmentRuleUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssignmentRuleUser)
  async deleteAssignmentRuleUser(
    @graphql.Args() args: DeleteAssignmentRuleUserArgs
  ): Promise<AssignmentRuleUser | null> {
    try {
      return await this.service.deleteAssignmentRuleUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
