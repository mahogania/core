/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssignmentRuleUserService } from "../assignmentRuleUser.service";
import { AssignmentRuleUserCreateInput } from "./AssignmentRuleUserCreateInput";
import { AssignmentRuleUser } from "./AssignmentRuleUser";
import { AssignmentRuleUserFindManyArgs } from "./AssignmentRuleUserFindManyArgs";
import { AssignmentRuleUserWhereUniqueInput } from "./AssignmentRuleUserWhereUniqueInput";
import { AssignmentRuleUserUpdateInput } from "./AssignmentRuleUserUpdateInput";

export class AssignmentRuleUserControllerBase {
  constructor(protected readonly service: AssignmentRuleUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssignmentRuleUser })
  async createAssignmentRuleUser(
    @common.Body() data: AssignmentRuleUserCreateInput
  ): Promise<AssignmentRuleUser> {
    return await this.service.createAssignmentRuleUser({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssignmentRuleUser] })
  @ApiNestedQuery(AssignmentRuleUserFindManyArgs)
  async assignmentRuleUsers(
    @common.Req() request: Request
  ): Promise<AssignmentRuleUser[]> {
    const args = plainToClass(AssignmentRuleUserFindManyArgs, request.query);
    return this.service.assignmentRuleUsers({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRuleUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assignmentRuleUser(
    @common.Param() params: AssignmentRuleUserWhereUniqueInput
  ): Promise<AssignmentRuleUser | null> {
    const result = await this.service.assignmentRuleUser({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRuleUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssignmentRuleUser(
    @common.Param() params: AssignmentRuleUserWhereUniqueInput,
    @common.Body() data: AssignmentRuleUserUpdateInput
  ): Promise<AssignmentRuleUser | null> {
    try {
      return await this.service.updateAssignmentRuleUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRuleUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssignmentRuleUser(
    @common.Param() params: AssignmentRuleUserWhereUniqueInput
  ): Promise<AssignmentRuleUser | null> {
    try {
      return await this.service.deleteAssignmentRuleUser({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
