/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetCategoryAccount } from "./AssetCategoryAccount";
import { AssetCategoryAccountCountArgs } from "./AssetCategoryAccountCountArgs";
import { AssetCategoryAccountFindManyArgs } from "./AssetCategoryAccountFindManyArgs";
import { AssetCategoryAccountFindUniqueArgs } from "./AssetCategoryAccountFindUniqueArgs";
import { CreateAssetCategoryAccountArgs } from "./CreateAssetCategoryAccountArgs";
import { UpdateAssetCategoryAccountArgs } from "./UpdateAssetCategoryAccountArgs";
import { DeleteAssetCategoryAccountArgs } from "./DeleteAssetCategoryAccountArgs";
import { AssetCategoryAccountService } from "../assetCategoryAccount.service";
@graphql.Resolver(() => AssetCategoryAccount)
export class AssetCategoryAccountResolverBase {
  constructor(protected readonly service: AssetCategoryAccountService) {}

  async _assetCategoryAccountsMeta(
    @graphql.Args() args: AssetCategoryAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetCategoryAccount])
  async assetCategoryAccounts(
    @graphql.Args() args: AssetCategoryAccountFindManyArgs
  ): Promise<AssetCategoryAccount[]> {
    return this.service.assetCategoryAccounts(args);
  }

  @graphql.Query(() => AssetCategoryAccount, { nullable: true })
  async assetCategoryAccount(
    @graphql.Args() args: AssetCategoryAccountFindUniqueArgs
  ): Promise<AssetCategoryAccount | null> {
    const result = await this.service.assetCategoryAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetCategoryAccount)
  async createAssetCategoryAccount(
    @graphql.Args() args: CreateAssetCategoryAccountArgs
  ): Promise<AssetCategoryAccount> {
    return await this.service.createAssetCategoryAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetCategoryAccount)
  async updateAssetCategoryAccount(
    @graphql.Args() args: UpdateAssetCategoryAccountArgs
  ): Promise<AssetCategoryAccount | null> {
    try {
      return await this.service.updateAssetCategoryAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetCategoryAccount)
  async deleteAssetCategoryAccount(
    @graphql.Args() args: DeleteAssetCategoryAccountArgs
  ): Promise<AssetCategoryAccount | null> {
    try {
      return await this.service.deleteAssetCategoryAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
