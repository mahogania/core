/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AssetCategoryAccount as PrismaAssetCategoryAccount,
} from "@prisma/client";

export class AssetCategoryAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetCategoryAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetCategoryAccount.count(args);
  }

  async assetCategoryAccounts(
    args: Prisma.AssetCategoryAccountFindManyArgs
  ): Promise<PrismaAssetCategoryAccount[]> {
    return this.prisma.assetCategoryAccount.findMany(args);
  }
  async assetCategoryAccount(
    args: Prisma.AssetCategoryAccountFindUniqueArgs
  ): Promise<PrismaAssetCategoryAccount | null> {
    return this.prisma.assetCategoryAccount.findUnique(args);
  }
  async createAssetCategoryAccount(
    args: Prisma.AssetCategoryAccountCreateArgs
  ): Promise<PrismaAssetCategoryAccount> {
    return this.prisma.assetCategoryAccount.create(args);
  }
  async updateAssetCategoryAccount(
    args: Prisma.AssetCategoryAccountUpdateArgs
  ): Promise<PrismaAssetCategoryAccount> {
    return this.prisma.assetCategoryAccount.update(args);
  }
  async deleteAssetCategoryAccount(
    args: Prisma.AssetCategoryAccountDeleteArgs
  ): Promise<PrismaAssetCategoryAccount> {
    return this.prisma.assetCategoryAccount.delete(args);
  }
}
