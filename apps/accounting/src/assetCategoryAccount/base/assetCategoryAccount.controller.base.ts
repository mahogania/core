/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetCategoryAccountService } from "../assetCategoryAccount.service";
import { AssetCategoryAccountCreateInput } from "./AssetCategoryAccountCreateInput";
import { AssetCategoryAccount } from "./AssetCategoryAccount";
import { AssetCategoryAccountFindManyArgs } from "./AssetCategoryAccountFindManyArgs";
import { AssetCategoryAccountWhereUniqueInput } from "./AssetCategoryAccountWhereUniqueInput";
import { AssetCategoryAccountUpdateInput } from "./AssetCategoryAccountUpdateInput";

export class AssetCategoryAccountControllerBase {
  constructor(protected readonly service: AssetCategoryAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetCategoryAccount })
  async createAssetCategoryAccount(
    @common.Body() data: AssetCategoryAccountCreateInput
  ): Promise<AssetCategoryAccount> {
    return await this.service.createAssetCategoryAccount({
      data: data,
      select: {
        accumulatedDepreciationAccount: true,
        capitalWorkInProgressAccount: true,
        companyName: true,
        createdAt: true,
        creation: true,
        depreciationExpenseAccount: true,
        docstatus: true,
        fixedAssetAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetCategoryAccount] })
  @ApiNestedQuery(AssetCategoryAccountFindManyArgs)
  async assetCategoryAccounts(
    @common.Req() request: Request
  ): Promise<AssetCategoryAccount[]> {
    const args = plainToClass(AssetCategoryAccountFindManyArgs, request.query);
    return this.service.assetCategoryAccounts({
      ...args,
      select: {
        accumulatedDepreciationAccount: true,
        capitalWorkInProgressAccount: true,
        companyName: true,
        createdAt: true,
        creation: true,
        depreciationExpenseAccount: true,
        docstatus: true,
        fixedAssetAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetCategoryAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetCategoryAccount(
    @common.Param() params: AssetCategoryAccountWhereUniqueInput
  ): Promise<AssetCategoryAccount | null> {
    const result = await this.service.assetCategoryAccount({
      where: params,
      select: {
        accumulatedDepreciationAccount: true,
        capitalWorkInProgressAccount: true,
        companyName: true,
        createdAt: true,
        creation: true,
        depreciationExpenseAccount: true,
        docstatus: true,
        fixedAssetAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetCategoryAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetCategoryAccount(
    @common.Param() params: AssetCategoryAccountWhereUniqueInput,
    @common.Body() data: AssetCategoryAccountUpdateInput
  ): Promise<AssetCategoryAccount | null> {
    try {
      return await this.service.updateAssetCategoryAccount({
        where: params,
        data: data,
        select: {
          accumulatedDepreciationAccount: true,
          capitalWorkInProgressAccount: true,
          companyName: true,
          createdAt: true,
          creation: true,
          depreciationExpenseAccount: true,
          docstatus: true,
          fixedAssetAccount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetCategoryAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetCategoryAccount(
    @common.Param() params: AssetCategoryAccountWhereUniqueInput
  ): Promise<AssetCategoryAccount | null> {
    try {
      return await this.service.deleteAssetCategoryAccount({
        where: params,
        select: {
          accumulatedDepreciationAccount: true,
          capitalWorkInProgressAccount: true,
          companyName: true,
          createdAt: true,
          creation: true,
          depreciationExpenseAccount: true,
          docstatus: true,
          fixedAssetAccount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
