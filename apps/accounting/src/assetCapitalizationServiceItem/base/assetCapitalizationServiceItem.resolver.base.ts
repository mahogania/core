/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetCapitalizationServiceItem } from "./AssetCapitalizationServiceItem";
import { AssetCapitalizationServiceItemCountArgs } from "./AssetCapitalizationServiceItemCountArgs";
import { AssetCapitalizationServiceItemFindManyArgs } from "./AssetCapitalizationServiceItemFindManyArgs";
import { AssetCapitalizationServiceItemFindUniqueArgs } from "./AssetCapitalizationServiceItemFindUniqueArgs";
import { CreateAssetCapitalizationServiceItemArgs } from "./CreateAssetCapitalizationServiceItemArgs";
import { UpdateAssetCapitalizationServiceItemArgs } from "./UpdateAssetCapitalizationServiceItemArgs";
import { DeleteAssetCapitalizationServiceItemArgs } from "./DeleteAssetCapitalizationServiceItemArgs";
import { AssetCapitalizationServiceItemService } from "../assetCapitalizationServiceItem.service";
@graphql.Resolver(() => AssetCapitalizationServiceItem)
export class AssetCapitalizationServiceItemResolverBase {
  constructor(
    protected readonly service: AssetCapitalizationServiceItemService
  ) {}

  async _assetCapitalizationServiceItemsMeta(
    @graphql.Args() args: AssetCapitalizationServiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetCapitalizationServiceItem])
  async assetCapitalizationServiceItems(
    @graphql.Args() args: AssetCapitalizationServiceItemFindManyArgs
  ): Promise<AssetCapitalizationServiceItem[]> {
    return this.service.assetCapitalizationServiceItems(args);
  }

  @graphql.Query(() => AssetCapitalizationServiceItem, { nullable: true })
  async assetCapitalizationServiceItem(
    @graphql.Args() args: AssetCapitalizationServiceItemFindUniqueArgs
  ): Promise<AssetCapitalizationServiceItem | null> {
    const result = await this.service.assetCapitalizationServiceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetCapitalizationServiceItem)
  async createAssetCapitalizationServiceItem(
    @graphql.Args() args: CreateAssetCapitalizationServiceItemArgs
  ): Promise<AssetCapitalizationServiceItem> {
    return await this.service.createAssetCapitalizationServiceItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetCapitalizationServiceItem)
  async updateAssetCapitalizationServiceItem(
    @graphql.Args() args: UpdateAssetCapitalizationServiceItemArgs
  ): Promise<AssetCapitalizationServiceItem | null> {
    try {
      return await this.service.updateAssetCapitalizationServiceItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetCapitalizationServiceItem)
  async deleteAssetCapitalizationServiceItem(
    @graphql.Args() args: DeleteAssetCapitalizationServiceItemArgs
  ): Promise<AssetCapitalizationServiceItem | null> {
    try {
      return await this.service.deleteAssetCapitalizationServiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
