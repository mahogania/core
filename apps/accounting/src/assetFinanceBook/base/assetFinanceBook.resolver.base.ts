/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetFinanceBook } from "./AssetFinanceBook";
import { AssetFinanceBookCountArgs } from "./AssetFinanceBookCountArgs";
import { AssetFinanceBookFindManyArgs } from "./AssetFinanceBookFindManyArgs";
import { AssetFinanceBookFindUniqueArgs } from "./AssetFinanceBookFindUniqueArgs";
import { CreateAssetFinanceBookArgs } from "./CreateAssetFinanceBookArgs";
import { UpdateAssetFinanceBookArgs } from "./UpdateAssetFinanceBookArgs";
import { DeleteAssetFinanceBookArgs } from "./DeleteAssetFinanceBookArgs";
import { AssetFinanceBookService } from "../assetFinanceBook.service";
@graphql.Resolver(() => AssetFinanceBook)
export class AssetFinanceBookResolverBase {
  constructor(protected readonly service: AssetFinanceBookService) {}

  async _assetFinanceBooksMeta(
    @graphql.Args() args: AssetFinanceBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetFinanceBook])
  async assetFinanceBooks(
    @graphql.Args() args: AssetFinanceBookFindManyArgs
  ): Promise<AssetFinanceBook[]> {
    return this.service.assetFinanceBooks(args);
  }

  @graphql.Query(() => AssetFinanceBook, { nullable: true })
  async assetFinanceBook(
    @graphql.Args() args: AssetFinanceBookFindUniqueArgs
  ): Promise<AssetFinanceBook | null> {
    const result = await this.service.assetFinanceBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetFinanceBook)
  async createAssetFinanceBook(
    @graphql.Args() args: CreateAssetFinanceBookArgs
  ): Promise<AssetFinanceBook> {
    return await this.service.createAssetFinanceBook({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetFinanceBook)
  async updateAssetFinanceBook(
    @graphql.Args() args: UpdateAssetFinanceBookArgs
  ): Promise<AssetFinanceBook | null> {
    try {
      return await this.service.updateAssetFinanceBook({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetFinanceBook)
  async deleteAssetFinanceBook(
    @graphql.Args() args: DeleteAssetFinanceBookArgs
  ): Promise<AssetFinanceBook | null> {
    try {
      return await this.service.deleteAssetFinanceBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
