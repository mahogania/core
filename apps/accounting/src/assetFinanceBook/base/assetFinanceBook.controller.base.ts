/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetFinanceBookService } from "../assetFinanceBook.service";
import { AssetFinanceBookCreateInput } from "./AssetFinanceBookCreateInput";
import { AssetFinanceBook } from "./AssetFinanceBook";
import { AssetFinanceBookFindManyArgs } from "./AssetFinanceBookFindManyArgs";
import { AssetFinanceBookWhereUniqueInput } from "./AssetFinanceBookWhereUniqueInput";
import { AssetFinanceBookUpdateInput } from "./AssetFinanceBookUpdateInput";

export class AssetFinanceBookControllerBase {
  constructor(protected readonly service: AssetFinanceBookService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetFinanceBook })
  async createAssetFinanceBook(
    @common.Body() data: AssetFinanceBookCreateInput
  ): Promise<AssetFinanceBook> {
    return await this.service.createAssetFinanceBook({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        dailyProrataBased: true,
        depreciationMethod: true,
        depreciationStartDate: true,
        docstatus: true,
        expectedValueAfterUsefulLife: true,
        financeBook: true,
        frequencyOfDepreciation: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        rateOfDepreciation: true,
        salvageValuePercentage: true,
        shiftBased: true,
        totalNumberOfBookedDepreciations: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
        valueAfterDepreciation: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetFinanceBook] })
  @ApiNestedQuery(AssetFinanceBookFindManyArgs)
  async assetFinanceBooks(
    @common.Req() request: Request
  ): Promise<AssetFinanceBook[]> {
    const args = plainToClass(AssetFinanceBookFindManyArgs, request.query);
    return this.service.assetFinanceBooks({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        dailyProrataBased: true,
        depreciationMethod: true,
        depreciationStartDate: true,
        docstatus: true,
        expectedValueAfterUsefulLife: true,
        financeBook: true,
        frequencyOfDepreciation: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        rateOfDepreciation: true,
        salvageValuePercentage: true,
        shiftBased: true,
        totalNumberOfBookedDepreciations: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
        valueAfterDepreciation: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetFinanceBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetFinanceBook(
    @common.Param() params: AssetFinanceBookWhereUniqueInput
  ): Promise<AssetFinanceBook | null> {
    const result = await this.service.assetFinanceBook({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        dailyProrataBased: true,
        depreciationMethod: true,
        depreciationStartDate: true,
        docstatus: true,
        expectedValueAfterUsefulLife: true,
        financeBook: true,
        frequencyOfDepreciation: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        rateOfDepreciation: true,
        salvageValuePercentage: true,
        shiftBased: true,
        totalNumberOfBookedDepreciations: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
        valueAfterDepreciation: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetFinanceBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetFinanceBook(
    @common.Param() params: AssetFinanceBookWhereUniqueInput,
    @common.Body() data: AssetFinanceBookUpdateInput
  ): Promise<AssetFinanceBook | null> {
    try {
      return await this.service.updateAssetFinanceBook({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          dailyProrataBased: true,
          depreciationMethod: true,
          depreciationStartDate: true,
          docstatus: true,
          expectedValueAfterUsefulLife: true,
          financeBook: true,
          frequencyOfDepreciation: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          rateOfDepreciation: true,
          salvageValuePercentage: true,
          shiftBased: true,
          totalNumberOfBookedDepreciations: true,
          totalNumberOfDepreciations: true,
          updatedAt: true,
          valueAfterDepreciation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetFinanceBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetFinanceBook(
    @common.Param() params: AssetFinanceBookWhereUniqueInput
  ): Promise<AssetFinanceBook | null> {
    try {
      return await this.service.deleteAssetFinanceBook({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          dailyProrataBased: true,
          depreciationMethod: true,
          depreciationStartDate: true,
          docstatus: true,
          expectedValueAfterUsefulLife: true,
          financeBook: true,
          frequencyOfDepreciation: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          rateOfDepreciation: true,
          salvageValuePercentage: true,
          shiftBased: true,
          totalNumberOfBookedDepreciations: true,
          totalNumberOfDepreciations: true,
          updatedAt: true,
          valueAfterDepreciation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
