/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetCapitalizationService } from "../assetCapitalization.service";
import { AssetCapitalizationCreateInput } from "./AssetCapitalizationCreateInput";
import { AssetCapitalization } from "./AssetCapitalization";
import { AssetCapitalizationFindManyArgs } from "./AssetCapitalizationFindManyArgs";
import { AssetCapitalizationWhereUniqueInput } from "./AssetCapitalizationWhereUniqueInput";
import { AssetCapitalizationUpdateInput } from "./AssetCapitalizationUpdateInput";

export class AssetCapitalizationControllerBase {
  constructor(protected readonly service: AssetCapitalizationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetCapitalization })
  async createAssetCapitalization(
    @common.Body() data: AssetCapitalizationCreateInput
  ): Promise<AssetCapitalization> {
    return await this.service.createAssetCapitalization({
      data: data,
      select: {
        amendedFrom: true,
        assetItemsTotal: true,
        capitalizationMethod: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        entryType: true,
        financeBook: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        serviceItemsTotal: true,
        setPostingTime: true,
        stockItemsTotal: true,
        targetAsset: true,
        targetAssetLocation: true,
        targetAssetName: true,
        targetBatchNo: true,
        targetFixedAssetAccount: true,
        targetHasBatchNo: true,
        targetHasSerialNo: true,
        targetIncomingRate: true,
        targetIsFixedAsset: true,
        targetItemCode: true,
        targetItemName: true,
        targetQty: true,
        targetSerialNo: true,
        targetStockUom: true,
        targetWarehouse: true,
        title: true,
        totalValue: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetCapitalization] })
  @ApiNestedQuery(AssetCapitalizationFindManyArgs)
  async assetCapitalizations(
    @common.Req() request: Request
  ): Promise<AssetCapitalization[]> {
    const args = plainToClass(AssetCapitalizationFindManyArgs, request.query);
    return this.service.assetCapitalizations({
      ...args,
      select: {
        amendedFrom: true,
        assetItemsTotal: true,
        capitalizationMethod: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        entryType: true,
        financeBook: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        serviceItemsTotal: true,
        setPostingTime: true,
        stockItemsTotal: true,
        targetAsset: true,
        targetAssetLocation: true,
        targetAssetName: true,
        targetBatchNo: true,
        targetFixedAssetAccount: true,
        targetHasBatchNo: true,
        targetHasSerialNo: true,
        targetIncomingRate: true,
        targetIsFixedAsset: true,
        targetItemCode: true,
        targetItemName: true,
        targetQty: true,
        targetSerialNo: true,
        targetStockUom: true,
        targetWarehouse: true,
        title: true,
        totalValue: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetCapitalization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetCapitalization(
    @common.Param() params: AssetCapitalizationWhereUniqueInput
  ): Promise<AssetCapitalization | null> {
    const result = await this.service.assetCapitalization({
      where: params,
      select: {
        amendedFrom: true,
        assetItemsTotal: true,
        capitalizationMethod: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        entryType: true,
        financeBook: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        serviceItemsTotal: true,
        setPostingTime: true,
        stockItemsTotal: true,
        targetAsset: true,
        targetAssetLocation: true,
        targetAssetName: true,
        targetBatchNo: true,
        targetFixedAssetAccount: true,
        targetHasBatchNo: true,
        targetHasSerialNo: true,
        targetIncomingRate: true,
        targetIsFixedAsset: true,
        targetItemCode: true,
        targetItemName: true,
        targetQty: true,
        targetSerialNo: true,
        targetStockUom: true,
        targetWarehouse: true,
        title: true,
        totalValue: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetCapitalization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetCapitalization(
    @common.Param() params: AssetCapitalizationWhereUniqueInput,
    @common.Body() data: AssetCapitalizationUpdateInput
  ): Promise<AssetCapitalization | null> {
    try {
      return await this.service.updateAssetCapitalization({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          assetItemsTotal: true,
          capitalizationMethod: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          entryType: true,
          financeBook: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          postingTime: true,
          serviceItemsTotal: true,
          setPostingTime: true,
          stockItemsTotal: true,
          targetAsset: true,
          targetAssetLocation: true,
          targetAssetName: true,
          targetBatchNo: true,
          targetFixedAssetAccount: true,
          targetHasBatchNo: true,
          targetHasSerialNo: true,
          targetIncomingRate: true,
          targetIsFixedAsset: true,
          targetItemCode: true,
          targetItemName: true,
          targetQty: true,
          targetSerialNo: true,
          targetStockUom: true,
          targetWarehouse: true,
          title: true,
          totalValue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetCapitalization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetCapitalization(
    @common.Param() params: AssetCapitalizationWhereUniqueInput
  ): Promise<AssetCapitalization | null> {
    try {
      return await this.service.deleteAssetCapitalization({
        where: params,
        select: {
          amendedFrom: true,
          assetItemsTotal: true,
          capitalizationMethod: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          entryType: true,
          financeBook: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          postingTime: true,
          serviceItemsTotal: true,
          setPostingTime: true,
          stockItemsTotal: true,
          targetAsset: true,
          targetAssetLocation: true,
          targetAssetName: true,
          targetBatchNo: true,
          targetFixedAssetAccount: true,
          targetHasBatchNo: true,
          targetHasSerialNo: true,
          targetIncomingRate: true,
          targetIsFixedAsset: true,
          targetItemCode: true,
          targetItemName: true,
          targetQty: true,
          targetSerialNo: true,
          targetStockUom: true,
          targetWarehouse: true,
          title: true,
          totalValue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
