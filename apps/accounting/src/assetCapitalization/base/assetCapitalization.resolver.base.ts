/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetCapitalization } from "./AssetCapitalization";
import { AssetCapitalizationCountArgs } from "./AssetCapitalizationCountArgs";
import { AssetCapitalizationFindManyArgs } from "./AssetCapitalizationFindManyArgs";
import { AssetCapitalizationFindUniqueArgs } from "./AssetCapitalizationFindUniqueArgs";
import { CreateAssetCapitalizationArgs } from "./CreateAssetCapitalizationArgs";
import { UpdateAssetCapitalizationArgs } from "./UpdateAssetCapitalizationArgs";
import { DeleteAssetCapitalizationArgs } from "./DeleteAssetCapitalizationArgs";
import { AssetCapitalizationService } from "../assetCapitalization.service";
@graphql.Resolver(() => AssetCapitalization)
export class AssetCapitalizationResolverBase {
  constructor(protected readonly service: AssetCapitalizationService) {}

  async _assetCapitalizationsMeta(
    @graphql.Args() args: AssetCapitalizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetCapitalization])
  async assetCapitalizations(
    @graphql.Args() args: AssetCapitalizationFindManyArgs
  ): Promise<AssetCapitalization[]> {
    return this.service.assetCapitalizations(args);
  }

  @graphql.Query(() => AssetCapitalization, { nullable: true })
  async assetCapitalization(
    @graphql.Args() args: AssetCapitalizationFindUniqueArgs
  ): Promise<AssetCapitalization | null> {
    const result = await this.service.assetCapitalization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetCapitalization)
  async createAssetCapitalization(
    @graphql.Args() args: CreateAssetCapitalizationArgs
  ): Promise<AssetCapitalization> {
    return await this.service.createAssetCapitalization({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetCapitalization)
  async updateAssetCapitalization(
    @graphql.Args() args: UpdateAssetCapitalizationArgs
  ): Promise<AssetCapitalization | null> {
    try {
      return await this.service.updateAssetCapitalization({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetCapitalization)
  async deleteAssetCapitalization(
    @graphql.Args() args: DeleteAssetCapitalizationArgs
  ): Promise<AssetCapitalization | null> {
    try {
      return await this.service.deleteAssetCapitalization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
