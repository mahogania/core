/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AssetCapitalization as PrismaAssetCapitalization,
} from "@prisma/client";

export class AssetCapitalizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetCapitalizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetCapitalization.count(args);
  }

  async assetCapitalizations(
    args: Prisma.AssetCapitalizationFindManyArgs
  ): Promise<PrismaAssetCapitalization[]> {
    return this.prisma.assetCapitalization.findMany(args);
  }
  async assetCapitalization(
    args: Prisma.AssetCapitalizationFindUniqueArgs
  ): Promise<PrismaAssetCapitalization | null> {
    return this.prisma.assetCapitalization.findUnique(args);
  }
  async createAssetCapitalization(
    args: Prisma.AssetCapitalizationCreateArgs
  ): Promise<PrismaAssetCapitalization> {
    return this.prisma.assetCapitalization.create(args);
  }
  async updateAssetCapitalization(
    args: Prisma.AssetCapitalizationUpdateArgs
  ): Promise<PrismaAssetCapitalization> {
    return this.prisma.assetCapitalization.update(args);
  }
  async deleteAssetCapitalization(
    args: Prisma.AssetCapitalizationDeleteArgs
  ): Promise<PrismaAssetCapitalization> {
    return this.prisma.assetCapitalization.delete(args);
  }
}
