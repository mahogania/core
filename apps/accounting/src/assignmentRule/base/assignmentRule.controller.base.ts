/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssignmentRuleService } from "../assignmentRule.service";
import { AssignmentRuleCreateInput } from "./AssignmentRuleCreateInput";
import { AssignmentRule } from "./AssignmentRule";
import { AssignmentRuleFindManyArgs } from "./AssignmentRuleFindManyArgs";
import { AssignmentRuleWhereUniqueInput } from "./AssignmentRuleWhereUniqueInput";
import { AssignmentRuleUpdateInput } from "./AssignmentRuleUpdateInput";

export class AssignmentRuleControllerBase {
  constructor(protected readonly service: AssignmentRuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssignmentRule })
  async createAssignmentRule(
    @common.Body() data: AssignmentRuleCreateInput
  ): Promise<AssignmentRule> {
    return await this.service.createAssignmentRule({
      data: data,
      select: {
        assignCondition: true,
        closeCondition: true,
        createdAt: true,
        creation: true,
        description: true,
        disabled: true,
        docstatus: true,
        documentType: true,
        dueDateBasedOn: true,
        fieldField: true,
        id: true,
        idx: true,
        lastUser: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        priority: true,
        rule: true,
        unassignCondition: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssignmentRule] })
  @ApiNestedQuery(AssignmentRuleFindManyArgs)
  async assignmentRules(
    @common.Req() request: Request
  ): Promise<AssignmentRule[]> {
    const args = plainToClass(AssignmentRuleFindManyArgs, request.query);
    return this.service.assignmentRules({
      ...args,
      select: {
        assignCondition: true,
        closeCondition: true,
        createdAt: true,
        creation: true,
        description: true,
        disabled: true,
        docstatus: true,
        documentType: true,
        dueDateBasedOn: true,
        fieldField: true,
        id: true,
        idx: true,
        lastUser: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        priority: true,
        rule: true,
        unassignCondition: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assignmentRule(
    @common.Param() params: AssignmentRuleWhereUniqueInput
  ): Promise<AssignmentRule | null> {
    const result = await this.service.assignmentRule({
      where: params,
      select: {
        assignCondition: true,
        closeCondition: true,
        createdAt: true,
        creation: true,
        description: true,
        disabled: true,
        docstatus: true,
        documentType: true,
        dueDateBasedOn: true,
        fieldField: true,
        id: true,
        idx: true,
        lastUser: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        priority: true,
        rule: true,
        unassignCondition: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssignmentRule(
    @common.Param() params: AssignmentRuleWhereUniqueInput,
    @common.Body() data: AssignmentRuleUpdateInput
  ): Promise<AssignmentRule | null> {
    try {
      return await this.service.updateAssignmentRule({
        where: params,
        data: data,
        select: {
          assignCondition: true,
          closeCondition: true,
          createdAt: true,
          creation: true,
          description: true,
          disabled: true,
          docstatus: true,
          documentType: true,
          dueDateBasedOn: true,
          fieldField: true,
          id: true,
          idx: true,
          lastUser: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          priority: true,
          rule: true,
          unassignCondition: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssignmentRule(
    @common.Param() params: AssignmentRuleWhereUniqueInput
  ): Promise<AssignmentRule | null> {
    try {
      return await this.service.deleteAssignmentRule({
        where: params,
        select: {
          assignCondition: true,
          closeCondition: true,
          createdAt: true,
          creation: true,
          description: true,
          disabled: true,
          docstatus: true,
          documentType: true,
          dueDateBasedOn: true,
          fieldField: true,
          id: true,
          idx: true,
          lastUser: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          priority: true,
          rule: true,
          unassignCondition: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
