/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssignmentRule } from "./AssignmentRule";
import { AssignmentRuleCountArgs } from "./AssignmentRuleCountArgs";
import { AssignmentRuleFindManyArgs } from "./AssignmentRuleFindManyArgs";
import { AssignmentRuleFindUniqueArgs } from "./AssignmentRuleFindUniqueArgs";
import { CreateAssignmentRuleArgs } from "./CreateAssignmentRuleArgs";
import { UpdateAssignmentRuleArgs } from "./UpdateAssignmentRuleArgs";
import { DeleteAssignmentRuleArgs } from "./DeleteAssignmentRuleArgs";
import { AssignmentRuleService } from "../assignmentRule.service";
@graphql.Resolver(() => AssignmentRule)
export class AssignmentRuleResolverBase {
  constructor(protected readonly service: AssignmentRuleService) {}

  async _assignmentRulesMeta(
    @graphql.Args() args: AssignmentRuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssignmentRule])
  async assignmentRules(
    @graphql.Args() args: AssignmentRuleFindManyArgs
  ): Promise<AssignmentRule[]> {
    return this.service.assignmentRules(args);
  }

  @graphql.Query(() => AssignmentRule, { nullable: true })
  async assignmentRule(
    @graphql.Args() args: AssignmentRuleFindUniqueArgs
  ): Promise<AssignmentRule | null> {
    const result = await this.service.assignmentRule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssignmentRule)
  async createAssignmentRule(
    @graphql.Args() args: CreateAssignmentRuleArgs
  ): Promise<AssignmentRule> {
    return await this.service.createAssignmentRule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssignmentRule)
  async updateAssignmentRule(
    @graphql.Args() args: UpdateAssignmentRuleArgs
  ): Promise<AssignmentRule | null> {
    try {
      return await this.service.updateAssignmentRule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssignmentRule)
  async deleteAssignmentRule(
    @graphql.Args() args: DeleteAssignmentRuleArgs
  ): Promise<AssignmentRule | null> {
    try {
      return await this.service.deleteAssignmentRule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
