/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AddressTemplate } from "./AddressTemplate";
import { AddressTemplateCountArgs } from "./AddressTemplateCountArgs";
import { AddressTemplateFindManyArgs } from "./AddressTemplateFindManyArgs";
import { AddressTemplateFindUniqueArgs } from "./AddressTemplateFindUniqueArgs";
import { CreateAddressTemplateArgs } from "./CreateAddressTemplateArgs";
import { UpdateAddressTemplateArgs } from "./UpdateAddressTemplateArgs";
import { DeleteAddressTemplateArgs } from "./DeleteAddressTemplateArgs";
import { AddressTemplateService } from "../addressTemplate.service";
@graphql.Resolver(() => AddressTemplate)
export class AddressTemplateResolverBase {
  constructor(protected readonly service: AddressTemplateService) {}

  async _addressTemplatesMeta(
    @graphql.Args() args: AddressTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AddressTemplate])
  async addressTemplates(
    @graphql.Args() args: AddressTemplateFindManyArgs
  ): Promise<AddressTemplate[]> {
    return this.service.addressTemplates(args);
  }

  @graphql.Query(() => AddressTemplate, { nullable: true })
  async addressTemplate(
    @graphql.Args() args: AddressTemplateFindUniqueArgs
  ): Promise<AddressTemplate | null> {
    const result = await this.service.addressTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AddressTemplate)
  async createAddressTemplate(
    @graphql.Args() args: CreateAddressTemplateArgs
  ): Promise<AddressTemplate> {
    return await this.service.createAddressTemplate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AddressTemplate)
  async updateAddressTemplate(
    @graphql.Args() args: UpdateAddressTemplateArgs
  ): Promise<AddressTemplate | null> {
    try {
      return await this.service.updateAddressTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AddressTemplate)
  async deleteAddressTemplate(
    @graphql.Args() args: DeleteAddressTemplateArgs
  ): Promise<AddressTemplate | null> {
    try {
      return await this.service.deleteAddressTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
