/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AddressTemplateService } from "../addressTemplate.service";
import { AddressTemplateCreateInput } from "./AddressTemplateCreateInput";
import { AddressTemplate } from "./AddressTemplate";
import { AddressTemplateFindManyArgs } from "./AddressTemplateFindManyArgs";
import { AddressTemplateWhereUniqueInput } from "./AddressTemplateWhereUniqueInput";
import { AddressTemplateUpdateInput } from "./AddressTemplateUpdateInput";

export class AddressTemplateControllerBase {
  constructor(protected readonly service: AddressTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AddressTemplate })
  async createAddressTemplate(
    @common.Body() data: AddressTemplateCreateInput
  ): Promise<AddressTemplate> {
    return await this.service.createAddressTemplate({
      data: data,
      select: {
        country: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        template: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AddressTemplate] })
  @ApiNestedQuery(AddressTemplateFindManyArgs)
  async addressTemplates(
    @common.Req() request: Request
  ): Promise<AddressTemplate[]> {
    const args = plainToClass(AddressTemplateFindManyArgs, request.query);
    return this.service.addressTemplates({
      ...args,
      select: {
        country: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        template: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AddressTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async addressTemplate(
    @common.Param() params: AddressTemplateWhereUniqueInput
  ): Promise<AddressTemplate | null> {
    const result = await this.service.addressTemplate({
      where: params,
      select: {
        country: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isDefault: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        template: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AddressTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAddressTemplate(
    @common.Param() params: AddressTemplateWhereUniqueInput,
    @common.Body() data: AddressTemplateUpdateInput
  ): Promise<AddressTemplate | null> {
    try {
      return await this.service.updateAddressTemplate({
        where: params,
        data: data,
        select: {
          country: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          template: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AddressTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAddressTemplate(
    @common.Param() params: AddressTemplateWhereUniqueInput
  ): Promise<AddressTemplate | null> {
    try {
      return await this.service.deleteAddressTemplate({
        where: params,
        select: {
          country: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isDefault: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          template: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
