/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinanceBookService } from "../financeBook.service";
import { FinanceBookCreateInput } from "./FinanceBookCreateInput";
import { FinanceBook } from "./FinanceBook";
import { FinanceBookFindManyArgs } from "./FinanceBookFindManyArgs";
import { FinanceBookWhereUniqueInput } from "./FinanceBookWhereUniqueInput";
import { FinanceBookUpdateInput } from "./FinanceBookUpdateInput";

export class FinanceBookControllerBase {
  constructor(protected readonly service: FinanceBookService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinanceBook })
  async createFinanceBook(
    @common.Body() data: FinanceBookCreateInput
  ): Promise<FinanceBook> {
    return await this.service.createFinanceBook({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docStatus: true,
        financeBookName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FinanceBook] })
  @ApiNestedQuery(FinanceBookFindManyArgs)
  async financeBooks(@common.Req() request: Request): Promise<FinanceBook[]> {
    const args = plainToClass(FinanceBookFindManyArgs, request.query);
    return this.service.financeBooks({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docStatus: true,
        financeBookName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinanceBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async financeBook(
    @common.Param() params: FinanceBookWhereUniqueInput
  ): Promise<FinanceBook | null> {
    const result = await this.service.financeBook({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docStatus: true,
        financeBookName: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinanceBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinanceBook(
    @common.Param() params: FinanceBookWhereUniqueInput,
    @common.Body() data: FinanceBookUpdateInput
  ): Promise<FinanceBook | null> {
    try {
      return await this.service.updateFinanceBook({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docStatus: true,
          financeBookName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinanceBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinanceBook(
    @common.Param() params: FinanceBookWhereUniqueInput
  ): Promise<FinanceBook | null> {
    try {
      return await this.service.deleteFinanceBook({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docStatus: true,
          financeBookName: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
