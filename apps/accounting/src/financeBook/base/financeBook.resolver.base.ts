/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinanceBook } from "./FinanceBook";
import { FinanceBookCountArgs } from "./FinanceBookCountArgs";
import { FinanceBookFindManyArgs } from "./FinanceBookFindManyArgs";
import { FinanceBookFindUniqueArgs } from "./FinanceBookFindUniqueArgs";
import { CreateFinanceBookArgs } from "./CreateFinanceBookArgs";
import { UpdateFinanceBookArgs } from "./UpdateFinanceBookArgs";
import { DeleteFinanceBookArgs } from "./DeleteFinanceBookArgs";
import { FinanceBookService } from "../financeBook.service";
@graphql.Resolver(() => FinanceBook)
export class FinanceBookResolverBase {
  constructor(protected readonly service: FinanceBookService) {}

  async _financeBooksMeta(
    @graphql.Args() args: FinanceBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinanceBook])
  async financeBooks(
    @graphql.Args() args: FinanceBookFindManyArgs
  ): Promise<FinanceBook[]> {
    return this.service.financeBooks(args);
  }

  @graphql.Query(() => FinanceBook, { nullable: true })
  async financeBook(
    @graphql.Args() args: FinanceBookFindUniqueArgs
  ): Promise<FinanceBook | null> {
    const result = await this.service.financeBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinanceBook)
  async createFinanceBook(
    @graphql.Args() args: CreateFinanceBookArgs
  ): Promise<FinanceBook> {
    return await this.service.createFinanceBook({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinanceBook)
  async updateFinanceBook(
    @graphql.Args() args: UpdateFinanceBookArgs
  ): Promise<FinanceBook | null> {
    try {
      return await this.service.updateFinanceBook({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinanceBook)
  async deleteFinanceBook(
    @graphql.Args() args: DeleteFinanceBookArgs
  ): Promise<FinanceBook | null> {
    try {
      return await this.service.deleteFinanceBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
