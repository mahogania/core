/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccountClosingBalance } from "./AccountClosingBalance";
import { AccountClosingBalanceCountArgs } from "./AccountClosingBalanceCountArgs";
import { AccountClosingBalanceFindManyArgs } from "./AccountClosingBalanceFindManyArgs";
import { AccountClosingBalanceFindUniqueArgs } from "./AccountClosingBalanceFindUniqueArgs";
import { CreateAccountClosingBalanceArgs } from "./CreateAccountClosingBalanceArgs";
import { UpdateAccountClosingBalanceArgs } from "./UpdateAccountClosingBalanceArgs";
import { DeleteAccountClosingBalanceArgs } from "./DeleteAccountClosingBalanceArgs";
import { AccountClosingBalanceService } from "../accountClosingBalance.service";
@graphql.Resolver(() => AccountClosingBalance)
export class AccountClosingBalanceResolverBase {
  constructor(protected readonly service: AccountClosingBalanceService) {}

  async _accountClosingBalancesMeta(
    @graphql.Args() args: AccountClosingBalanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountClosingBalance])
  async accountClosingBalances(
    @graphql.Args() args: AccountClosingBalanceFindManyArgs
  ): Promise<AccountClosingBalance[]> {
    return this.service.accountClosingBalances(args);
  }

  @graphql.Query(() => AccountClosingBalance, { nullable: true })
  async accountClosingBalance(
    @graphql.Args() args: AccountClosingBalanceFindUniqueArgs
  ): Promise<AccountClosingBalance | null> {
    const result = await this.service.accountClosingBalance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountClosingBalance)
  async createAccountClosingBalance(
    @graphql.Args() args: CreateAccountClosingBalanceArgs
  ): Promise<AccountClosingBalance> {
    return await this.service.createAccountClosingBalance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AccountClosingBalance)
  async updateAccountClosingBalance(
    @graphql.Args() args: UpdateAccountClosingBalanceArgs
  ): Promise<AccountClosingBalance | null> {
    try {
      return await this.service.updateAccountClosingBalance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountClosingBalance)
  async deleteAccountClosingBalance(
    @graphql.Args() args: DeleteAccountClosingBalanceArgs
  ): Promise<AccountClosingBalance | null> {
    try {
      return await this.service.deleteAccountClosingBalance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
