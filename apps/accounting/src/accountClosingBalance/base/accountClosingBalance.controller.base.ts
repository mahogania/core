/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountClosingBalanceService } from "../accountClosingBalance.service";
import { AccountClosingBalanceCreateInput } from "./AccountClosingBalanceCreateInput";
import { AccountClosingBalance } from "./AccountClosingBalance";
import { AccountClosingBalanceFindManyArgs } from "./AccountClosingBalanceFindManyArgs";
import { AccountClosingBalanceWhereUniqueInput } from "./AccountClosingBalanceWhereUniqueInput";
import { AccountClosingBalanceUpdateInput } from "./AccountClosingBalanceUpdateInput";

export class AccountClosingBalanceControllerBase {
  constructor(protected readonly service: AccountClosingBalanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountClosingBalance })
  async createAccountClosingBalance(
    @common.Body() data: AccountClosingBalanceCreateInput
  ): Promise<AccountClosingBalance> {
    return await this.service.createAccountClosingBalance({
      data: data,
      select: {
        account: true,
        accountCurrency: true,
        assign: true,
        closingDate: true,
        comments: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        credit: true,
        creditInAccountCurrency: true,
        debit: true,
        debitInAccountCurrency: true,
        docstatus: true,
        financeBook: true,
        id: true,
        idx: true,
        isPeriodClosingVoucherEntry: true,
        likedBy: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodClosingVoucher: true,
        project: true,
        updatedAt: true,
        userTags: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountClosingBalance] })
  @ApiNestedQuery(AccountClosingBalanceFindManyArgs)
  async accountClosingBalances(
    @common.Req() request: Request
  ): Promise<AccountClosingBalance[]> {
    const args = plainToClass(AccountClosingBalanceFindManyArgs, request.query);
    return this.service.accountClosingBalances({
      ...args,
      select: {
        account: true,
        accountCurrency: true,
        assign: true,
        closingDate: true,
        comments: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        credit: true,
        creditInAccountCurrency: true,
        debit: true,
        debitInAccountCurrency: true,
        docstatus: true,
        financeBook: true,
        id: true,
        idx: true,
        isPeriodClosingVoucherEntry: true,
        likedBy: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodClosingVoucher: true,
        project: true,
        updatedAt: true,
        userTags: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountClosingBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountClosingBalance(
    @common.Param() params: AccountClosingBalanceWhereUniqueInput
  ): Promise<AccountClosingBalance | null> {
    const result = await this.service.accountClosingBalance({
      where: params,
      select: {
        account: true,
        accountCurrency: true,
        assign: true,
        closingDate: true,
        comments: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        credit: true,
        creditInAccountCurrency: true,
        debit: true,
        debitInAccountCurrency: true,
        docstatus: true,
        financeBook: true,
        id: true,
        idx: true,
        isPeriodClosingVoucherEntry: true,
        likedBy: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodClosingVoucher: true,
        project: true,
        updatedAt: true,
        userTags: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountClosingBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountClosingBalance(
    @common.Param() params: AccountClosingBalanceWhereUniqueInput,
    @common.Body() data: AccountClosingBalanceUpdateInput
  ): Promise<AccountClosingBalance | null> {
    try {
      return await this.service.updateAccountClosingBalance({
        where: params,
        data: data,
        select: {
          account: true,
          accountCurrency: true,
          assign: true,
          closingDate: true,
          comments: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          credit: true,
          creditInAccountCurrency: true,
          debit: true,
          debitInAccountCurrency: true,
          docstatus: true,
          financeBook: true,
          id: true,
          idx: true,
          isPeriodClosingVoucherEntry: true,
          likedBy: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodClosingVoucher: true,
          project: true,
          updatedAt: true,
          userTags: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountClosingBalance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountClosingBalance(
    @common.Param() params: AccountClosingBalanceWhereUniqueInput
  ): Promise<AccountClosingBalance | null> {
    try {
      return await this.service.deleteAccountClosingBalance({
        where: params,
        select: {
          account: true,
          accountCurrency: true,
          assign: true,
          closingDate: true,
          comments: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          credit: true,
          creditInAccountCurrency: true,
          debit: true,
          debitInAccountCurrency: true,
          docstatus: true,
          financeBook: true,
          id: true,
          idx: true,
          isPeriodClosingVoucherEntry: true,
          likedBy: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodClosingVoucher: true,
          project: true,
          updatedAt: true,
          userTags: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
