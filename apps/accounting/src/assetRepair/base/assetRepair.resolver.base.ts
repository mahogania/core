/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetRepair } from "./AssetRepair";
import { AssetRepairCountArgs } from "./AssetRepairCountArgs";
import { AssetRepairFindManyArgs } from "./AssetRepairFindManyArgs";
import { AssetRepairFindUniqueArgs } from "./AssetRepairFindUniqueArgs";
import { CreateAssetRepairArgs } from "./CreateAssetRepairArgs";
import { UpdateAssetRepairArgs } from "./UpdateAssetRepairArgs";
import { DeleteAssetRepairArgs } from "./DeleteAssetRepairArgs";
import { AssetRepairService } from "../assetRepair.service";
@graphql.Resolver(() => AssetRepair)
export class AssetRepairResolverBase {
  constructor(protected readonly service: AssetRepairService) {}

  async _assetRepairsMeta(
    @graphql.Args() args: AssetRepairCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetRepair])
  async assetRepairs(
    @graphql.Args() args: AssetRepairFindManyArgs
  ): Promise<AssetRepair[]> {
    return this.service.assetRepairs(args);
  }

  @graphql.Query(() => AssetRepair, { nullable: true })
  async assetRepair(
    @graphql.Args() args: AssetRepairFindUniqueArgs
  ): Promise<AssetRepair | null> {
    const result = await this.service.assetRepair(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetRepair)
  async createAssetRepair(
    @graphql.Args() args: CreateAssetRepairArgs
  ): Promise<AssetRepair> {
    return await this.service.createAssetRepair({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetRepair)
  async updateAssetRepair(
    @graphql.Args() args: UpdateAssetRepairArgs
  ): Promise<AssetRepair | null> {
    try {
      return await this.service.updateAssetRepair({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetRepair)
  async deleteAssetRepair(
    @graphql.Args() args: DeleteAssetRepairArgs
  ): Promise<AssetRepair | null> {
    try {
      return await this.service.deleteAssetRepair(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
