/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetRepairService } from "../assetRepair.service";
import { AssetRepairCreateInput } from "./AssetRepairCreateInput";
import { AssetRepair } from "./AssetRepair";
import { AssetRepairFindManyArgs } from "./AssetRepairFindManyArgs";
import { AssetRepairWhereUniqueInput } from "./AssetRepairWhereUniqueInput";
import { AssetRepairUpdateInput } from "./AssetRepairUpdateInput";

export class AssetRepairControllerBase {
  constructor(protected readonly service: AssetRepairService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetRepair })
  async createAssetRepair(
    @common.Body() data: AssetRepairCreateInput
  ): Promise<AssetRepair> {
    return await this.service.createAssetRepair({
      data: data,
      select: {
        actionsPerformed: true,
        amendedFrom: true,
        asset: true,
        assetName: true,
        capitalizeRepairCost: true,
        company: true,
        completionDate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        downtime: true,
        failureDate: true,
        id: true,
        idx: true,
        increaseInAssetLife: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        project: true,
        purchaseInvoice: true,
        repairCost: true,
        repairStatus: true,
        stockConsumption: true,
        totalRepairCost: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetRepair] })
  @ApiNestedQuery(AssetRepairFindManyArgs)
  async assetRepairs(@common.Req() request: Request): Promise<AssetRepair[]> {
    const args = plainToClass(AssetRepairFindManyArgs, request.query);
    return this.service.assetRepairs({
      ...args,
      select: {
        actionsPerformed: true,
        amendedFrom: true,
        asset: true,
        assetName: true,
        capitalizeRepairCost: true,
        company: true,
        completionDate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        downtime: true,
        failureDate: true,
        id: true,
        idx: true,
        increaseInAssetLife: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        project: true,
        purchaseInvoice: true,
        repairCost: true,
        repairStatus: true,
        stockConsumption: true,
        totalRepairCost: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetRepair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetRepair(
    @common.Param() params: AssetRepairWhereUniqueInput
  ): Promise<AssetRepair | null> {
    const result = await this.service.assetRepair({
      where: params,
      select: {
        actionsPerformed: true,
        amendedFrom: true,
        asset: true,
        assetName: true,
        capitalizeRepairCost: true,
        company: true,
        completionDate: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        downtime: true,
        failureDate: true,
        id: true,
        idx: true,
        increaseInAssetLife: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        project: true,
        purchaseInvoice: true,
        repairCost: true,
        repairStatus: true,
        stockConsumption: true,
        totalRepairCost: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetRepair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetRepair(
    @common.Param() params: AssetRepairWhereUniqueInput,
    @common.Body() data: AssetRepairUpdateInput
  ): Promise<AssetRepair | null> {
    try {
      return await this.service.updateAssetRepair({
        where: params,
        data: data,
        select: {
          actionsPerformed: true,
          amendedFrom: true,
          asset: true,
          assetName: true,
          capitalizeRepairCost: true,
          company: true,
          completionDate: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          downtime: true,
          failureDate: true,
          id: true,
          idx: true,
          increaseInAssetLife: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          project: true,
          purchaseInvoice: true,
          repairCost: true,
          repairStatus: true,
          stockConsumption: true,
          totalRepairCost: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetRepair })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetRepair(
    @common.Param() params: AssetRepairWhereUniqueInput
  ): Promise<AssetRepair | null> {
    try {
      return await this.service.deleteAssetRepair({
        where: params,
        select: {
          actionsPerformed: true,
          amendedFrom: true,
          asset: true,
          assetName: true,
          capitalizeRepairCost: true,
          company: true,
          completionDate: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          downtime: true,
          failureDate: true,
          id: true,
          idx: true,
          increaseInAssetLife: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          project: true,
          purchaseInvoice: true,
          repairCost: true,
          repairStatus: true,
          stockConsumption: true,
          totalRepairCost: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
