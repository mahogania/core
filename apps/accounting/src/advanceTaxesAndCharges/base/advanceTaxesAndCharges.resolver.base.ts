/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdvanceTaxesAndCharges } from "./AdvanceTaxesAndCharges";
import { AdvanceTaxesAndChargesCountArgs } from "./AdvanceTaxesAndChargesCountArgs";
import { AdvanceTaxesAndChargesFindManyArgs } from "./AdvanceTaxesAndChargesFindManyArgs";
import { AdvanceTaxesAndChargesFindUniqueArgs } from "./AdvanceTaxesAndChargesFindUniqueArgs";
import { CreateAdvanceTaxesAndChargesArgs } from "./CreateAdvanceTaxesAndChargesArgs";
import { UpdateAdvanceTaxesAndChargesArgs } from "./UpdateAdvanceTaxesAndChargesArgs";
import { DeleteAdvanceTaxesAndChargesArgs } from "./DeleteAdvanceTaxesAndChargesArgs";
import { AdvanceTaxesAndChargesService } from "../advanceTaxesAndCharges.service";
@graphql.Resolver(() => AdvanceTaxesAndCharges)
export class AdvanceTaxesAndChargesResolverBase {
  constructor(protected readonly service: AdvanceTaxesAndChargesService) {}

  async _advanceTaxesAndChargesItemsMeta(
    @graphql.Args() args: AdvanceTaxesAndChargesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdvanceTaxesAndCharges])
  async advanceTaxesAndChargesItems(
    @graphql.Args() args: AdvanceTaxesAndChargesFindManyArgs
  ): Promise<AdvanceTaxesAndCharges[]> {
    return this.service.advanceTaxesAndChargesItems(args);
  }

  @graphql.Query(() => AdvanceTaxesAndCharges, { nullable: true })
  async advanceTaxesAndCharges(
    @graphql.Args() args: AdvanceTaxesAndChargesFindUniqueArgs
  ): Promise<AdvanceTaxesAndCharges | null> {
    const result = await this.service.advanceTaxesAndCharges(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdvanceTaxesAndCharges)
  async createAdvanceTaxesAndCharges(
    @graphql.Args() args: CreateAdvanceTaxesAndChargesArgs
  ): Promise<AdvanceTaxesAndCharges> {
    return await this.service.createAdvanceTaxesAndCharges({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdvanceTaxesAndCharges)
  async updateAdvanceTaxesAndCharges(
    @graphql.Args() args: UpdateAdvanceTaxesAndChargesArgs
  ): Promise<AdvanceTaxesAndCharges | null> {
    try {
      return await this.service.updateAdvanceTaxesAndCharges({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdvanceTaxesAndCharges)
  async deleteAdvanceTaxesAndCharges(
    @graphql.Args() args: DeleteAdvanceTaxesAndChargesArgs
  ): Promise<AdvanceTaxesAndCharges | null> {
    try {
      return await this.service.deleteAdvanceTaxesAndCharges(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
