/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdvanceTaxesAndCharges as PrismaAdvanceTaxesAndCharges,
} from "@prisma/client";

export class AdvanceTaxesAndChargesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdvanceTaxesAndChargesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.advanceTaxesAndCharges.count(args);
  }

  async advanceTaxesAndChargesItems(
    args: Prisma.AdvanceTaxesAndChargesFindManyArgs
  ): Promise<PrismaAdvanceTaxesAndCharges[]> {
    return this.prisma.advanceTaxesAndCharges.findMany(args);
  }
  async advanceTaxesAndCharges(
    args: Prisma.AdvanceTaxesAndChargesFindUniqueArgs
  ): Promise<PrismaAdvanceTaxesAndCharges | null> {
    return this.prisma.advanceTaxesAndCharges.findUnique(args);
  }
  async createAdvanceTaxesAndCharges(
    args: Prisma.AdvanceTaxesAndChargesCreateArgs
  ): Promise<PrismaAdvanceTaxesAndCharges> {
    return this.prisma.advanceTaxesAndCharges.create(args);
  }
  async updateAdvanceTaxesAndCharges(
    args: Prisma.AdvanceTaxesAndChargesUpdateArgs
  ): Promise<PrismaAdvanceTaxesAndCharges> {
    return this.prisma.advanceTaxesAndCharges.update(args);
  }
  async deleteAdvanceTaxesAndCharges(
    args: Prisma.AdvanceTaxesAndChargesDeleteArgs
  ): Promise<PrismaAdvanceTaxesAndCharges> {
    return this.prisma.advanceTaxesAndCharges.delete(args);
  }
}
