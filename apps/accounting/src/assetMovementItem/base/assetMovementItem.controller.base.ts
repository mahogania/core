/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetMovementItemService } from "../assetMovementItem.service";
import { AssetMovementItemCreateInput } from "./AssetMovementItemCreateInput";
import { AssetMovementItem } from "./AssetMovementItem";
import { AssetMovementItemFindManyArgs } from "./AssetMovementItemFindManyArgs";
import { AssetMovementItemWhereUniqueInput } from "./AssetMovementItemWhereUniqueInput";
import { AssetMovementItemUpdateInput } from "./AssetMovementItemUpdateInput";

export class AssetMovementItemControllerBase {
  constructor(protected readonly service: AssetMovementItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetMovementItem })
  async createAssetMovementItem(
    @common.Body() data: AssetMovementItemCreateInput
  ): Promise<AssetMovementItem> {
    return await this.service.createAssetMovementItem({
      data: data,
      select: {
        asset: true,
        assetName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromEmployee: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        sourceLocation: true,
        targetLocation: true,
        toEmployee: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetMovementItem] })
  @ApiNestedQuery(AssetMovementItemFindManyArgs)
  async assetMovementItems(
    @common.Req() request: Request
  ): Promise<AssetMovementItem[]> {
    const args = plainToClass(AssetMovementItemFindManyArgs, request.query);
    return this.service.assetMovementItems({
      ...args,
      select: {
        asset: true,
        assetName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromEmployee: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        sourceLocation: true,
        targetLocation: true,
        toEmployee: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetMovementItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetMovementItem(
    @common.Param() params: AssetMovementItemWhereUniqueInput
  ): Promise<AssetMovementItem | null> {
    const result = await this.service.assetMovementItem({
      where: params,
      select: {
        asset: true,
        assetName: true,
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        fromEmployee: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        sourceLocation: true,
        targetLocation: true,
        toEmployee: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetMovementItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetMovementItem(
    @common.Param() params: AssetMovementItemWhereUniqueInput,
    @common.Body() data: AssetMovementItemUpdateInput
  ): Promise<AssetMovementItem | null> {
    try {
      return await this.service.updateAssetMovementItem({
        where: params,
        data: data,
        select: {
          asset: true,
          assetName: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fromEmployee: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          sourceLocation: true,
          targetLocation: true,
          toEmployee: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetMovementItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetMovementItem(
    @common.Param() params: AssetMovementItemWhereUniqueInput
  ): Promise<AssetMovementItem | null> {
    try {
      return await this.service.deleteAssetMovementItem({
        where: params,
        select: {
          asset: true,
          assetName: true,
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          fromEmployee: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          sourceLocation: true,
          targetLocation: true,
          toEmployee: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
