/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetMovementItem } from "./AssetMovementItem";
import { AssetMovementItemCountArgs } from "./AssetMovementItemCountArgs";
import { AssetMovementItemFindManyArgs } from "./AssetMovementItemFindManyArgs";
import { AssetMovementItemFindUniqueArgs } from "./AssetMovementItemFindUniqueArgs";
import { CreateAssetMovementItemArgs } from "./CreateAssetMovementItemArgs";
import { UpdateAssetMovementItemArgs } from "./UpdateAssetMovementItemArgs";
import { DeleteAssetMovementItemArgs } from "./DeleteAssetMovementItemArgs";
import { AssetMovementItemService } from "../assetMovementItem.service";
@graphql.Resolver(() => AssetMovementItem)
export class AssetMovementItemResolverBase {
  constructor(protected readonly service: AssetMovementItemService) {}

  async _assetMovementItemsMeta(
    @graphql.Args() args: AssetMovementItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetMovementItem])
  async assetMovementItems(
    @graphql.Args() args: AssetMovementItemFindManyArgs
  ): Promise<AssetMovementItem[]> {
    return this.service.assetMovementItems(args);
  }

  @graphql.Query(() => AssetMovementItem, { nullable: true })
  async assetMovementItem(
    @graphql.Args() args: AssetMovementItemFindUniqueArgs
  ): Promise<AssetMovementItem | null> {
    const result = await this.service.assetMovementItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetMovementItem)
  async createAssetMovementItem(
    @graphql.Args() args: CreateAssetMovementItemArgs
  ): Promise<AssetMovementItem> {
    return await this.service.createAssetMovementItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetMovementItem)
  async updateAssetMovementItem(
    @graphql.Args() args: UpdateAssetMovementItemArgs
  ): Promise<AssetMovementItem | null> {
    try {
      return await this.service.updateAssetMovementItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetMovementItem)
  async deleteAssetMovementItem(
    @graphql.Args() args: DeleteAssetMovementItemArgs
  ): Promise<AssetMovementItem | null> {
    try {
      return await this.service.deleteAssetMovementItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
