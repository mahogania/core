/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountingDimension as PrismaAccountingDimension,
} from "@prisma/client";

export class AccountingDimensionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountingDimensionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountingDimension.count(args);
  }

  async accountingDimensions(
    args: Prisma.AccountingDimensionFindManyArgs
  ): Promise<PrismaAccountingDimension[]> {
    return this.prisma.accountingDimension.findMany(args);
  }
  async accountingDimension(
    args: Prisma.AccountingDimensionFindUniqueArgs
  ): Promise<PrismaAccountingDimension | null> {
    return this.prisma.accountingDimension.findUnique(args);
  }
  async createAccountingDimension(
    args: Prisma.AccountingDimensionCreateArgs
  ): Promise<PrismaAccountingDimension> {
    return this.prisma.accountingDimension.create(args);
  }
  async updateAccountingDimension(
    args: Prisma.AccountingDimensionUpdateArgs
  ): Promise<PrismaAccountingDimension> {
    return this.prisma.accountingDimension.update(args);
  }
  async deleteAccountingDimension(
    args: Prisma.AccountingDimensionDeleteArgs
  ): Promise<PrismaAccountingDimension> {
    return this.prisma.accountingDimension.delete(args);
  }
}
