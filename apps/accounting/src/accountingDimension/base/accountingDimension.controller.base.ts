/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountingDimensionService } from "../accountingDimension.service";
import { AccountingDimensionCreateInput } from "./AccountingDimensionCreateInput";
import { AccountingDimension } from "./AccountingDimension";
import { AccountingDimensionFindManyArgs } from "./AccountingDimensionFindManyArgs";
import { AccountingDimensionWhereUniqueInput } from "./AccountingDimensionWhereUniqueInput";
import { AccountingDimensionUpdateInput } from "./AccountingDimensionUpdateInput";

export class AccountingDimensionControllerBase {
  constructor(protected readonly service: AccountingDimensionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountingDimension })
  async createAccountingDimension(
    @common.Body() data: AccountingDimensionCreateInput
  ): Promise<AccountingDimension> {
    return await this.service.createAccountingDimension({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        documentType: true,
        fieldname: true,
        id: true,
        idx: true,
        label: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountingDimension] })
  @ApiNestedQuery(AccountingDimensionFindManyArgs)
  async accountingDimensions(
    @common.Req() request: Request
  ): Promise<AccountingDimension[]> {
    const args = plainToClass(AccountingDimensionFindManyArgs, request.query);
    return this.service.accountingDimensions({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        documentType: true,
        fieldname: true,
        id: true,
        idx: true,
        label: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimension })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountingDimension(
    @common.Param() params: AccountingDimensionWhereUniqueInput
  ): Promise<AccountingDimension | null> {
    const result = await this.service.accountingDimension({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        documentType: true,
        fieldname: true,
        id: true,
        idx: true,
        label: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimension })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountingDimension(
    @common.Param() params: AccountingDimensionWhereUniqueInput,
    @common.Body() data: AccountingDimensionUpdateInput
  ): Promise<AccountingDimension | null> {
    try {
      return await this.service.updateAccountingDimension({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          documentType: true,
          fieldname: true,
          id: true,
          idx: true,
          label: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimension })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountingDimension(
    @common.Param() params: AccountingDimensionWhereUniqueInput
  ): Promise<AccountingDimension | null> {
    try {
      return await this.service.deleteAccountingDimension({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          documentType: true,
          fieldname: true,
          id: true,
          idx: true,
          label: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
