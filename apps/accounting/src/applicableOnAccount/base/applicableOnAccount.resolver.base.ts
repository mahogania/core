/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplicableOnAccount } from "./ApplicableOnAccount";
import { ApplicableOnAccountCountArgs } from "./ApplicableOnAccountCountArgs";
import { ApplicableOnAccountFindManyArgs } from "./ApplicableOnAccountFindManyArgs";
import { ApplicableOnAccountFindUniqueArgs } from "./ApplicableOnAccountFindUniqueArgs";
import { CreateApplicableOnAccountArgs } from "./CreateApplicableOnAccountArgs";
import { UpdateApplicableOnAccountArgs } from "./UpdateApplicableOnAccountArgs";
import { DeleteApplicableOnAccountArgs } from "./DeleteApplicableOnAccountArgs";
import { ApplicableOnAccountService } from "../applicableOnAccount.service";
@graphql.Resolver(() => ApplicableOnAccount)
export class ApplicableOnAccountResolverBase {
  constructor(protected readonly service: ApplicableOnAccountService) {}

  async _applicableOnAccountsMeta(
    @graphql.Args() args: ApplicableOnAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplicableOnAccount])
  async applicableOnAccounts(
    @graphql.Args() args: ApplicableOnAccountFindManyArgs
  ): Promise<ApplicableOnAccount[]> {
    return this.service.applicableOnAccounts(args);
  }

  @graphql.Query(() => ApplicableOnAccount, { nullable: true })
  async applicableOnAccount(
    @graphql.Args() args: ApplicableOnAccountFindUniqueArgs
  ): Promise<ApplicableOnAccount | null> {
    const result = await this.service.applicableOnAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplicableOnAccount)
  async createApplicableOnAccount(
    @graphql.Args() args: CreateApplicableOnAccountArgs
  ): Promise<ApplicableOnAccount> {
    return await this.service.createApplicableOnAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplicableOnAccount)
  async updateApplicableOnAccount(
    @graphql.Args() args: UpdateApplicableOnAccountArgs
  ): Promise<ApplicableOnAccount | null> {
    try {
      return await this.service.updateApplicableOnAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicableOnAccount)
  async deleteApplicableOnAccount(
    @graphql.Args() args: DeleteApplicableOnAccountArgs
  ): Promise<ApplicableOnAccount | null> {
    try {
      return await this.service.deleteApplicableOnAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
