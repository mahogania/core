/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplicableOnAccountService } from "../applicableOnAccount.service";
import { ApplicableOnAccountCreateInput } from "./ApplicableOnAccountCreateInput";
import { ApplicableOnAccount } from "./ApplicableOnAccount";
import { ApplicableOnAccountFindManyArgs } from "./ApplicableOnAccountFindManyArgs";
import { ApplicableOnAccountWhereUniqueInput } from "./ApplicableOnAccountWhereUniqueInput";
import { ApplicableOnAccountUpdateInput } from "./ApplicableOnAccountUpdateInput";

export class ApplicableOnAccountControllerBase {
  constructor(protected readonly service: ApplicableOnAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicableOnAccount })
  async createApplicableOnAccount(
    @common.Body() data: ApplicableOnAccountCreateInput
  ): Promise<ApplicableOnAccount> {
    return await this.service.createApplicableOnAccount({
      data: data,
      select: {
        applicableOnAccount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isMandatory: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicableOnAccount] })
  @ApiNestedQuery(ApplicableOnAccountFindManyArgs)
  async applicableOnAccounts(
    @common.Req() request: Request
  ): Promise<ApplicableOnAccount[]> {
    const args = plainToClass(ApplicableOnAccountFindManyArgs, request.query);
    return this.service.applicableOnAccounts({
      ...args,
      select: {
        applicableOnAccount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isMandatory: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicableOnAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applicableOnAccount(
    @common.Param() params: ApplicableOnAccountWhereUniqueInput
  ): Promise<ApplicableOnAccount | null> {
    const result = await this.service.applicableOnAccount({
      where: params,
      select: {
        applicableOnAccount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isMandatory: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicableOnAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplicableOnAccount(
    @common.Param() params: ApplicableOnAccountWhereUniqueInput,
    @common.Body() data: ApplicableOnAccountUpdateInput
  ): Promise<ApplicableOnAccount | null> {
    try {
      return await this.service.updateApplicableOnAccount({
        where: params,
        data: data,
        select: {
          applicableOnAccount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isMandatory: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicableOnAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplicableOnAccount(
    @common.Param() params: ApplicableOnAccountWhereUniqueInput
  ): Promise<ApplicableOnAccount | null> {
    try {
      return await this.service.deleteApplicableOnAccount({
        where: params,
        select: {
          applicableOnAccount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isMandatory: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
