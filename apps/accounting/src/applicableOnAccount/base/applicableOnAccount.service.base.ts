/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApplicableOnAccount as PrismaApplicableOnAccount,
} from "@prisma/client";

export class ApplicableOnAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicableOnAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicableOnAccount.count(args);
  }

  async applicableOnAccounts(
    args: Prisma.ApplicableOnAccountFindManyArgs
  ): Promise<PrismaApplicableOnAccount[]> {
    return this.prisma.applicableOnAccount.findMany(args);
  }
  async applicableOnAccount(
    args: Prisma.ApplicableOnAccountFindUniqueArgs
  ): Promise<PrismaApplicableOnAccount | null> {
    return this.prisma.applicableOnAccount.findUnique(args);
  }
  async createApplicableOnAccount(
    args: Prisma.ApplicableOnAccountCreateArgs
  ): Promise<PrismaApplicableOnAccount> {
    return this.prisma.applicableOnAccount.create(args);
  }
  async updateApplicableOnAccount(
    args: Prisma.ApplicableOnAccountUpdateArgs
  ): Promise<PrismaApplicableOnAccount> {
    return this.prisma.applicableOnAccount.update(args);
  }
  async deleteApplicableOnAccount(
    args: Prisma.ApplicableOnAccountDeleteArgs
  ): Promise<PrismaApplicableOnAccount> {
    return this.prisma.applicableOnAccount.delete(args);
  }
}
