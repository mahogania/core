/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AllowedToTransactWith as PrismaAllowedToTransactWith,
} from "@prisma/client";

export class AllowedToTransactWithServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AllowedToTransactWithCountArgs, "select">
  ): Promise<number> {
    return this.prisma.allowedToTransactWith.count(args);
  }

  async allowedToTransactWiths(
    args: Prisma.AllowedToTransactWithFindManyArgs
  ): Promise<PrismaAllowedToTransactWith[]> {
    return this.prisma.allowedToTransactWith.findMany(args);
  }
  async allowedToTransactWith(
    args: Prisma.AllowedToTransactWithFindUniqueArgs
  ): Promise<PrismaAllowedToTransactWith | null> {
    return this.prisma.allowedToTransactWith.findUnique(args);
  }
  async createAllowedToTransactWith(
    args: Prisma.AllowedToTransactWithCreateArgs
  ): Promise<PrismaAllowedToTransactWith> {
    return this.prisma.allowedToTransactWith.create(args);
  }
  async updateAllowedToTransactWith(
    args: Prisma.AllowedToTransactWithUpdateArgs
  ): Promise<PrismaAllowedToTransactWith> {
    return this.prisma.allowedToTransactWith.update(args);
  }
  async deleteAllowedToTransactWith(
    args: Prisma.AllowedToTransactWithDeleteArgs
  ): Promise<PrismaAllowedToTransactWith> {
    return this.prisma.allowedToTransactWith.delete(args);
  }
}
