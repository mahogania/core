/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CustomsTariffNumber } from "./CustomsTariffNumber";
import { CustomsTariffNumberCountArgs } from "./CustomsTariffNumberCountArgs";
import { CustomsTariffNumberFindManyArgs } from "./CustomsTariffNumberFindManyArgs";
import { CustomsTariffNumberFindUniqueArgs } from "./CustomsTariffNumberFindUniqueArgs";
import { CreateCustomsTariffNumberArgs } from "./CreateCustomsTariffNumberArgs";
import { UpdateCustomsTariffNumberArgs } from "./UpdateCustomsTariffNumberArgs";
import { DeleteCustomsTariffNumberArgs } from "./DeleteCustomsTariffNumberArgs";
import { CustomsTariffNumberService } from "../customsTariffNumber.service";
@graphql.Resolver(() => CustomsTariffNumber)
export class CustomsTariffNumberResolverBase {
  constructor(protected readonly service: CustomsTariffNumberService) {}

  async _customsTariffNumbersMeta(
    @graphql.Args() args: CustomsTariffNumberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CustomsTariffNumber])
  async customsTariffNumbers(
    @graphql.Args() args: CustomsTariffNumberFindManyArgs
  ): Promise<CustomsTariffNumber[]> {
    return this.service.customsTariffNumbers(args);
  }

  @graphql.Query(() => CustomsTariffNumber, { nullable: true })
  async customsTariffNumber(
    @graphql.Args() args: CustomsTariffNumberFindUniqueArgs
  ): Promise<CustomsTariffNumber | null> {
    const result = await this.service.customsTariffNumber(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CustomsTariffNumber)
  async createCustomsTariffNumber(
    @graphql.Args() args: CreateCustomsTariffNumberArgs
  ): Promise<CustomsTariffNumber> {
    return await this.service.createCustomsTariffNumber({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CustomsTariffNumber)
  async updateCustomsTariffNumber(
    @graphql.Args() args: UpdateCustomsTariffNumberArgs
  ): Promise<CustomsTariffNumber | null> {
    try {
      return await this.service.updateCustomsTariffNumber({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomsTariffNumber)
  async deleteCustomsTariffNumber(
    @graphql.Args() args: DeleteCustomsTariffNumberArgs
  ): Promise<CustomsTariffNumber | null> {
    try {
      return await this.service.deleteCustomsTariffNumber(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
