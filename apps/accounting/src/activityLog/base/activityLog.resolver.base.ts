/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ActivityLog } from "./ActivityLog";
import { ActivityLogCountArgs } from "./ActivityLogCountArgs";
import { ActivityLogFindManyArgs } from "./ActivityLogFindManyArgs";
import { ActivityLogFindUniqueArgs } from "./ActivityLogFindUniqueArgs";
import { CreateActivityLogArgs } from "./CreateActivityLogArgs";
import { UpdateActivityLogArgs } from "./UpdateActivityLogArgs";
import { DeleteActivityLogArgs } from "./DeleteActivityLogArgs";
import { ActivityLogService } from "../activityLog.service";
@graphql.Resolver(() => ActivityLog)
export class ActivityLogResolverBase {
  constructor(protected readonly service: ActivityLogService) {}

  async _activityLogsMeta(
    @graphql.Args() args: ActivityLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ActivityLog])
  async activityLogs(
    @graphql.Args() args: ActivityLogFindManyArgs
  ): Promise<ActivityLog[]> {
    return this.service.activityLogs(args);
  }

  @graphql.Query(() => ActivityLog, { nullable: true })
  async activityLog(
    @graphql.Args() args: ActivityLogFindUniqueArgs
  ): Promise<ActivityLog | null> {
    const result = await this.service.activityLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ActivityLog)
  async createActivityLog(
    @graphql.Args() args: CreateActivityLogArgs
  ): Promise<ActivityLog> {
    return await this.service.createActivityLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ActivityLog)
  async updateActivityLog(
    @graphql.Args() args: UpdateActivityLogArgs
  ): Promise<ActivityLog | null> {
    try {
      return await this.service.updateActivityLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActivityLog)
  async deleteActivityLog(
    @graphql.Args() args: DeleteActivityLogArgs
  ): Promise<ActivityLog | null> {
    try {
      return await this.service.deleteActivityLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
