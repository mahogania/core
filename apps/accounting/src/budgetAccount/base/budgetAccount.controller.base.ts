/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BudgetAccountService } from "../budgetAccount.service";
import { BudgetAccountCreateInput } from "./BudgetAccountCreateInput";
import { BudgetAccount } from "./BudgetAccount";
import { BudgetAccountFindManyArgs } from "./BudgetAccountFindManyArgs";
import { BudgetAccountWhereUniqueInput } from "./BudgetAccountWhereUniqueInput";
import { BudgetAccountUpdateInput } from "./BudgetAccountUpdateInput";

export class BudgetAccountControllerBase {
  constructor(protected readonly service: BudgetAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BudgetAccount })
  async createBudgetAccount(
    @common.Body() data: BudgetAccountCreateInput
  ): Promise<BudgetAccount> {
    return await this.service.createBudgetAccount({
      data: data,
      select: {
        account: true,
        budgetAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BudgetAccount] })
  @ApiNestedQuery(BudgetAccountFindManyArgs)
  async budgetAccounts(
    @common.Req() request: Request
  ): Promise<BudgetAccount[]> {
    const args = plainToClass(BudgetAccountFindManyArgs, request.query);
    return this.service.budgetAccounts({
      ...args,
      select: {
        account: true,
        budgetAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BudgetAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async budgetAccount(
    @common.Param() params: BudgetAccountWhereUniqueInput
  ): Promise<BudgetAccount | null> {
    const result = await this.service.budgetAccount({
      where: params,
      select: {
        account: true,
        budgetAmount: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BudgetAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBudgetAccount(
    @common.Param() params: BudgetAccountWhereUniqueInput,
    @common.Body() data: BudgetAccountUpdateInput
  ): Promise<BudgetAccount | null> {
    try {
      return await this.service.updateBudgetAccount({
        where: params,
        data: data,
        select: {
          account: true,
          budgetAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BudgetAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBudgetAccount(
    @common.Param() params: BudgetAccountWhereUniqueInput
  ): Promise<BudgetAccount | null> {
    try {
      return await this.service.deleteBudgetAccount({
        where: params,
        select: {
          account: true,
          budgetAmount: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
