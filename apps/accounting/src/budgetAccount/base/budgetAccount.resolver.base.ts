/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BudgetAccount } from "./BudgetAccount";
import { BudgetAccountCountArgs } from "./BudgetAccountCountArgs";
import { BudgetAccountFindManyArgs } from "./BudgetAccountFindManyArgs";
import { BudgetAccountFindUniqueArgs } from "./BudgetAccountFindUniqueArgs";
import { CreateBudgetAccountArgs } from "./CreateBudgetAccountArgs";
import { UpdateBudgetAccountArgs } from "./UpdateBudgetAccountArgs";
import { DeleteBudgetAccountArgs } from "./DeleteBudgetAccountArgs";
import { BudgetAccountService } from "../budgetAccount.service";
@graphql.Resolver(() => BudgetAccount)
export class BudgetAccountResolverBase {
  constructor(protected readonly service: BudgetAccountService) {}

  async _budgetAccountsMeta(
    @graphql.Args() args: BudgetAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BudgetAccount])
  async budgetAccounts(
    @graphql.Args() args: BudgetAccountFindManyArgs
  ): Promise<BudgetAccount[]> {
    return this.service.budgetAccounts(args);
  }

  @graphql.Query(() => BudgetAccount, { nullable: true })
  async budgetAccount(
    @graphql.Args() args: BudgetAccountFindUniqueArgs
  ): Promise<BudgetAccount | null> {
    const result = await this.service.budgetAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BudgetAccount)
  async createBudgetAccount(
    @graphql.Args() args: CreateBudgetAccountArgs
  ): Promise<BudgetAccount> {
    return await this.service.createBudgetAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BudgetAccount)
  async updateBudgetAccount(
    @graphql.Args() args: UpdateBudgetAccountArgs
  ): Promise<BudgetAccount | null> {
    try {
      return await this.service.updateBudgetAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BudgetAccount)
  async deleteBudgetAccount(
    @graphql.Args() args: DeleteBudgetAccountArgs
  ): Promise<BudgetAccount | null> {
    try {
      return await this.service.deleteBudgetAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
