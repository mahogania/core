/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetDepreciationScheduleService } from "../assetDepreciationSchedule.service";
import { AssetDepreciationScheduleCreateInput } from "./AssetDepreciationScheduleCreateInput";
import { AssetDepreciationSchedule } from "./AssetDepreciationSchedule";
import { AssetDepreciationScheduleFindManyArgs } from "./AssetDepreciationScheduleFindManyArgs";
import { AssetDepreciationScheduleWhereUniqueInput } from "./AssetDepreciationScheduleWhereUniqueInput";
import { AssetDepreciationScheduleUpdateInput } from "./AssetDepreciationScheduleUpdateInput";

export class AssetDepreciationScheduleControllerBase {
  constructor(protected readonly service: AssetDepreciationScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetDepreciationSchedule })
  async createAssetDepreciationSchedule(
    @common.Body() data: AssetDepreciationScheduleCreateInput
  ): Promise<AssetDepreciationSchedule> {
    return await this.service.createAssetDepreciationSchedule({
      data: data,
      select: {
        amendedFrom: true,
        asset: true,
        company: true,
        createdAt: true,
        creation: true,
        dailyProrataBased: true,
        depreciationMethod: true,
        docstatus: true,
        expectedValueAfterUsefulLife: true,
        financeBook: true,
        financeBookId: true,
        frequencyOfDepreciation: true,
        grossPurchaseAmount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        notes: true,
        openingAccumulatedDepreciation: true,
        openingNumberOfBookedDepreciations: true,
        owner: true,
        rateOfDepreciation: true,
        shiftBased: true,
        status: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetDepreciationSchedule] })
  @ApiNestedQuery(AssetDepreciationScheduleFindManyArgs)
  async assetDepreciationSchedules(
    @common.Req() request: Request
  ): Promise<AssetDepreciationSchedule[]> {
    const args = plainToClass(
      AssetDepreciationScheduleFindManyArgs,
      request.query
    );
    return this.service.assetDepreciationSchedules({
      ...args,
      select: {
        amendedFrom: true,
        asset: true,
        company: true,
        createdAt: true,
        creation: true,
        dailyProrataBased: true,
        depreciationMethod: true,
        docstatus: true,
        expectedValueAfterUsefulLife: true,
        financeBook: true,
        financeBookId: true,
        frequencyOfDepreciation: true,
        grossPurchaseAmount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        notes: true,
        openingAccumulatedDepreciation: true,
        openingNumberOfBookedDepreciations: true,
        owner: true,
        rateOfDepreciation: true,
        shiftBased: true,
        status: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetDepreciationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetDepreciationSchedule(
    @common.Param() params: AssetDepreciationScheduleWhereUniqueInput
  ): Promise<AssetDepreciationSchedule | null> {
    const result = await this.service.assetDepreciationSchedule({
      where: params,
      select: {
        amendedFrom: true,
        asset: true,
        company: true,
        createdAt: true,
        creation: true,
        dailyProrataBased: true,
        depreciationMethod: true,
        docstatus: true,
        expectedValueAfterUsefulLife: true,
        financeBook: true,
        financeBookId: true,
        frequencyOfDepreciation: true,
        grossPurchaseAmount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        notes: true,
        openingAccumulatedDepreciation: true,
        openingNumberOfBookedDepreciations: true,
        owner: true,
        rateOfDepreciation: true,
        shiftBased: true,
        status: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetDepreciationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetDepreciationSchedule(
    @common.Param() params: AssetDepreciationScheduleWhereUniqueInput,
    @common.Body() data: AssetDepreciationScheduleUpdateInput
  ): Promise<AssetDepreciationSchedule | null> {
    try {
      return await this.service.updateAssetDepreciationSchedule({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          asset: true,
          company: true,
          createdAt: true,
          creation: true,
          dailyProrataBased: true,
          depreciationMethod: true,
          docstatus: true,
          expectedValueAfterUsefulLife: true,
          financeBook: true,
          financeBookId: true,
          frequencyOfDepreciation: true,
          grossPurchaseAmount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          notes: true,
          openingAccumulatedDepreciation: true,
          openingNumberOfBookedDepreciations: true,
          owner: true,
          rateOfDepreciation: true,
          shiftBased: true,
          status: true,
          totalNumberOfDepreciations: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetDepreciationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetDepreciationSchedule(
    @common.Param() params: AssetDepreciationScheduleWhereUniqueInput
  ): Promise<AssetDepreciationSchedule | null> {
    try {
      return await this.service.deleteAssetDepreciationSchedule({
        where: params,
        select: {
          amendedFrom: true,
          asset: true,
          company: true,
          createdAt: true,
          creation: true,
          dailyProrataBased: true,
          depreciationMethod: true,
          docstatus: true,
          expectedValueAfterUsefulLife: true,
          financeBook: true,
          financeBookId: true,
          frequencyOfDepreciation: true,
          grossPurchaseAmount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          notes: true,
          openingAccumulatedDepreciation: true,
          openingNumberOfBookedDepreciations: true,
          owner: true,
          rateOfDepreciation: true,
          shiftBased: true,
          status: true,
          totalNumberOfDepreciations: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
