/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountingPeriod as PrismaAccountingPeriod,
} from "@prisma/client";

export class AccountingPeriodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountingPeriodCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountingPeriod.count(args);
  }

  async accountingPeriods(
    args: Prisma.AccountingPeriodFindManyArgs
  ): Promise<PrismaAccountingPeriod[]> {
    return this.prisma.accountingPeriod.findMany(args);
  }
  async accountingPeriod(
    args: Prisma.AccountingPeriodFindUniqueArgs
  ): Promise<PrismaAccountingPeriod | null> {
    return this.prisma.accountingPeriod.findUnique(args);
  }
  async createAccountingPeriod(
    args: Prisma.AccountingPeriodCreateArgs
  ): Promise<PrismaAccountingPeriod> {
    return this.prisma.accountingPeriod.create(args);
  }
  async updateAccountingPeriod(
    args: Prisma.AccountingPeriodUpdateArgs
  ): Promise<PrismaAccountingPeriod> {
    return this.prisma.accountingPeriod.update(args);
  }
  async deleteAccountingPeriod(
    args: Prisma.AccountingPeriodDeleteArgs
  ): Promise<PrismaAccountingPeriod> {
    return this.prisma.accountingPeriod.delete(args);
  }
}
