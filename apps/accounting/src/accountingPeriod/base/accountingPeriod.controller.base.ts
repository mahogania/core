/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountingPeriodService } from "../accountingPeriod.service";
import { AccountingPeriodCreateInput } from "./AccountingPeriodCreateInput";
import { AccountingPeriod } from "./AccountingPeriod";
import { AccountingPeriodFindManyArgs } from "./AccountingPeriodFindManyArgs";
import { AccountingPeriodWhereUniqueInput } from "./AccountingPeriodWhereUniqueInput";
import { AccountingPeriodUpdateInput } from "./AccountingPeriodUpdateInput";

export class AccountingPeriodControllerBase {
  constructor(protected readonly service: AccountingPeriodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountingPeriod })
  async createAccountingPeriod(
    @common.Body() data: AccountingPeriodCreateInput
  ): Promise<AccountingPeriod> {
    return await this.service.createAccountingPeriod({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodName: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountingPeriod] })
  @ApiNestedQuery(AccountingPeriodFindManyArgs)
  async accountingPeriods(
    @common.Req() request: Request
  ): Promise<AccountingPeriod[]> {
    const args = plainToClass(AccountingPeriodFindManyArgs, request.query);
    return this.service.accountingPeriods({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodName: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountingPeriod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountingPeriod(
    @common.Param() params: AccountingPeriodWhereUniqueInput
  ): Promise<AccountingPeriod | null> {
    const result = await this.service.accountingPeriod({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodName: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountingPeriod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountingPeriod(
    @common.Param() params: AccountingPeriodWhereUniqueInput,
    @common.Body() data: AccountingPeriodUpdateInput
  ): Promise<AccountingPeriod | null> {
    try {
      return await this.service.updateAccountingPeriod({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          endDate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodName: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountingPeriod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountingPeriod(
    @common.Param() params: AccountingPeriodWhereUniqueInput
  ): Promise<AccountingPeriod | null> {
    try {
      return await this.service.deleteAccountingPeriod({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          endDate: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodName: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
