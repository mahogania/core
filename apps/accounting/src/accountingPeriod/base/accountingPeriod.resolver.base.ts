/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccountingPeriod } from "./AccountingPeriod";
import { AccountingPeriodCountArgs } from "./AccountingPeriodCountArgs";
import { AccountingPeriodFindManyArgs } from "./AccountingPeriodFindManyArgs";
import { AccountingPeriodFindUniqueArgs } from "./AccountingPeriodFindUniqueArgs";
import { CreateAccountingPeriodArgs } from "./CreateAccountingPeriodArgs";
import { UpdateAccountingPeriodArgs } from "./UpdateAccountingPeriodArgs";
import { DeleteAccountingPeriodArgs } from "./DeleteAccountingPeriodArgs";
import { AccountingPeriodService } from "../accountingPeriod.service";
@graphql.Resolver(() => AccountingPeriod)
export class AccountingPeriodResolverBase {
  constructor(protected readonly service: AccountingPeriodService) {}

  async _accountingPeriodsMeta(
    @graphql.Args() args: AccountingPeriodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountingPeriod])
  async accountingPeriods(
    @graphql.Args() args: AccountingPeriodFindManyArgs
  ): Promise<AccountingPeriod[]> {
    return this.service.accountingPeriods(args);
  }

  @graphql.Query(() => AccountingPeriod, { nullable: true })
  async accountingPeriod(
    @graphql.Args() args: AccountingPeriodFindUniqueArgs
  ): Promise<AccountingPeriod | null> {
    const result = await this.service.accountingPeriod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountingPeriod)
  async createAccountingPeriod(
    @graphql.Args() args: CreateAccountingPeriodArgs
  ): Promise<AccountingPeriod> {
    return await this.service.createAccountingPeriod({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AccountingPeriod)
  async updateAccountingPeriod(
    @graphql.Args() args: UpdateAccountingPeriodArgs
  ): Promise<AccountingPeriod | null> {
    try {
      return await this.service.updateAccountingPeriod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountingPeriod)
  async deleteAccountingPeriod(
    @graphql.Args() args: DeleteAccountingPeriodArgs
  ): Promise<AccountingPeriod | null> {
    try {
      return await this.service.deleteAccountingPeriod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
