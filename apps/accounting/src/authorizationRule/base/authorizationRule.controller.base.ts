/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuthorizationRuleService } from "../authorizationRule.service";
import { AuthorizationRuleCreateInput } from "./AuthorizationRuleCreateInput";
import { AuthorizationRule } from "./AuthorizationRule";
import { AuthorizationRuleFindManyArgs } from "./AuthorizationRuleFindManyArgs";
import { AuthorizationRuleWhereUniqueInput } from "./AuthorizationRuleWhereUniqueInput";
import { AuthorizationRuleUpdateInput } from "./AuthorizationRuleUpdateInput";

export class AuthorizationRuleControllerBase {
  constructor(protected readonly service: AuthorizationRuleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AuthorizationRule })
  async createAuthorizationRule(
    @common.Body() data: AuthorizationRuleCreateInput
  ): Promise<AuthorizationRule> {
    return await this.service.createAuthorizationRule({
      data: data,
      select: {
        approvingRole: true,
        approvingUser: true,
        basedOn: true,
        company: true,
        createdAt: true,
        creation: true,
        customerOrItem: true,
        docstatus: true,
        id: true,
        idx: true,
        masterName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        systemRole: true,
        systemUser: true,
        toDesignation: true,
        toEmp: true,
        transaction: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AuthorizationRule] })
  @ApiNestedQuery(AuthorizationRuleFindManyArgs)
  async authorizationRules(
    @common.Req() request: Request
  ): Promise<AuthorizationRule[]> {
    const args = plainToClass(AuthorizationRuleFindManyArgs, request.query);
    return this.service.authorizationRules({
      ...args,
      select: {
        approvingRole: true,
        approvingUser: true,
        basedOn: true,
        company: true,
        createdAt: true,
        creation: true,
        customerOrItem: true,
        docstatus: true,
        id: true,
        idx: true,
        masterName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        systemRole: true,
        systemUser: true,
        toDesignation: true,
        toEmp: true,
        transaction: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AuthorizationRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async authorizationRule(
    @common.Param() params: AuthorizationRuleWhereUniqueInput
  ): Promise<AuthorizationRule | null> {
    const result = await this.service.authorizationRule({
      where: params,
      select: {
        approvingRole: true,
        approvingUser: true,
        basedOn: true,
        company: true,
        createdAt: true,
        creation: true,
        customerOrItem: true,
        docstatus: true,
        id: true,
        idx: true,
        masterName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        systemRole: true,
        systemUser: true,
        toDesignation: true,
        toEmp: true,
        transaction: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AuthorizationRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAuthorizationRule(
    @common.Param() params: AuthorizationRuleWhereUniqueInput,
    @common.Body() data: AuthorizationRuleUpdateInput
  ): Promise<AuthorizationRule | null> {
    try {
      return await this.service.updateAuthorizationRule({
        where: params,
        data: data,
        select: {
          approvingRole: true,
          approvingUser: true,
          basedOn: true,
          company: true,
          createdAt: true,
          creation: true,
          customerOrItem: true,
          docstatus: true,
          id: true,
          idx: true,
          masterName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          systemRole: true,
          systemUser: true,
          toDesignation: true,
          toEmp: true,
          transaction: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AuthorizationRule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAuthorizationRule(
    @common.Param() params: AuthorizationRuleWhereUniqueInput
  ): Promise<AuthorizationRule | null> {
    try {
      return await this.service.deleteAuthorizationRule({
        where: params,
        select: {
          approvingRole: true,
          approvingUser: true,
          basedOn: true,
          company: true,
          createdAt: true,
          creation: true,
          customerOrItem: true,
          docstatus: true,
          id: true,
          idx: true,
          masterName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          systemRole: true,
          systemUser: true,
          toDesignation: true,
          toEmp: true,
          transaction: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
