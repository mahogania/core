/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuthorizationRule as PrismaAuthorizationRule,
} from "@prisma/client";

export class AuthorizationRuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthorizationRuleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authorizationRule.count(args);
  }

  async authorizationRules(
    args: Prisma.AuthorizationRuleFindManyArgs
  ): Promise<PrismaAuthorizationRule[]> {
    return this.prisma.authorizationRule.findMany(args);
  }
  async authorizationRule(
    args: Prisma.AuthorizationRuleFindUniqueArgs
  ): Promise<PrismaAuthorizationRule | null> {
    return this.prisma.authorizationRule.findUnique(args);
  }
  async createAuthorizationRule(
    args: Prisma.AuthorizationRuleCreateArgs
  ): Promise<PrismaAuthorizationRule> {
    return this.prisma.authorizationRule.create(args);
  }
  async updateAuthorizationRule(
    args: Prisma.AuthorizationRuleUpdateArgs
  ): Promise<PrismaAuthorizationRule> {
    return this.prisma.authorizationRule.update(args);
  }
  async deleteAuthorizationRule(
    args: Prisma.AuthorizationRuleDeleteArgs
  ): Promise<PrismaAuthorizationRule> {
    return this.prisma.authorizationRule.delete(args);
  }
}
