/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FiscalYearCompany } from "./FiscalYearCompany";
import { FiscalYearCompanyCountArgs } from "./FiscalYearCompanyCountArgs";
import { FiscalYearCompanyFindManyArgs } from "./FiscalYearCompanyFindManyArgs";
import { FiscalYearCompanyFindUniqueArgs } from "./FiscalYearCompanyFindUniqueArgs";
import { CreateFiscalYearCompanyArgs } from "./CreateFiscalYearCompanyArgs";
import { UpdateFiscalYearCompanyArgs } from "./UpdateFiscalYearCompanyArgs";
import { DeleteFiscalYearCompanyArgs } from "./DeleteFiscalYearCompanyArgs";
import { FiscalYearCompanyService } from "../fiscalYearCompany.service";
@graphql.Resolver(() => FiscalYearCompany)
export class FiscalYearCompanyResolverBase {
  constructor(protected readonly service: FiscalYearCompanyService) {}

  async _fiscalYearCompaniesMeta(
    @graphql.Args() args: FiscalYearCompanyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FiscalYearCompany])
  async fiscalYearCompanies(
    @graphql.Args() args: FiscalYearCompanyFindManyArgs
  ): Promise<FiscalYearCompany[]> {
    return this.service.fiscalYearCompanies(args);
  }

  @graphql.Query(() => FiscalYearCompany, { nullable: true })
  async fiscalYearCompany(
    @graphql.Args() args: FiscalYearCompanyFindUniqueArgs
  ): Promise<FiscalYearCompany | null> {
    const result = await this.service.fiscalYearCompany(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FiscalYearCompany)
  async createFiscalYearCompany(
    @graphql.Args() args: CreateFiscalYearCompanyArgs
  ): Promise<FiscalYearCompany> {
    return await this.service.createFiscalYearCompany({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FiscalYearCompany)
  async updateFiscalYearCompany(
    @graphql.Args() args: UpdateFiscalYearCompanyArgs
  ): Promise<FiscalYearCompany | null> {
    try {
      return await this.service.updateFiscalYearCompany({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FiscalYearCompany)
  async deleteFiscalYearCompany(
    @graphql.Args() args: DeleteFiscalYearCompanyArgs
  ): Promise<FiscalYearCompany | null> {
    try {
      return await this.service.deleteFiscalYearCompany(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
