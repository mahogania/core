/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FiscalYearCompanyService } from "../fiscalYearCompany.service";
import { FiscalYearCompanyCreateInput } from "./FiscalYearCompanyCreateInput";
import { FiscalYearCompany } from "./FiscalYearCompany";
import { FiscalYearCompanyFindManyArgs } from "./FiscalYearCompanyFindManyArgs";
import { FiscalYearCompanyWhereUniqueInput } from "./FiscalYearCompanyWhereUniqueInput";
import { FiscalYearCompanyUpdateInput } from "./FiscalYearCompanyUpdateInput";

export class FiscalYearCompanyControllerBase {
  constructor(protected readonly service: FiscalYearCompanyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FiscalYearCompany })
  async createFiscalYearCompany(
    @common.Body() data: FiscalYearCompanyCreateInput
  ): Promise<FiscalYearCompany> {
    return await this.service.createFiscalYearCompany({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FiscalYearCompany] })
  @ApiNestedQuery(FiscalYearCompanyFindManyArgs)
  async fiscalYearCompanies(
    @common.Req() request: Request
  ): Promise<FiscalYearCompany[]> {
    const args = plainToClass(FiscalYearCompanyFindManyArgs, request.query);
    return this.service.fiscalYearCompanies({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FiscalYearCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fiscalYearCompany(
    @common.Param() params: FiscalYearCompanyWhereUniqueInput
  ): Promise<FiscalYearCompany | null> {
    const result = await this.service.fiscalYearCompany({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docStatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FiscalYearCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFiscalYearCompany(
    @common.Param() params: FiscalYearCompanyWhereUniqueInput,
    @common.Body() data: FiscalYearCompanyUpdateInput
  ): Promise<FiscalYearCompany | null> {
    try {
      return await this.service.updateFiscalYearCompany({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FiscalYearCompany })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFiscalYearCompany(
    @common.Param() params: FiscalYearCompanyWhereUniqueInput
  ): Promise<FiscalYearCompany | null> {
    try {
      return await this.service.deleteFiscalYearCompany({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docStatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
