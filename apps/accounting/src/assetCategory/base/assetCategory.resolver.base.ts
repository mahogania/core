/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetCategory } from "./AssetCategory";
import { AssetCategoryCountArgs } from "./AssetCategoryCountArgs";
import { AssetCategoryFindManyArgs } from "./AssetCategoryFindManyArgs";
import { AssetCategoryFindUniqueArgs } from "./AssetCategoryFindUniqueArgs";
import { CreateAssetCategoryArgs } from "./CreateAssetCategoryArgs";
import { UpdateAssetCategoryArgs } from "./UpdateAssetCategoryArgs";
import { DeleteAssetCategoryArgs } from "./DeleteAssetCategoryArgs";
import { AssetCategoryService } from "../assetCategory.service";
@graphql.Resolver(() => AssetCategory)
export class AssetCategoryResolverBase {
  constructor(protected readonly service: AssetCategoryService) {}

  async _assetCategoriesMeta(
    @graphql.Args() args: AssetCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetCategory])
  async assetCategories(
    @graphql.Args() args: AssetCategoryFindManyArgs
  ): Promise<AssetCategory[]> {
    return this.service.assetCategories(args);
  }

  @graphql.Query(() => AssetCategory, { nullable: true })
  async assetCategory(
    @graphql.Args() args: AssetCategoryFindUniqueArgs
  ): Promise<AssetCategory | null> {
    const result = await this.service.assetCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetCategory)
  async createAssetCategory(
    @graphql.Args() args: CreateAssetCategoryArgs
  ): Promise<AssetCategory> {
    return await this.service.createAssetCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetCategory)
  async updateAssetCategory(
    @graphql.Args() args: UpdateAssetCategoryArgs
  ): Promise<AssetCategory | null> {
    try {
      return await this.service.updateAssetCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetCategory)
  async deleteAssetCategory(
    @graphql.Args() args: DeleteAssetCategoryArgs
  ): Promise<AssetCategory | null> {
    try {
      return await this.service.deleteAssetCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
