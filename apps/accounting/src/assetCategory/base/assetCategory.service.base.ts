/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AssetCategory as PrismaAssetCategory } from "@prisma/client";

export class AssetCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssetCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assetCategory.count(args);
  }

  async assetCategories(
    args: Prisma.AssetCategoryFindManyArgs
  ): Promise<PrismaAssetCategory[]> {
    return this.prisma.assetCategory.findMany(args);
  }
  async assetCategory(
    args: Prisma.AssetCategoryFindUniqueArgs
  ): Promise<PrismaAssetCategory | null> {
    return this.prisma.assetCategory.findUnique(args);
  }
  async createAssetCategory(
    args: Prisma.AssetCategoryCreateArgs
  ): Promise<PrismaAssetCategory> {
    return this.prisma.assetCategory.create(args);
  }
  async updateAssetCategory(
    args: Prisma.AssetCategoryUpdateArgs
  ): Promise<PrismaAssetCategory> {
    return this.prisma.assetCategory.update(args);
  }
  async deleteAssetCategory(
    args: Prisma.AssetCategoryDeleteArgs
  ): Promise<PrismaAssetCategory> {
    return this.prisma.assetCategory.delete(args);
  }
}
