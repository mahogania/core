/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BulkTransactionLogDetail } from "./BulkTransactionLogDetail";
import { BulkTransactionLogDetailCountArgs } from "./BulkTransactionLogDetailCountArgs";
import { BulkTransactionLogDetailFindManyArgs } from "./BulkTransactionLogDetailFindManyArgs";
import { BulkTransactionLogDetailFindUniqueArgs } from "./BulkTransactionLogDetailFindUniqueArgs";
import { CreateBulkTransactionLogDetailArgs } from "./CreateBulkTransactionLogDetailArgs";
import { UpdateBulkTransactionLogDetailArgs } from "./UpdateBulkTransactionLogDetailArgs";
import { DeleteBulkTransactionLogDetailArgs } from "./DeleteBulkTransactionLogDetailArgs";
import { BulkTransactionLogDetailService } from "../bulkTransactionLogDetail.service";
@graphql.Resolver(() => BulkTransactionLogDetail)
export class BulkTransactionLogDetailResolverBase {
  constructor(protected readonly service: BulkTransactionLogDetailService) {}

  async _bulkTransactionLogDetailsMeta(
    @graphql.Args() args: BulkTransactionLogDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BulkTransactionLogDetail])
  async bulkTransactionLogDetails(
    @graphql.Args() args: BulkTransactionLogDetailFindManyArgs
  ): Promise<BulkTransactionLogDetail[]> {
    return this.service.bulkTransactionLogDetails(args);
  }

  @graphql.Query(() => BulkTransactionLogDetail, { nullable: true })
  async bulkTransactionLogDetail(
    @graphql.Args() args: BulkTransactionLogDetailFindUniqueArgs
  ): Promise<BulkTransactionLogDetail | null> {
    const result = await this.service.bulkTransactionLogDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BulkTransactionLogDetail)
  async createBulkTransactionLogDetail(
    @graphql.Args() args: CreateBulkTransactionLogDetailArgs
  ): Promise<BulkTransactionLogDetail> {
    return await this.service.createBulkTransactionLogDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BulkTransactionLogDetail)
  async updateBulkTransactionLogDetail(
    @graphql.Args() args: UpdateBulkTransactionLogDetailArgs
  ): Promise<BulkTransactionLogDetail | null> {
    try {
      return await this.service.updateBulkTransactionLogDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BulkTransactionLogDetail)
  async deleteBulkTransactionLogDetail(
    @graphql.Args() args: DeleteBulkTransactionLogDetailArgs
  ): Promise<BulkTransactionLogDetail | null> {
    try {
      return await this.service.deleteBulkTransactionLogDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
