/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BulkTransactionLogDetailService } from "../bulkTransactionLogDetail.service";
import { BulkTransactionLogDetailCreateInput } from "./BulkTransactionLogDetailCreateInput";
import { BulkTransactionLogDetail } from "./BulkTransactionLogDetail";
import { BulkTransactionLogDetailFindManyArgs } from "./BulkTransactionLogDetailFindManyArgs";
import { BulkTransactionLogDetailWhereUniqueInput } from "./BulkTransactionLogDetailWhereUniqueInput";
import { BulkTransactionLogDetailUpdateInput } from "./BulkTransactionLogDetailUpdateInput";

export class BulkTransactionLogDetailControllerBase {
  constructor(protected readonly service: BulkTransactionLogDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BulkTransactionLogDetail })
  async createBulkTransactionLogDetail(
    @common.Body() data: BulkTransactionLogDetailCreateInput
  ): Promise<BulkTransactionLogDetail> {
    return await this.service.createBulkTransactionLogDetail({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        errorDescription: true,
        fromDoctype: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        retried: true,
        time: true,
        toDoctype: true,
        transactionName: true,
        transactionStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BulkTransactionLogDetail] })
  @ApiNestedQuery(BulkTransactionLogDetailFindManyArgs)
  async bulkTransactionLogDetails(
    @common.Req() request: Request
  ): Promise<BulkTransactionLogDetail[]> {
    const args = plainToClass(
      BulkTransactionLogDetailFindManyArgs,
      request.query
    );
    return this.service.bulkTransactionLogDetails({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        errorDescription: true,
        fromDoctype: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        retried: true,
        time: true,
        toDoctype: true,
        transactionName: true,
        transactionStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BulkTransactionLogDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bulkTransactionLogDetail(
    @common.Param() params: BulkTransactionLogDetailWhereUniqueInput
  ): Promise<BulkTransactionLogDetail | null> {
    const result = await this.service.bulkTransactionLogDetail({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        errorDescription: true,
        fromDoctype: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        retried: true,
        time: true,
        toDoctype: true,
        transactionName: true,
        transactionStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BulkTransactionLogDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBulkTransactionLogDetail(
    @common.Param() params: BulkTransactionLogDetailWhereUniqueInput,
    @common.Body() data: BulkTransactionLogDetailUpdateInput
  ): Promise<BulkTransactionLogDetail | null> {
    try {
      return await this.service.updateBulkTransactionLogDetail({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          date: true,
          docstatus: true,
          errorDescription: true,
          fromDoctype: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          retried: true,
          time: true,
          toDoctype: true,
          transactionName: true,
          transactionStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BulkTransactionLogDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBulkTransactionLogDetail(
    @common.Param() params: BulkTransactionLogDetailWhereUniqueInput
  ): Promise<BulkTransactionLogDetail | null> {
    try {
      return await this.service.deleteBulkTransactionLogDetail({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          date: true,
          docstatus: true,
          errorDescription: true,
          fromDoctype: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          retried: true,
          time: true,
          toDoctype: true,
          transactionName: true,
          transactionStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
