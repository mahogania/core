/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DesignationService } from "../designation.service";
import { DesignationCreateInput } from "./DesignationCreateInput";
import { Designation } from "./Designation";
import { DesignationFindManyArgs } from "./DesignationFindManyArgs";
import { DesignationWhereUniqueInput } from "./DesignationWhereUniqueInput";
import { DesignationUpdateInput } from "./DesignationUpdateInput";

export class DesignationControllerBase {
  constructor(protected readonly service: DesignationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Designation })
  async createDesignation(
    @common.Body() data: DesignationCreateInput
  ): Promise<Designation> {
    return await this.service.createDesignation({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        designationName: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Designation] })
  @ApiNestedQuery(DesignationFindManyArgs)
  async designations(@common.Req() request: Request): Promise<Designation[]> {
    const args = plainToClass(DesignationFindManyArgs, request.query);
    return this.service.designations({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        designationName: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Designation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async designation(
    @common.Param() params: DesignationWhereUniqueInput
  ): Promise<Designation | null> {
    const result = await this.service.designation({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        designationName: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Designation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDesignation(
    @common.Param() params: DesignationWhereUniqueInput,
    @common.Body() data: DesignationUpdateInput
  ): Promise<Designation | null> {
    try {
      return await this.service.updateDesignation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          description: true,
          designationName: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Designation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDesignation(
    @common.Param() params: DesignationWhereUniqueInput
  ): Promise<Designation | null> {
    try {
      return await this.service.deleteDesignation({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          description: true,
          designationName: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
