/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetMaintenanceTaskService } from "../assetMaintenanceTask.service";
import { AssetMaintenanceTaskCreateInput } from "./AssetMaintenanceTaskCreateInput";
import { AssetMaintenanceTask } from "./AssetMaintenanceTask";
import { AssetMaintenanceTaskFindManyArgs } from "./AssetMaintenanceTaskFindManyArgs";
import { AssetMaintenanceTaskWhereUniqueInput } from "./AssetMaintenanceTaskWhereUniqueInput";
import { AssetMaintenanceTaskUpdateInput } from "./AssetMaintenanceTaskUpdateInput";

export class AssetMaintenanceTaskControllerBase {
  constructor(protected readonly service: AssetMaintenanceTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetMaintenanceTask })
  async createAssetMaintenanceTask(
    @common.Body() data: AssetMaintenanceTaskCreateInput
  ): Promise<AssetMaintenanceTask> {
    return await this.service.createAssetMaintenanceTask({
      data: data,
      select: {
        assignTo: true,
        assignToName: true,
        certificateRequired: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        lastCompletionDate: true,
        maintenanceStatus: true,
        maintenanceTask: true,
        maintenanceType: true,
        modified: true,
        modifiedBy: true,
        name: true,
        nextDueDate: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        periodicity: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetMaintenanceTask] })
  @ApiNestedQuery(AssetMaintenanceTaskFindManyArgs)
  async assetMaintenanceTasks(
    @common.Req() request: Request
  ): Promise<AssetMaintenanceTask[]> {
    const args = plainToClass(AssetMaintenanceTaskFindManyArgs, request.query);
    return this.service.assetMaintenanceTasks({
      ...args,
      select: {
        assignTo: true,
        assignToName: true,
        certificateRequired: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        lastCompletionDate: true,
        maintenanceStatus: true,
        maintenanceTask: true,
        maintenanceType: true,
        modified: true,
        modifiedBy: true,
        name: true,
        nextDueDate: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        periodicity: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenanceTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetMaintenanceTask(
    @common.Param() params: AssetMaintenanceTaskWhereUniqueInput
  ): Promise<AssetMaintenanceTask | null> {
    const result = await this.service.assetMaintenanceTask({
      where: params,
      select: {
        assignTo: true,
        assignToName: true,
        certificateRequired: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        endDate: true,
        id: true,
        idx: true,
        lastCompletionDate: true,
        maintenanceStatus: true,
        maintenanceTask: true,
        maintenanceType: true,
        modified: true,
        modifiedBy: true,
        name: true,
        nextDueDate: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        periodicity: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenanceTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetMaintenanceTask(
    @common.Param() params: AssetMaintenanceTaskWhereUniqueInput,
    @common.Body() data: AssetMaintenanceTaskUpdateInput
  ): Promise<AssetMaintenanceTask | null> {
    try {
      return await this.service.updateAssetMaintenanceTask({
        where: params,
        data: data,
        select: {
          assignTo: true,
          assignToName: true,
          certificateRequired: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          endDate: true,
          id: true,
          idx: true,
          lastCompletionDate: true,
          maintenanceStatus: true,
          maintenanceTask: true,
          maintenanceType: true,
          modified: true,
          modifiedBy: true,
          name: true,
          nextDueDate: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          periodicity: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenanceTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetMaintenanceTask(
    @common.Param() params: AssetMaintenanceTaskWhereUniqueInput
  ): Promise<AssetMaintenanceTask | null> {
    try {
      return await this.service.deleteAssetMaintenanceTask({
        where: params,
        select: {
          assignTo: true,
          assignToName: true,
          certificateRequired: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          endDate: true,
          id: true,
          idx: true,
          lastCompletionDate: true,
          maintenanceStatus: true,
          maintenanceTask: true,
          maintenanceType: true,
          modified: true,
          modifiedBy: true,
          name: true,
          nextDueDate: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          periodicity: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
