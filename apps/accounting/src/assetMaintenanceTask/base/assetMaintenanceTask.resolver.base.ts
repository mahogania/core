/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetMaintenanceTask } from "./AssetMaintenanceTask";
import { AssetMaintenanceTaskCountArgs } from "./AssetMaintenanceTaskCountArgs";
import { AssetMaintenanceTaskFindManyArgs } from "./AssetMaintenanceTaskFindManyArgs";
import { AssetMaintenanceTaskFindUniqueArgs } from "./AssetMaintenanceTaskFindUniqueArgs";
import { CreateAssetMaintenanceTaskArgs } from "./CreateAssetMaintenanceTaskArgs";
import { UpdateAssetMaintenanceTaskArgs } from "./UpdateAssetMaintenanceTaskArgs";
import { DeleteAssetMaintenanceTaskArgs } from "./DeleteAssetMaintenanceTaskArgs";
import { AssetMaintenanceTaskService } from "../assetMaintenanceTask.service";
@graphql.Resolver(() => AssetMaintenanceTask)
export class AssetMaintenanceTaskResolverBase {
  constructor(protected readonly service: AssetMaintenanceTaskService) {}

  async _assetMaintenanceTasksMeta(
    @graphql.Args() args: AssetMaintenanceTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetMaintenanceTask])
  async assetMaintenanceTasks(
    @graphql.Args() args: AssetMaintenanceTaskFindManyArgs
  ): Promise<AssetMaintenanceTask[]> {
    return this.service.assetMaintenanceTasks(args);
  }

  @graphql.Query(() => AssetMaintenanceTask, { nullable: true })
  async assetMaintenanceTask(
    @graphql.Args() args: AssetMaintenanceTaskFindUniqueArgs
  ): Promise<AssetMaintenanceTask | null> {
    const result = await this.service.assetMaintenanceTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetMaintenanceTask)
  async createAssetMaintenanceTask(
    @graphql.Args() args: CreateAssetMaintenanceTaskArgs
  ): Promise<AssetMaintenanceTask> {
    return await this.service.createAssetMaintenanceTask({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetMaintenanceTask)
  async updateAssetMaintenanceTask(
    @graphql.Args() args: UpdateAssetMaintenanceTaskArgs
  ): Promise<AssetMaintenanceTask | null> {
    try {
      return await this.service.updateAssetMaintenanceTask({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetMaintenanceTask)
  async deleteAssetMaintenanceTask(
    @graphql.Args() args: DeleteAssetMaintenanceTaskArgs
  ): Promise<AssetMaintenanceTask | null> {
    try {
      return await this.service.deleteAssetMaintenanceTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
