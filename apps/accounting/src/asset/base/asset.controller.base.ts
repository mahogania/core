/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetService } from "../asset.service";
import { AssetCreateInput } from "./AssetCreateInput";
import { Asset } from "./Asset";
import { AssetFindManyArgs } from "./AssetFindManyArgs";
import { AssetWhereUniqueInput } from "./AssetWhereUniqueInput";
import { AssetUpdateInput } from "./AssetUpdateInput";

export class AssetControllerBase {
  constructor(protected readonly service: AssetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Asset })
  async createAsset(@common.Body() data: AssetCreateInput): Promise<Asset> {
    return await this.service.createAsset({
      data: data,
      select: {
        additionalAssetCost: true,
        amendedFrom: true,
        assetCategory: true,
        assetName: true,
        assetOwner: true,
        assetOwnerCompany: true,
        assetQuantity: true,
        availableForUseDate: true,
        bookedFixedAsset: true,
        calculateDepreciation: true,
        company: true,
        comprehensiveInsurance: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        custodian: true,
        customer: true,
        defaultFinanceBook: true,
        department: true,
        deprEntryPostingStatus: true,
        depreciationMethod: true,
        disposalDate: true,
        docstatus: true,
        frequencyOfDepreciation: true,
        grossPurchaseAmount: true,
        id: true,
        idx: true,
        image: true,
        insuranceEndDate: true,
        insuranceStartDate: true,
        insuredValue: true,
        insurer: true,
        isCompositeAsset: true,
        isExistingAsset: true,
        isFullyDepreciated: true,
        itemCode: true,
        itemName: true,
        journalEntryForScrap: true,
        location: true,
        maintenanceRequired: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        nextDepreciationDate: true,
        openingAccumulatedDepreciation: true,
        openingNumberOfBookedDepreciations: true,
        owner: true,
        policyNumber: true,
        purchaseAmount: true,
        purchaseDate: true,
        purchaseInvoice: true,
        purchaseInvoiceItem: true,
        purchaseReceipt: true,
        purchaseReceiptItem: true,
        splitFrom: true,
        status: true,
        supplier: true,
        totalAssetCost: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
        valueAfterDepreciation: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Asset] })
  @ApiNestedQuery(AssetFindManyArgs)
  async assets(@common.Req() request: Request): Promise<Asset[]> {
    const args = plainToClass(AssetFindManyArgs, request.query);
    return this.service.assets({
      ...args,
      select: {
        additionalAssetCost: true,
        amendedFrom: true,
        assetCategory: true,
        assetName: true,
        assetOwner: true,
        assetOwnerCompany: true,
        assetQuantity: true,
        availableForUseDate: true,
        bookedFixedAsset: true,
        calculateDepreciation: true,
        company: true,
        comprehensiveInsurance: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        custodian: true,
        customer: true,
        defaultFinanceBook: true,
        department: true,
        deprEntryPostingStatus: true,
        depreciationMethod: true,
        disposalDate: true,
        docstatus: true,
        frequencyOfDepreciation: true,
        grossPurchaseAmount: true,
        id: true,
        idx: true,
        image: true,
        insuranceEndDate: true,
        insuranceStartDate: true,
        insuredValue: true,
        insurer: true,
        isCompositeAsset: true,
        isExistingAsset: true,
        isFullyDepreciated: true,
        itemCode: true,
        itemName: true,
        journalEntryForScrap: true,
        location: true,
        maintenanceRequired: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        nextDepreciationDate: true,
        openingAccumulatedDepreciation: true,
        openingNumberOfBookedDepreciations: true,
        owner: true,
        policyNumber: true,
        purchaseAmount: true,
        purchaseDate: true,
        purchaseInvoice: true,
        purchaseInvoiceItem: true,
        purchaseReceipt: true,
        purchaseReceiptItem: true,
        splitFrom: true,
        status: true,
        supplier: true,
        totalAssetCost: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
        valueAfterDepreciation: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Asset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async asset(
    @common.Param() params: AssetWhereUniqueInput
  ): Promise<Asset | null> {
    const result = await this.service.asset({
      where: params,
      select: {
        additionalAssetCost: true,
        amendedFrom: true,
        assetCategory: true,
        assetName: true,
        assetOwner: true,
        assetOwnerCompany: true,
        assetQuantity: true,
        availableForUseDate: true,
        bookedFixedAsset: true,
        calculateDepreciation: true,
        company: true,
        comprehensiveInsurance: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        custodian: true,
        customer: true,
        defaultFinanceBook: true,
        department: true,
        deprEntryPostingStatus: true,
        depreciationMethod: true,
        disposalDate: true,
        docstatus: true,
        frequencyOfDepreciation: true,
        grossPurchaseAmount: true,
        id: true,
        idx: true,
        image: true,
        insuranceEndDate: true,
        insuranceStartDate: true,
        insuredValue: true,
        insurer: true,
        isCompositeAsset: true,
        isExistingAsset: true,
        isFullyDepreciated: true,
        itemCode: true,
        itemName: true,
        journalEntryForScrap: true,
        location: true,
        maintenanceRequired: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        nextDepreciationDate: true,
        openingAccumulatedDepreciation: true,
        openingNumberOfBookedDepreciations: true,
        owner: true,
        policyNumber: true,
        purchaseAmount: true,
        purchaseDate: true,
        purchaseInvoice: true,
        purchaseInvoiceItem: true,
        purchaseReceipt: true,
        purchaseReceiptItem: true,
        splitFrom: true,
        status: true,
        supplier: true,
        totalAssetCost: true,
        totalNumberOfDepreciations: true,
        updatedAt: true,
        valueAfterDepreciation: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Asset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAsset(
    @common.Param() params: AssetWhereUniqueInput,
    @common.Body() data: AssetUpdateInput
  ): Promise<Asset | null> {
    try {
      return await this.service.updateAsset({
        where: params,
        data: data,
        select: {
          additionalAssetCost: true,
          amendedFrom: true,
          assetCategory: true,
          assetName: true,
          assetOwner: true,
          assetOwnerCompany: true,
          assetQuantity: true,
          availableForUseDate: true,
          bookedFixedAsset: true,
          calculateDepreciation: true,
          company: true,
          comprehensiveInsurance: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          custodian: true,
          customer: true,
          defaultFinanceBook: true,
          department: true,
          deprEntryPostingStatus: true,
          depreciationMethod: true,
          disposalDate: true,
          docstatus: true,
          frequencyOfDepreciation: true,
          grossPurchaseAmount: true,
          id: true,
          idx: true,
          image: true,
          insuranceEndDate: true,
          insuranceStartDate: true,
          insuredValue: true,
          insurer: true,
          isCompositeAsset: true,
          isExistingAsset: true,
          isFullyDepreciated: true,
          itemCode: true,
          itemName: true,
          journalEntryForScrap: true,
          location: true,
          maintenanceRequired: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          nextDepreciationDate: true,
          openingAccumulatedDepreciation: true,
          openingNumberOfBookedDepreciations: true,
          owner: true,
          policyNumber: true,
          purchaseAmount: true,
          purchaseDate: true,
          purchaseInvoice: true,
          purchaseInvoiceItem: true,
          purchaseReceipt: true,
          purchaseReceiptItem: true,
          splitFrom: true,
          status: true,
          supplier: true,
          totalAssetCost: true,
          totalNumberOfDepreciations: true,
          updatedAt: true,
          valueAfterDepreciation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Asset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAsset(
    @common.Param() params: AssetWhereUniqueInput
  ): Promise<Asset | null> {
    try {
      return await this.service.deleteAsset({
        where: params,
        select: {
          additionalAssetCost: true,
          amendedFrom: true,
          assetCategory: true,
          assetName: true,
          assetOwner: true,
          assetOwnerCompany: true,
          assetQuantity: true,
          availableForUseDate: true,
          bookedFixedAsset: true,
          calculateDepreciation: true,
          company: true,
          comprehensiveInsurance: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          custodian: true,
          customer: true,
          defaultFinanceBook: true,
          department: true,
          deprEntryPostingStatus: true,
          depreciationMethod: true,
          disposalDate: true,
          docstatus: true,
          frequencyOfDepreciation: true,
          grossPurchaseAmount: true,
          id: true,
          idx: true,
          image: true,
          insuranceEndDate: true,
          insuranceStartDate: true,
          insuredValue: true,
          insurer: true,
          isCompositeAsset: true,
          isExistingAsset: true,
          isFullyDepreciated: true,
          itemCode: true,
          itemName: true,
          journalEntryForScrap: true,
          location: true,
          maintenanceRequired: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          nextDepreciationDate: true,
          openingAccumulatedDepreciation: true,
          openingNumberOfBookedDepreciations: true,
          owner: true,
          policyNumber: true,
          purchaseAmount: true,
          purchaseDate: true,
          purchaseInvoice: true,
          purchaseInvoiceItem: true,
          purchaseReceipt: true,
          purchaseReceiptItem: true,
          splitFrom: true,
          status: true,
          supplier: true,
          totalAssetCost: true,
          totalNumberOfDepreciations: true,
          updatedAt: true,
          valueAfterDepreciation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
