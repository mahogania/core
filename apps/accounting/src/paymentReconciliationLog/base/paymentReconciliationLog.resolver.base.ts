/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentReconciliationLog } from "./PaymentReconciliationLog";
import { PaymentReconciliationLogCountArgs } from "./PaymentReconciliationLogCountArgs";
import { PaymentReconciliationLogFindManyArgs } from "./PaymentReconciliationLogFindManyArgs";
import { PaymentReconciliationLogFindUniqueArgs } from "./PaymentReconciliationLogFindUniqueArgs";
import { CreatePaymentReconciliationLogArgs } from "./CreatePaymentReconciliationLogArgs";
import { UpdatePaymentReconciliationLogArgs } from "./UpdatePaymentReconciliationLogArgs";
import { DeletePaymentReconciliationLogArgs } from "./DeletePaymentReconciliationLogArgs";
import { PaymentReconciliationLogService } from "../paymentReconciliationLog.service";
@graphql.Resolver(() => PaymentReconciliationLog)
export class PaymentReconciliationLogResolverBase {
  constructor(protected readonly service: PaymentReconciliationLogService) {}

  async _paymentReconciliationLogsMeta(
    @graphql.Args() args: PaymentReconciliationLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentReconciliationLog])
  async paymentReconciliationLogs(
    @graphql.Args() args: PaymentReconciliationLogFindManyArgs
  ): Promise<PaymentReconciliationLog[]> {
    return this.service.paymentReconciliationLogs(args);
  }

  @graphql.Query(() => PaymentReconciliationLog, { nullable: true })
  async paymentReconciliationLog(
    @graphql.Args() args: PaymentReconciliationLogFindUniqueArgs
  ): Promise<PaymentReconciliationLog | null> {
    const result = await this.service.paymentReconciliationLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentReconciliationLog)
  async createPaymentReconciliationLog(
    @graphql.Args() args: CreatePaymentReconciliationLogArgs
  ): Promise<PaymentReconciliationLog> {
    return await this.service.createPaymentReconciliationLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentReconciliationLog)
  async updatePaymentReconciliationLog(
    @graphql.Args() args: UpdatePaymentReconciliationLogArgs
  ): Promise<PaymentReconciliationLog | null> {
    try {
      return await this.service.updatePaymentReconciliationLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentReconciliationLog)
  async deletePaymentReconciliationLog(
    @graphql.Args() args: DeletePaymentReconciliationLogArgs
  ): Promise<PaymentReconciliationLog | null> {
    try {
      return await this.service.deletePaymentReconciliationLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
