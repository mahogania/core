/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PaymentReconciliationLogAllocation } from "./PaymentReconciliationLogAllocation";
import { PaymentReconciliationLogAllocationCountArgs } from "./PaymentReconciliationLogAllocationCountArgs";
import { PaymentReconciliationLogAllocationFindManyArgs } from "./PaymentReconciliationLogAllocationFindManyArgs";
import { PaymentReconciliationLogAllocationFindUniqueArgs } from "./PaymentReconciliationLogAllocationFindUniqueArgs";
import { CreatePaymentReconciliationLogAllocationArgs } from "./CreatePaymentReconciliationLogAllocationArgs";
import { UpdatePaymentReconciliationLogAllocationArgs } from "./UpdatePaymentReconciliationLogAllocationArgs";
import { DeletePaymentReconciliationLogAllocationArgs } from "./DeletePaymentReconciliationLogAllocationArgs";
import { PaymentReconciliationLogAllocationService } from "../paymentReconciliationLogAllocation.service";
@graphql.Resolver(() => PaymentReconciliationLogAllocation)
export class PaymentReconciliationLogAllocationResolverBase {
  constructor(
    protected readonly service: PaymentReconciliationLogAllocationService
  ) {}

  async _paymentReconciliationLogAllocationsMeta(
    @graphql.Args() args: PaymentReconciliationLogAllocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PaymentReconciliationLogAllocation])
  async paymentReconciliationLogAllocations(
    @graphql.Args() args: PaymentReconciliationLogAllocationFindManyArgs
  ): Promise<PaymentReconciliationLogAllocation[]> {
    return this.service.paymentReconciliationLogAllocations(args);
  }

  @graphql.Query(() => PaymentReconciliationLogAllocation, { nullable: true })
  async paymentReconciliationLogAllocation(
    @graphql.Args() args: PaymentReconciliationLogAllocationFindUniqueArgs
  ): Promise<PaymentReconciliationLogAllocation | null> {
    const result = await this.service.paymentReconciliationLogAllocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PaymentReconciliationLogAllocation)
  async createPaymentReconciliationLogAllocation(
    @graphql.Args() args: CreatePaymentReconciliationLogAllocationArgs
  ): Promise<PaymentReconciliationLogAllocation> {
    return await this.service.createPaymentReconciliationLogAllocation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PaymentReconciliationLogAllocation)
  async updatePaymentReconciliationLogAllocation(
    @graphql.Args() args: UpdatePaymentReconciliationLogAllocationArgs
  ): Promise<PaymentReconciliationLogAllocation | null> {
    try {
      return await this.service.updatePaymentReconciliationLogAllocation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentReconciliationLogAllocation)
  async deletePaymentReconciliationLogAllocation(
    @graphql.Args() args: DeletePaymentReconciliationLogAllocationArgs
  ): Promise<PaymentReconciliationLogAllocation | null> {
    try {
      return await this.service.deletePaymentReconciliationLogAllocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
