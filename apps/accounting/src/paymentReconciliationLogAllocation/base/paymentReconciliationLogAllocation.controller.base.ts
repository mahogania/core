/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentReconciliationLogAllocationService } from "../paymentReconciliationLogAllocation.service";
import { PaymentReconciliationLogAllocationCreateInput } from "./PaymentReconciliationLogAllocationCreateInput";
import { PaymentReconciliationLogAllocation } from "./PaymentReconciliationLogAllocation";
import { PaymentReconciliationLogAllocationFindManyArgs } from "./PaymentReconciliationLogAllocationFindManyArgs";
import { PaymentReconciliationLogAllocationWhereUniqueInput } from "./PaymentReconciliationLogAllocationWhereUniqueInput";
import { PaymentReconciliationLogAllocationUpdateInput } from "./PaymentReconciliationLogAllocationUpdateInput";

export class PaymentReconciliationLogAllocationControllerBase {
  constructor(
    protected readonly service: PaymentReconciliationLogAllocationService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentReconciliationLogAllocation })
  async createPaymentReconciliationLogAllocation(
    @common.Body() data: PaymentReconciliationLogAllocationCreateInput
  ): Promise<PaymentReconciliationLogAllocation> {
    return await this.service.createPaymentReconciliationLogAllocation({
      data: data,
      select: {
        allocatedAmount: true,
        amount: true,
        createdAt: true,
        currency: true,
        differenceAccount: true,
        differenceAmount: true,
        docstatus: true,
        exchangeRate: true,
        id: true,
        idx: true,
        invoiceNumber: true,
        invoiceType: true,
        isAdvance: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        reconciled: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        unreconciledAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentReconciliationLogAllocation] })
  @ApiNestedQuery(PaymentReconciliationLogAllocationFindManyArgs)
  async paymentReconciliationLogAllocations(
    @common.Req() request: Request
  ): Promise<PaymentReconciliationLogAllocation[]> {
    const args = plainToClass(
      PaymentReconciliationLogAllocationFindManyArgs,
      request.query
    );
    return this.service.paymentReconciliationLogAllocations({
      ...args,
      select: {
        allocatedAmount: true,
        amount: true,
        createdAt: true,
        currency: true,
        differenceAccount: true,
        differenceAmount: true,
        docstatus: true,
        exchangeRate: true,
        id: true,
        idx: true,
        invoiceNumber: true,
        invoiceType: true,
        isAdvance: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        reconciled: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        unreconciledAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentReconciliationLogAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentReconciliationLogAllocation(
    @common.Param() params: PaymentReconciliationLogAllocationWhereUniqueInput
  ): Promise<PaymentReconciliationLogAllocation | null> {
    const result = await this.service.paymentReconciliationLogAllocation({
      where: params,
      select: {
        allocatedAmount: true,
        amount: true,
        createdAt: true,
        currency: true,
        differenceAccount: true,
        differenceAmount: true,
        docstatus: true,
        exchangeRate: true,
        id: true,
        idx: true,
        invoiceNumber: true,
        invoiceType: true,
        isAdvance: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        reconciled: true,
        referenceName: true,
        referenceRow: true,
        referenceType: true,
        unreconciledAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentReconciliationLogAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentReconciliationLogAllocation(
    @common.Param() params: PaymentReconciliationLogAllocationWhereUniqueInput,
    @common.Body() data: PaymentReconciliationLogAllocationUpdateInput
  ): Promise<PaymentReconciliationLogAllocation | null> {
    try {
      return await this.service.updatePaymentReconciliationLogAllocation({
        where: params,
        data: data,
        select: {
          allocatedAmount: true,
          amount: true,
          createdAt: true,
          currency: true,
          differenceAccount: true,
          differenceAmount: true,
          docstatus: true,
          exchangeRate: true,
          id: true,
          idx: true,
          invoiceNumber: true,
          invoiceType: true,
          isAdvance: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          reconciled: true,
          referenceName: true,
          referenceRow: true,
          referenceType: true,
          unreconciledAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentReconciliationLogAllocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentReconciliationLogAllocation(
    @common.Param() params: PaymentReconciliationLogAllocationWhereUniqueInput
  ): Promise<PaymentReconciliationLogAllocation | null> {
    try {
      return await this.service.deletePaymentReconciliationLogAllocation({
        where: params,
        select: {
          allocatedAmount: true,
          amount: true,
          createdAt: true,
          currency: true,
          differenceAccount: true,
          differenceAmount: true,
          docstatus: true,
          exchangeRate: true,
          id: true,
          idx: true,
          invoiceNumber: true,
          invoiceType: true,
          isAdvance: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          reconciled: true,
          referenceName: true,
          referenceRow: true,
          referenceType: true,
          unreconciledAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
