/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BisectNodesService } from "../bisectNodes.service";
import { BisectNodesCreateInput } from "./BisectNodesCreateInput";
import { BisectNodes } from "./BisectNodes";
import { BisectNodesFindManyArgs } from "./BisectNodesFindManyArgs";
import { BisectNodesWhereUniqueInput } from "./BisectNodesWhereUniqueInput";
import { BisectNodesUpdateInput } from "./BisectNodesUpdateInput";

export class BisectNodesControllerBase {
  constructor(protected readonly service: BisectNodesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BisectNodes })
  async createBisectNodes(
    @common.Body() data: BisectNodesCreateInput
  ): Promise<BisectNodes> {
    return await this.service.createBisectNodes({
      data: data,
      select: {
        balanceSheetSummary: true,
        createdAt: true,
        creation: true,
        difference: true,
        docstatus: true,
        generated: true,
        id: true,
        idx: true,
        leftChild: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodFromDate: true,
        periodToDate: true,
        profitLossSummary: true,
        rightChild: true,
        root: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BisectNodes] })
  @ApiNestedQuery(BisectNodesFindManyArgs)
  async bisectNodesItems(
    @common.Req() request: Request
  ): Promise<BisectNodes[]> {
    const args = plainToClass(BisectNodesFindManyArgs, request.query);
    return this.service.bisectNodesItems({
      ...args,
      select: {
        balanceSheetSummary: true,
        createdAt: true,
        creation: true,
        difference: true,
        docstatus: true,
        generated: true,
        id: true,
        idx: true,
        leftChild: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodFromDate: true,
        periodToDate: true,
        profitLossSummary: true,
        rightChild: true,
        root: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BisectNodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bisectNodes(
    @common.Param() params: BisectNodesWhereUniqueInput
  ): Promise<BisectNodes | null> {
    const result = await this.service.bisectNodes({
      where: params,
      select: {
        balanceSheetSummary: true,
        createdAt: true,
        creation: true,
        difference: true,
        docstatus: true,
        generated: true,
        id: true,
        idx: true,
        leftChild: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        periodFromDate: true,
        periodToDate: true,
        profitLossSummary: true,
        rightChild: true,
        root: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BisectNodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBisectNodes(
    @common.Param() params: BisectNodesWhereUniqueInput,
    @common.Body() data: BisectNodesUpdateInput
  ): Promise<BisectNodes | null> {
    try {
      return await this.service.updateBisectNodes({
        where: params,
        data: data,
        select: {
          balanceSheetSummary: true,
          createdAt: true,
          creation: true,
          difference: true,
          docstatus: true,
          generated: true,
          id: true,
          idx: true,
          leftChild: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodFromDate: true,
          periodToDate: true,
          profitLossSummary: true,
          rightChild: true,
          root: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BisectNodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBisectNodes(
    @common.Param() params: BisectNodesWhereUniqueInput
  ): Promise<BisectNodes | null> {
    try {
      return await this.service.deleteBisectNodes({
        where: params,
        select: {
          balanceSheetSummary: true,
          createdAt: true,
          creation: true,
          difference: true,
          docstatus: true,
          generated: true,
          id: true,
          idx: true,
          leftChild: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          periodFromDate: true,
          periodToDate: true,
          profitLossSummary: true,
          rightChild: true,
          root: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
