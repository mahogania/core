/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BisectNodes as PrismaBisectNodes } from "@prisma/client";

export class BisectNodesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BisectNodesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bisectNodes.count(args);
  }

  async bisectNodesItems(
    args: Prisma.BisectNodesFindManyArgs
  ): Promise<PrismaBisectNodes[]> {
    return this.prisma.bisectNodes.findMany(args);
  }
  async bisectNodes(
    args: Prisma.BisectNodesFindUniqueArgs
  ): Promise<PrismaBisectNodes | null> {
    return this.prisma.bisectNodes.findUnique(args);
  }
  async createBisectNodes(
    args: Prisma.BisectNodesCreateArgs
  ): Promise<PrismaBisectNodes> {
    return this.prisma.bisectNodes.create(args);
  }
  async updateBisectNodes(
    args: Prisma.BisectNodesUpdateArgs
  ): Promise<PrismaBisectNodes> {
    return this.prisma.bisectNodes.update(args);
  }
  async deleteBisectNodes(
    args: Prisma.BisectNodesDeleteArgs
  ): Promise<PrismaBisectNodes> {
    return this.prisma.bisectNodes.delete(args);
  }
}
