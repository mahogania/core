/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StatementOfAccountsCustomer } from "./StatementOfAccountsCustomer";
import { StatementOfAccountsCustomerCountArgs } from "./StatementOfAccountsCustomerCountArgs";
import { StatementOfAccountsCustomerFindManyArgs } from "./StatementOfAccountsCustomerFindManyArgs";
import { StatementOfAccountsCustomerFindUniqueArgs } from "./StatementOfAccountsCustomerFindUniqueArgs";
import { CreateStatementOfAccountsCustomerArgs } from "./CreateStatementOfAccountsCustomerArgs";
import { UpdateStatementOfAccountsCustomerArgs } from "./UpdateStatementOfAccountsCustomerArgs";
import { DeleteStatementOfAccountsCustomerArgs } from "./DeleteStatementOfAccountsCustomerArgs";
import { StatementOfAccountsCustomerService } from "../statementOfAccountsCustomer.service";
@graphql.Resolver(() => StatementOfAccountsCustomer)
export class StatementOfAccountsCustomerResolverBase {
  constructor(protected readonly service: StatementOfAccountsCustomerService) {}

  async _statementOfAccountsCustomersMeta(
    @graphql.Args() args: StatementOfAccountsCustomerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StatementOfAccountsCustomer])
  async statementOfAccountsCustomers(
    @graphql.Args() args: StatementOfAccountsCustomerFindManyArgs
  ): Promise<StatementOfAccountsCustomer[]> {
    return this.service.statementOfAccountsCustomers(args);
  }

  @graphql.Query(() => StatementOfAccountsCustomer, { nullable: true })
  async statementOfAccountsCustomer(
    @graphql.Args() args: StatementOfAccountsCustomerFindUniqueArgs
  ): Promise<StatementOfAccountsCustomer | null> {
    const result = await this.service.statementOfAccountsCustomer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StatementOfAccountsCustomer)
  async createStatementOfAccountsCustomer(
    @graphql.Args() args: CreateStatementOfAccountsCustomerArgs
  ): Promise<StatementOfAccountsCustomer> {
    return await this.service.createStatementOfAccountsCustomer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StatementOfAccountsCustomer)
  async updateStatementOfAccountsCustomer(
    @graphql.Args() args: UpdateStatementOfAccountsCustomerArgs
  ): Promise<StatementOfAccountsCustomer | null> {
    try {
      return await this.service.updateStatementOfAccountsCustomer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StatementOfAccountsCustomer)
  async deleteStatementOfAccountsCustomer(
    @graphql.Args() args: DeleteStatementOfAccountsCustomerArgs
  ): Promise<StatementOfAccountsCustomer | null> {
    try {
      return await this.service.deleteStatementOfAccountsCustomer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
