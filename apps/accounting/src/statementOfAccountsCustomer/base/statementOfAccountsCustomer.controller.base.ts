/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StatementOfAccountsCustomerService } from "../statementOfAccountsCustomer.service";
import { StatementOfAccountsCustomerCreateInput } from "./StatementOfAccountsCustomerCreateInput";
import { StatementOfAccountsCustomer } from "./StatementOfAccountsCustomer";
import { StatementOfAccountsCustomerFindManyArgs } from "./StatementOfAccountsCustomerFindManyArgs";
import { StatementOfAccountsCustomerWhereUniqueInput } from "./StatementOfAccountsCustomerWhereUniqueInput";
import { StatementOfAccountsCustomerUpdateInput } from "./StatementOfAccountsCustomerUpdateInput";

export class StatementOfAccountsCustomerControllerBase {
  constructor(protected readonly service: StatementOfAccountsCustomerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StatementOfAccountsCustomer })
  async createStatementOfAccountsCustomer(
    @common.Body() data: StatementOfAccountsCustomerCreateInput
  ): Promise<StatementOfAccountsCustomer> {
    return await this.service.createStatementOfAccountsCustomer({
      data: data,
      select: {
        billingEmail: true,
        createdAt: true,
        customer: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        primaryEmail: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StatementOfAccountsCustomer] })
  @ApiNestedQuery(StatementOfAccountsCustomerFindManyArgs)
  async statementOfAccountsCustomers(
    @common.Req() request: Request
  ): Promise<StatementOfAccountsCustomer[]> {
    const args = plainToClass(
      StatementOfAccountsCustomerFindManyArgs,
      request.query
    );
    return this.service.statementOfAccountsCustomers({
      ...args,
      select: {
        billingEmail: true,
        createdAt: true,
        customer: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        primaryEmail: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StatementOfAccountsCustomer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async statementOfAccountsCustomer(
    @common.Param() params: StatementOfAccountsCustomerWhereUniqueInput
  ): Promise<StatementOfAccountsCustomer | null> {
    const result = await this.service.statementOfAccountsCustomer({
      where: params,
      select: {
        billingEmail: true,
        createdAt: true,
        customer: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        primaryEmail: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StatementOfAccountsCustomer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStatementOfAccountsCustomer(
    @common.Param() params: StatementOfAccountsCustomerWhereUniqueInput,
    @common.Body() data: StatementOfAccountsCustomerUpdateInput
  ): Promise<StatementOfAccountsCustomer | null> {
    try {
      return await this.service.updateStatementOfAccountsCustomer({
        where: params,
        data: data,
        select: {
          billingEmail: true,
          createdAt: true,
          customer: true,
          customerName: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          primaryEmail: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StatementOfAccountsCustomer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStatementOfAccountsCustomer(
    @common.Param() params: StatementOfAccountsCustomerWhereUniqueInput
  ): Promise<StatementOfAccountsCustomer | null> {
    try {
      return await this.service.deleteStatementOfAccountsCustomer({
        where: params,
        select: {
          billingEmail: true,
          createdAt: true,
          customer: true,
          customerName: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          primaryEmail: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
