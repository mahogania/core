/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetMaintenanceTeamService } from "../assetMaintenanceTeam.service";
import { AssetMaintenanceTeamCreateInput } from "./AssetMaintenanceTeamCreateInput";
import { AssetMaintenanceTeam } from "./AssetMaintenanceTeam";
import { AssetMaintenanceTeamFindManyArgs } from "./AssetMaintenanceTeamFindManyArgs";
import { AssetMaintenanceTeamWhereUniqueInput } from "./AssetMaintenanceTeamWhereUniqueInput";
import { AssetMaintenanceTeamUpdateInput } from "./AssetMaintenanceTeamUpdateInput";

export class AssetMaintenanceTeamControllerBase {
  constructor(protected readonly service: AssetMaintenanceTeamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetMaintenanceTeam })
  async createAssetMaintenanceTeam(
    @common.Body() data: AssetMaintenanceTeamCreateInput
  ): Promise<AssetMaintenanceTeam> {
    return await this.service.createAssetMaintenanceTeam({
      data: data,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        maintenanceManager: true,
        maintenanceManagerName: true,
        maintenanceTeamName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetMaintenanceTeam] })
  @ApiNestedQuery(AssetMaintenanceTeamFindManyArgs)
  async assetMaintenanceTeams(
    @common.Req() request: Request
  ): Promise<AssetMaintenanceTeam[]> {
    const args = plainToClass(AssetMaintenanceTeamFindManyArgs, request.query);
    return this.service.assetMaintenanceTeams({
      ...args,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        maintenanceManager: true,
        maintenanceManagerName: true,
        maintenanceTeamName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenanceTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetMaintenanceTeam(
    @common.Param() params: AssetMaintenanceTeamWhereUniqueInput
  ): Promise<AssetMaintenanceTeam | null> {
    const result = await this.service.assetMaintenanceTeam({
      where: params,
      select: {
        company: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        maintenanceManager: true,
        maintenanceManagerName: true,
        maintenanceTeamName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenanceTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetMaintenanceTeam(
    @common.Param() params: AssetMaintenanceTeamWhereUniqueInput,
    @common.Body() data: AssetMaintenanceTeamUpdateInput
  ): Promise<AssetMaintenanceTeam | null> {
    try {
      return await this.service.updateAssetMaintenanceTeam({
        where: params,
        data: data,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          maintenanceManager: true,
          maintenanceManagerName: true,
          maintenanceTeamName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetMaintenanceTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetMaintenanceTeam(
    @common.Param() params: AssetMaintenanceTeamWhereUniqueInput
  ): Promise<AssetMaintenanceTeam | null> {
    try {
      return await this.service.deleteAssetMaintenanceTeam({
        where: params,
        select: {
          company: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          maintenanceManager: true,
          maintenanceManagerName: true,
          maintenanceTeamName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
