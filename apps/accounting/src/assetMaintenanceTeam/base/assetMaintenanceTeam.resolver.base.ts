/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetMaintenanceTeam } from "./AssetMaintenanceTeam";
import { AssetMaintenanceTeamCountArgs } from "./AssetMaintenanceTeamCountArgs";
import { AssetMaintenanceTeamFindManyArgs } from "./AssetMaintenanceTeamFindManyArgs";
import { AssetMaintenanceTeamFindUniqueArgs } from "./AssetMaintenanceTeamFindUniqueArgs";
import { CreateAssetMaintenanceTeamArgs } from "./CreateAssetMaintenanceTeamArgs";
import { UpdateAssetMaintenanceTeamArgs } from "./UpdateAssetMaintenanceTeamArgs";
import { DeleteAssetMaintenanceTeamArgs } from "./DeleteAssetMaintenanceTeamArgs";
import { AssetMaintenanceTeamService } from "../assetMaintenanceTeam.service";
@graphql.Resolver(() => AssetMaintenanceTeam)
export class AssetMaintenanceTeamResolverBase {
  constructor(protected readonly service: AssetMaintenanceTeamService) {}

  async _assetMaintenanceTeamsMeta(
    @graphql.Args() args: AssetMaintenanceTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetMaintenanceTeam])
  async assetMaintenanceTeams(
    @graphql.Args() args: AssetMaintenanceTeamFindManyArgs
  ): Promise<AssetMaintenanceTeam[]> {
    return this.service.assetMaintenanceTeams(args);
  }

  @graphql.Query(() => AssetMaintenanceTeam, { nullable: true })
  async assetMaintenanceTeam(
    @graphql.Args() args: AssetMaintenanceTeamFindUniqueArgs
  ): Promise<AssetMaintenanceTeam | null> {
    const result = await this.service.assetMaintenanceTeam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetMaintenanceTeam)
  async createAssetMaintenanceTeam(
    @graphql.Args() args: CreateAssetMaintenanceTeamArgs
  ): Promise<AssetMaintenanceTeam> {
    return await this.service.createAssetMaintenanceTeam({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetMaintenanceTeam)
  async updateAssetMaintenanceTeam(
    @graphql.Args() args: UpdateAssetMaintenanceTeamArgs
  ): Promise<AssetMaintenanceTeam | null> {
    try {
      return await this.service.updateAssetMaintenanceTeam({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetMaintenanceTeam)
  async deleteAssetMaintenanceTeam(
    @graphql.Args() args: DeleteAssetMaintenanceTeamArgs
  ): Promise<AssetMaintenanceTeam | null> {
    try {
      return await this.service.deleteAssetMaintenanceTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
