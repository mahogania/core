/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FiscalYearService } from "../fiscalYear.service";
import { FiscalYearCreateInput } from "./FiscalYearCreateInput";
import { FiscalYear } from "./FiscalYear";
import { FiscalYearFindManyArgs } from "./FiscalYearFindManyArgs";
import { FiscalYearWhereUniqueInput } from "./FiscalYearWhereUniqueInput";
import { FiscalYearUpdateInput } from "./FiscalYearUpdateInput";

export class FiscalYearControllerBase {
  constructor(protected readonly service: FiscalYearService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FiscalYear })
  async createFiscalYear(
    @common.Body() data: FiscalYearCreateInput
  ): Promise<FiscalYear> {
    return await this.service.createFiscalYear({
      data: data,
      select: {
        autoCreated: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docStatus: true,
        id: true,
        idx: true,
        isShortYear: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        year: true,
        yearEndDate: true,
        yearStartDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FiscalYear] })
  @ApiNestedQuery(FiscalYearFindManyArgs)
  async fiscalYears(@common.Req() request: Request): Promise<FiscalYear[]> {
    const args = plainToClass(FiscalYearFindManyArgs, request.query);
    return this.service.fiscalYears({
      ...args,
      select: {
        autoCreated: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docStatus: true,
        id: true,
        idx: true,
        isShortYear: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        year: true,
        yearEndDate: true,
        yearStartDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FiscalYear })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fiscalYear(
    @common.Param() params: FiscalYearWhereUniqueInput
  ): Promise<FiscalYear | null> {
    const result = await this.service.fiscalYear({
      where: params,
      select: {
        autoCreated: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docStatus: true,
        id: true,
        idx: true,
        isShortYear: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
        year: true,
        yearEndDate: true,
        yearStartDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FiscalYear })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFiscalYear(
    @common.Param() params: FiscalYearWhereUniqueInput,
    @common.Body() data: FiscalYearUpdateInput
  ): Promise<FiscalYear | null> {
    try {
      return await this.service.updateFiscalYear({
        where: params,
        data: data,
        select: {
          autoCreated: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docStatus: true,
          id: true,
          idx: true,
          isShortYear: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
          year: true,
          yearEndDate: true,
          yearStartDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FiscalYear })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFiscalYear(
    @common.Param() params: FiscalYearWhereUniqueInput
  ): Promise<FiscalYear | null> {
    try {
      return await this.service.deleteFiscalYear({
        where: params,
        select: {
          autoCreated: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docStatus: true,
          id: true,
          idx: true,
          isShortYear: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
          year: true,
          yearEndDate: true,
          yearStartDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
