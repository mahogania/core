/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccountingDimensionFilter } from "./AccountingDimensionFilter";
import { AccountingDimensionFilterCountArgs } from "./AccountingDimensionFilterCountArgs";
import { AccountingDimensionFilterFindManyArgs } from "./AccountingDimensionFilterFindManyArgs";
import { AccountingDimensionFilterFindUniqueArgs } from "./AccountingDimensionFilterFindUniqueArgs";
import { CreateAccountingDimensionFilterArgs } from "./CreateAccountingDimensionFilterArgs";
import { UpdateAccountingDimensionFilterArgs } from "./UpdateAccountingDimensionFilterArgs";
import { DeleteAccountingDimensionFilterArgs } from "./DeleteAccountingDimensionFilterArgs";
import { AccountingDimensionFilterService } from "../accountingDimensionFilter.service";
@graphql.Resolver(() => AccountingDimensionFilter)
export class AccountingDimensionFilterResolverBase {
  constructor(protected readonly service: AccountingDimensionFilterService) {}

  async _accountingDimensionFiltersMeta(
    @graphql.Args() args: AccountingDimensionFilterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountingDimensionFilter])
  async accountingDimensionFilters(
    @graphql.Args() args: AccountingDimensionFilterFindManyArgs
  ): Promise<AccountingDimensionFilter[]> {
    return this.service.accountingDimensionFilters(args);
  }

  @graphql.Query(() => AccountingDimensionFilter, { nullable: true })
  async accountingDimensionFilter(
    @graphql.Args() args: AccountingDimensionFilterFindUniqueArgs
  ): Promise<AccountingDimensionFilter | null> {
    const result = await this.service.accountingDimensionFilter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountingDimensionFilter)
  async createAccountingDimensionFilter(
    @graphql.Args() args: CreateAccountingDimensionFilterArgs
  ): Promise<AccountingDimensionFilter> {
    return await this.service.createAccountingDimensionFilter({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AccountingDimensionFilter)
  async updateAccountingDimensionFilter(
    @graphql.Args() args: UpdateAccountingDimensionFilterArgs
  ): Promise<AccountingDimensionFilter | null> {
    try {
      return await this.service.updateAccountingDimensionFilter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountingDimensionFilter)
  async deleteAccountingDimensionFilter(
    @graphql.Args() args: DeleteAccountingDimensionFilterArgs
  ): Promise<AccountingDimensionFilter | null> {
    try {
      return await this.service.deleteAccountingDimensionFilter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
