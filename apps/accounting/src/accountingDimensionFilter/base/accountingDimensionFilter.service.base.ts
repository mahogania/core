/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountingDimensionFilter as PrismaAccountingDimensionFilter,
} from "@prisma/client";

export class AccountingDimensionFilterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountingDimensionFilterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountingDimensionFilter.count(args);
  }

  async accountingDimensionFilters(
    args: Prisma.AccountingDimensionFilterFindManyArgs
  ): Promise<PrismaAccountingDimensionFilter[]> {
    return this.prisma.accountingDimensionFilter.findMany(args);
  }
  async accountingDimensionFilter(
    args: Prisma.AccountingDimensionFilterFindUniqueArgs
  ): Promise<PrismaAccountingDimensionFilter | null> {
    return this.prisma.accountingDimensionFilter.findUnique(args);
  }
  async createAccountingDimensionFilter(
    args: Prisma.AccountingDimensionFilterCreateArgs
  ): Promise<PrismaAccountingDimensionFilter> {
    return this.prisma.accountingDimensionFilter.create(args);
  }
  async updateAccountingDimensionFilter(
    args: Prisma.AccountingDimensionFilterUpdateArgs
  ): Promise<PrismaAccountingDimensionFilter> {
    return this.prisma.accountingDimensionFilter.update(args);
  }
  async deleteAccountingDimensionFilter(
    args: Prisma.AccountingDimensionFilterDeleteArgs
  ): Promise<PrismaAccountingDimensionFilter> {
    return this.prisma.accountingDimensionFilter.delete(args);
  }
}
