/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountingDimensionFilterService } from "../accountingDimensionFilter.service";
import { AccountingDimensionFilterCreateInput } from "./AccountingDimensionFilterCreateInput";
import { AccountingDimensionFilter } from "./AccountingDimensionFilter";
import { AccountingDimensionFilterFindManyArgs } from "./AccountingDimensionFilterFindManyArgs";
import { AccountingDimensionFilterWhereUniqueInput } from "./AccountingDimensionFilterWhereUniqueInput";
import { AccountingDimensionFilterUpdateInput } from "./AccountingDimensionFilterUpdateInput";

export class AccountingDimensionFilterControllerBase {
  constructor(protected readonly service: AccountingDimensionFilterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountingDimensionFilter })
  async createAccountingDimensionFilter(
    @common.Body() data: AccountingDimensionFilterCreateInput
  ): Promise<AccountingDimensionFilter> {
    return await this.service.createAccountingDimensionFilter({
      data: data,
      select: {
        accountingDimension: true,
        allowOrRestrict: true,
        applyRestrictionOnValues: true,
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountingDimensionFilter] })
  @ApiNestedQuery(AccountingDimensionFilterFindManyArgs)
  async accountingDimensionFilters(
    @common.Req() request: Request
  ): Promise<AccountingDimensionFilter[]> {
    const args = plainToClass(
      AccountingDimensionFilterFindManyArgs,
      request.query
    );
    return this.service.accountingDimensionFilters({
      ...args,
      select: {
        accountingDimension: true,
        allowOrRestrict: true,
        applyRestrictionOnValues: true,
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimensionFilter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountingDimensionFilter(
    @common.Param() params: AccountingDimensionFilterWhereUniqueInput
  ): Promise<AccountingDimensionFilter | null> {
    const result = await this.service.accountingDimensionFilter({
      where: params,
      select: {
        accountingDimension: true,
        allowOrRestrict: true,
        applyRestrictionOnValues: true,
        company: true,
        createdAt: true,
        creation: true,
        disabled: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimensionFilter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountingDimensionFilter(
    @common.Param() params: AccountingDimensionFilterWhereUniqueInput,
    @common.Body() data: AccountingDimensionFilterUpdateInput
  ): Promise<AccountingDimensionFilter | null> {
    try {
      return await this.service.updateAccountingDimensionFilter({
        where: params,
        data: data,
        select: {
          accountingDimension: true,
          allowOrRestrict: true,
          applyRestrictionOnValues: true,
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimensionFilter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountingDimensionFilter(
    @common.Param() params: AccountingDimensionFilterWhereUniqueInput
  ): Promise<AccountingDimensionFilter | null> {
    try {
      return await this.service.deleteAccountingDimensionFilter({
        where: params,
        select: {
          accountingDimension: true,
          allowOrRestrict: true,
          applyRestrictionOnValues: true,
          company: true,
          createdAt: true,
          creation: true,
          disabled: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
