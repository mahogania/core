/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountingDimensionDetailService } from "../accountingDimensionDetail.service";
import { AccountingDimensionDetailCreateInput } from "./AccountingDimensionDetailCreateInput";
import { AccountingDimensionDetail } from "./AccountingDimensionDetail";
import { AccountingDimensionDetailFindManyArgs } from "./AccountingDimensionDetailFindManyArgs";
import { AccountingDimensionDetailWhereUniqueInput } from "./AccountingDimensionDetailWhereUniqueInput";
import { AccountingDimensionDetailUpdateInput } from "./AccountingDimensionDetailUpdateInput";

export class AccountingDimensionDetailControllerBase {
  constructor(protected readonly service: AccountingDimensionDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountingDimensionDetail })
  async createAccountingDimensionDetail(
    @common.Body() data: AccountingDimensionDetailCreateInput
  ): Promise<AccountingDimensionDetail> {
    return await this.service.createAccountingDimensionDetail({
      data: data,
      select: {
        automaticallyPostBalancingAccountingEntry: true,
        company: true,
        createdAt: true,
        creation: true,
        defaultDimension: true,
        docstatus: true,
        id: true,
        idx: true,
        mandatoryForBs: true,
        mandatoryForPl: true,
        modified: true,
        modifiedBy: true,
        name: true,
        offsettingAccount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        referenceDocument: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountingDimensionDetail] })
  @ApiNestedQuery(AccountingDimensionDetailFindManyArgs)
  async accountingDimensionDetails(
    @common.Req() request: Request
  ): Promise<AccountingDimensionDetail[]> {
    const args = plainToClass(
      AccountingDimensionDetailFindManyArgs,
      request.query
    );
    return this.service.accountingDimensionDetails({
      ...args,
      select: {
        automaticallyPostBalancingAccountingEntry: true,
        company: true,
        createdAt: true,
        creation: true,
        defaultDimension: true,
        docstatus: true,
        id: true,
        idx: true,
        mandatoryForBs: true,
        mandatoryForPl: true,
        modified: true,
        modifiedBy: true,
        name: true,
        offsettingAccount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        referenceDocument: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimensionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountingDimensionDetail(
    @common.Param() params: AccountingDimensionDetailWhereUniqueInput
  ): Promise<AccountingDimensionDetail | null> {
    const result = await this.service.accountingDimensionDetail({
      where: params,
      select: {
        automaticallyPostBalancingAccountingEntry: true,
        company: true,
        createdAt: true,
        creation: true,
        defaultDimension: true,
        docstatus: true,
        id: true,
        idx: true,
        mandatoryForBs: true,
        mandatoryForPl: true,
        modified: true,
        modifiedBy: true,
        name: true,
        offsettingAccount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        referenceDocument: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimensionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountingDimensionDetail(
    @common.Param() params: AccountingDimensionDetailWhereUniqueInput,
    @common.Body() data: AccountingDimensionDetailUpdateInput
  ): Promise<AccountingDimensionDetail | null> {
    try {
      return await this.service.updateAccountingDimensionDetail({
        where: params,
        data: data,
        select: {
          automaticallyPostBalancingAccountingEntry: true,
          company: true,
          createdAt: true,
          creation: true,
          defaultDimension: true,
          docstatus: true,
          id: true,
          idx: true,
          mandatoryForBs: true,
          mandatoryForPl: true,
          modified: true,
          modifiedBy: true,
          name: true,
          offsettingAccount: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          referenceDocument: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountingDimensionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountingDimensionDetail(
    @common.Param() params: AccountingDimensionDetailWhereUniqueInput
  ): Promise<AccountingDimensionDetail | null> {
    try {
      return await this.service.deleteAccountingDimensionDetail({
        where: params,
        select: {
          automaticallyPostBalancingAccountingEntry: true,
          company: true,
          createdAt: true,
          creation: true,
          defaultDimension: true,
          docstatus: true,
          id: true,
          idx: true,
          mandatoryForBs: true,
          mandatoryForPl: true,
          modified: true,
          modifiedBy: true,
          name: true,
          offsettingAccount: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          referenceDocument: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
