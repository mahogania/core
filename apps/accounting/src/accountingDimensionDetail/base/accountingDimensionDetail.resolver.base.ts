/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccountingDimensionDetail } from "./AccountingDimensionDetail";
import { AccountingDimensionDetailCountArgs } from "./AccountingDimensionDetailCountArgs";
import { AccountingDimensionDetailFindManyArgs } from "./AccountingDimensionDetailFindManyArgs";
import { AccountingDimensionDetailFindUniqueArgs } from "./AccountingDimensionDetailFindUniqueArgs";
import { CreateAccountingDimensionDetailArgs } from "./CreateAccountingDimensionDetailArgs";
import { UpdateAccountingDimensionDetailArgs } from "./UpdateAccountingDimensionDetailArgs";
import { DeleteAccountingDimensionDetailArgs } from "./DeleteAccountingDimensionDetailArgs";
import { AccountingDimensionDetailService } from "../accountingDimensionDetail.service";
@graphql.Resolver(() => AccountingDimensionDetail)
export class AccountingDimensionDetailResolverBase {
  constructor(protected readonly service: AccountingDimensionDetailService) {}

  async _accountingDimensionDetailsMeta(
    @graphql.Args() args: AccountingDimensionDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountingDimensionDetail])
  async accountingDimensionDetails(
    @graphql.Args() args: AccountingDimensionDetailFindManyArgs
  ): Promise<AccountingDimensionDetail[]> {
    return this.service.accountingDimensionDetails(args);
  }

  @graphql.Query(() => AccountingDimensionDetail, { nullable: true })
  async accountingDimensionDetail(
    @graphql.Args() args: AccountingDimensionDetailFindUniqueArgs
  ): Promise<AccountingDimensionDetail | null> {
    const result = await this.service.accountingDimensionDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountingDimensionDetail)
  async createAccountingDimensionDetail(
    @graphql.Args() args: CreateAccountingDimensionDetailArgs
  ): Promise<AccountingDimensionDetail> {
    return await this.service.createAccountingDimensionDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AccountingDimensionDetail)
  async updateAccountingDimensionDetail(
    @graphql.Args() args: UpdateAccountingDimensionDetailArgs
  ): Promise<AccountingDimensionDetail | null> {
    try {
      return await this.service.updateAccountingDimensionDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountingDimensionDetail)
  async deleteAccountingDimensionDetail(
    @graphql.Args() args: DeleteAccountingDimensionDetailArgs
  ): Promise<AccountingDimensionDetail | null> {
    try {
      return await this.service.deleteAccountingDimensionDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
