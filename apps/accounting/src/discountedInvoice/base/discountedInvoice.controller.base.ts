/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiscountedInvoiceService } from "../discountedInvoice.service";
import { DiscountedInvoiceCreateInput } from "./DiscountedInvoiceCreateInput";
import { DiscountedInvoice } from "./DiscountedInvoice";
import { DiscountedInvoiceFindManyArgs } from "./DiscountedInvoiceFindManyArgs";
import { DiscountedInvoiceWhereUniqueInput } from "./DiscountedInvoiceWhereUniqueInput";
import { DiscountedInvoiceUpdateInput } from "./DiscountedInvoiceUpdateInput";

export class DiscountedInvoiceControllerBase {
  constructor(protected readonly service: DiscountedInvoiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscountedInvoice })
  async createDiscountedInvoice(
    @common.Body() data: DiscountedInvoiceCreateInput
  ): Promise<DiscountedInvoice> {
    return await this.service.createDiscountedInvoice({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        debitTo: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outstandingAmount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        postingDate: true,
        salesInvoice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscountedInvoice] })
  @ApiNestedQuery(DiscountedInvoiceFindManyArgs)
  async discountedInvoices(
    @common.Req() request: Request
  ): Promise<DiscountedInvoice[]> {
    const args = plainToClass(DiscountedInvoiceFindManyArgs, request.query);
    return this.service.discountedInvoices({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        debitTo: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outstandingAmount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        postingDate: true,
        salesInvoice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscountedInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async discountedInvoice(
    @common.Param() params: DiscountedInvoiceWhereUniqueInput
  ): Promise<DiscountedInvoice | null> {
    const result = await this.service.discountedInvoice({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        debitTo: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outstandingAmount: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        postingDate: true,
        salesInvoice: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscountedInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDiscountedInvoice(
    @common.Param() params: DiscountedInvoiceWhereUniqueInput,
    @common.Body() data: DiscountedInvoiceUpdateInput
  ): Promise<DiscountedInvoice | null> {
    try {
      return await this.service.updateDiscountedInvoice({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          debitTo: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          outstandingAmount: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          postingDate: true,
          salesInvoice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscountedInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDiscountedInvoice(
    @common.Param() params: DiscountedInvoiceWhereUniqueInput
  ): Promise<DiscountedInvoice | null> {
    try {
      return await this.service.deleteDiscountedInvoice({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          debitTo: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          outstandingAmount: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          postingDate: true,
          salesInvoice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
