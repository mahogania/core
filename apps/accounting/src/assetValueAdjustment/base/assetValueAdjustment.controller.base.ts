/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetValueAdjustmentService } from "../assetValueAdjustment.service";
import { AssetValueAdjustmentCreateInput } from "./AssetValueAdjustmentCreateInput";
import { AssetValueAdjustment } from "./AssetValueAdjustment";
import { AssetValueAdjustmentFindManyArgs } from "./AssetValueAdjustmentFindManyArgs";
import { AssetValueAdjustmentWhereUniqueInput } from "./AssetValueAdjustmentWhereUniqueInput";
import { AssetValueAdjustmentUpdateInput } from "./AssetValueAdjustmentUpdateInput";

export class AssetValueAdjustmentControllerBase {
  constructor(protected readonly service: AssetValueAdjustmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetValueAdjustment })
  async createAssetValueAdjustment(
    @common.Body() data: AssetValueAdjustmentCreateInput
  ): Promise<AssetValueAdjustment> {
    return await this.service.createAssetValueAdjustment({
      data: data,
      select: {
        amendedFrom: true,
        asset: true,
        assetCategory: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currentAssetValue: true,
        date: true,
        differenceAmount: true,
        docstatus: true,
        financeBook: true,
        id: true,
        idx: true,
        journalEntry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newAssetValue: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetValueAdjustment] })
  @ApiNestedQuery(AssetValueAdjustmentFindManyArgs)
  async assetValueAdjustments(
    @common.Req() request: Request
  ): Promise<AssetValueAdjustment[]> {
    const args = plainToClass(AssetValueAdjustmentFindManyArgs, request.query);
    return this.service.assetValueAdjustments({
      ...args,
      select: {
        amendedFrom: true,
        asset: true,
        assetCategory: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currentAssetValue: true,
        date: true,
        differenceAmount: true,
        docstatus: true,
        financeBook: true,
        id: true,
        idx: true,
        journalEntry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newAssetValue: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetValueAdjustment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetValueAdjustment(
    @common.Param() params: AssetValueAdjustmentWhereUniqueInput
  ): Promise<AssetValueAdjustment | null> {
    const result = await this.service.assetValueAdjustment({
      where: params,
      select: {
        amendedFrom: true,
        asset: true,
        assetCategory: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        currentAssetValue: true,
        date: true,
        differenceAmount: true,
        docstatus: true,
        financeBook: true,
        id: true,
        idx: true,
        journalEntry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newAssetValue: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetValueAdjustment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetValueAdjustment(
    @common.Param() params: AssetValueAdjustmentWhereUniqueInput,
    @common.Body() data: AssetValueAdjustmentUpdateInput
  ): Promise<AssetValueAdjustment | null> {
    try {
      return await this.service.updateAssetValueAdjustment({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          asset: true,
          assetCategory: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currentAssetValue: true,
          date: true,
          differenceAmount: true,
          docstatus: true,
          financeBook: true,
          id: true,
          idx: true,
          journalEntry: true,
          modified: true,
          modifiedBy: true,
          name: true,
          newAssetValue: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetValueAdjustment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetValueAdjustment(
    @common.Param() params: AssetValueAdjustmentWhereUniqueInput
  ): Promise<AssetValueAdjustment | null> {
    try {
      return await this.service.deleteAssetValueAdjustment({
        where: params,
        select: {
          amendedFrom: true,
          asset: true,
          assetCategory: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          currentAssetValue: true,
          date: true,
          differenceAmount: true,
          docstatus: true,
          financeBook: true,
          id: true,
          idx: true,
          journalEntry: true,
          modified: true,
          modifiedBy: true,
          name: true,
          newAssetValue: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
