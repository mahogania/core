/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetValueAdjustment } from "./AssetValueAdjustment";
import { AssetValueAdjustmentCountArgs } from "./AssetValueAdjustmentCountArgs";
import { AssetValueAdjustmentFindManyArgs } from "./AssetValueAdjustmentFindManyArgs";
import { AssetValueAdjustmentFindUniqueArgs } from "./AssetValueAdjustmentFindUniqueArgs";
import { CreateAssetValueAdjustmentArgs } from "./CreateAssetValueAdjustmentArgs";
import { UpdateAssetValueAdjustmentArgs } from "./UpdateAssetValueAdjustmentArgs";
import { DeleteAssetValueAdjustmentArgs } from "./DeleteAssetValueAdjustmentArgs";
import { AssetValueAdjustmentService } from "../assetValueAdjustment.service";
@graphql.Resolver(() => AssetValueAdjustment)
export class AssetValueAdjustmentResolverBase {
  constructor(protected readonly service: AssetValueAdjustmentService) {}

  async _assetValueAdjustmentsMeta(
    @graphql.Args() args: AssetValueAdjustmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetValueAdjustment])
  async assetValueAdjustments(
    @graphql.Args() args: AssetValueAdjustmentFindManyArgs
  ): Promise<AssetValueAdjustment[]> {
    return this.service.assetValueAdjustments(args);
  }

  @graphql.Query(() => AssetValueAdjustment, { nullable: true })
  async assetValueAdjustment(
    @graphql.Args() args: AssetValueAdjustmentFindUniqueArgs
  ): Promise<AssetValueAdjustment | null> {
    const result = await this.service.assetValueAdjustment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetValueAdjustment)
  async createAssetValueAdjustment(
    @graphql.Args() args: CreateAssetValueAdjustmentArgs
  ): Promise<AssetValueAdjustment> {
    return await this.service.createAssetValueAdjustment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetValueAdjustment)
  async updateAssetValueAdjustment(
    @graphql.Args() args: UpdateAssetValueAdjustmentArgs
  ): Promise<AssetValueAdjustment | null> {
    try {
      return await this.service.updateAssetValueAdjustment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetValueAdjustment)
  async deleteAssetValueAdjustment(
    @graphql.Args() args: DeleteAssetValueAdjustmentArgs
  ): Promise<AssetValueAdjustment | null> {
    try {
      return await this.service.deleteAssetValueAdjustment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
