/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssetActivity } from "./AssetActivity";
import { AssetActivityCountArgs } from "./AssetActivityCountArgs";
import { AssetActivityFindManyArgs } from "./AssetActivityFindManyArgs";
import { AssetActivityFindUniqueArgs } from "./AssetActivityFindUniqueArgs";
import { CreateAssetActivityArgs } from "./CreateAssetActivityArgs";
import { UpdateAssetActivityArgs } from "./UpdateAssetActivityArgs";
import { DeleteAssetActivityArgs } from "./DeleteAssetActivityArgs";
import { AssetActivityService } from "../assetActivity.service";
@graphql.Resolver(() => AssetActivity)
export class AssetActivityResolverBase {
  constructor(protected readonly service: AssetActivityService) {}

  async _assetActivitiesMeta(
    @graphql.Args() args: AssetActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssetActivity])
  async assetActivities(
    @graphql.Args() args: AssetActivityFindManyArgs
  ): Promise<AssetActivity[]> {
    return this.service.assetActivities(args);
  }

  @graphql.Query(() => AssetActivity, { nullable: true })
  async assetActivity(
    @graphql.Args() args: AssetActivityFindUniqueArgs
  ): Promise<AssetActivity | null> {
    const result = await this.service.assetActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssetActivity)
  async createAssetActivity(
    @graphql.Args() args: CreateAssetActivityArgs
  ): Promise<AssetActivity> {
    return await this.service.createAssetActivity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssetActivity)
  async updateAssetActivity(
    @graphql.Args() args: UpdateAssetActivityArgs
  ): Promise<AssetActivity | null> {
    try {
      return await this.service.updateAssetActivity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssetActivity)
  async deleteAssetActivity(
    @graphql.Args() args: DeleteAssetActivityArgs
  ): Promise<AssetActivity | null> {
    try {
      return await this.service.deleteAssetActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
