/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssetActivityService } from "../assetActivity.service";
import { AssetActivityCreateInput } from "./AssetActivityCreateInput";
import { AssetActivity } from "./AssetActivity";
import { AssetActivityFindManyArgs } from "./AssetActivityFindManyArgs";
import { AssetActivityWhereUniqueInput } from "./AssetActivityWhereUniqueInput";
import { AssetActivityUpdateInput } from "./AssetActivityUpdateInput";

export class AssetActivityControllerBase {
  constructor(protected readonly service: AssetActivityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssetActivity })
  async createAssetActivity(
    @common.Body() data: AssetActivityCreateInput
  ): Promise<AssetActivity> {
    return await this.service.createAssetActivity({
      data: data,
      select: {
        asset: true,
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        subject: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssetActivity] })
  @ApiNestedQuery(AssetActivityFindManyArgs)
  async assetActivities(
    @common.Req() request: Request
  ): Promise<AssetActivity[]> {
    const args = plainToClass(AssetActivityFindManyArgs, request.query);
    return this.service.assetActivities({
      ...args,
      select: {
        asset: true,
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        subject: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssetActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assetActivity(
    @common.Param() params: AssetActivityWhereUniqueInput
  ): Promise<AssetActivity | null> {
    const result = await this.service.assetActivity({
      where: params,
      select: {
        asset: true,
        createdAt: true,
        creation: true,
        date: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        subject: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssetActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssetActivity(
    @common.Param() params: AssetActivityWhereUniqueInput,
    @common.Body() data: AssetActivityUpdateInput
  ): Promise<AssetActivity | null> {
    try {
      return await this.service.updateAssetActivity({
        where: params,
        data: data,
        select: {
          asset: true,
          createdAt: true,
          creation: true,
          date: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          subject: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssetActivity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssetActivity(
    @common.Param() params: AssetActivityWhereUniqueInput
  ): Promise<AssetActivity | null> {
    try {
      return await this.service.deleteAssetActivity({
        where: params,
        select: {
          asset: true,
          createdAt: true,
          creation: true,
          date: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          subject: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
