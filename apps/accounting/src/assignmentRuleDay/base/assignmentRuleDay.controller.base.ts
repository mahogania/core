/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AssignmentRuleDayService } from "../assignmentRuleDay.service";
import { AssignmentRuleDayCreateInput } from "./AssignmentRuleDayCreateInput";
import { AssignmentRuleDay } from "./AssignmentRuleDay";
import { AssignmentRuleDayFindManyArgs } from "./AssignmentRuleDayFindManyArgs";
import { AssignmentRuleDayWhereUniqueInput } from "./AssignmentRuleDayWhereUniqueInput";
import { AssignmentRuleDayUpdateInput } from "./AssignmentRuleDayUpdateInput";

export class AssignmentRuleDayControllerBase {
  constructor(protected readonly service: AssignmentRuleDayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AssignmentRuleDay })
  async createAssignmentRuleDay(
    @common.Body() data: AssignmentRuleDayCreateInput
  ): Promise<AssignmentRuleDay> {
    return await this.service.createAssignmentRuleDay({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        day: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AssignmentRuleDay] })
  @ApiNestedQuery(AssignmentRuleDayFindManyArgs)
  async assignmentRuleDays(
    @common.Req() request: Request
  ): Promise<AssignmentRuleDay[]> {
    const args = plainToClass(AssignmentRuleDayFindManyArgs, request.query);
    return this.service.assignmentRuleDays({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        day: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRuleDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async assignmentRuleDay(
    @common.Param() params: AssignmentRuleDayWhereUniqueInput
  ): Promise<AssignmentRuleDay | null> {
    const result = await this.service.assignmentRuleDay({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        day: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentField: true,
        parentType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRuleDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAssignmentRuleDay(
    @common.Param() params: AssignmentRuleDayWhereUniqueInput,
    @common.Body() data: AssignmentRuleDayUpdateInput
  ): Promise<AssignmentRuleDay | null> {
    try {
      return await this.service.updateAssignmentRuleDay({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          day: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AssignmentRuleDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAssignmentRuleDay(
    @common.Param() params: AssignmentRuleDayWhereUniqueInput
  ): Promise<AssignmentRuleDay | null> {
    try {
      return await this.service.deleteAssignmentRuleDay({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          day: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentField: true,
          parentType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
