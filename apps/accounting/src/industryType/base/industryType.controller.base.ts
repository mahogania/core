/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IndustryTypeService } from "../industryType.service";
import { IndustryTypeCreateInput } from "./IndustryTypeCreateInput";
import { IndustryType } from "./IndustryType";
import { IndustryTypeFindManyArgs } from "./IndustryTypeFindManyArgs";
import { IndustryTypeWhereUniqueInput } from "./IndustryTypeWhereUniqueInput";
import { IndustryTypeUpdateInput } from "./IndustryTypeUpdateInput";

export class IndustryTypeControllerBase {
  constructor(protected readonly service: IndustryTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IndustryType })
  async createIndustryType(
    @common.Body() data: IndustryTypeCreateInput
  ): Promise<IndustryType> {
    return await this.service.createIndustryType({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        industry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IndustryType] })
  @ApiNestedQuery(IndustryTypeFindManyArgs)
  async industryTypes(@common.Req() request: Request): Promise<IndustryType[]> {
    const args = plainToClass(IndustryTypeFindManyArgs, request.query);
    return this.service.industryTypes({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        industry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IndustryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async industryType(
    @common.Param() params: IndustryTypeWhereUniqueInput
  ): Promise<IndustryType | null> {
    const result = await this.service.industryType({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        industry: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IndustryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIndustryType(
    @common.Param() params: IndustryTypeWhereUniqueInput,
    @common.Body() data: IndustryTypeUpdateInput
  ): Promise<IndustryType | null> {
    try {
      return await this.service.updateIndustryType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          industry: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IndustryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIndustryType(
    @common.Param() params: IndustryTypeWhereUniqueInput
  ): Promise<IndustryType | null> {
    try {
      return await this.service.deleteIndustryType({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          industry: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
