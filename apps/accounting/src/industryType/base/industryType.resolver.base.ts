/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IndustryType } from "./IndustryType";
import { IndustryTypeCountArgs } from "./IndustryTypeCountArgs";
import { IndustryTypeFindManyArgs } from "./IndustryTypeFindManyArgs";
import { IndustryTypeFindUniqueArgs } from "./IndustryTypeFindUniqueArgs";
import { CreateIndustryTypeArgs } from "./CreateIndustryTypeArgs";
import { UpdateIndustryTypeArgs } from "./UpdateIndustryTypeArgs";
import { DeleteIndustryTypeArgs } from "./DeleteIndustryTypeArgs";
import { IndustryTypeService } from "../industryType.service";
@graphql.Resolver(() => IndustryType)
export class IndustryTypeResolverBase {
  constructor(protected readonly service: IndustryTypeService) {}

  async _industryTypesMeta(
    @graphql.Args() args: IndustryTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IndustryType])
  async industryTypes(
    @graphql.Args() args: IndustryTypeFindManyArgs
  ): Promise<IndustryType[]> {
    return this.service.industryTypes(args);
  }

  @graphql.Query(() => IndustryType, { nullable: true })
  async industryType(
    @graphql.Args() args: IndustryTypeFindUniqueArgs
  ): Promise<IndustryType | null> {
    const result = await this.service.industryType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IndustryType)
  async createIndustryType(
    @graphql.Args() args: CreateIndustryTypeArgs
  ): Promise<IndustryType> {
    return await this.service.createIndustryType({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => IndustryType)
  async updateIndustryType(
    @graphql.Args() args: UpdateIndustryTypeArgs
  ): Promise<IndustryType | null> {
    try {
      return await this.service.updateIndustryType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IndustryType)
  async deleteIndustryType(
    @graphql.Args() args: DeleteIndustryTypeArgs
  ): Promise<IndustryType | null> {
    try {
      return await this.service.deleteIndustryType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
