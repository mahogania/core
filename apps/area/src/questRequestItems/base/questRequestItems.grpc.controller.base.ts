/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestRequestItemsService } from "../questRequestItems.service";
import { QuestRequestItemsCreateInput } from "./QuestRequestItemsCreateInput";
import { QuestRequestItemsWhereInput } from "./QuestRequestItemsWhereInput";
import { QuestRequestItemsWhereUniqueInput } from "./QuestRequestItemsWhereUniqueInput";
import { QuestRequestItemsFindManyArgs } from "./QuestRequestItemsFindManyArgs";
import { QuestRequestItemsUpdateInput } from "./QuestRequestItemsUpdateInput";
import { QuestRequestItems } from "./QuestRequestItems";

export class QuestRequestItemsGrpcControllerBase {
  constructor(protected readonly service: QuestRequestItemsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestRequestItems })
  @GrpcMethod("QuestRequestItemsService", "createQuestRequestItems")
  async createQuestRequestItems(
    @common.Body() data: QuestRequestItemsCreateInput
  ): Promise<QuestRequestItems> {
    return await this.service.createQuestRequestItems({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestRequestItems] })
  @ApiNestedQuery(QuestRequestItemsFindManyArgs)
  @GrpcMethod("QuestRequestItemsService", "questRequestItemsItems")
  async questRequestItemsItems(
    @common.Req() request: Request
  ): Promise<QuestRequestItems[]> {
    const args = plainToClass(QuestRequestItemsFindManyArgs, request.query);
    return this.service.questRequestItemsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestRequestItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestRequestItemsService", "questRequestItems")
  async questRequestItems(
    @common.Param() params: QuestRequestItemsWhereUniqueInput
  ): Promise<QuestRequestItems | null> {
    const result = await this.service.questRequestItems({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestRequestItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestRequestItemsService", "updateQuestRequestItems")
  async updateQuestRequestItems(
    @common.Param() params: QuestRequestItemsWhereUniqueInput,
    @common.Body() data: QuestRequestItemsUpdateInput
  ): Promise<QuestRequestItems | null> {
    try {
      return await this.service.updateQuestRequestItems({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestRequestItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestRequestItemsService", "deleteQuestRequestItems")
  async deleteQuestRequestItems(
    @common.Param() params: QuestRequestItemsWhereUniqueInput
  ): Promise<QuestRequestItems | null> {
    try {
      return await this.service.deleteQuestRequestItems({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
