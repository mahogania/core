/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PointsOfInterest as PrismaPointsOfInterest,
} from "@prisma/client";

export class PointsOfInterestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PointsOfInterestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pointsOfInterest.count(args);
  }

  async pointsOfInterests(
    args: Prisma.PointsOfInterestFindManyArgs
  ): Promise<PrismaPointsOfInterest[]> {
    return this.prisma.pointsOfInterest.findMany(args);
  }
  async pointsOfInterest(
    args: Prisma.PointsOfInterestFindUniqueArgs
  ): Promise<PrismaPointsOfInterest | null> {
    return this.prisma.pointsOfInterest.findUnique(args);
  }
  async createPointsOfInterest(
    args: Prisma.PointsOfInterestCreateArgs
  ): Promise<PrismaPointsOfInterest> {
    return this.prisma.pointsOfInterest.create(args);
  }
  async updatePointsOfInterest(
    args: Prisma.PointsOfInterestUpdateArgs
  ): Promise<PrismaPointsOfInterest> {
    return this.prisma.pointsOfInterest.update(args);
  }
  async deletePointsOfInterest(
    args: Prisma.PointsOfInterestDeleteArgs
  ): Promise<PrismaPointsOfInterest> {
    return this.prisma.pointsOfInterest.delete(args);
  }
}
