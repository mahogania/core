/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PointsOfInterest } from "./PointsOfInterest";
import { PointsOfInterestCountArgs } from "./PointsOfInterestCountArgs";
import { PointsOfInterestFindManyArgs } from "./PointsOfInterestFindManyArgs";
import { PointsOfInterestFindUniqueArgs } from "./PointsOfInterestFindUniqueArgs";
import { DeletePointsOfInterestArgs } from "./DeletePointsOfInterestArgs";
import { PointsOfInterestService } from "../pointsOfInterest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PointsOfInterest)
export class PointsOfInterestResolverBase {
  constructor(
    protected readonly service: PointsOfInterestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PointsOfInterest",
    action: "read",
    possession: "any",
  })
  async _pointsOfInterestsMeta(
    @graphql.Args() args: PointsOfInterestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PointsOfInterest])
  @nestAccessControl.UseRoles({
    resource: "PointsOfInterest",
    action: "read",
    possession: "any",
  })
  async pointsOfInterests(
    @graphql.Args() args: PointsOfInterestFindManyArgs
  ): Promise<PointsOfInterest[]> {
    return this.service.pointsOfInterests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PointsOfInterest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PointsOfInterest",
    action: "read",
    possession: "own",
  })
  async pointsOfInterest(
    @graphql.Args() args: PointsOfInterestFindUniqueArgs
  ): Promise<PointsOfInterest | null> {
    const result = await this.service.pointsOfInterest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PointsOfInterest)
  @nestAccessControl.UseRoles({
    resource: "PointsOfInterest",
    action: "delete",
    possession: "any",
  })
  async deletePointsOfInterest(
    @graphql.Args() args: DeletePointsOfInterestArgs
  ): Promise<PointsOfInterest | null> {
    try {
      return await this.service.deletePointsOfInterest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
