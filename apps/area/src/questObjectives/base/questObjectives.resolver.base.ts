/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestObjectives } from "./QuestObjectives";
import { QuestObjectivesCountArgs } from "./QuestObjectivesCountArgs";
import { QuestObjectivesFindManyArgs } from "./QuestObjectivesFindManyArgs";
import { QuestObjectivesFindUniqueArgs } from "./QuestObjectivesFindUniqueArgs";
import { DeleteQuestObjectivesArgs } from "./DeleteQuestObjectivesArgs";
import { QuestObjectivesService } from "../questObjectives.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestObjectives)
export class QuestObjectivesResolverBase {
  constructor(
    protected readonly service: QuestObjectivesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectives",
    action: "read",
    possession: "any",
  })
  async _questObjectivesItemsMeta(
    @graphql.Args() args: QuestObjectivesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestObjectives])
  @nestAccessControl.UseRoles({
    resource: "QuestObjectives",
    action: "read",
    possession: "any",
  })
  async questObjectivesItems(
    @graphql.Args() args: QuestObjectivesFindManyArgs
  ): Promise<QuestObjectives[]> {
    return this.service.questObjectivesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestObjectives, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectives",
    action: "read",
    possession: "own",
  })
  async questObjectives(
    @graphql.Args() args: QuestObjectivesFindUniqueArgs
  ): Promise<QuestObjectives | null> {
    const result = await this.service.questObjectives(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestObjectives)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectives",
    action: "delete",
    possession: "any",
  })
  async deleteQuestObjectives(
    @graphql.Args() args: DeleteQuestObjectivesArgs
  ): Promise<QuestObjectives | null> {
    try {
      return await this.service.deleteQuestObjectives(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
