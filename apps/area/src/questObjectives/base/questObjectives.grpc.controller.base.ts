/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestObjectivesService } from "../questObjectives.service";
import { QuestObjectivesCreateInput } from "./QuestObjectivesCreateInput";
import { QuestObjectivesWhereInput } from "./QuestObjectivesWhereInput";
import { QuestObjectivesWhereUniqueInput } from "./QuestObjectivesWhereUniqueInput";
import { QuestObjectivesFindManyArgs } from "./QuestObjectivesFindManyArgs";
import { QuestObjectivesUpdateInput } from "./QuestObjectivesUpdateInput";
import { QuestObjectives } from "./QuestObjectives";

export class QuestObjectivesGrpcControllerBase {
  constructor(protected readonly service: QuestObjectivesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestObjectives })
  @GrpcMethod("QuestObjectivesService", "createQuestObjectives")
  async createQuestObjectives(
    @common.Body() data: QuestObjectivesCreateInput
  ): Promise<QuestObjectives> {
    return await this.service.createQuestObjectives({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestObjectives] })
  @ApiNestedQuery(QuestObjectivesFindManyArgs)
  @GrpcMethod("QuestObjectivesService", "questObjectivesItems")
  async questObjectivesItems(
    @common.Req() request: Request
  ): Promise<QuestObjectives[]> {
    const args = plainToClass(QuestObjectivesFindManyArgs, request.query);
    return this.service.questObjectivesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectives })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectivesService", "questObjectives")
  async questObjectives(
    @common.Param() params: QuestObjectivesWhereUniqueInput
  ): Promise<QuestObjectives | null> {
    const result = await this.service.questObjectives({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectives })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectivesService", "updateQuestObjectives")
  async updateQuestObjectives(
    @common.Param() params: QuestObjectivesWhereUniqueInput,
    @common.Body() data: QuestObjectivesUpdateInput
  ): Promise<QuestObjectives | null> {
    try {
      return await this.service.updateQuestObjectives({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectives })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectivesService", "deleteQuestObjectives")
  async deleteQuestObjectives(
    @common.Param() params: QuestObjectivesWhereUniqueInput
  ): Promise<QuestObjectives | null> {
    try {
      return await this.service.deleteQuestObjectives({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
