/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PoolTemplate as PrismaPoolTemplate } from "@prisma/client";

export class PoolTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PoolTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.poolTemplate.count(args);
  }

  async poolTemplates(
    args: Prisma.PoolTemplateFindManyArgs
  ): Promise<PrismaPoolTemplate[]> {
    return this.prisma.poolTemplate.findMany(args);
  }
  async poolTemplate(
    args: Prisma.PoolTemplateFindUniqueArgs
  ): Promise<PrismaPoolTemplate | null> {
    return this.prisma.poolTemplate.findUnique(args);
  }
  async createPoolTemplate(
    args: Prisma.PoolTemplateCreateArgs
  ): Promise<PrismaPoolTemplate> {
    return this.prisma.poolTemplate.create(args);
  }
  async updatePoolTemplate(
    args: Prisma.PoolTemplateUpdateArgs
  ): Promise<PrismaPoolTemplate> {
    return this.prisma.poolTemplate.update(args);
  }
  async deletePoolTemplate(
    args: Prisma.PoolTemplateDeleteArgs
  ): Promise<PrismaPoolTemplate> {
    return this.prisma.poolTemplate.delete(args);
  }
}
