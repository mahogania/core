/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PoolTemplate } from "./PoolTemplate";
import { PoolTemplateCountArgs } from "./PoolTemplateCountArgs";
import { PoolTemplateFindManyArgs } from "./PoolTemplateFindManyArgs";
import { PoolTemplateFindUniqueArgs } from "./PoolTemplateFindUniqueArgs";
import { DeletePoolTemplateArgs } from "./DeletePoolTemplateArgs";
import { PoolTemplateService } from "../poolTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PoolTemplate)
export class PoolTemplateResolverBase {
  constructor(
    protected readonly service: PoolTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PoolTemplate",
    action: "read",
    possession: "any",
  })
  async _poolTemplatesMeta(
    @graphql.Args() args: PoolTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PoolTemplate])
  @nestAccessControl.UseRoles({
    resource: "PoolTemplate",
    action: "read",
    possession: "any",
  })
  async poolTemplates(
    @graphql.Args() args: PoolTemplateFindManyArgs
  ): Promise<PoolTemplate[]> {
    return this.service.poolTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PoolTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoolTemplate",
    action: "read",
    possession: "own",
  })
  async poolTemplate(
    @graphql.Args() args: PoolTemplateFindUniqueArgs
  ): Promise<PoolTemplate | null> {
    const result = await this.service.poolTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PoolTemplate)
  @nestAccessControl.UseRoles({
    resource: "PoolTemplate",
    action: "delete",
    possession: "any",
  })
  async deletePoolTemplate(
    @graphql.Args() args: DeletePoolTemplateArgs
  ): Promise<PoolTemplate | null> {
    try {
      return await this.service.deletePoolTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
