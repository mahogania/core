/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestPoolTemplate } from "./QuestPoolTemplate";
import { QuestPoolTemplateCountArgs } from "./QuestPoolTemplateCountArgs";
import { QuestPoolTemplateFindManyArgs } from "./QuestPoolTemplateFindManyArgs";
import { QuestPoolTemplateFindUniqueArgs } from "./QuestPoolTemplateFindUniqueArgs";
import { DeleteQuestPoolTemplateArgs } from "./DeleteQuestPoolTemplateArgs";
import { QuestPoolTemplateService } from "../questPoolTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestPoolTemplate)
export class QuestPoolTemplateResolverBase {
  constructor(
    protected readonly service: QuestPoolTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestPoolTemplate",
    action: "read",
    possession: "any",
  })
  async _questPoolTemplatesMeta(
    @graphql.Args() args: QuestPoolTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestPoolTemplate])
  @nestAccessControl.UseRoles({
    resource: "QuestPoolTemplate",
    action: "read",
    possession: "any",
  })
  async questPoolTemplates(
    @graphql.Args() args: QuestPoolTemplateFindManyArgs
  ): Promise<QuestPoolTemplate[]> {
    return this.service.questPoolTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestPoolTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestPoolTemplate",
    action: "read",
    possession: "own",
  })
  async questPoolTemplate(
    @graphql.Args() args: QuestPoolTemplateFindUniqueArgs
  ): Promise<QuestPoolTemplate | null> {
    const result = await this.service.questPoolTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestPoolTemplate)
  @nestAccessControl.UseRoles({
    resource: "QuestPoolTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteQuestPoolTemplate(
    @graphql.Args() args: DeleteQuestPoolTemplateArgs
  ): Promise<QuestPoolTemplate | null> {
    try {
      return await this.service.deleteQuestPoolTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
