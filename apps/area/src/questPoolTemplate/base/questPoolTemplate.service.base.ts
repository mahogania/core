/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QuestPoolTemplate as PrismaQuestPoolTemplate,
} from "@prisma/client";

export class QuestPoolTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestPoolTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questPoolTemplate.count(args);
  }

  async questPoolTemplates(
    args: Prisma.QuestPoolTemplateFindManyArgs
  ): Promise<PrismaQuestPoolTemplate[]> {
    return this.prisma.questPoolTemplate.findMany(args);
  }
  async questPoolTemplate(
    args: Prisma.QuestPoolTemplateFindUniqueArgs
  ): Promise<PrismaQuestPoolTemplate | null> {
    return this.prisma.questPoolTemplate.findUnique(args);
  }
  async createQuestPoolTemplate(
    args: Prisma.QuestPoolTemplateCreateArgs
  ): Promise<PrismaQuestPoolTemplate> {
    return this.prisma.questPoolTemplate.create(args);
  }
  async updateQuestPoolTemplate(
    args: Prisma.QuestPoolTemplateUpdateArgs
  ): Promise<PrismaQuestPoolTemplate> {
    return this.prisma.questPoolTemplate.update(args);
  }
  async deleteQuestPoolTemplate(
    args: Prisma.QuestPoolTemplateDeleteArgs
  ): Promise<PrismaQuestPoolTemplate> {
    return this.prisma.questPoolTemplate.delete(args);
  }
}
