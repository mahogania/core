/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaTriggerTemplateAction } from "./AreaTriggerTemplateAction";
import { AreaTriggerTemplateActionCountArgs } from "./AreaTriggerTemplateActionCountArgs";
import { AreaTriggerTemplateActionFindManyArgs } from "./AreaTriggerTemplateActionFindManyArgs";
import { AreaTriggerTemplateActionFindUniqueArgs } from "./AreaTriggerTemplateActionFindUniqueArgs";
import { CreateAreaTriggerTemplateActionArgs } from "./CreateAreaTriggerTemplateActionArgs";
import { UpdateAreaTriggerTemplateActionArgs } from "./UpdateAreaTriggerTemplateActionArgs";
import { DeleteAreaTriggerTemplateActionArgs } from "./DeleteAreaTriggerTemplateActionArgs";
import { AreaTriggerTemplateActionService } from "../areaTriggerTemplateAction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaTriggerTemplateAction)
export class AreaTriggerTemplateActionResolverBase {
  constructor(
    protected readonly service: AreaTriggerTemplateActionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplateAction",
    action: "read",
    possession: "any",
  })
  async _areaTriggerTemplateActionsMeta(
    @graphql.Args() args: AreaTriggerTemplateActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaTriggerTemplateAction])
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplateAction",
    action: "read",
    possession: "any",
  })
  async areaTriggerTemplateActions(
    @graphql.Args() args: AreaTriggerTemplateActionFindManyArgs
  ): Promise<AreaTriggerTemplateAction[]> {
    return this.service.areaTriggerTemplateActions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaTriggerTemplateAction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplateAction",
    action: "read",
    possession: "own",
  })
  async areaTriggerTemplateAction(
    @graphql.Args() args: AreaTriggerTemplateActionFindUniqueArgs
  ): Promise<AreaTriggerTemplateAction | null> {
    const result = await this.service.areaTriggerTemplateAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTemplateAction)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplateAction",
    action: "create",
    possession: "any",
  })
  async createAreaTriggerTemplateAction(
    @graphql.Args() args: CreateAreaTriggerTemplateActionArgs
  ): Promise<AreaTriggerTemplateAction> {
    return await this.service.createAreaTriggerTemplateAction({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTemplateAction)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplateAction",
    action: "update",
    possession: "any",
  })
  async updateAreaTriggerTemplateAction(
    @graphql.Args() args: UpdateAreaTriggerTemplateActionArgs
  ): Promise<AreaTriggerTemplateAction | null> {
    try {
      return await this.service.updateAreaTriggerTemplateAction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaTriggerTemplateAction)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplateAction",
    action: "delete",
    possession: "any",
  })
  async deleteAreaTriggerTemplateAction(
    @graphql.Args() args: DeleteAreaTriggerTemplateActionArgs
  ): Promise<AreaTriggerTemplateAction | null> {
    try {
      return await this.service.deleteAreaTriggerTemplateAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
