/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ScenarioPoiPoints } from "./ScenarioPoiPoints";
import { ScenarioPoiPointsCountArgs } from "./ScenarioPoiPointsCountArgs";
import { ScenarioPoiPointsFindManyArgs } from "./ScenarioPoiPointsFindManyArgs";
import { ScenarioPoiPointsFindUniqueArgs } from "./ScenarioPoiPointsFindUniqueArgs";
import { DeleteScenarioPoiPointsArgs } from "./DeleteScenarioPoiPointsArgs";
import { ScenarioPoiPointsService } from "../scenarioPoiPoints.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScenarioPoiPoints)
export class ScenarioPoiPointsResolverBase {
  constructor(
    protected readonly service: ScenarioPoiPointsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScenarioPoiPoints",
    action: "read",
    possession: "any",
  })
  async _scenarioPoiPointsItemsMeta(
    @graphql.Args() args: ScenarioPoiPointsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScenarioPoiPoints])
  @nestAccessControl.UseRoles({
    resource: "ScenarioPoiPoints",
    action: "read",
    possession: "any",
  })
  async scenarioPoiPointsItems(
    @graphql.Args() args: ScenarioPoiPointsFindManyArgs
  ): Promise<ScenarioPoiPoints[]> {
    return this.service.scenarioPoiPointsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScenarioPoiPoints, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScenarioPoiPoints",
    action: "read",
    possession: "own",
  })
  async scenarioPoiPoints(
    @graphql.Args() args: ScenarioPoiPointsFindUniqueArgs
  ): Promise<ScenarioPoiPoints | null> {
    const result = await this.service.scenarioPoiPoints(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScenarioPoiPoints)
  @nestAccessControl.UseRoles({
    resource: "ScenarioPoiPoints",
    action: "delete",
    possession: "any",
  })
  async deleteScenarioPoiPoints(
    @graphql.Args() args: DeleteScenarioPoiPointsArgs
  ): Promise<ScenarioPoiPoints | null> {
    try {
      return await this.service.deleteScenarioPoiPoints(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
