/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ScenariosService } from "../scenarios.service";
import { ScenariosCreateInput } from "./ScenariosCreateInput";
import { ScenariosWhereInput } from "./ScenariosWhereInput";
import { ScenariosWhereUniqueInput } from "./ScenariosWhereUniqueInput";
import { ScenariosFindManyArgs } from "./ScenariosFindManyArgs";
import { ScenariosUpdateInput } from "./ScenariosUpdateInput";
import { Scenarios } from "./Scenarios";

export class ScenariosGrpcControllerBase {
  constructor(protected readonly service: ScenariosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scenarios })
  @GrpcMethod("ScenariosService", "createScenarios")
  async createScenarios(
    @common.Body() data: ScenariosCreateInput
  ): Promise<Scenarios> {
    return await this.service.createScenarios({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scenarios] })
  @ApiNestedQuery(ScenariosFindManyArgs)
  @GrpcMethod("ScenariosService", "scenariosItems")
  async scenariosItems(@common.Req() request: Request): Promise<Scenarios[]> {
    const args = plainToClass(ScenariosFindManyArgs, request.query);
    return this.service.scenariosItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scenarios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScenariosService", "scenarios")
  async scenarios(
    @common.Param() params: ScenariosWhereUniqueInput
  ): Promise<Scenarios | null> {
    const result = await this.service.scenarios({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scenarios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScenariosService", "updateScenarios")
  async updateScenarios(
    @common.Param() params: ScenariosWhereUniqueInput,
    @common.Body() data: ScenariosUpdateInput
  ): Promise<Scenarios | null> {
    try {
      return await this.service.updateScenarios({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scenarios })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScenariosService", "deleteScenarios")
  async deleteScenarios(
    @common.Param() params: ScenariosWhereUniqueInput
  ): Promise<Scenarios | null> {
    try {
      return await this.service.deleteScenarios({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
