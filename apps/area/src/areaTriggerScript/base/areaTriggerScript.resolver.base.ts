/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaTriggerScript } from "./AreaTriggerScript";
import { AreaTriggerScriptCountArgs } from "./AreaTriggerScriptCountArgs";
import { AreaTriggerScriptFindManyArgs } from "./AreaTriggerScriptFindManyArgs";
import { AreaTriggerScriptFindUniqueArgs } from "./AreaTriggerScriptFindUniqueArgs";
import { CreateAreaTriggerScriptArgs } from "./CreateAreaTriggerScriptArgs";
import { UpdateAreaTriggerScriptArgs } from "./UpdateAreaTriggerScriptArgs";
import { DeleteAreaTriggerScriptArgs } from "./DeleteAreaTriggerScriptArgs";
import { AreaTriggerScriptService } from "../areaTriggerScript.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaTriggerScript)
export class AreaTriggerScriptResolverBase {
  constructor(
    protected readonly service: AreaTriggerScriptService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerScript",
    action: "read",
    possession: "any",
  })
  async _areaTriggerScriptsMeta(
    @graphql.Args() args: AreaTriggerScriptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaTriggerScript])
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerScript",
    action: "read",
    possession: "any",
  })
  async areaTriggerScripts(
    @graphql.Args() args: AreaTriggerScriptFindManyArgs
  ): Promise<AreaTriggerScript[]> {
    return this.service.areaTriggerScripts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaTriggerScript, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerScript",
    action: "read",
    possession: "own",
  })
  async areaTriggerScript(
    @graphql.Args() args: AreaTriggerScriptFindUniqueArgs
  ): Promise<AreaTriggerScript | null> {
    const result = await this.service.areaTriggerScript(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerScript)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerScript",
    action: "create",
    possession: "any",
  })
  async createAreaTriggerScript(
    @graphql.Args() args: CreateAreaTriggerScriptArgs
  ): Promise<AreaTriggerScript> {
    return await this.service.createAreaTriggerScript({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerScript)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerScript",
    action: "update",
    possession: "any",
  })
  async updateAreaTriggerScript(
    @graphql.Args() args: UpdateAreaTriggerScriptArgs
  ): Promise<AreaTriggerScript | null> {
    try {
      return await this.service.updateAreaTriggerScript({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaTriggerScript)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerScript",
    action: "delete",
    possession: "any",
  })
  async deleteAreaTriggerScript(
    @graphql.Args() args: DeleteAreaTriggerScriptArgs
  ): Promise<AreaTriggerScript | null> {
    try {
      return await this.service.deleteAreaTriggerScript(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
