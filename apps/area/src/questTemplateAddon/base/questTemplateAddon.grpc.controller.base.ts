/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestTemplateAddonService } from "../questTemplateAddon.service";
import { QuestTemplateAddonCreateInput } from "./QuestTemplateAddonCreateInput";
import { QuestTemplateAddonWhereInput } from "./QuestTemplateAddonWhereInput";
import { QuestTemplateAddonWhereUniqueInput } from "./QuestTemplateAddonWhereUniqueInput";
import { QuestTemplateAddonFindManyArgs } from "./QuestTemplateAddonFindManyArgs";
import { QuestTemplateAddonUpdateInput } from "./QuestTemplateAddonUpdateInput";
import { QuestTemplateAddon } from "./QuestTemplateAddon";

export class QuestTemplateAddonGrpcControllerBase {
  constructor(protected readonly service: QuestTemplateAddonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestTemplateAddon })
  @GrpcMethod("QuestTemplateAddonService", "createQuestTemplateAddon")
  async createQuestTemplateAddon(
    @common.Body() data: QuestTemplateAddonCreateInput
  ): Promise<QuestTemplateAddon> {
    return await this.service.createQuestTemplateAddon({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestTemplateAddon] })
  @ApiNestedQuery(QuestTemplateAddonFindManyArgs)
  @GrpcMethod("QuestTemplateAddonService", "questTemplateAddons")
  async questTemplateAddons(
    @common.Req() request: Request
  ): Promise<QuestTemplateAddon[]> {
    const args = plainToClass(QuestTemplateAddonFindManyArgs, request.query);
    return this.service.questTemplateAddons({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestTemplateAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestTemplateAddonService", "questTemplateAddon")
  async questTemplateAddon(
    @common.Param() params: QuestTemplateAddonWhereUniqueInput
  ): Promise<QuestTemplateAddon | null> {
    const result = await this.service.questTemplateAddon({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestTemplateAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestTemplateAddonService", "updateQuestTemplateAddon")
  async updateQuestTemplateAddon(
    @common.Param() params: QuestTemplateAddonWhereUniqueInput,
    @common.Body() data: QuestTemplateAddonUpdateInput
  ): Promise<QuestTemplateAddon | null> {
    try {
      return await this.service.updateQuestTemplateAddon({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestTemplateAddon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestTemplateAddonService", "deleteQuestTemplateAddon")
  async deleteQuestTemplateAddon(
    @common.Param() params: QuestTemplateAddonWhereUniqueInput
  ): Promise<QuestTemplateAddon | null> {
    try {
      return await this.service.deleteQuestTemplateAddon({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
