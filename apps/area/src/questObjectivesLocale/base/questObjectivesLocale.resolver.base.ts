/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestObjectivesLocale } from "./QuestObjectivesLocale";
import { QuestObjectivesLocaleCountArgs } from "./QuestObjectivesLocaleCountArgs";
import { QuestObjectivesLocaleFindManyArgs } from "./QuestObjectivesLocaleFindManyArgs";
import { QuestObjectivesLocaleFindUniqueArgs } from "./QuestObjectivesLocaleFindUniqueArgs";
import { DeleteQuestObjectivesLocaleArgs } from "./DeleteQuestObjectivesLocaleArgs";
import { QuestObjectivesLocaleService } from "../questObjectivesLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestObjectivesLocale)
export class QuestObjectivesLocaleResolverBase {
  constructor(
    protected readonly service: QuestObjectivesLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectivesLocale",
    action: "read",
    possession: "any",
  })
  async _questObjectivesLocalesMeta(
    @graphql.Args() args: QuestObjectivesLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestObjectivesLocale])
  @nestAccessControl.UseRoles({
    resource: "QuestObjectivesLocale",
    action: "read",
    possession: "any",
  })
  async questObjectivesLocales(
    @graphql.Args() args: QuestObjectivesLocaleFindManyArgs
  ): Promise<QuestObjectivesLocale[]> {
    return this.service.questObjectivesLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestObjectivesLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestObjectivesLocale",
    action: "read",
    possession: "own",
  })
  async questObjectivesLocale(
    @graphql.Args() args: QuestObjectivesLocaleFindUniqueArgs
  ): Promise<QuestObjectivesLocale | null> {
    const result = await this.service.questObjectivesLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestObjectivesLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestObjectivesLocale",
    action: "delete",
    possession: "any",
  })
  async deleteQuestObjectivesLocale(
    @graphql.Args() args: DeleteQuestObjectivesLocaleArgs
  ): Promise<QuestObjectivesLocale | null> {
    try {
      return await this.service.deleteQuestObjectivesLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
