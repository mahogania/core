/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestObjectivesLocaleService } from "../questObjectivesLocale.service";
import { QuestObjectivesLocaleCreateInput } from "./QuestObjectivesLocaleCreateInput";
import { QuestObjectivesLocaleWhereInput } from "./QuestObjectivesLocaleWhereInput";
import { QuestObjectivesLocaleWhereUniqueInput } from "./QuestObjectivesLocaleWhereUniqueInput";
import { QuestObjectivesLocaleFindManyArgs } from "./QuestObjectivesLocaleFindManyArgs";
import { QuestObjectivesLocaleUpdateInput } from "./QuestObjectivesLocaleUpdateInput";
import { QuestObjectivesLocale } from "./QuestObjectivesLocale";

export class QuestObjectivesLocaleGrpcControllerBase {
  constructor(protected readonly service: QuestObjectivesLocaleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestObjectivesLocale })
  @GrpcMethod("QuestObjectivesLocaleService", "createQuestObjectivesLocale")
  async createQuestObjectivesLocale(
    @common.Body() data: QuestObjectivesLocaleCreateInput
  ): Promise<QuestObjectivesLocale> {
    return await this.service.createQuestObjectivesLocale({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestObjectivesLocale] })
  @ApiNestedQuery(QuestObjectivesLocaleFindManyArgs)
  @GrpcMethod("QuestObjectivesLocaleService", "questObjectivesLocales")
  async questObjectivesLocales(
    @common.Req() request: Request
  ): Promise<QuestObjectivesLocale[]> {
    const args = plainToClass(QuestObjectivesLocaleFindManyArgs, request.query);
    return this.service.questObjectivesLocales({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectivesLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectivesLocaleService", "questObjectivesLocale")
  async questObjectivesLocale(
    @common.Param() params: QuestObjectivesLocaleWhereUniqueInput
  ): Promise<QuestObjectivesLocale | null> {
    const result = await this.service.questObjectivesLocale({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectivesLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectivesLocaleService", "updateQuestObjectivesLocale")
  async updateQuestObjectivesLocale(
    @common.Param() params: QuestObjectivesLocaleWhereUniqueInput,
    @common.Body() data: QuestObjectivesLocaleUpdateInput
  ): Promise<QuestObjectivesLocale | null> {
    try {
      return await this.service.updateQuestObjectivesLocale({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestObjectivesLocale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestObjectivesLocaleService", "deleteQuestObjectivesLocale")
  async deleteQuestObjectivesLocale(
    @common.Param() params: QuestObjectivesLocaleWhereUniqueInput
  ): Promise<QuestObjectivesLocale | null> {
    try {
      return await this.service.deleteQuestObjectivesLocale({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
