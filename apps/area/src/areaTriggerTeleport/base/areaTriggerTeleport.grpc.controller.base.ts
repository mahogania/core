/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AreaTriggerTeleportService } from "../areaTriggerTeleport.service";
import { AreaTriggerTeleportCreateInput } from "./AreaTriggerTeleportCreateInput";
import { AreaTriggerTeleportWhereInput } from "./AreaTriggerTeleportWhereInput";
import { AreaTriggerTeleportWhereUniqueInput } from "./AreaTriggerTeleportWhereUniqueInput";
import { AreaTriggerTeleportFindManyArgs } from "./AreaTriggerTeleportFindManyArgs";
import { AreaTriggerTeleportUpdateInput } from "./AreaTriggerTeleportUpdateInput";
import { AreaTriggerTeleport } from "./AreaTriggerTeleport";

export class AreaTriggerTeleportGrpcControllerBase {
  constructor(protected readonly service: AreaTriggerTeleportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AreaTriggerTeleport })
  @GrpcMethod("AreaTriggerTeleportService", "createAreaTriggerTeleport")
  async createAreaTriggerTeleport(
    @common.Body() data: AreaTriggerTeleportCreateInput
  ): Promise<AreaTriggerTeleport> {
    return await this.service.createAreaTriggerTeleport({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        portLocId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AreaTriggerTeleport] })
  @ApiNestedQuery(AreaTriggerTeleportFindManyArgs)
  @GrpcMethod("AreaTriggerTeleportService", "areaTriggerTeleports")
  async areaTriggerTeleports(
    @common.Req() request: Request
  ): Promise<AreaTriggerTeleport[]> {
    const args = plainToClass(AreaTriggerTeleportFindManyArgs, request.query);
    return this.service.areaTriggerTeleports({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        portLocId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerTeleport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaTriggerTeleportService", "areaTriggerTeleport")
  async areaTriggerTeleport(
    @common.Param() params: AreaTriggerTeleportWhereUniqueInput
  ): Promise<AreaTriggerTeleport | null> {
    const result = await this.service.areaTriggerTeleport({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        portLocId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerTeleport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaTriggerTeleportService", "updateAreaTriggerTeleport")
  async updateAreaTriggerTeleport(
    @common.Param() params: AreaTriggerTeleportWhereUniqueInput,
    @common.Body() data: AreaTriggerTeleportUpdateInput
  ): Promise<AreaTriggerTeleport | null> {
    try {
      return await this.service.updateAreaTriggerTeleport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          portLocId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerTeleport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaTriggerTeleportService", "deleteAreaTriggerTeleport")
  async deleteAreaTriggerTeleport(
    @common.Param() params: AreaTriggerTeleportWhereUniqueInput
  ): Promise<AreaTriggerTeleport | null> {
    try {
      return await this.service.deleteAreaTriggerTeleport({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          portLocId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
