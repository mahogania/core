/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaTriggerTeleport } from "./AreaTriggerTeleport";
import { AreaTriggerTeleportCountArgs } from "./AreaTriggerTeleportCountArgs";
import { AreaTriggerTeleportFindManyArgs } from "./AreaTriggerTeleportFindManyArgs";
import { AreaTriggerTeleportFindUniqueArgs } from "./AreaTriggerTeleportFindUniqueArgs";
import { CreateAreaTriggerTeleportArgs } from "./CreateAreaTriggerTeleportArgs";
import { UpdateAreaTriggerTeleportArgs } from "./UpdateAreaTriggerTeleportArgs";
import { DeleteAreaTriggerTeleportArgs } from "./DeleteAreaTriggerTeleportArgs";
import { AreaTriggerTeleportService } from "../areaTriggerTeleport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaTriggerTeleport)
export class AreaTriggerTeleportResolverBase {
  constructor(
    protected readonly service: AreaTriggerTeleportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTeleport",
    action: "read",
    possession: "any",
  })
  async _areaTriggerTeleportsMeta(
    @graphql.Args() args: AreaTriggerTeleportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaTriggerTeleport])
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTeleport",
    action: "read",
    possession: "any",
  })
  async areaTriggerTeleports(
    @graphql.Args() args: AreaTriggerTeleportFindManyArgs
  ): Promise<AreaTriggerTeleport[]> {
    return this.service.areaTriggerTeleports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaTriggerTeleport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTeleport",
    action: "read",
    possession: "own",
  })
  async areaTriggerTeleport(
    @graphql.Args() args: AreaTriggerTeleportFindUniqueArgs
  ): Promise<AreaTriggerTeleport | null> {
    const result = await this.service.areaTriggerTeleport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTeleport)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTeleport",
    action: "create",
    possession: "any",
  })
  async createAreaTriggerTeleport(
    @graphql.Args() args: CreateAreaTriggerTeleportArgs
  ): Promise<AreaTriggerTeleport> {
    return await this.service.createAreaTriggerTeleport({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTeleport)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTeleport",
    action: "update",
    possession: "any",
  })
  async updateAreaTriggerTeleport(
    @graphql.Args() args: UpdateAreaTriggerTeleportArgs
  ): Promise<AreaTriggerTeleport | null> {
    try {
      return await this.service.updateAreaTriggerTeleport({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaTriggerTeleport)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTeleport",
    action: "delete",
    possession: "any",
  })
  async deleteAreaTriggerTeleport(
    @graphql.Args() args: DeleteAreaTriggerTeleportArgs
  ): Promise<AreaTriggerTeleport | null> {
    try {
      return await this.service.deleteAreaTriggerTeleport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
