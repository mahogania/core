/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ScriptSplineChainWaypointsService } from "../scriptSplineChainWaypoints.service";
import { ScriptSplineChainWaypointsCreateInput } from "./ScriptSplineChainWaypointsCreateInput";
import { ScriptSplineChainWaypointsWhereInput } from "./ScriptSplineChainWaypointsWhereInput";
import { ScriptSplineChainWaypointsWhereUniqueInput } from "./ScriptSplineChainWaypointsWhereUniqueInput";
import { ScriptSplineChainWaypointsFindManyArgs } from "./ScriptSplineChainWaypointsFindManyArgs";
import { ScriptSplineChainWaypointsUpdateInput } from "./ScriptSplineChainWaypointsUpdateInput";
import { ScriptSplineChainWaypoints } from "./ScriptSplineChainWaypoints";

export class ScriptSplineChainWaypointsGrpcControllerBase {
  constructor(protected readonly service: ScriptSplineChainWaypointsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScriptSplineChainWaypoints })
  @GrpcMethod(
    "ScriptSplineChainWaypointsService",
    "createScriptSplineChainWaypoints"
  )
  async createScriptSplineChainWaypoints(
    @common.Body() data: ScriptSplineChainWaypointsCreateInput
  ): Promise<ScriptSplineChainWaypoints> {
    return await this.service.createScriptSplineChainWaypoints({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScriptSplineChainWaypoints] })
  @ApiNestedQuery(ScriptSplineChainWaypointsFindManyArgs)
  @GrpcMethod(
    "ScriptSplineChainWaypointsService",
    "scriptSplineChainWaypointsItems"
  )
  async scriptSplineChainWaypointsItems(
    @common.Req() request: Request
  ): Promise<ScriptSplineChainWaypoints[]> {
    const args = plainToClass(
      ScriptSplineChainWaypointsFindManyArgs,
      request.query
    );
    return this.service.scriptSplineChainWaypointsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScriptSplineChainWaypoints })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ScriptSplineChainWaypointsService", "scriptSplineChainWaypoints")
  async scriptSplineChainWaypoints(
    @common.Param() params: ScriptSplineChainWaypointsWhereUniqueInput
  ): Promise<ScriptSplineChainWaypoints | null> {
    const result = await this.service.scriptSplineChainWaypoints({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScriptSplineChainWaypoints })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "ScriptSplineChainWaypointsService",
    "updateScriptSplineChainWaypoints"
  )
  async updateScriptSplineChainWaypoints(
    @common.Param() params: ScriptSplineChainWaypointsWhereUniqueInput,
    @common.Body() data: ScriptSplineChainWaypointsUpdateInput
  ): Promise<ScriptSplineChainWaypoints | null> {
    try {
      return await this.service.updateScriptSplineChainWaypoints({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScriptSplineChainWaypoints })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "ScriptSplineChainWaypointsService",
    "deleteScriptSplineChainWaypoints"
  )
  async deleteScriptSplineChainWaypoints(
    @common.Param() params: ScriptSplineChainWaypointsWhereUniqueInput
  ): Promise<ScriptSplineChainWaypoints | null> {
    try {
      return await this.service.deleteScriptSplineChainWaypoints({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
