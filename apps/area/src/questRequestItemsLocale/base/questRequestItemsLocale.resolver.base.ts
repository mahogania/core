/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestRequestItemsLocale } from "./QuestRequestItemsLocale";
import { QuestRequestItemsLocaleCountArgs } from "./QuestRequestItemsLocaleCountArgs";
import { QuestRequestItemsLocaleFindManyArgs } from "./QuestRequestItemsLocaleFindManyArgs";
import { QuestRequestItemsLocaleFindUniqueArgs } from "./QuestRequestItemsLocaleFindUniqueArgs";
import { DeleteQuestRequestItemsLocaleArgs } from "./DeleteQuestRequestItemsLocaleArgs";
import { QuestRequestItemsLocaleService } from "../questRequestItemsLocale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestRequestItemsLocale)
export class QuestRequestItemsLocaleResolverBase {
  constructor(
    protected readonly service: QuestRequestItemsLocaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestRequestItemsLocale",
    action: "read",
    possession: "any",
  })
  async _questRequestItemsLocalesMeta(
    @graphql.Args() args: QuestRequestItemsLocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestRequestItemsLocale])
  @nestAccessControl.UseRoles({
    resource: "QuestRequestItemsLocale",
    action: "read",
    possession: "any",
  })
  async questRequestItemsLocales(
    @graphql.Args() args: QuestRequestItemsLocaleFindManyArgs
  ): Promise<QuestRequestItemsLocale[]> {
    return this.service.questRequestItemsLocales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestRequestItemsLocale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestRequestItemsLocale",
    action: "read",
    possession: "own",
  })
  async questRequestItemsLocale(
    @graphql.Args() args: QuestRequestItemsLocaleFindUniqueArgs
  ): Promise<QuestRequestItemsLocale | null> {
    const result = await this.service.questRequestItemsLocale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestRequestItemsLocale)
  @nestAccessControl.UseRoles({
    resource: "QuestRequestItemsLocale",
    action: "delete",
    possession: "any",
  })
  async deleteQuestRequestItemsLocale(
    @graphql.Args() args: DeleteQuestRequestItemsLocaleArgs
  ): Promise<QuestRequestItemsLocale | null> {
    try {
      return await this.service.deleteQuestRequestItemsLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
