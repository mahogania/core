/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaTriggerTemplate } from "./AreaTriggerTemplate";
import { AreaTriggerTemplateCountArgs } from "./AreaTriggerTemplateCountArgs";
import { AreaTriggerTemplateFindManyArgs } from "./AreaTriggerTemplateFindManyArgs";
import { AreaTriggerTemplateFindUniqueArgs } from "./AreaTriggerTemplateFindUniqueArgs";
import { CreateAreaTriggerTemplateArgs } from "./CreateAreaTriggerTemplateArgs";
import { UpdateAreaTriggerTemplateArgs } from "./UpdateAreaTriggerTemplateArgs";
import { DeleteAreaTriggerTemplateArgs } from "./DeleteAreaTriggerTemplateArgs";
import { AreaTriggerTemplateService } from "../areaTriggerTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaTriggerTemplate)
export class AreaTriggerTemplateResolverBase {
  constructor(
    protected readonly service: AreaTriggerTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplate",
    action: "read",
    possession: "any",
  })
  async _areaTriggerTemplatesMeta(
    @graphql.Args() args: AreaTriggerTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaTriggerTemplate])
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplate",
    action: "read",
    possession: "any",
  })
  async areaTriggerTemplates(
    @graphql.Args() args: AreaTriggerTemplateFindManyArgs
  ): Promise<AreaTriggerTemplate[]> {
    return this.service.areaTriggerTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaTriggerTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplate",
    action: "read",
    possession: "own",
  })
  async areaTriggerTemplate(
    @graphql.Args() args: AreaTriggerTemplateFindUniqueArgs
  ): Promise<AreaTriggerTemplate | null> {
    const result = await this.service.areaTriggerTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTemplate)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplate",
    action: "create",
    possession: "any",
  })
  async createAreaTriggerTemplate(
    @graphql.Args() args: CreateAreaTriggerTemplateArgs
  ): Promise<AreaTriggerTemplate> {
    return await this.service.createAreaTriggerTemplate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTemplate)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplate",
    action: "update",
    possession: "any",
  })
  async updateAreaTriggerTemplate(
    @graphql.Args() args: UpdateAreaTriggerTemplateArgs
  ): Promise<AreaTriggerTemplate | null> {
    try {
      return await this.service.updateAreaTriggerTemplate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaTriggerTemplate)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteAreaTriggerTemplate(
    @graphql.Args() args: DeleteAreaTriggerTemplateArgs
  ): Promise<AreaTriggerTemplate | null> {
    try {
      return await this.service.deleteAreaTriggerTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
