/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AreaTriggerTemplate as PrismaAreaTriggerTemplate,
} from "@prisma/client";

export class AreaTriggerTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AreaTriggerTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.areaTriggerTemplate.count(args);
  }

  async areaTriggerTemplates(
    args: Prisma.AreaTriggerTemplateFindManyArgs
  ): Promise<PrismaAreaTriggerTemplate[]> {
    return this.prisma.areaTriggerTemplate.findMany(args);
  }
  async areaTriggerTemplate(
    args: Prisma.AreaTriggerTemplateFindUniqueArgs
  ): Promise<PrismaAreaTriggerTemplate | null> {
    return this.prisma.areaTriggerTemplate.findUnique(args);
  }
  async createAreaTriggerTemplate(
    args: Prisma.AreaTriggerTemplateCreateArgs
  ): Promise<PrismaAreaTriggerTemplate> {
    return this.prisma.areaTriggerTemplate.create(args);
  }
  async updateAreaTriggerTemplate(
    args: Prisma.AreaTriggerTemplateUpdateArgs
  ): Promise<PrismaAreaTriggerTemplate> {
    return this.prisma.areaTriggerTemplate.update(args);
  }
  async deleteAreaTriggerTemplate(
    args: Prisma.AreaTriggerTemplateDeleteArgs
  ): Promise<PrismaAreaTriggerTemplate> {
    return this.prisma.areaTriggerTemplate.delete(args);
  }
}
