/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestDescriptionConditionalService } from "../questDescriptionConditional.service";
import { QuestDescriptionConditionalCreateInput } from "./QuestDescriptionConditionalCreateInput";
import { QuestDescriptionConditionalWhereInput } from "./QuestDescriptionConditionalWhereInput";
import { QuestDescriptionConditionalWhereUniqueInput } from "./QuestDescriptionConditionalWhereUniqueInput";
import { QuestDescriptionConditionalFindManyArgs } from "./QuestDescriptionConditionalFindManyArgs";
import { QuestDescriptionConditionalUpdateInput } from "./QuestDescriptionConditionalUpdateInput";
import { QuestDescriptionConditional } from "./QuestDescriptionConditional";

export class QuestDescriptionConditionalGrpcControllerBase {
  constructor(protected readonly service: QuestDescriptionConditionalService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestDescriptionConditional })
  @GrpcMethod(
    "QuestDescriptionConditionalService",
    "createQuestDescriptionConditional"
  )
  async createQuestDescriptionConditional(
    @common.Body() data: QuestDescriptionConditionalCreateInput
  ): Promise<QuestDescriptionConditional> {
    return await this.service.createQuestDescriptionConditional({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestDescriptionConditional] })
  @ApiNestedQuery(QuestDescriptionConditionalFindManyArgs)
  @GrpcMethod(
    "QuestDescriptionConditionalService",
    "questDescriptionConditionals"
  )
  async questDescriptionConditionals(
    @common.Req() request: Request
  ): Promise<QuestDescriptionConditional[]> {
    const args = plainToClass(
      QuestDescriptionConditionalFindManyArgs,
      request.query
    );
    return this.service.questDescriptionConditionals({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestDescriptionConditional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "QuestDescriptionConditionalService",
    "questDescriptionConditional"
  )
  async questDescriptionConditional(
    @common.Param() params: QuestDescriptionConditionalWhereUniqueInput
  ): Promise<QuestDescriptionConditional | null> {
    const result = await this.service.questDescriptionConditional({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestDescriptionConditional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "QuestDescriptionConditionalService",
    "updateQuestDescriptionConditional"
  )
  async updateQuestDescriptionConditional(
    @common.Param() params: QuestDescriptionConditionalWhereUniqueInput,
    @common.Body() data: QuestDescriptionConditionalUpdateInput
  ): Promise<QuestDescriptionConditional | null> {
    try {
      return await this.service.updateQuestDescriptionConditional({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestDescriptionConditional })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "QuestDescriptionConditionalService",
    "deleteQuestDescriptionConditional"
  )
  async deleteQuestDescriptionConditional(
    @common.Param() params: QuestDescriptionConditionalWhereUniqueInput
  ): Promise<QuestDescriptionConditional | null> {
    try {
      return await this.service.deleteQuestDescriptionConditional({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
