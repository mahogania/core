/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestVisualEffect } from "./QuestVisualEffect";
import { QuestVisualEffectCountArgs } from "./QuestVisualEffectCountArgs";
import { QuestVisualEffectFindManyArgs } from "./QuestVisualEffectFindManyArgs";
import { QuestVisualEffectFindUniqueArgs } from "./QuestVisualEffectFindUniqueArgs";
import { DeleteQuestVisualEffectArgs } from "./DeleteQuestVisualEffectArgs";
import { QuestVisualEffectService } from "../questVisualEffect.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestVisualEffect)
export class QuestVisualEffectResolverBase {
  constructor(
    protected readonly service: QuestVisualEffectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "read",
    possession: "any",
  })
  async _questVisualEffectsMeta(
    @graphql.Args() args: QuestVisualEffectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestVisualEffect])
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "read",
    possession: "any",
  })
  async questVisualEffects(
    @graphql.Args() args: QuestVisualEffectFindManyArgs
  ): Promise<QuestVisualEffect[]> {
    return this.service.questVisualEffects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestVisualEffect, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "read",
    possession: "own",
  })
  async questVisualEffect(
    @graphql.Args() args: QuestVisualEffectFindUniqueArgs
  ): Promise<QuestVisualEffect | null> {
    const result = await this.service.questVisualEffect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestVisualEffect)
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "delete",
    possession: "any",
  })
  async deleteQuestVisualEffect(
    @graphql.Args() args: DeleteQuestVisualEffectArgs
  ): Promise<QuestVisualEffect | null> {
    try {
      return await this.service.deleteQuestVisualEffect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
