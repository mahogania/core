/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { QuestVisualEffectService } from "../questVisualEffect.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestVisualEffectCreateInput } from "./QuestVisualEffectCreateInput";
import { QuestVisualEffect } from "./QuestVisualEffect";
import { QuestVisualEffectFindManyArgs } from "./QuestVisualEffectFindManyArgs";
import { QuestVisualEffectWhereUniqueInput } from "./QuestVisualEffectWhereUniqueInput";
import { QuestVisualEffectUpdateInput } from "./QuestVisualEffectUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class QuestVisualEffectControllerBase {
  constructor(
    protected readonly service: QuestVisualEffectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestVisualEffect })
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestVisualEffectCreateInput,
  })
  async createQuestVisualEffect(
    @common.Body() data: QuestVisualEffectCreateInput
  ): Promise<QuestVisualEffect> {
    return await this.service.createQuestVisualEffect({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestVisualEffect] })
  @ApiNestedQuery(QuestVisualEffectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questVisualEffects(
    @common.Req() request: Request
  ): Promise<QuestVisualEffect[]> {
    const args = plainToClass(QuestVisualEffectFindManyArgs, request.query);
    return this.service.questVisualEffects({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestVisualEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async questVisualEffect(
    @common.Param() params: QuestVisualEffectWhereUniqueInput
  ): Promise<QuestVisualEffect | null> {
    const result = await this.service.questVisualEffect({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestVisualEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: QuestVisualEffectUpdateInput,
  })
  async updateQuestVisualEffect(
    @common.Param() params: QuestVisualEffectWhereUniqueInput,
    @common.Body() data: QuestVisualEffectUpdateInput
  ): Promise<QuestVisualEffect | null> {
    try {
      return await this.service.updateQuestVisualEffect({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestVisualEffect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "QuestVisualEffect",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteQuestVisualEffect(
    @common.Param() params: QuestVisualEffectWhereUniqueInput
  ): Promise<QuestVisualEffect | null> {
    try {
      return await this.service.deleteQuestVisualEffect({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
