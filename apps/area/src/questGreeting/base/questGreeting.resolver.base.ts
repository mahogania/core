/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { QuestGreeting } from "./QuestGreeting";
import { QuestGreetingCountArgs } from "./QuestGreetingCountArgs";
import { QuestGreetingFindManyArgs } from "./QuestGreetingFindManyArgs";
import { QuestGreetingFindUniqueArgs } from "./QuestGreetingFindUniqueArgs";
import { DeleteQuestGreetingArgs } from "./DeleteQuestGreetingArgs";
import { QuestGreetingService } from "../questGreeting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestGreeting)
export class QuestGreetingResolverBase {
  constructor(
    protected readonly service: QuestGreetingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "read",
    possession: "any",
  })
  async _questGreetingsMeta(
    @graphql.Args() args: QuestGreetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestGreeting])
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "read",
    possession: "any",
  })
  async questGreetings(
    @graphql.Args() args: QuestGreetingFindManyArgs
  ): Promise<QuestGreeting[]> {
    return this.service.questGreetings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestGreeting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "read",
    possession: "own",
  })
  async questGreeting(
    @graphql.Args() args: QuestGreetingFindUniqueArgs
  ): Promise<QuestGreeting | null> {
    const result = await this.service.questGreeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QuestGreeting)
  @nestAccessControl.UseRoles({
    resource: "QuestGreeting",
    action: "delete",
    possession: "any",
  })
  async deleteQuestGreeting(
    @graphql.Args() args: DeleteQuestGreetingArgs
  ): Promise<QuestGreeting | null> {
    try {
      return await this.service.deleteQuestGreeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
