/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AreaTriggerInvolvedRelationService } from "../areaTriggerInvolvedRelation.service";
import { AreaTriggerInvolvedRelationCreateInput } from "./AreaTriggerInvolvedRelationCreateInput";
import { AreaTriggerInvolvedRelationWhereInput } from "./AreaTriggerInvolvedRelationWhereInput";
import { AreaTriggerInvolvedRelationWhereUniqueInput } from "./AreaTriggerInvolvedRelationWhereUniqueInput";
import { AreaTriggerInvolvedRelationFindManyArgs } from "./AreaTriggerInvolvedRelationFindManyArgs";
import { AreaTriggerInvolvedRelationUpdateInput } from "./AreaTriggerInvolvedRelationUpdateInput";
import { AreaTriggerInvolvedRelation } from "./AreaTriggerInvolvedRelation";

export class AreaTriggerInvolvedRelationGrpcControllerBase {
  constructor(protected readonly service: AreaTriggerInvolvedRelationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AreaTriggerInvolvedRelation })
  @GrpcMethod(
    "AreaTriggerInvolvedRelationService",
    "createAreaTriggerInvolvedRelation"
  )
  async createAreaTriggerInvolvedRelation(
    @common.Body() data: AreaTriggerInvolvedRelationCreateInput
  ): Promise<AreaTriggerInvolvedRelation> {
    return await this.service.createAreaTriggerInvolvedRelation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AreaTriggerInvolvedRelation] })
  @ApiNestedQuery(AreaTriggerInvolvedRelationFindManyArgs)
  @GrpcMethod(
    "AreaTriggerInvolvedRelationService",
    "areaTriggerInvolvedRelations"
  )
  async areaTriggerInvolvedRelations(
    @common.Req() request: Request
  ): Promise<AreaTriggerInvolvedRelation[]> {
    const args = plainToClass(
      AreaTriggerInvolvedRelationFindManyArgs,
      request.query
    );
    return this.service.areaTriggerInvolvedRelations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerInvolvedRelation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "AreaTriggerInvolvedRelationService",
    "areaTriggerInvolvedRelation"
  )
  async areaTriggerInvolvedRelation(
    @common.Param() params: AreaTriggerInvolvedRelationWhereUniqueInput
  ): Promise<AreaTriggerInvolvedRelation | null> {
    const result = await this.service.areaTriggerInvolvedRelation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        quest: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerInvolvedRelation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "AreaTriggerInvolvedRelationService",
    "updateAreaTriggerInvolvedRelation"
  )
  async updateAreaTriggerInvolvedRelation(
    @common.Param() params: AreaTriggerInvolvedRelationWhereUniqueInput,
    @common.Body() data: AreaTriggerInvolvedRelationUpdateInput
  ): Promise<AreaTriggerInvolvedRelation | null> {
    try {
      return await this.service.updateAreaTriggerInvolvedRelation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          quest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerInvolvedRelation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod(
    "AreaTriggerInvolvedRelationService",
    "deleteAreaTriggerInvolvedRelation"
  )
  async deleteAreaTriggerInvolvedRelation(
    @common.Param() params: AreaTriggerInvolvedRelationWhereUniqueInput
  ): Promise<AreaTriggerInvolvedRelation | null> {
    try {
      return await this.service.deleteAreaTriggerInvolvedRelation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          quest: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
