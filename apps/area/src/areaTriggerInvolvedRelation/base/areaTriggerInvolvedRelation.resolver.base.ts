/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaTriggerInvolvedRelation } from "./AreaTriggerInvolvedRelation";
import { AreaTriggerInvolvedRelationCountArgs } from "./AreaTriggerInvolvedRelationCountArgs";
import { AreaTriggerInvolvedRelationFindManyArgs } from "./AreaTriggerInvolvedRelationFindManyArgs";
import { AreaTriggerInvolvedRelationFindUniqueArgs } from "./AreaTriggerInvolvedRelationFindUniqueArgs";
import { CreateAreaTriggerInvolvedRelationArgs } from "./CreateAreaTriggerInvolvedRelationArgs";
import { UpdateAreaTriggerInvolvedRelationArgs } from "./UpdateAreaTriggerInvolvedRelationArgs";
import { DeleteAreaTriggerInvolvedRelationArgs } from "./DeleteAreaTriggerInvolvedRelationArgs";
import { AreaTriggerInvolvedRelationService } from "../areaTriggerInvolvedRelation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaTriggerInvolvedRelation)
export class AreaTriggerInvolvedRelationResolverBase {
  constructor(
    protected readonly service: AreaTriggerInvolvedRelationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerInvolvedRelation",
    action: "read",
    possession: "any",
  })
  async _areaTriggerInvolvedRelationsMeta(
    @graphql.Args() args: AreaTriggerInvolvedRelationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaTriggerInvolvedRelation])
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerInvolvedRelation",
    action: "read",
    possession: "any",
  })
  async areaTriggerInvolvedRelations(
    @graphql.Args() args: AreaTriggerInvolvedRelationFindManyArgs
  ): Promise<AreaTriggerInvolvedRelation[]> {
    return this.service.areaTriggerInvolvedRelations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaTriggerInvolvedRelation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerInvolvedRelation",
    action: "read",
    possession: "own",
  })
  async areaTriggerInvolvedRelation(
    @graphql.Args() args: AreaTriggerInvolvedRelationFindUniqueArgs
  ): Promise<AreaTriggerInvolvedRelation | null> {
    const result = await this.service.areaTriggerInvolvedRelation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerInvolvedRelation)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerInvolvedRelation",
    action: "create",
    possession: "any",
  })
  async createAreaTriggerInvolvedRelation(
    @graphql.Args() args: CreateAreaTriggerInvolvedRelationArgs
  ): Promise<AreaTriggerInvolvedRelation> {
    return await this.service.createAreaTriggerInvolvedRelation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerInvolvedRelation)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerInvolvedRelation",
    action: "update",
    possession: "any",
  })
  async updateAreaTriggerInvolvedRelation(
    @graphql.Args() args: UpdateAreaTriggerInvolvedRelationArgs
  ): Promise<AreaTriggerInvolvedRelation | null> {
    try {
      return await this.service.updateAreaTriggerInvolvedRelation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaTriggerInvolvedRelation)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerInvolvedRelation",
    action: "delete",
    possession: "any",
  })
  async deleteAreaTriggerInvolvedRelation(
    @graphql.Args() args: DeleteAreaTriggerInvolvedRelationArgs
  ): Promise<AreaTriggerInvolvedRelation | null> {
    try {
      return await this.service.deleteAreaTriggerInvolvedRelation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
