/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestMailSenderService } from "../questMailSender.service";
import { QuestMailSenderCreateInput } from "./QuestMailSenderCreateInput";
import { QuestMailSenderWhereInput } from "./QuestMailSenderWhereInput";
import { QuestMailSenderWhereUniqueInput } from "./QuestMailSenderWhereUniqueInput";
import { QuestMailSenderFindManyArgs } from "./QuestMailSenderFindManyArgs";
import { QuestMailSenderUpdateInput } from "./QuestMailSenderUpdateInput";
import { QuestMailSender } from "./QuestMailSender";

export class QuestMailSenderGrpcControllerBase {
  constructor(protected readonly service: QuestMailSenderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestMailSender })
  @GrpcMethod("QuestMailSenderService", "createQuestMailSender")
  async createQuestMailSender(
    @common.Body() data: QuestMailSenderCreateInput
  ): Promise<QuestMailSender> {
    return await this.service.createQuestMailSender({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestMailSender] })
  @ApiNestedQuery(QuestMailSenderFindManyArgs)
  @GrpcMethod("QuestMailSenderService", "questMailSenders")
  async questMailSenders(
    @common.Req() request: Request
  ): Promise<QuestMailSender[]> {
    const args = plainToClass(QuestMailSenderFindManyArgs, request.query);
    return this.service.questMailSenders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestMailSender })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestMailSenderService", "questMailSender")
  async questMailSender(
    @common.Param() params: QuestMailSenderWhereUniqueInput
  ): Promise<QuestMailSender | null> {
    const result = await this.service.questMailSender({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestMailSender })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestMailSenderService", "updateQuestMailSender")
  async updateQuestMailSender(
    @common.Param() params: QuestMailSenderWhereUniqueInput,
    @common.Body() data: QuestMailSenderUpdateInput
  ): Promise<QuestMailSender | null> {
    try {
      return await this.service.updateQuestMailSender({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestMailSender })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestMailSenderService", "deleteQuestMailSender")
  async deleteQuestMailSender(
    @common.Param() params: QuestMailSenderWhereUniqueInput
  ): Promise<QuestMailSender | null> {
    try {
      return await this.service.deleteQuestMailSender({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
