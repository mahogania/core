/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  QuestMailSender as PrismaQuestMailSender,
} from "@prisma/client";

export class QuestMailSenderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuestMailSenderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.questMailSender.count(args);
  }

  async questMailSenders(
    args: Prisma.QuestMailSenderFindManyArgs
  ): Promise<PrismaQuestMailSender[]> {
    return this.prisma.questMailSender.findMany(args);
  }
  async questMailSender(
    args: Prisma.QuestMailSenderFindUniqueArgs
  ): Promise<PrismaQuestMailSender | null> {
    return this.prisma.questMailSender.findUnique(args);
  }
  async createQuestMailSender(
    args: Prisma.QuestMailSenderCreateArgs
  ): Promise<PrismaQuestMailSender> {
    return this.prisma.questMailSender.create(args);
  }
  async updateQuestMailSender(
    args: Prisma.QuestMailSenderUpdateArgs
  ): Promise<PrismaQuestMailSender> {
    return this.prisma.questMailSender.update(args);
  }
  async deleteQuestMailSender(
    args: Prisma.QuestMailSenderDeleteArgs
  ): Promise<PrismaQuestMailSender> {
    return this.prisma.questMailSender.delete(args);
  }
}
