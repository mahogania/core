/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AreaTriggerTavern } from "./AreaTriggerTavern";
import { AreaTriggerTavernCountArgs } from "./AreaTriggerTavernCountArgs";
import { AreaTriggerTavernFindManyArgs } from "./AreaTriggerTavernFindManyArgs";
import { AreaTriggerTavernFindUniqueArgs } from "./AreaTriggerTavernFindUniqueArgs";
import { CreateAreaTriggerTavernArgs } from "./CreateAreaTriggerTavernArgs";
import { UpdateAreaTriggerTavernArgs } from "./UpdateAreaTriggerTavernArgs";
import { DeleteAreaTriggerTavernArgs } from "./DeleteAreaTriggerTavernArgs";
import { AreaTriggerTavernService } from "../areaTriggerTavern.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AreaTriggerTavern)
export class AreaTriggerTavernResolverBase {
  constructor(
    protected readonly service: AreaTriggerTavernService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTavern",
    action: "read",
    possession: "any",
  })
  async _areaTriggerTavernsMeta(
    @graphql.Args() args: AreaTriggerTavernCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AreaTriggerTavern])
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTavern",
    action: "read",
    possession: "any",
  })
  async areaTriggerTaverns(
    @graphql.Args() args: AreaTriggerTavernFindManyArgs
  ): Promise<AreaTriggerTavern[]> {
    return this.service.areaTriggerTaverns(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AreaTriggerTavern, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTavern",
    action: "read",
    possession: "own",
  })
  async areaTriggerTavern(
    @graphql.Args() args: AreaTriggerTavernFindUniqueArgs
  ): Promise<AreaTriggerTavern | null> {
    const result = await this.service.areaTriggerTavern(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTavern)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTavern",
    action: "create",
    possession: "any",
  })
  async createAreaTriggerTavern(
    @graphql.Args() args: CreateAreaTriggerTavernArgs
  ): Promise<AreaTriggerTavern> {
    return await this.service.createAreaTriggerTavern({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AreaTriggerTavern)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTavern",
    action: "update",
    possession: "any",
  })
  async updateAreaTriggerTavern(
    @graphql.Args() args: UpdateAreaTriggerTavernArgs
  ): Promise<AreaTriggerTavern | null> {
    try {
      return await this.service.updateAreaTriggerTavern({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AreaTriggerTavern)
  @nestAccessControl.UseRoles({
    resource: "AreaTriggerTavern",
    action: "delete",
    possession: "any",
  })
  async deleteAreaTriggerTavern(
    @graphql.Args() args: DeleteAreaTriggerTavernArgs
  ): Promise<AreaTriggerTavern | null> {
    try {
      return await this.service.deleteAreaTriggerTavern(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
