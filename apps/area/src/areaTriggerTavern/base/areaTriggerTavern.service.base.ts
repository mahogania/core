/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AreaTriggerTavern as PrismaAreaTriggerTavern,
} from "@prisma/client";

export class AreaTriggerTavernServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AreaTriggerTavernCountArgs, "select">
  ): Promise<number> {
    return this.prisma.areaTriggerTavern.count(args);
  }

  async areaTriggerTaverns(
    args: Prisma.AreaTriggerTavernFindManyArgs
  ): Promise<PrismaAreaTriggerTavern[]> {
    return this.prisma.areaTriggerTavern.findMany(args);
  }
  async areaTriggerTavern(
    args: Prisma.AreaTriggerTavernFindUniqueArgs
  ): Promise<PrismaAreaTriggerTavern | null> {
    return this.prisma.areaTriggerTavern.findUnique(args);
  }
  async createAreaTriggerTavern(
    args: Prisma.AreaTriggerTavernCreateArgs
  ): Promise<PrismaAreaTriggerTavern> {
    return this.prisma.areaTriggerTavern.create(args);
  }
  async updateAreaTriggerTavern(
    args: Prisma.AreaTriggerTavernUpdateArgs
  ): Promise<PrismaAreaTriggerTavern> {
    return this.prisma.areaTriggerTavern.update(args);
  }
  async deleteAreaTriggerTavern(
    args: Prisma.AreaTriggerTavernDeleteArgs
  ): Promise<PrismaAreaTriggerTavern> {
    return this.prisma.areaTriggerTavern.delete(args);
  }
}
