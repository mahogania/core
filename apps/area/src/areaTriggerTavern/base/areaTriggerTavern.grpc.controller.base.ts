/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { AreaTriggerTavernService } from "../areaTriggerTavern.service";
import { AreaTriggerTavernCreateInput } from "./AreaTriggerTavernCreateInput";
import { AreaTriggerTavernWhereInput } from "./AreaTriggerTavernWhereInput";
import { AreaTriggerTavernWhereUniqueInput } from "./AreaTriggerTavernWhereUniqueInput";
import { AreaTriggerTavernFindManyArgs } from "./AreaTriggerTavernFindManyArgs";
import { AreaTriggerTavernUpdateInput } from "./AreaTriggerTavernUpdateInput";
import { AreaTriggerTavern } from "./AreaTriggerTavern";

export class AreaTriggerTavernGrpcControllerBase {
  constructor(protected readonly service: AreaTriggerTavernService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AreaTriggerTavern })
  @GrpcMethod("AreaTriggerTavernService", "createAreaTriggerTavern")
  async createAreaTriggerTavern(
    @common.Body() data: AreaTriggerTavernCreateInput
  ): Promise<AreaTriggerTavern> {
    return await this.service.createAreaTriggerTavern({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AreaTriggerTavern] })
  @ApiNestedQuery(AreaTriggerTavernFindManyArgs)
  @GrpcMethod("AreaTriggerTavernService", "areaTriggerTaverns")
  async areaTriggerTaverns(
    @common.Req() request: Request
  ): Promise<AreaTriggerTavern[]> {
    const args = plainToClass(AreaTriggerTavernFindManyArgs, request.query);
    return this.service.areaTriggerTaverns({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerTavern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaTriggerTavernService", "areaTriggerTavern")
  async areaTriggerTavern(
    @common.Param() params: AreaTriggerTavernWhereUniqueInput
  ): Promise<AreaTriggerTavern | null> {
    const result = await this.service.areaTriggerTavern({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerTavern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaTriggerTavernService", "updateAreaTriggerTavern")
  async updateAreaTriggerTavern(
    @common.Param() params: AreaTriggerTavernWhereUniqueInput,
    @common.Body() data: AreaTriggerTavernUpdateInput
  ): Promise<AreaTriggerTavern | null> {
    try {
      return await this.service.updateAreaTriggerTavern({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AreaTriggerTavern })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("AreaTriggerTavernService", "deleteAreaTriggerTavern")
  async deleteAreaTriggerTavern(
    @common.Param() params: AreaTriggerTavernWhereUniqueInput
  ): Promise<AreaTriggerTavern | null> {
    try {
      return await this.service.deleteAreaTriggerTavern({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
