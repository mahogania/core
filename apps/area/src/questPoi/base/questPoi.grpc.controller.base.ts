/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { QuestPoiService } from "../questPoi.service";
import { QuestPoiCreateInput } from "./QuestPoiCreateInput";
import { QuestPoiWhereInput } from "./QuestPoiWhereInput";
import { QuestPoiWhereUniqueInput } from "./QuestPoiWhereUniqueInput";
import { QuestPoiFindManyArgs } from "./QuestPoiFindManyArgs";
import { QuestPoiUpdateInput } from "./QuestPoiUpdateInput";
import { QuestPoi } from "./QuestPoi";

export class QuestPoiGrpcControllerBase {
  constructor(protected readonly service: QuestPoiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QuestPoi })
  @GrpcMethod("QuestPoiService", "createQuestPoi")
  async createQuestPoi(
    @common.Body() data: QuestPoiCreateInput
  ): Promise<QuestPoi> {
    return await this.service.createQuestPoi({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QuestPoi] })
  @ApiNestedQuery(QuestPoiFindManyArgs)
  @GrpcMethod("QuestPoiService", "questPois")
  async questPois(@common.Req() request: Request): Promise<QuestPoi[]> {
    const args = plainToClass(QuestPoiFindManyArgs, request.query);
    return this.service.questPois({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QuestPoi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestPoiService", "questPoi")
  async questPoi(
    @common.Param() params: QuestPoiWhereUniqueInput
  ): Promise<QuestPoi | null> {
    const result = await this.service.questPoi({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QuestPoi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestPoiService", "updateQuestPoi")
  async updateQuestPoi(
    @common.Param() params: QuestPoiWhereUniqueInput,
    @common.Body() data: QuestPoiUpdateInput
  ): Promise<QuestPoi | null> {
    try {
      return await this.service.updateQuestPoi({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QuestPoi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("QuestPoiService", "deleteQuestPoi")
  async deleteQuestPoi(
    @common.Param() params: QuestPoiWhereUniqueInput
  ): Promise<QuestPoi | null> {
    try {
      return await this.service.deleteQuestPoi({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
