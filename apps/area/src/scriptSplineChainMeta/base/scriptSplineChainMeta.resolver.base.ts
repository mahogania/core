/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ScriptSplineChainMeta } from "./ScriptSplineChainMeta";
import { ScriptSplineChainMetaCountArgs } from "./ScriptSplineChainMetaCountArgs";
import { ScriptSplineChainMetaFindManyArgs } from "./ScriptSplineChainMetaFindManyArgs";
import { ScriptSplineChainMetaFindUniqueArgs } from "./ScriptSplineChainMetaFindUniqueArgs";
import { DeleteScriptSplineChainMetaArgs } from "./DeleteScriptSplineChainMetaArgs";
import { ScriptSplineChainMetaService } from "../scriptSplineChainMeta.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScriptSplineChainMeta)
export class ScriptSplineChainMetaResolverBase {
  constructor(
    protected readonly service: ScriptSplineChainMetaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScriptSplineChainMeta",
    action: "read",
    possession: "any",
  })
  async _scriptSplineChainMetasMeta(
    @graphql.Args() args: ScriptSplineChainMetaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScriptSplineChainMeta])
  @nestAccessControl.UseRoles({
    resource: "ScriptSplineChainMeta",
    action: "read",
    possession: "any",
  })
  async scriptSplineChainMetas(
    @graphql.Args() args: ScriptSplineChainMetaFindManyArgs
  ): Promise<ScriptSplineChainMeta[]> {
    return this.service.scriptSplineChainMetas(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScriptSplineChainMeta, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScriptSplineChainMeta",
    action: "read",
    possession: "own",
  })
  async scriptSplineChainMeta(
    @graphql.Args() args: ScriptSplineChainMetaFindUniqueArgs
  ): Promise<ScriptSplineChainMeta | null> {
    const result = await this.service.scriptSplineChainMeta(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScriptSplineChainMeta)
  @nestAccessControl.UseRoles({
    resource: "ScriptSplineChainMeta",
    action: "delete",
    possession: "any",
  })
  async deleteScriptSplineChainMeta(
    @graphql.Args() args: DeleteScriptSplineChainMetaArgs
  ): Promise<ScriptSplineChainMeta | null> {
    try {
      return await this.service.deleteScriptSplineChainMeta(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
