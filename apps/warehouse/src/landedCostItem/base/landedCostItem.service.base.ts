/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LandedCostItem as PrismaLandedCostItem } from "@prisma/client";

export class LandedCostItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LandedCostItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.landedCostItem.count(args);
  }

  async landedCostItems(
    args: Prisma.LandedCostItemFindManyArgs
  ): Promise<PrismaLandedCostItem[]> {
    return this.prisma.landedCostItem.findMany(args);
  }
  async landedCostItem(
    args: Prisma.LandedCostItemFindUniqueArgs
  ): Promise<PrismaLandedCostItem | null> {
    return this.prisma.landedCostItem.findUnique(args);
  }
  async createLandedCostItem(
    args: Prisma.LandedCostItemCreateArgs
  ): Promise<PrismaLandedCostItem> {
    return this.prisma.landedCostItem.create(args);
  }
  async updateLandedCostItem(
    args: Prisma.LandedCostItemUpdateArgs
  ): Promise<PrismaLandedCostItem> {
    return this.prisma.landedCostItem.update(args);
  }
  async deleteLandedCostItem(
    args: Prisma.LandedCostItemDeleteArgs
  ): Promise<PrismaLandedCostItem> {
    return this.prisma.landedCostItem.delete(args);
  }
}
