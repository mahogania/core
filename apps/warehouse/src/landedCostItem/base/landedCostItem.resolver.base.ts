/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LandedCostItem } from "./LandedCostItem";
import { LandedCostItemCountArgs } from "./LandedCostItemCountArgs";
import { LandedCostItemFindManyArgs } from "./LandedCostItemFindManyArgs";
import { LandedCostItemFindUniqueArgs } from "./LandedCostItemFindUniqueArgs";
import { CreateLandedCostItemArgs } from "./CreateLandedCostItemArgs";
import { UpdateLandedCostItemArgs } from "./UpdateLandedCostItemArgs";
import { DeleteLandedCostItemArgs } from "./DeleteLandedCostItemArgs";
import { LandedCostItemService } from "../landedCostItem.service";
@graphql.Resolver(() => LandedCostItem)
export class LandedCostItemResolverBase {
  constructor(protected readonly service: LandedCostItemService) {}

  async _landedCostItemsMeta(
    @graphql.Args() args: LandedCostItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LandedCostItem])
  async landedCostItems(
    @graphql.Args() args: LandedCostItemFindManyArgs
  ): Promise<LandedCostItem[]> {
    return this.service.landedCostItems(args);
  }

  @graphql.Query(() => LandedCostItem, { nullable: true })
  async landedCostItem(
    @graphql.Args() args: LandedCostItemFindUniqueArgs
  ): Promise<LandedCostItem | null> {
    const result = await this.service.landedCostItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LandedCostItem)
  async createLandedCostItem(
    @graphql.Args() args: CreateLandedCostItemArgs
  ): Promise<LandedCostItem> {
    return await this.service.createLandedCostItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LandedCostItem)
  async updateLandedCostItem(
    @graphql.Args() args: UpdateLandedCostItemArgs
  ): Promise<LandedCostItem | null> {
    try {
      return await this.service.updateLandedCostItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LandedCostItem)
  async deleteLandedCostItem(
    @graphql.Args() args: DeleteLandedCostItemArgs
  ): Promise<LandedCostItem | null> {
    try {
      return await this.service.deleteLandedCostItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
