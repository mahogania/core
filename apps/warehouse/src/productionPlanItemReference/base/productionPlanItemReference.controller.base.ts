/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionPlanItemReferenceService } from "../productionPlanItemReference.service";
import { ProductionPlanItemReferenceCreateInput } from "./ProductionPlanItemReferenceCreateInput";
import { ProductionPlanItemReference } from "./ProductionPlanItemReference";
import { ProductionPlanItemReferenceFindManyArgs } from "./ProductionPlanItemReferenceFindManyArgs";
import { ProductionPlanItemReferenceWhereUniqueInput } from "./ProductionPlanItemReferenceWhereUniqueInput";
import { ProductionPlanItemReferenceUpdateInput } from "./ProductionPlanItemReferenceUpdateInput";

export class ProductionPlanItemReferenceControllerBase {
  constructor(protected readonly service: ProductionPlanItemReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionPlanItemReference })
  async createProductionPlanItemReference(
    @common.Body() data: ProductionPlanItemReferenceCreateInput
  ): Promise<ProductionPlanItemReference> {
    return await this.service.createProductionPlanItemReference({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemReference: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        salesOrder: true,
        salesOrderItem: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionPlanItemReference] })
  @ApiNestedQuery(ProductionPlanItemReferenceFindManyArgs)
  async productionPlanItemReferences(
    @common.Req() request: Request
  ): Promise<ProductionPlanItemReference[]> {
    const args = plainToClass(
      ProductionPlanItemReferenceFindManyArgs,
      request.query
    );
    return this.service.productionPlanItemReferences({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemReference: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        salesOrder: true,
        salesOrderItem: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanItemReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionPlanItemReference(
    @common.Param() params: ProductionPlanItemReferenceWhereUniqueInput
  ): Promise<ProductionPlanItemReference | null> {
    const result = await this.service.productionPlanItemReference({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemReference: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        salesOrder: true,
        salesOrderItem: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanItemReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionPlanItemReference(
    @common.Param() params: ProductionPlanItemReferenceWhereUniqueInput,
    @common.Body() data: ProductionPlanItemReferenceUpdateInput
  ): Promise<ProductionPlanItemReference | null> {
    try {
      return await this.service.updateProductionPlanItemReference({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemReference: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          salesOrder: true,
          salesOrderItem: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanItemReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionPlanItemReference(
    @common.Param() params: ProductionPlanItemReferenceWhereUniqueInput
  ): Promise<ProductionPlanItemReference | null> {
    try {
      return await this.service.deleteProductionPlanItemReference({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemReference: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          salesOrder: true,
          salesOrderItem: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
