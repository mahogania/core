/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomScrapItemService } from "../bomScrapItem.service";
import { BomScrapItemCreateInput } from "./BomScrapItemCreateInput";
import { BomScrapItem } from "./BomScrapItem";
import { BomScrapItemFindManyArgs } from "./BomScrapItemFindManyArgs";
import { BomScrapItemWhereUniqueInput } from "./BomScrapItemWhereUniqueInput";
import { BomScrapItemUpdateInput } from "./BomScrapItemUpdateInput";

export class BomScrapItemControllerBase {
  constructor(protected readonly service: BomScrapItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomScrapItem })
  async createBomScrapItem(
    @common.Body() data: BomScrapItemCreateInput
  ): Promise<BomScrapItem> {
    return await this.service.createBomScrapItem({
      data: data,
      select: {
        amount: true,
        baseAmount: true,
        baseRate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        rate: true,
        stockQty: true,
        stockUom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomScrapItem] })
  @ApiNestedQuery(BomScrapItemFindManyArgs)
  async bomScrapItems(@common.Req() request: Request): Promise<BomScrapItem[]> {
    const args = plainToClass(BomScrapItemFindManyArgs, request.query);
    return this.service.bomScrapItems({
      ...args,
      select: {
        amount: true,
        baseAmount: true,
        baseRate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        rate: true,
        stockQty: true,
        stockUom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomScrapItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomScrapItem(
    @common.Param() params: BomScrapItemWhereUniqueInput
  ): Promise<BomScrapItem | null> {
    const result = await this.service.bomScrapItem({
      where: params,
      select: {
        amount: true,
        baseAmount: true,
        baseRate: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        rate: true,
        stockQty: true,
        stockUom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomScrapItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomScrapItem(
    @common.Param() params: BomScrapItemWhereUniqueInput,
    @common.Body() data: BomScrapItemUpdateInput
  ): Promise<BomScrapItem | null> {
    try {
      return await this.service.updateBomScrapItem({
        where: params,
        data: data,
        select: {
          amount: true,
          baseAmount: true,
          baseRate: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          rate: true,
          stockQty: true,
          stockUom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomScrapItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomScrapItem(
    @common.Param() params: BomScrapItemWhereUniqueInput
  ): Promise<BomScrapItem | null> {
    try {
      return await this.service.deleteBomScrapItem({
        where: params,
        select: {
          amount: true,
          baseAmount: true,
          baseRate: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          rate: true,
          stockQty: true,
          stockUom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
