/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BomScrapItem as PrismaBomScrapItem } from "@prisma/client";

export class BomScrapItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BomScrapItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bomScrapItem.count(args);
  }

  async bomScrapItems(
    args: Prisma.BomScrapItemFindManyArgs
  ): Promise<PrismaBomScrapItem[]> {
    return this.prisma.bomScrapItem.findMany(args);
  }
  async bomScrapItem(
    args: Prisma.BomScrapItemFindUniqueArgs
  ): Promise<PrismaBomScrapItem | null> {
    return this.prisma.bomScrapItem.findUnique(args);
  }
  async createBomScrapItem(
    args: Prisma.BomScrapItemCreateArgs
  ): Promise<PrismaBomScrapItem> {
    return this.prisma.bomScrapItem.create(args);
  }
  async updateBomScrapItem(
    args: Prisma.BomScrapItemUpdateArgs
  ): Promise<PrismaBomScrapItem> {
    return this.prisma.bomScrapItem.update(args);
  }
  async deleteBomScrapItem(
    args: Prisma.BomScrapItemDeleteArgs
  ): Promise<PrismaBomScrapItem> {
    return this.prisma.bomScrapItem.delete(args);
  }
}
