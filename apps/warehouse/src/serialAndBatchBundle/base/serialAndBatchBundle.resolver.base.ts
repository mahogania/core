/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SerialAndBatchBundle } from "./SerialAndBatchBundle";
import { SerialAndBatchBundleCountArgs } from "./SerialAndBatchBundleCountArgs";
import { SerialAndBatchBundleFindManyArgs } from "./SerialAndBatchBundleFindManyArgs";
import { SerialAndBatchBundleFindUniqueArgs } from "./SerialAndBatchBundleFindUniqueArgs";
import { CreateSerialAndBatchBundleArgs } from "./CreateSerialAndBatchBundleArgs";
import { UpdateSerialAndBatchBundleArgs } from "./UpdateSerialAndBatchBundleArgs";
import { DeleteSerialAndBatchBundleArgs } from "./DeleteSerialAndBatchBundleArgs";
import { SerialAndBatchBundleService } from "../serialAndBatchBundle.service";
@graphql.Resolver(() => SerialAndBatchBundle)
export class SerialAndBatchBundleResolverBase {
  constructor(protected readonly service: SerialAndBatchBundleService) {}

  async _serialAndBatchBundlesMeta(
    @graphql.Args() args: SerialAndBatchBundleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SerialAndBatchBundle])
  async serialAndBatchBundles(
    @graphql.Args() args: SerialAndBatchBundleFindManyArgs
  ): Promise<SerialAndBatchBundle[]> {
    return this.service.serialAndBatchBundles(args);
  }

  @graphql.Query(() => SerialAndBatchBundle, { nullable: true })
  async serialAndBatchBundle(
    @graphql.Args() args: SerialAndBatchBundleFindUniqueArgs
  ): Promise<SerialAndBatchBundle | null> {
    const result = await this.service.serialAndBatchBundle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SerialAndBatchBundle)
  async createSerialAndBatchBundle(
    @graphql.Args() args: CreateSerialAndBatchBundleArgs
  ): Promise<SerialAndBatchBundle> {
    return await this.service.createSerialAndBatchBundle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SerialAndBatchBundle)
  async updateSerialAndBatchBundle(
    @graphql.Args() args: UpdateSerialAndBatchBundleArgs
  ): Promise<SerialAndBatchBundle | null> {
    try {
      return await this.service.updateSerialAndBatchBundle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SerialAndBatchBundle)
  async deleteSerialAndBatchBundle(
    @graphql.Args() args: DeleteSerialAndBatchBundleArgs
  ): Promise<SerialAndBatchBundle | null> {
    try {
      return await this.service.deleteSerialAndBatchBundle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
