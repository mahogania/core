/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BatchService } from "../batch.service";
import { BatchCreateInput } from "./BatchCreateInput";
import { Batch } from "./Batch";
import { BatchFindManyArgs } from "./BatchFindManyArgs";
import { BatchWhereUniqueInput } from "./BatchWhereUniqueInput";
import { BatchUpdateInput } from "./BatchUpdateInput";

export class BatchControllerBase {
  constructor(protected readonly service: BatchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Batch })
  async createBatch(@common.Body() data: BatchCreateInput): Promise<Batch> {
    return await this.service.createBatch({
      data: data,
      select: {
        batchId: true,
        batchQty: true,
        createdAt: true,
        description: true,
        disabled: true,
        docstatus: true,
        expiryDate: true,
        id: true,
        idx: true,
        image: true,
        item: true,
        itemName: true,
        manufacturingDate: true,
        owner: true,
        parentBatch: true,
        producedQty: true,
        qtyToProduce: true,
        referenceDoctype: true,
        referenceName: true,
        stockUom: true,
        supplier: true,
        updatedAt: true,
        useBatchwiseValuation: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Batch] })
  @ApiNestedQuery(BatchFindManyArgs)
  async batches(@common.Req() request: Request): Promise<Batch[]> {
    const args = plainToClass(BatchFindManyArgs, request.query);
    return this.service.batches({
      ...args,
      select: {
        batchId: true,
        batchQty: true,
        createdAt: true,
        description: true,
        disabled: true,
        docstatus: true,
        expiryDate: true,
        id: true,
        idx: true,
        image: true,
        item: true,
        itemName: true,
        manufacturingDate: true,
        owner: true,
        parentBatch: true,
        producedQty: true,
        qtyToProduce: true,
        referenceDoctype: true,
        referenceName: true,
        stockUom: true,
        supplier: true,
        updatedAt: true,
        useBatchwiseValuation: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Batch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async batch(
    @common.Param() params: BatchWhereUniqueInput
  ): Promise<Batch | null> {
    const result = await this.service.batch({
      where: params,
      select: {
        batchId: true,
        batchQty: true,
        createdAt: true,
        description: true,
        disabled: true,
        docstatus: true,
        expiryDate: true,
        id: true,
        idx: true,
        image: true,
        item: true,
        itemName: true,
        manufacturingDate: true,
        owner: true,
        parentBatch: true,
        producedQty: true,
        qtyToProduce: true,
        referenceDoctype: true,
        referenceName: true,
        stockUom: true,
        supplier: true,
        updatedAt: true,
        useBatchwiseValuation: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Batch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBatch(
    @common.Param() params: BatchWhereUniqueInput,
    @common.Body() data: BatchUpdateInput
  ): Promise<Batch | null> {
    try {
      return await this.service.updateBatch({
        where: params,
        data: data,
        select: {
          batchId: true,
          batchQty: true,
          createdAt: true,
          description: true,
          disabled: true,
          docstatus: true,
          expiryDate: true,
          id: true,
          idx: true,
          image: true,
          item: true,
          itemName: true,
          manufacturingDate: true,
          owner: true,
          parentBatch: true,
          producedQty: true,
          qtyToProduce: true,
          referenceDoctype: true,
          referenceName: true,
          stockUom: true,
          supplier: true,
          updatedAt: true,
          useBatchwiseValuation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Batch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBatch(
    @common.Param() params: BatchWhereUniqueInput
  ): Promise<Batch | null> {
    try {
      return await this.service.deleteBatch({
        where: params,
        select: {
          batchId: true,
          batchQty: true,
          createdAt: true,
          description: true,
          disabled: true,
          docstatus: true,
          expiryDate: true,
          id: true,
          idx: true,
          image: true,
          item: true,
          itemName: true,
          manufacturingDate: true,
          owner: true,
          parentBatch: true,
          producedQty: true,
          qtyToProduce: true,
          referenceDoctype: true,
          referenceName: true,
          stockUom: true,
          supplier: true,
          updatedAt: true,
          useBatchwiseValuation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
