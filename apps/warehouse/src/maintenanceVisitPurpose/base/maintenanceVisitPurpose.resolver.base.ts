/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MaintenanceVisitPurpose } from "./MaintenanceVisitPurpose";
import { MaintenanceVisitPurposeCountArgs } from "./MaintenanceVisitPurposeCountArgs";
import { MaintenanceVisitPurposeFindManyArgs } from "./MaintenanceVisitPurposeFindManyArgs";
import { MaintenanceVisitPurposeFindUniqueArgs } from "./MaintenanceVisitPurposeFindUniqueArgs";
import { CreateMaintenanceVisitPurposeArgs } from "./CreateMaintenanceVisitPurposeArgs";
import { UpdateMaintenanceVisitPurposeArgs } from "./UpdateMaintenanceVisitPurposeArgs";
import { DeleteMaintenanceVisitPurposeArgs } from "./DeleteMaintenanceVisitPurposeArgs";
import { MaintenanceVisitPurposeService } from "../maintenanceVisitPurpose.service";
@graphql.Resolver(() => MaintenanceVisitPurpose)
export class MaintenanceVisitPurposeResolverBase {
  constructor(protected readonly service: MaintenanceVisitPurposeService) {}

  async _maintenanceVisitPurposesMeta(
    @graphql.Args() args: MaintenanceVisitPurposeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MaintenanceVisitPurpose])
  async maintenanceVisitPurposes(
    @graphql.Args() args: MaintenanceVisitPurposeFindManyArgs
  ): Promise<MaintenanceVisitPurpose[]> {
    return this.service.maintenanceVisitPurposes(args);
  }

  @graphql.Query(() => MaintenanceVisitPurpose, { nullable: true })
  async maintenanceVisitPurpose(
    @graphql.Args() args: MaintenanceVisitPurposeFindUniqueArgs
  ): Promise<MaintenanceVisitPurpose | null> {
    const result = await this.service.maintenanceVisitPurpose(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MaintenanceVisitPurpose)
  async createMaintenanceVisitPurpose(
    @graphql.Args() args: CreateMaintenanceVisitPurposeArgs
  ): Promise<MaintenanceVisitPurpose> {
    return await this.service.createMaintenanceVisitPurpose({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MaintenanceVisitPurpose)
  async updateMaintenanceVisitPurpose(
    @graphql.Args() args: UpdateMaintenanceVisitPurposeArgs
  ): Promise<MaintenanceVisitPurpose | null> {
    try {
      return await this.service.updateMaintenanceVisitPurpose({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceVisitPurpose)
  async deleteMaintenanceVisitPurpose(
    @graphql.Args() args: DeleteMaintenanceVisitPurposeArgs
  ): Promise<MaintenanceVisitPurpose | null> {
    try {
      return await this.service.deleteMaintenanceVisitPurpose(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
