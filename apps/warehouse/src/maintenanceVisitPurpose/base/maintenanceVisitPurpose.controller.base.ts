/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceVisitPurposeService } from "../maintenanceVisitPurpose.service";
import { MaintenanceVisitPurposeCreateInput } from "./MaintenanceVisitPurposeCreateInput";
import { MaintenanceVisitPurpose } from "./MaintenanceVisitPurpose";
import { MaintenanceVisitPurposeFindManyArgs } from "./MaintenanceVisitPurposeFindManyArgs";
import { MaintenanceVisitPurposeWhereUniqueInput } from "./MaintenanceVisitPurposeWhereUniqueInput";
import { MaintenanceVisitPurposeUpdateInput } from "./MaintenanceVisitPurposeUpdateInput";

export class MaintenanceVisitPurposeControllerBase {
  constructor(protected readonly service: MaintenanceVisitPurposeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceVisitPurpose })
  async createMaintenanceVisitPurpose(
    @common.Body() data: MaintenanceVisitPurposeCreateInput
  ): Promise<MaintenanceVisitPurpose> {
    return await this.service.createMaintenanceVisitPurpose({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        maintenanceScheduleDetail: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        prevdocDocname: true,
        prevdocDoctype: true,
        serialNo: true,
        servicePerson: true,
        updatedAt: true,
        workDone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceVisitPurpose] })
  @ApiNestedQuery(MaintenanceVisitPurposeFindManyArgs)
  async maintenanceVisitPurposes(
    @common.Req() request: Request
  ): Promise<MaintenanceVisitPurpose[]> {
    const args = plainToClass(
      MaintenanceVisitPurposeFindManyArgs,
      request.query
    );
    return this.service.maintenanceVisitPurposes({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        maintenanceScheduleDetail: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        prevdocDocname: true,
        prevdocDoctype: true,
        serialNo: true,
        servicePerson: true,
        updatedAt: true,
        workDone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceVisitPurpose })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceVisitPurpose(
    @common.Param() params: MaintenanceVisitPurposeWhereUniqueInput
  ): Promise<MaintenanceVisitPurpose | null> {
    const result = await this.service.maintenanceVisitPurpose({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        maintenanceScheduleDetail: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        prevdocDocname: true,
        prevdocDoctype: true,
        serialNo: true,
        servicePerson: true,
        updatedAt: true,
        workDone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceVisitPurpose })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceVisitPurpose(
    @common.Param() params: MaintenanceVisitPurposeWhereUniqueInput,
    @common.Body() data: MaintenanceVisitPurposeUpdateInput
  ): Promise<MaintenanceVisitPurpose | null> {
    try {
      return await this.service.updateMaintenanceVisitPurpose({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          maintenanceScheduleDetail: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          prevdocDocname: true,
          prevdocDoctype: true,
          serialNo: true,
          servicePerson: true,
          updatedAt: true,
          workDone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceVisitPurpose })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceVisitPurpose(
    @common.Param() params: MaintenanceVisitPurposeWhereUniqueInput
  ): Promise<MaintenanceVisitPurpose | null> {
    try {
      return await this.service.deleteMaintenanceVisitPurpose({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          maintenanceScheduleDetail: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          prevdocDocname: true,
          prevdocDoctype: true,
          serialNo: true,
          servicePerson: true,
          updatedAt: true,
          workDone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
