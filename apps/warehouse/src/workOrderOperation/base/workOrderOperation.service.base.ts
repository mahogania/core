/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WorkOrderOperation as PrismaWorkOrderOperation,
} from "@prisma/client";

export class WorkOrderOperationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkOrderOperationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workOrderOperation.count(args);
  }

  async workOrderOperations(
    args: Prisma.WorkOrderOperationFindManyArgs
  ): Promise<PrismaWorkOrderOperation[]> {
    return this.prisma.workOrderOperation.findMany(args);
  }
  async workOrderOperation(
    args: Prisma.WorkOrderOperationFindUniqueArgs
  ): Promise<PrismaWorkOrderOperation | null> {
    return this.prisma.workOrderOperation.findUnique(args);
  }
  async createWorkOrderOperation(
    args: Prisma.WorkOrderOperationCreateArgs
  ): Promise<PrismaWorkOrderOperation> {
    return this.prisma.workOrderOperation.create(args);
  }
  async updateWorkOrderOperation(
    args: Prisma.WorkOrderOperationUpdateArgs
  ): Promise<PrismaWorkOrderOperation> {
    return this.prisma.workOrderOperation.update(args);
  }
  async deleteWorkOrderOperation(
    args: Prisma.WorkOrderOperationDeleteArgs
  ): Promise<PrismaWorkOrderOperation> {
    return this.prisma.workOrderOperation.delete(args);
  }
}
