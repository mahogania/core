/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StockReconciliationItem } from "./StockReconciliationItem";
import { StockReconciliationItemCountArgs } from "./StockReconciliationItemCountArgs";
import { StockReconciliationItemFindManyArgs } from "./StockReconciliationItemFindManyArgs";
import { StockReconciliationItemFindUniqueArgs } from "./StockReconciliationItemFindUniqueArgs";
import { CreateStockReconciliationItemArgs } from "./CreateStockReconciliationItemArgs";
import { UpdateStockReconciliationItemArgs } from "./UpdateStockReconciliationItemArgs";
import { DeleteStockReconciliationItemArgs } from "./DeleteStockReconciliationItemArgs";
import { StockReconciliationItemService } from "../stockReconciliationItem.service";
@graphql.Resolver(() => StockReconciliationItem)
export class StockReconciliationItemResolverBase {
  constructor(protected readonly service: StockReconciliationItemService) {}

  async _stockReconciliationItemsMeta(
    @graphql.Args() args: StockReconciliationItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StockReconciliationItem])
  async stockReconciliationItems(
    @graphql.Args() args: StockReconciliationItemFindManyArgs
  ): Promise<StockReconciliationItem[]> {
    return this.service.stockReconciliationItems(args);
  }

  @graphql.Query(() => StockReconciliationItem, { nullable: true })
  async stockReconciliationItem(
    @graphql.Args() args: StockReconciliationItemFindUniqueArgs
  ): Promise<StockReconciliationItem | null> {
    const result = await this.service.stockReconciliationItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StockReconciliationItem)
  async createStockReconciliationItem(
    @graphql.Args() args: CreateStockReconciliationItemArgs
  ): Promise<StockReconciliationItem> {
    return await this.service.createStockReconciliationItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StockReconciliationItem)
  async updateStockReconciliationItem(
    @graphql.Args() args: UpdateStockReconciliationItemArgs
  ): Promise<StockReconciliationItem | null> {
    try {
      return await this.service.updateStockReconciliationItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockReconciliationItem)
  async deleteStockReconciliationItem(
    @graphql.Args() args: DeleteStockReconciliationItemArgs
  ): Promise<StockReconciliationItem | null> {
    try {
      return await this.service.deleteStockReconciliationItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
