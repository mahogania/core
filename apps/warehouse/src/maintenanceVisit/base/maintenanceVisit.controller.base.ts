/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceVisitService } from "../maintenanceVisit.service";
import { MaintenanceVisitCreateInput } from "./MaintenanceVisitCreateInput";
import { MaintenanceVisit } from "./MaintenanceVisit";
import { MaintenanceVisitFindManyArgs } from "./MaintenanceVisitFindManyArgs";
import { MaintenanceVisitWhereUniqueInput } from "./MaintenanceVisitWhereUniqueInput";
import { MaintenanceVisitUpdateInput } from "./MaintenanceVisitUpdateInput";

export class MaintenanceVisitControllerBase {
  constructor(protected readonly service: MaintenanceVisitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceVisit })
  async createMaintenanceVisit(
    @common.Body() data: MaintenanceVisitCreateInput
  ): Promise<MaintenanceVisit> {
    return await this.service.createMaintenanceVisit({
      data: data,
      select: {
        addressDisplay: true,
        amendedFrom: true,
        company: true,
        completionStatus: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerAddress: true,
        customerFeedback: true,
        customerGroup: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        maintenanceSchedule: true,
        maintenanceScheduleDetail: true,
        maintenanceType: true,
        mntcDate: true,
        mntcTime: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        status: true,
        territory: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceVisit] })
  @ApiNestedQuery(MaintenanceVisitFindManyArgs)
  async maintenanceVisits(
    @common.Req() request: Request
  ): Promise<MaintenanceVisit[]> {
    const args = plainToClass(MaintenanceVisitFindManyArgs, request.query);
    return this.service.maintenanceVisits({
      ...args,
      select: {
        addressDisplay: true,
        amendedFrom: true,
        company: true,
        completionStatus: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerAddress: true,
        customerFeedback: true,
        customerGroup: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        maintenanceSchedule: true,
        maintenanceScheduleDetail: true,
        maintenanceType: true,
        mntcDate: true,
        mntcTime: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        status: true,
        territory: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceVisit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceVisit(
    @common.Param() params: MaintenanceVisitWhereUniqueInput
  ): Promise<MaintenanceVisit | null> {
    const result = await this.service.maintenanceVisit({
      where: params,
      select: {
        addressDisplay: true,
        amendedFrom: true,
        company: true,
        completionStatus: true,
        contactDisplay: true,
        contactEmail: true,
        contactMobile: true,
        contactPerson: true,
        createdAt: true,
        creation: true,
        customer: true,
        customerAddress: true,
        customerFeedback: true,
        customerGroup: true,
        customerName: true,
        docstatus: true,
        id: true,
        idx: true,
        maintenanceSchedule: true,
        maintenanceScheduleDetail: true,
        maintenanceType: true,
        mntcDate: true,
        mntcTime: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        status: true,
        territory: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceVisit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceVisit(
    @common.Param() params: MaintenanceVisitWhereUniqueInput,
    @common.Body() data: MaintenanceVisitUpdateInput
  ): Promise<MaintenanceVisit | null> {
    try {
      return await this.service.updateMaintenanceVisit({
        where: params,
        data: data,
        select: {
          addressDisplay: true,
          amendedFrom: true,
          company: true,
          completionStatus: true,
          contactDisplay: true,
          contactEmail: true,
          contactMobile: true,
          contactPerson: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerAddress: true,
          customerFeedback: true,
          customerGroup: true,
          customerName: true,
          docstatus: true,
          id: true,
          idx: true,
          maintenanceSchedule: true,
          maintenanceScheduleDetail: true,
          maintenanceType: true,
          mntcDate: true,
          mntcTime: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          status: true,
          territory: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceVisit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceVisit(
    @common.Param() params: MaintenanceVisitWhereUniqueInput
  ): Promise<MaintenanceVisit | null> {
    try {
      return await this.service.deleteMaintenanceVisit({
        where: params,
        select: {
          addressDisplay: true,
          amendedFrom: true,
          company: true,
          completionStatus: true,
          contactDisplay: true,
          contactEmail: true,
          contactMobile: true,
          contactPerson: true,
          createdAt: true,
          creation: true,
          customer: true,
          customerAddress: true,
          customerFeedback: true,
          customerGroup: true,
          customerName: true,
          docstatus: true,
          id: true,
          idx: true,
          maintenanceSchedule: true,
          maintenanceScheduleDetail: true,
          maintenanceType: true,
          mntcDate: true,
          mntcTime: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          status: true,
          territory: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
