/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomUpdateBatchService } from "../bomUpdateBatch.service";
import { BomUpdateBatchCreateInput } from "./BomUpdateBatchCreateInput";
import { BomUpdateBatch } from "./BomUpdateBatch";
import { BomUpdateBatchFindManyArgs } from "./BomUpdateBatchFindManyArgs";
import { BomUpdateBatchWhereUniqueInput } from "./BomUpdateBatchWhereUniqueInput";
import { BomUpdateBatchUpdateInput } from "./BomUpdateBatchUpdateInput";

export class BomUpdateBatchControllerBase {
  constructor(protected readonly service: BomUpdateBatchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomUpdateBatch })
  async createBomUpdateBatch(
    @common.Body() data: BomUpdateBatchCreateInput
  ): Promise<BomUpdateBatch> {
    return await this.service.createBomUpdateBatch({
      data: data,
      select: {
        batchNo: true,
        bomsUpdated: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        level: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomUpdateBatch] })
  @ApiNestedQuery(BomUpdateBatchFindManyArgs)
  async bomUpdateBatches(
    @common.Req() request: Request
  ): Promise<BomUpdateBatch[]> {
    const args = plainToClass(BomUpdateBatchFindManyArgs, request.query);
    return this.service.bomUpdateBatches({
      ...args,
      select: {
        batchNo: true,
        bomsUpdated: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        level: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomUpdateBatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomUpdateBatch(
    @common.Param() params: BomUpdateBatchWhereUniqueInput
  ): Promise<BomUpdateBatch | null> {
    const result = await this.service.bomUpdateBatch({
      where: params,
      select: {
        batchNo: true,
        bomsUpdated: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        level: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomUpdateBatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomUpdateBatch(
    @common.Param() params: BomUpdateBatchWhereUniqueInput,
    @common.Body() data: BomUpdateBatchUpdateInput
  ): Promise<BomUpdateBatch | null> {
    try {
      return await this.service.updateBomUpdateBatch({
        where: params,
        data: data,
        select: {
          batchNo: true,
          bomsUpdated: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          level: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomUpdateBatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomUpdateBatch(
    @common.Param() params: BomUpdateBatchWhereUniqueInput
  ): Promise<BomUpdateBatch | null> {
    try {
      return await this.service.deleteBomUpdateBatch({
        where: params,
        select: {
          batchNo: true,
          bomsUpdated: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          level: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
