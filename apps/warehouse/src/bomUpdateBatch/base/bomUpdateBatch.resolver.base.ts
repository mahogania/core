/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomUpdateBatch } from "./BomUpdateBatch";
import { BomUpdateBatchCountArgs } from "./BomUpdateBatchCountArgs";
import { BomUpdateBatchFindManyArgs } from "./BomUpdateBatchFindManyArgs";
import { BomUpdateBatchFindUniqueArgs } from "./BomUpdateBatchFindUniqueArgs";
import { CreateBomUpdateBatchArgs } from "./CreateBomUpdateBatchArgs";
import { UpdateBomUpdateBatchArgs } from "./UpdateBomUpdateBatchArgs";
import { DeleteBomUpdateBatchArgs } from "./DeleteBomUpdateBatchArgs";
import { BomUpdateBatchService } from "../bomUpdateBatch.service";
@graphql.Resolver(() => BomUpdateBatch)
export class BomUpdateBatchResolverBase {
  constructor(protected readonly service: BomUpdateBatchService) {}

  async _bomUpdateBatchesMeta(
    @graphql.Args() args: BomUpdateBatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomUpdateBatch])
  async bomUpdateBatches(
    @graphql.Args() args: BomUpdateBatchFindManyArgs
  ): Promise<BomUpdateBatch[]> {
    return this.service.bomUpdateBatches(args);
  }

  @graphql.Query(() => BomUpdateBatch, { nullable: true })
  async bomUpdateBatch(
    @graphql.Args() args: BomUpdateBatchFindUniqueArgs
  ): Promise<BomUpdateBatch | null> {
    const result = await this.service.bomUpdateBatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomUpdateBatch)
  async createBomUpdateBatch(
    @graphql.Args() args: CreateBomUpdateBatchArgs
  ): Promise<BomUpdateBatch> {
    return await this.service.createBomUpdateBatch({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomUpdateBatch)
  async updateBomUpdateBatch(
    @graphql.Args() args: UpdateBomUpdateBatchArgs
  ): Promise<BomUpdateBatch | null> {
    try {
      return await this.service.updateBomUpdateBatch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomUpdateBatch)
  async deleteBomUpdateBatch(
    @graphql.Args() args: DeleteBomUpdateBatchArgs
  ): Promise<BomUpdateBatch | null> {
    try {
      return await this.service.deleteBomUpdateBatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
