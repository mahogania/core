/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UomConversionDetail } from "./UomConversionDetail";
import { UomConversionDetailCountArgs } from "./UomConversionDetailCountArgs";
import { UomConversionDetailFindManyArgs } from "./UomConversionDetailFindManyArgs";
import { UomConversionDetailFindUniqueArgs } from "./UomConversionDetailFindUniqueArgs";
import { CreateUomConversionDetailArgs } from "./CreateUomConversionDetailArgs";
import { UpdateUomConversionDetailArgs } from "./UpdateUomConversionDetailArgs";
import { DeleteUomConversionDetailArgs } from "./DeleteUomConversionDetailArgs";
import { UomConversionDetailService } from "../uomConversionDetail.service";
@graphql.Resolver(() => UomConversionDetail)
export class UomConversionDetailResolverBase {
  constructor(protected readonly service: UomConversionDetailService) {}

  async _uomConversionDetailsMeta(
    @graphql.Args() args: UomConversionDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UomConversionDetail])
  async uomConversionDetails(
    @graphql.Args() args: UomConversionDetailFindManyArgs
  ): Promise<UomConversionDetail[]> {
    return this.service.uomConversionDetails(args);
  }

  @graphql.Query(() => UomConversionDetail, { nullable: true })
  async uomConversionDetail(
    @graphql.Args() args: UomConversionDetailFindUniqueArgs
  ): Promise<UomConversionDetail | null> {
    const result = await this.service.uomConversionDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UomConversionDetail)
  async createUomConversionDetail(
    @graphql.Args() args: CreateUomConversionDetailArgs
  ): Promise<UomConversionDetail> {
    return await this.service.createUomConversionDetail({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UomConversionDetail)
  async updateUomConversionDetail(
    @graphql.Args() args: UpdateUomConversionDetailArgs
  ): Promise<UomConversionDetail | null> {
    try {
      return await this.service.updateUomConversionDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UomConversionDetail)
  async deleteUomConversionDetail(
    @graphql.Args() args: DeleteUomConversionDetailArgs
  ): Promise<UomConversionDetail | null> {
    try {
      return await this.service.deleteUomConversionDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
