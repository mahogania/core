/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UomConversionDetailService } from "../uomConversionDetail.service";
import { UomConversionDetailCreateInput } from "./UomConversionDetailCreateInput";
import { UomConversionDetail } from "./UomConversionDetail";
import { UomConversionDetailFindManyArgs } from "./UomConversionDetailFindManyArgs";
import { UomConversionDetailWhereUniqueInput } from "./UomConversionDetailWhereUniqueInput";
import { UomConversionDetailUpdateInput } from "./UomConversionDetailUpdateInput";

export class UomConversionDetailControllerBase {
  constructor(protected readonly service: UomConversionDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UomConversionDetail })
  async createUomConversionDetail(
    @common.Body() data: UomConversionDetailCreateInput
  ): Promise<UomConversionDetail> {
    return await this.service.createUomConversionDetail({
      data: data,
      select: {
        conversionFactor: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UomConversionDetail] })
  @ApiNestedQuery(UomConversionDetailFindManyArgs)
  async uomConversionDetails(
    @common.Req() request: Request
  ): Promise<UomConversionDetail[]> {
    const args = plainToClass(UomConversionDetailFindManyArgs, request.query);
    return this.service.uomConversionDetails({
      ...args,
      select: {
        conversionFactor: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UomConversionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uomConversionDetail(
    @common.Param() params: UomConversionDetailWhereUniqueInput
  ): Promise<UomConversionDetail | null> {
    const result = await this.service.uomConversionDetail({
      where: params,
      select: {
        conversionFactor: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        uom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UomConversionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUomConversionDetail(
    @common.Param() params: UomConversionDetailWhereUniqueInput,
    @common.Body() data: UomConversionDetailUpdateInput
  ): Promise<UomConversionDetail | null> {
    try {
      return await this.service.updateUomConversionDetail({
        where: params,
        data: data,
        select: {
          conversionFactor: true,
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UomConversionDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUomConversionDetail(
    @common.Param() params: UomConversionDetailWhereUniqueInput
  ): Promise<UomConversionDetail | null> {
    try {
      return await this.service.deleteUomConversionDetail({
        where: params,
        select: {
          conversionFactor: true,
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
