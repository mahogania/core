/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StockReconciliationService } from "../stockReconciliation.service";
import { StockReconciliationCreateInput } from "./StockReconciliationCreateInput";
import { StockReconciliation } from "./StockReconciliation";
import { StockReconciliationFindManyArgs } from "./StockReconciliationFindManyArgs";
import { StockReconciliationWhereUniqueInput } from "./StockReconciliationWhereUniqueInput";
import { StockReconciliationUpdateInput } from "./StockReconciliationUpdateInput";

export class StockReconciliationControllerBase {
  constructor(protected readonly service: StockReconciliationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StockReconciliation })
  async createStockReconciliation(
    @common.Body() data: StockReconciliationCreateInput
  ): Promise<StockReconciliation> {
    return await this.service.createStockReconciliation({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        differenceAmount: true,
        docstatus: true,
        expenseAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        purpose: true,
        scanBarcode: true,
        scanMode: true,
        setPostingTime: true,
        setWarehouse: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StockReconciliation] })
  @ApiNestedQuery(StockReconciliationFindManyArgs)
  async stockReconciliations(
    @common.Req() request: Request
  ): Promise<StockReconciliation[]> {
    const args = plainToClass(StockReconciliationFindManyArgs, request.query);
    return this.service.stockReconciliations({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        differenceAmount: true,
        docstatus: true,
        expenseAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        purpose: true,
        scanBarcode: true,
        scanMode: true,
        setPostingTime: true,
        setWarehouse: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StockReconciliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stockReconciliation(
    @common.Param() params: StockReconciliationWhereUniqueInput
  ): Promise<StockReconciliation | null> {
    const result = await this.service.stockReconciliation({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        costCenter: true,
        createdAt: true,
        creation: true,
        differenceAmount: true,
        docstatus: true,
        expenseAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        postingTime: true,
        purpose: true,
        scanBarcode: true,
        scanMode: true,
        setPostingTime: true,
        setWarehouse: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StockReconciliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStockReconciliation(
    @common.Param() params: StockReconciliationWhereUniqueInput,
    @common.Body() data: StockReconciliationUpdateInput
  ): Promise<StockReconciliation | null> {
    try {
      return await this.service.updateStockReconciliation({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          differenceAmount: true,
          docstatus: true,
          expenseAccount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          postingTime: true,
          purpose: true,
          scanBarcode: true,
          scanMode: true,
          setPostingTime: true,
          setWarehouse: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StockReconciliation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStockReconciliation(
    @common.Param() params: StockReconciliationWhereUniqueInput
  ): Promise<StockReconciliation | null> {
    try {
      return await this.service.deleteStockReconciliation({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          costCenter: true,
          createdAt: true,
          creation: true,
          differenceAmount: true,
          docstatus: true,
          expenseAccount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          postingTime: true,
          purpose: true,
          scanBarcode: true,
          scanMode: true,
          setPostingTime: true,
          setWarehouse: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
