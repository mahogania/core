/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StockReconciliation } from "./StockReconciliation";
import { StockReconciliationCountArgs } from "./StockReconciliationCountArgs";
import { StockReconciliationFindManyArgs } from "./StockReconciliationFindManyArgs";
import { StockReconciliationFindUniqueArgs } from "./StockReconciliationFindUniqueArgs";
import { CreateStockReconciliationArgs } from "./CreateStockReconciliationArgs";
import { UpdateStockReconciliationArgs } from "./UpdateStockReconciliationArgs";
import { DeleteStockReconciliationArgs } from "./DeleteStockReconciliationArgs";
import { StockReconciliationService } from "../stockReconciliation.service";
@graphql.Resolver(() => StockReconciliation)
export class StockReconciliationResolverBase {
  constructor(protected readonly service: StockReconciliationService) {}

  async _stockReconciliationsMeta(
    @graphql.Args() args: StockReconciliationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StockReconciliation])
  async stockReconciliations(
    @graphql.Args() args: StockReconciliationFindManyArgs
  ): Promise<StockReconciliation[]> {
    return this.service.stockReconciliations(args);
  }

  @graphql.Query(() => StockReconciliation, { nullable: true })
  async stockReconciliation(
    @graphql.Args() args: StockReconciliationFindUniqueArgs
  ): Promise<StockReconciliation | null> {
    const result = await this.service.stockReconciliation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StockReconciliation)
  async createStockReconciliation(
    @graphql.Args() args: CreateStockReconciliationArgs
  ): Promise<StockReconciliation> {
    return await this.service.createStockReconciliation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StockReconciliation)
  async updateStockReconciliation(
    @graphql.Args() args: UpdateStockReconciliationArgs
  ): Promise<StockReconciliation | null> {
    try {
      return await this.service.updateStockReconciliation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockReconciliation)
  async deleteStockReconciliation(
    @graphql.Args() args: DeleteStockReconciliationArgs
  ): Promise<StockReconciliation | null> {
    try {
      return await this.service.deleteStockReconciliation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
