/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomWebsiteOperationService } from "../bomWebsiteOperation.service";
import { BomWebsiteOperationCreateInput } from "./BomWebsiteOperationCreateInput";
import { BomWebsiteOperation } from "./BomWebsiteOperation";
import { BomWebsiteOperationFindManyArgs } from "./BomWebsiteOperationFindManyArgs";
import { BomWebsiteOperationWhereUniqueInput } from "./BomWebsiteOperationWhereUniqueInput";
import { BomWebsiteOperationUpdateInput } from "./BomWebsiteOperationUpdateInput";

export class BomWebsiteOperationControllerBase {
  constructor(protected readonly service: BomWebsiteOperationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomWebsiteOperation })
  async createBomWebsiteOperation(
    @common.Body() data: BomWebsiteOperationCreateInput
  ): Promise<BomWebsiteOperation> {
    return await this.service.createBomWebsiteOperation({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operation: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        thumbnail: true,
        timeInMins: true,
        updatedAt: true,
        websiteImage: true,
        workstation: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomWebsiteOperation] })
  @ApiNestedQuery(BomWebsiteOperationFindManyArgs)
  async bomWebsiteOperations(
    @common.Req() request: Request
  ): Promise<BomWebsiteOperation[]> {
    const args = plainToClass(BomWebsiteOperationFindManyArgs, request.query);
    return this.service.bomWebsiteOperations({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operation: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        thumbnail: true,
        timeInMins: true,
        updatedAt: true,
        websiteImage: true,
        workstation: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomWebsiteOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomWebsiteOperation(
    @common.Param() params: BomWebsiteOperationWhereUniqueInput
  ): Promise<BomWebsiteOperation | null> {
    const result = await this.service.bomWebsiteOperation({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operation: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        thumbnail: true,
        timeInMins: true,
        updatedAt: true,
        websiteImage: true,
        workstation: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomWebsiteOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomWebsiteOperation(
    @common.Param() params: BomWebsiteOperationWhereUniqueInput,
    @common.Body() data: BomWebsiteOperationUpdateInput
  ): Promise<BomWebsiteOperation | null> {
    try {
      return await this.service.updateBomWebsiteOperation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          operation: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          thumbnail: true,
          timeInMins: true,
          updatedAt: true,
          websiteImage: true,
          workstation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomWebsiteOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomWebsiteOperation(
    @common.Param() params: BomWebsiteOperationWhereUniqueInput
  ): Promise<BomWebsiteOperation | null> {
    try {
      return await this.service.deleteBomWebsiteOperation({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          operation: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          thumbnail: true,
          timeInMins: true,
          updatedAt: true,
          websiteImage: true,
          workstation: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
