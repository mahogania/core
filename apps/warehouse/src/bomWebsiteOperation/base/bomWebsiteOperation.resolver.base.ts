/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomWebsiteOperation } from "./BomWebsiteOperation";
import { BomWebsiteOperationCountArgs } from "./BomWebsiteOperationCountArgs";
import { BomWebsiteOperationFindManyArgs } from "./BomWebsiteOperationFindManyArgs";
import { BomWebsiteOperationFindUniqueArgs } from "./BomWebsiteOperationFindUniqueArgs";
import { CreateBomWebsiteOperationArgs } from "./CreateBomWebsiteOperationArgs";
import { UpdateBomWebsiteOperationArgs } from "./UpdateBomWebsiteOperationArgs";
import { DeleteBomWebsiteOperationArgs } from "./DeleteBomWebsiteOperationArgs";
import { BomWebsiteOperationService } from "../bomWebsiteOperation.service";
@graphql.Resolver(() => BomWebsiteOperation)
export class BomWebsiteOperationResolverBase {
  constructor(protected readonly service: BomWebsiteOperationService) {}

  async _bomWebsiteOperationsMeta(
    @graphql.Args() args: BomWebsiteOperationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomWebsiteOperation])
  async bomWebsiteOperations(
    @graphql.Args() args: BomWebsiteOperationFindManyArgs
  ): Promise<BomWebsiteOperation[]> {
    return this.service.bomWebsiteOperations(args);
  }

  @graphql.Query(() => BomWebsiteOperation, { nullable: true })
  async bomWebsiteOperation(
    @graphql.Args() args: BomWebsiteOperationFindUniqueArgs
  ): Promise<BomWebsiteOperation | null> {
    const result = await this.service.bomWebsiteOperation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomWebsiteOperation)
  async createBomWebsiteOperation(
    @graphql.Args() args: CreateBomWebsiteOperationArgs
  ): Promise<BomWebsiteOperation> {
    return await this.service.createBomWebsiteOperation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomWebsiteOperation)
  async updateBomWebsiteOperation(
    @graphql.Args() args: UpdateBomWebsiteOperationArgs
  ): Promise<BomWebsiteOperation | null> {
    try {
      return await this.service.updateBomWebsiteOperation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomWebsiteOperation)
  async deleteBomWebsiteOperation(
    @graphql.Args() args: DeleteBomWebsiteOperationArgs
  ): Promise<BomWebsiteOperation | null> {
    try {
      return await this.service.deleteBomWebsiteOperation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
