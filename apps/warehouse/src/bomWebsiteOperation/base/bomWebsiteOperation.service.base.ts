/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BomWebsiteOperation as PrismaBomWebsiteOperation,
} from "@prisma/client";

export class BomWebsiteOperationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BomWebsiteOperationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bomWebsiteOperation.count(args);
  }

  async bomWebsiteOperations(
    args: Prisma.BomWebsiteOperationFindManyArgs
  ): Promise<PrismaBomWebsiteOperation[]> {
    return this.prisma.bomWebsiteOperation.findMany(args);
  }
  async bomWebsiteOperation(
    args: Prisma.BomWebsiteOperationFindUniqueArgs
  ): Promise<PrismaBomWebsiteOperation | null> {
    return this.prisma.bomWebsiteOperation.findUnique(args);
  }
  async createBomWebsiteOperation(
    args: Prisma.BomWebsiteOperationCreateArgs
  ): Promise<PrismaBomWebsiteOperation> {
    return this.prisma.bomWebsiteOperation.create(args);
  }
  async updateBomWebsiteOperation(
    args: Prisma.BomWebsiteOperationUpdateArgs
  ): Promise<PrismaBomWebsiteOperation> {
    return this.prisma.bomWebsiteOperation.update(args);
  }
  async deleteBomWebsiteOperation(
    args: Prisma.BomWebsiteOperationDeleteArgs
  ): Promise<PrismaBomWebsiteOperation> {
    return this.prisma.bomWebsiteOperation.delete(args);
  }
}
