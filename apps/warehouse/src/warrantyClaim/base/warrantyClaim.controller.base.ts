/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WarrantyClaimService } from "../warrantyClaim.service";
import { WarrantyClaimCreateInput } from "./WarrantyClaimCreateInput";
import { WarrantyClaim } from "./WarrantyClaim";
import { WarrantyClaimFindManyArgs } from "./WarrantyClaimFindManyArgs";
import { WarrantyClaimWhereUniqueInput } from "./WarrantyClaimWhereUniqueInput";
import { WarrantyClaimUpdateInput } from "./WarrantyClaimUpdateInput";

export class WarrantyClaimControllerBase {
  constructor(protected readonly service: WarrantyClaimService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WarrantyClaim })
  async createWarrantyClaim(
    @common.Body() data: WarrantyClaimCreateInput
  ): Promise<WarrantyClaim> {
    return await this.service.createWarrantyClaim({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WarrantyClaim] })
  @ApiNestedQuery(WarrantyClaimFindManyArgs)
  async warrantyClaims(
    @common.Req() request: Request
  ): Promise<WarrantyClaim[]> {
    const args = plainToClass(WarrantyClaimFindManyArgs, request.query);
    return this.service.warrantyClaims({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WarrantyClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async warrantyClaim(
    @common.Param() params: WarrantyClaimWhereUniqueInput
  ): Promise<WarrantyClaim | null> {
    const result = await this.service.warrantyClaim({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WarrantyClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWarrantyClaim(
    @common.Param() params: WarrantyClaimWhereUniqueInput,
    @common.Body() data: WarrantyClaimUpdateInput
  ): Promise<WarrantyClaim | null> {
    try {
      return await this.service.updateWarrantyClaim({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WarrantyClaim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWarrantyClaim(
    @common.Param() params: WarrantyClaimWhereUniqueInput
  ): Promise<WarrantyClaim | null> {
    try {
      return await this.service.deleteWarrantyClaim({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
