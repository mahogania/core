/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MaintenanceScheduleItem } from "./MaintenanceScheduleItem";
import { MaintenanceScheduleItemCountArgs } from "./MaintenanceScheduleItemCountArgs";
import { MaintenanceScheduleItemFindManyArgs } from "./MaintenanceScheduleItemFindManyArgs";
import { MaintenanceScheduleItemFindUniqueArgs } from "./MaintenanceScheduleItemFindUniqueArgs";
import { CreateMaintenanceScheduleItemArgs } from "./CreateMaintenanceScheduleItemArgs";
import { UpdateMaintenanceScheduleItemArgs } from "./UpdateMaintenanceScheduleItemArgs";
import { DeleteMaintenanceScheduleItemArgs } from "./DeleteMaintenanceScheduleItemArgs";
import { MaintenanceScheduleItemService } from "../maintenanceScheduleItem.service";
@graphql.Resolver(() => MaintenanceScheduleItem)
export class MaintenanceScheduleItemResolverBase {
  constructor(protected readonly service: MaintenanceScheduleItemService) {}

  async _maintenanceScheduleItemsMeta(
    @graphql.Args() args: MaintenanceScheduleItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MaintenanceScheduleItem])
  async maintenanceScheduleItems(
    @graphql.Args() args: MaintenanceScheduleItemFindManyArgs
  ): Promise<MaintenanceScheduleItem[]> {
    return this.service.maintenanceScheduleItems(args);
  }

  @graphql.Query(() => MaintenanceScheduleItem, { nullable: true })
  async maintenanceScheduleItem(
    @graphql.Args() args: MaintenanceScheduleItemFindUniqueArgs
  ): Promise<MaintenanceScheduleItem | null> {
    const result = await this.service.maintenanceScheduleItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MaintenanceScheduleItem)
  async createMaintenanceScheduleItem(
    @graphql.Args() args: CreateMaintenanceScheduleItemArgs
  ): Promise<MaintenanceScheduleItem> {
    return await this.service.createMaintenanceScheduleItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MaintenanceScheduleItem)
  async updateMaintenanceScheduleItem(
    @graphql.Args() args: UpdateMaintenanceScheduleItemArgs
  ): Promise<MaintenanceScheduleItem | null> {
    try {
      return await this.service.updateMaintenanceScheduleItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceScheduleItem)
  async deleteMaintenanceScheduleItem(
    @graphql.Args() args: DeleteMaintenanceScheduleItemArgs
  ): Promise<MaintenanceScheduleItem | null> {
    try {
      return await this.service.deleteMaintenanceScheduleItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
