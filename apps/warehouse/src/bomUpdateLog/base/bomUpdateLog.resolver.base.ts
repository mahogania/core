/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomUpdateLog } from "./BomUpdateLog";
import { BomUpdateLogCountArgs } from "./BomUpdateLogCountArgs";
import { BomUpdateLogFindManyArgs } from "./BomUpdateLogFindManyArgs";
import { BomUpdateLogFindUniqueArgs } from "./BomUpdateLogFindUniqueArgs";
import { CreateBomUpdateLogArgs } from "./CreateBomUpdateLogArgs";
import { UpdateBomUpdateLogArgs } from "./UpdateBomUpdateLogArgs";
import { DeleteBomUpdateLogArgs } from "./DeleteBomUpdateLogArgs";
import { BomUpdateLogService } from "../bomUpdateLog.service";
@graphql.Resolver(() => BomUpdateLog)
export class BomUpdateLogResolverBase {
  constructor(protected readonly service: BomUpdateLogService) {}

  async _bomUpdateLogsMeta(
    @graphql.Args() args: BomUpdateLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomUpdateLog])
  async bomUpdateLogs(
    @graphql.Args() args: BomUpdateLogFindManyArgs
  ): Promise<BomUpdateLog[]> {
    return this.service.bomUpdateLogs(args);
  }

  @graphql.Query(() => BomUpdateLog, { nullable: true })
  async bomUpdateLog(
    @graphql.Args() args: BomUpdateLogFindUniqueArgs
  ): Promise<BomUpdateLog | null> {
    const result = await this.service.bomUpdateLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomUpdateLog)
  async createBomUpdateLog(
    @graphql.Args() args: CreateBomUpdateLogArgs
  ): Promise<BomUpdateLog> {
    return await this.service.createBomUpdateLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomUpdateLog)
  async updateBomUpdateLog(
    @graphql.Args() args: UpdateBomUpdateLogArgs
  ): Promise<BomUpdateLog | null> {
    try {
      return await this.service.updateBomUpdateLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomUpdateLog)
  async deleteBomUpdateLog(
    @graphql.Args() args: DeleteBomUpdateLogArgs
  ): Promise<BomUpdateLog | null> {
    try {
      return await this.service.deleteBomUpdateLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
