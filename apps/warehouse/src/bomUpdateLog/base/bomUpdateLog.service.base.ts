/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BomUpdateLog as PrismaBomUpdateLog } from "@prisma/client";

export class BomUpdateLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BomUpdateLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bomUpdateLog.count(args);
  }

  async bomUpdateLogs(
    args: Prisma.BomUpdateLogFindManyArgs
  ): Promise<PrismaBomUpdateLog[]> {
    return this.prisma.bomUpdateLog.findMany(args);
  }
  async bomUpdateLog(
    args: Prisma.BomUpdateLogFindUniqueArgs
  ): Promise<PrismaBomUpdateLog | null> {
    return this.prisma.bomUpdateLog.findUnique(args);
  }
  async createBomUpdateLog(
    args: Prisma.BomUpdateLogCreateArgs
  ): Promise<PrismaBomUpdateLog> {
    return this.prisma.bomUpdateLog.create(args);
  }
  async updateBomUpdateLog(
    args: Prisma.BomUpdateLogUpdateArgs
  ): Promise<PrismaBomUpdateLog> {
    return this.prisma.bomUpdateLog.update(args);
  }
  async deleteBomUpdateLog(
    args: Prisma.BomUpdateLogDeleteArgs
  ): Promise<PrismaBomUpdateLog> {
    return this.prisma.bomUpdateLog.delete(args);
  }
}
