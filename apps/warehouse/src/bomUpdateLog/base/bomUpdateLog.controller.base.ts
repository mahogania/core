/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomUpdateLogService } from "../bomUpdateLog.service";
import { BomUpdateLogCreateInput } from "./BomUpdateLogCreateInput";
import { BomUpdateLog } from "./BomUpdateLog";
import { BomUpdateLogFindManyArgs } from "./BomUpdateLogFindManyArgs";
import { BomUpdateLogWhereUniqueInput } from "./BomUpdateLogWhereUniqueInput";
import { BomUpdateLogUpdateInput } from "./BomUpdateLogUpdateInput";

export class BomUpdateLogControllerBase {
  constructor(protected readonly service: BomUpdateLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomUpdateLog })
  async createBomUpdateLog(
    @common.Body() data: BomUpdateLogCreateInput
  ): Promise<BomUpdateLog> {
    return await this.service.createBomUpdateLog({
      data: data,
      select: {
        amendedFrom: true,
        createdAt: true,
        creation: true,
        currentBom: true,
        currentLevel: true,
        docstatus: true,
        errorLog: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newBom: true,
        owner: true,
        processedBoms: true,
        status: true,
        updateType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomUpdateLog] })
  @ApiNestedQuery(BomUpdateLogFindManyArgs)
  async bomUpdateLogs(@common.Req() request: Request): Promise<BomUpdateLog[]> {
    const args = plainToClass(BomUpdateLogFindManyArgs, request.query);
    return this.service.bomUpdateLogs({
      ...args,
      select: {
        amendedFrom: true,
        createdAt: true,
        creation: true,
        currentBom: true,
        currentLevel: true,
        docstatus: true,
        errorLog: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newBom: true,
        owner: true,
        processedBoms: true,
        status: true,
        updateType: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomUpdateLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomUpdateLog(
    @common.Param() params: BomUpdateLogWhereUniqueInput
  ): Promise<BomUpdateLog | null> {
    const result = await this.service.bomUpdateLog({
      where: params,
      select: {
        amendedFrom: true,
        createdAt: true,
        creation: true,
        currentBom: true,
        currentLevel: true,
        docstatus: true,
        errorLog: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        newBom: true,
        owner: true,
        processedBoms: true,
        status: true,
        updateType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomUpdateLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomUpdateLog(
    @common.Param() params: BomUpdateLogWhereUniqueInput,
    @common.Body() data: BomUpdateLogUpdateInput
  ): Promise<BomUpdateLog | null> {
    try {
      return await this.service.updateBomUpdateLog({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          createdAt: true,
          creation: true,
          currentBom: true,
          currentLevel: true,
          docstatus: true,
          errorLog: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          newBom: true,
          owner: true,
          processedBoms: true,
          status: true,
          updateType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomUpdateLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomUpdateLog(
    @common.Param() params: BomUpdateLogWhereUniqueInput
  ): Promise<BomUpdateLog | null> {
    try {
      return await this.service.deleteBomUpdateLog({
        where: params,
        select: {
          amendedFrom: true,
          createdAt: true,
          creation: true,
          currentBom: true,
          currentLevel: true,
          docstatus: true,
          errorLog: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          newBom: true,
          owner: true,
          processedBoms: true,
          status: true,
          updateType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
