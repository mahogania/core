/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PackingSlipItemService } from "../packingSlipItem.service";
import { PackingSlipItemCreateInput } from "./PackingSlipItemCreateInput";
import { PackingSlipItem } from "./PackingSlipItem";
import { PackingSlipItemFindManyArgs } from "./PackingSlipItemFindManyArgs";
import { PackingSlipItemWhereUniqueInput } from "./PackingSlipItemWhereUniqueInput";
import { PackingSlipItemUpdateInput } from "./PackingSlipItemUpdateInput";

export class PackingSlipItemControllerBase {
  constructor(protected readonly service: PackingSlipItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PackingSlipItem })
  async createPackingSlipItem(
    @common.Body() data: PackingSlipItemCreateInput
  ): Promise<PackingSlipItem> {
    return await this.service.createPackingSlipItem({
      data: data,
      select: {
        batchNo: true,
        createdAt: true,
        creation: true,
        description: true,
        dnDetail: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        netWeight: true,
        owner: true,
        pageBreak: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        piDetail: true,
        qty: true,
        stockUom: true,
        updatedAt: true,
        weightUom: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PackingSlipItem] })
  @ApiNestedQuery(PackingSlipItemFindManyArgs)
  async packingSlipItems(
    @common.Req() request: Request
  ): Promise<PackingSlipItem[]> {
    const args = plainToClass(PackingSlipItemFindManyArgs, request.query);
    return this.service.packingSlipItems({
      ...args,
      select: {
        batchNo: true,
        createdAt: true,
        creation: true,
        description: true,
        dnDetail: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        netWeight: true,
        owner: true,
        pageBreak: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        piDetail: true,
        qty: true,
        stockUom: true,
        updatedAt: true,
        weightUom: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PackingSlipItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async packingSlipItem(
    @common.Param() params: PackingSlipItemWhereUniqueInput
  ): Promise<PackingSlipItem | null> {
    const result = await this.service.packingSlipItem({
      where: params,
      select: {
        batchNo: true,
        createdAt: true,
        creation: true,
        description: true,
        dnDetail: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        netWeight: true,
        owner: true,
        pageBreak: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        piDetail: true,
        qty: true,
        stockUom: true,
        updatedAt: true,
        weightUom: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PackingSlipItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePackingSlipItem(
    @common.Param() params: PackingSlipItemWhereUniqueInput,
    @common.Body() data: PackingSlipItemUpdateInput
  ): Promise<PackingSlipItem | null> {
    try {
      return await this.service.updatePackingSlipItem({
        where: params,
        data: data,
        select: {
          batchNo: true,
          createdAt: true,
          creation: true,
          description: true,
          dnDetail: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          netWeight: true,
          owner: true,
          pageBreak: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          piDetail: true,
          qty: true,
          stockUom: true,
          updatedAt: true,
          weightUom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PackingSlipItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePackingSlipItem(
    @common.Param() params: PackingSlipItemWhereUniqueInput
  ): Promise<PackingSlipItem | null> {
    try {
      return await this.service.deletePackingSlipItem({
        where: params,
        select: {
          batchNo: true,
          createdAt: true,
          creation: true,
          description: true,
          dnDetail: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          netWeight: true,
          owner: true,
          pageBreak: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          piDetail: true,
          qty: true,
          stockUom: true,
          updatedAt: true,
          weightUom: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
