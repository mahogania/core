/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PackingSlipItem } from "./PackingSlipItem";
import { PackingSlipItemCountArgs } from "./PackingSlipItemCountArgs";
import { PackingSlipItemFindManyArgs } from "./PackingSlipItemFindManyArgs";
import { PackingSlipItemFindUniqueArgs } from "./PackingSlipItemFindUniqueArgs";
import { CreatePackingSlipItemArgs } from "./CreatePackingSlipItemArgs";
import { UpdatePackingSlipItemArgs } from "./UpdatePackingSlipItemArgs";
import { DeletePackingSlipItemArgs } from "./DeletePackingSlipItemArgs";
import { PackingSlipItemService } from "../packingSlipItem.service";
@graphql.Resolver(() => PackingSlipItem)
export class PackingSlipItemResolverBase {
  constructor(protected readonly service: PackingSlipItemService) {}

  async _packingSlipItemsMeta(
    @graphql.Args() args: PackingSlipItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PackingSlipItem])
  async packingSlipItems(
    @graphql.Args() args: PackingSlipItemFindManyArgs
  ): Promise<PackingSlipItem[]> {
    return this.service.packingSlipItems(args);
  }

  @graphql.Query(() => PackingSlipItem, { nullable: true })
  async packingSlipItem(
    @graphql.Args() args: PackingSlipItemFindUniqueArgs
  ): Promise<PackingSlipItem | null> {
    const result = await this.service.packingSlipItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PackingSlipItem)
  async createPackingSlipItem(
    @graphql.Args() args: CreatePackingSlipItemArgs
  ): Promise<PackingSlipItem> {
    return await this.service.createPackingSlipItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PackingSlipItem)
  async updatePackingSlipItem(
    @graphql.Args() args: UpdatePackingSlipItemArgs
  ): Promise<PackingSlipItem | null> {
    try {
      return await this.service.updatePackingSlipItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PackingSlipItem)
  async deletePackingSlipItem(
    @graphql.Args() args: DeletePackingSlipItemArgs
  ): Promise<PackingSlipItem | null> {
    try {
      return await this.service.deletePackingSlipItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
