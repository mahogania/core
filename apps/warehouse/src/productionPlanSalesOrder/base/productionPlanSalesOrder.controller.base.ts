/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionPlanSalesOrderService } from "../productionPlanSalesOrder.service";
import { ProductionPlanSalesOrderCreateInput } from "./ProductionPlanSalesOrderCreateInput";
import { ProductionPlanSalesOrder } from "./ProductionPlanSalesOrder";
import { ProductionPlanSalesOrderFindManyArgs } from "./ProductionPlanSalesOrderFindManyArgs";
import { ProductionPlanSalesOrderWhereUniqueInput } from "./ProductionPlanSalesOrderWhereUniqueInput";
import { ProductionPlanSalesOrderUpdateInput } from "./ProductionPlanSalesOrderUpdateInput";

export class ProductionPlanSalesOrderControllerBase {
  constructor(protected readonly service: ProductionPlanSalesOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionPlanSalesOrder })
  async createProductionPlanSalesOrder(
    @common.Body() data: ProductionPlanSalesOrderCreateInput
  ): Promise<ProductionPlanSalesOrder> {
    return await this.service.createProductionPlanSalesOrder({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        salesOrder: true,
        salesOrderDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionPlanSalesOrder] })
  @ApiNestedQuery(ProductionPlanSalesOrderFindManyArgs)
  async productionPlanSalesOrders(
    @common.Req() request: Request
  ): Promise<ProductionPlanSalesOrder[]> {
    const args = plainToClass(
      ProductionPlanSalesOrderFindManyArgs,
      request.query
    );
    return this.service.productionPlanSalesOrders({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        salesOrder: true,
        salesOrderDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanSalesOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionPlanSalesOrder(
    @common.Param() params: ProductionPlanSalesOrderWhereUniqueInput
  ): Promise<ProductionPlanSalesOrder | null> {
    const result = await this.service.productionPlanSalesOrder({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        salesOrder: true,
        salesOrderDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanSalesOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionPlanSalesOrder(
    @common.Param() params: ProductionPlanSalesOrderWhereUniqueInput,
    @common.Body() data: ProductionPlanSalesOrderUpdateInput
  ): Promise<ProductionPlanSalesOrder | null> {
    try {
      return await this.service.updateProductionPlanSalesOrder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          grandTotal: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          salesOrder: true,
          salesOrderDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanSalesOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionPlanSalesOrder(
    @common.Param() params: ProductionPlanSalesOrderWhereUniqueInput
  ): Promise<ProductionPlanSalesOrder | null> {
    try {
      return await this.service.deleteProductionPlanSalesOrder({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          grandTotal: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          salesOrder: true,
          salesOrderDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
