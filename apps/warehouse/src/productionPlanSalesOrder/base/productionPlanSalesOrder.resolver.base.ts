/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionPlanSalesOrder } from "./ProductionPlanSalesOrder";
import { ProductionPlanSalesOrderCountArgs } from "./ProductionPlanSalesOrderCountArgs";
import { ProductionPlanSalesOrderFindManyArgs } from "./ProductionPlanSalesOrderFindManyArgs";
import { ProductionPlanSalesOrderFindUniqueArgs } from "./ProductionPlanSalesOrderFindUniqueArgs";
import { CreateProductionPlanSalesOrderArgs } from "./CreateProductionPlanSalesOrderArgs";
import { UpdateProductionPlanSalesOrderArgs } from "./UpdateProductionPlanSalesOrderArgs";
import { DeleteProductionPlanSalesOrderArgs } from "./DeleteProductionPlanSalesOrderArgs";
import { ProductionPlanSalesOrderService } from "../productionPlanSalesOrder.service";
@graphql.Resolver(() => ProductionPlanSalesOrder)
export class ProductionPlanSalesOrderResolverBase {
  constructor(protected readonly service: ProductionPlanSalesOrderService) {}

  async _productionPlanSalesOrdersMeta(
    @graphql.Args() args: ProductionPlanSalesOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionPlanSalesOrder])
  async productionPlanSalesOrders(
    @graphql.Args() args: ProductionPlanSalesOrderFindManyArgs
  ): Promise<ProductionPlanSalesOrder[]> {
    return this.service.productionPlanSalesOrders(args);
  }

  @graphql.Query(() => ProductionPlanSalesOrder, { nullable: true })
  async productionPlanSalesOrder(
    @graphql.Args() args: ProductionPlanSalesOrderFindUniqueArgs
  ): Promise<ProductionPlanSalesOrder | null> {
    const result = await this.service.productionPlanSalesOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionPlanSalesOrder)
  async createProductionPlanSalesOrder(
    @graphql.Args() args: CreateProductionPlanSalesOrderArgs
  ): Promise<ProductionPlanSalesOrder> {
    return await this.service.createProductionPlanSalesOrder({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductionPlanSalesOrder)
  async updateProductionPlanSalesOrder(
    @graphql.Args() args: UpdateProductionPlanSalesOrderArgs
  ): Promise<ProductionPlanSalesOrder | null> {
    try {
      return await this.service.updateProductionPlanSalesOrder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionPlanSalesOrder)
  async deleteProductionPlanSalesOrder(
    @graphql.Args() args: DeleteProductionPlanSalesOrderArgs
  ): Promise<ProductionPlanSalesOrder | null> {
    try {
      return await this.service.deleteProductionPlanSalesOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
