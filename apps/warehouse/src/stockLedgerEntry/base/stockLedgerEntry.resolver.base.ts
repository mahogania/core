/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StockLedgerEntry } from "./StockLedgerEntry";
import { StockLedgerEntryCountArgs } from "./StockLedgerEntryCountArgs";
import { StockLedgerEntryFindManyArgs } from "./StockLedgerEntryFindManyArgs";
import { StockLedgerEntryFindUniqueArgs } from "./StockLedgerEntryFindUniqueArgs";
import { CreateStockLedgerEntryArgs } from "./CreateStockLedgerEntryArgs";
import { UpdateStockLedgerEntryArgs } from "./UpdateStockLedgerEntryArgs";
import { DeleteStockLedgerEntryArgs } from "./DeleteStockLedgerEntryArgs";
import { StockLedgerEntryService } from "../stockLedgerEntry.service";
@graphql.Resolver(() => StockLedgerEntry)
export class StockLedgerEntryResolverBase {
  constructor(protected readonly service: StockLedgerEntryService) {}

  async _stockLedgerEntriesMeta(
    @graphql.Args() args: StockLedgerEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StockLedgerEntry])
  async stockLedgerEntries(
    @graphql.Args() args: StockLedgerEntryFindManyArgs
  ): Promise<StockLedgerEntry[]> {
    return this.service.stockLedgerEntries(args);
  }

  @graphql.Query(() => StockLedgerEntry, { nullable: true })
  async stockLedgerEntry(
    @graphql.Args() args: StockLedgerEntryFindUniqueArgs
  ): Promise<StockLedgerEntry | null> {
    const result = await this.service.stockLedgerEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StockLedgerEntry)
  async createStockLedgerEntry(
    @graphql.Args() args: CreateStockLedgerEntryArgs
  ): Promise<StockLedgerEntry> {
    return await this.service.createStockLedgerEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StockLedgerEntry)
  async updateStockLedgerEntry(
    @graphql.Args() args: UpdateStockLedgerEntryArgs
  ): Promise<StockLedgerEntry | null> {
    try {
      return await this.service.updateStockLedgerEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockLedgerEntry)
  async deleteStockLedgerEntry(
    @graphql.Args() args: DeleteStockLedgerEntryArgs
  ): Promise<StockLedgerEntry | null> {
    try {
      return await this.service.deleteStockLedgerEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
