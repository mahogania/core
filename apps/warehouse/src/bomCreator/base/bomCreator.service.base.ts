/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BomCreator as PrismaBomCreator } from "@prisma/client";

export class BomCreatorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BomCreatorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bomCreator.count(args);
  }

  async bomCreators(
    args: Prisma.BomCreatorFindManyArgs
  ): Promise<PrismaBomCreator[]> {
    return this.prisma.bomCreator.findMany(args);
  }
  async bomCreator(
    args: Prisma.BomCreatorFindUniqueArgs
  ): Promise<PrismaBomCreator | null> {
    return this.prisma.bomCreator.findUnique(args);
  }
  async createBomCreator(
    args: Prisma.BomCreatorCreateArgs
  ): Promise<PrismaBomCreator> {
    return this.prisma.bomCreator.create(args);
  }
  async updateBomCreator(
    args: Prisma.BomCreatorUpdateArgs
  ): Promise<PrismaBomCreator> {
    return this.prisma.bomCreator.update(args);
  }
  async deleteBomCreator(
    args: Prisma.BomCreatorDeleteArgs
  ): Promise<PrismaBomCreator> {
    return this.prisma.bomCreator.delete(args);
  }
}
