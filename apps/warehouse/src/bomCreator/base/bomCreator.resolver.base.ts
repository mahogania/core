/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomCreator } from "./BomCreator";
import { BomCreatorCountArgs } from "./BomCreatorCountArgs";
import { BomCreatorFindManyArgs } from "./BomCreatorFindManyArgs";
import { BomCreatorFindUniqueArgs } from "./BomCreatorFindUniqueArgs";
import { CreateBomCreatorArgs } from "./CreateBomCreatorArgs";
import { UpdateBomCreatorArgs } from "./UpdateBomCreatorArgs";
import { DeleteBomCreatorArgs } from "./DeleteBomCreatorArgs";
import { BomCreatorService } from "../bomCreator.service";
@graphql.Resolver(() => BomCreator)
export class BomCreatorResolverBase {
  constructor(protected readonly service: BomCreatorService) {}

  async _bomCreatorsMeta(
    @graphql.Args() args: BomCreatorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomCreator])
  async bomCreators(
    @graphql.Args() args: BomCreatorFindManyArgs
  ): Promise<BomCreator[]> {
    return this.service.bomCreators(args);
  }

  @graphql.Query(() => BomCreator, { nullable: true })
  async bomCreator(
    @graphql.Args() args: BomCreatorFindUniqueArgs
  ): Promise<BomCreator | null> {
    const result = await this.service.bomCreator(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomCreator)
  async createBomCreator(
    @graphql.Args() args: CreateBomCreatorArgs
  ): Promise<BomCreator> {
    return await this.service.createBomCreator({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomCreator)
  async updateBomCreator(
    @graphql.Args() args: UpdateBomCreatorArgs
  ): Promise<BomCreator | null> {
    try {
      return await this.service.updateBomCreator({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomCreator)
  async deleteBomCreator(
    @graphql.Args() args: DeleteBomCreatorArgs
  ): Promise<BomCreator | null> {
    try {
      return await this.service.deleteBomCreator(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
