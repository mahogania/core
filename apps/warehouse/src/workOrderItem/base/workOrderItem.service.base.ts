/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, WorkOrderItem as PrismaWorkOrderItem } from "@prisma/client";

export class WorkOrderItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkOrderItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workOrderItem.count(args);
  }

  async workOrderItems(
    args: Prisma.WorkOrderItemFindManyArgs
  ): Promise<PrismaWorkOrderItem[]> {
    return this.prisma.workOrderItem.findMany(args);
  }
  async workOrderItem(
    args: Prisma.WorkOrderItemFindUniqueArgs
  ): Promise<PrismaWorkOrderItem | null> {
    return this.prisma.workOrderItem.findUnique(args);
  }
  async createWorkOrderItem(
    args: Prisma.WorkOrderItemCreateArgs
  ): Promise<PrismaWorkOrderItem> {
    return this.prisma.workOrderItem.create(args);
  }
  async updateWorkOrderItem(
    args: Prisma.WorkOrderItemUpdateArgs
  ): Promise<PrismaWorkOrderItem> {
    return this.prisma.workOrderItem.update(args);
  }
  async deleteWorkOrderItem(
    args: Prisma.WorkOrderItemDeleteArgs
  ): Promise<PrismaWorkOrderItem> {
    return this.prisma.workOrderItem.delete(args);
  }
}
