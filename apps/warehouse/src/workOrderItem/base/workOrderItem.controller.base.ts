/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkOrderItemService } from "../workOrderItem.service";
import { WorkOrderItemCreateInput } from "./WorkOrderItemCreateInput";
import { WorkOrderItem } from "./WorkOrderItem";
import { WorkOrderItemFindManyArgs } from "./WorkOrderItemFindManyArgs";
import { WorkOrderItemWhereUniqueInput } from "./WorkOrderItemWhereUniqueInput";
import { WorkOrderItemUpdateInput } from "./WorkOrderItemUpdateInput";

export class WorkOrderItemControllerBase {
  constructor(protected readonly service: WorkOrderItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkOrderItem })
  async createWorkOrderItem(
    @common.Body() data: WorkOrderItemCreateInput
  ): Promise<WorkOrderItem> {
    return await this.service.createWorkOrderItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkOrderItem] })
  @ApiNestedQuery(WorkOrderItemFindManyArgs)
  async workOrderItems(
    @common.Req() request: Request
  ): Promise<WorkOrderItem[]> {
    const args = plainToClass(WorkOrderItemFindManyArgs, request.query);
    return this.service.workOrderItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkOrderItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workOrderItem(
    @common.Param() params: WorkOrderItemWhereUniqueInput
  ): Promise<WorkOrderItem | null> {
    const result = await this.service.workOrderItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkOrderItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkOrderItem(
    @common.Param() params: WorkOrderItemWhereUniqueInput,
    @common.Body() data: WorkOrderItemUpdateInput
  ): Promise<WorkOrderItem | null> {
    try {
      return await this.service.updateWorkOrderItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkOrderItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkOrderItem(
    @common.Param() params: WorkOrderItemWhereUniqueInput
  ): Promise<WorkOrderItem | null> {
    try {
      return await this.service.deleteWorkOrderItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
