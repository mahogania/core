/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bin } from "./Bin";
import { BinCountArgs } from "./BinCountArgs";
import { BinFindManyArgs } from "./BinFindManyArgs";
import { BinFindUniqueArgs } from "./BinFindUniqueArgs";
import { CreateBinArgs } from "./CreateBinArgs";
import { UpdateBinArgs } from "./UpdateBinArgs";
import { DeleteBinArgs } from "./DeleteBinArgs";
import { BinService } from "../bin.service";
@graphql.Resolver(() => Bin)
export class BinResolverBase {
  constructor(protected readonly service: BinService) {}

  async _binsMeta(
    @graphql.Args() args: BinCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bin])
  async bins(@graphql.Args() args: BinFindManyArgs): Promise<Bin[]> {
    return this.service.bins(args);
  }

  @graphql.Query(() => Bin, { nullable: true })
  async bin(@graphql.Args() args: BinFindUniqueArgs): Promise<Bin | null> {
    const result = await this.service.bin(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bin)
  async createBin(@graphql.Args() args: CreateBinArgs): Promise<Bin> {
    return await this.service.createBin({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bin)
  async updateBin(@graphql.Args() args: UpdateBinArgs): Promise<Bin | null> {
    try {
      return await this.service.updateBin({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bin)
  async deleteBin(@graphql.Args() args: DeleteBinArgs): Promise<Bin | null> {
    try {
      return await this.service.deleteBin(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
