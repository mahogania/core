/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BinService } from "../bin.service";
import { BinCreateInput } from "./BinCreateInput";
import { Bin } from "./Bin";
import { BinFindManyArgs } from "./BinFindManyArgs";
import { BinWhereUniqueInput } from "./BinWhereUniqueInput";
import { BinUpdateInput } from "./BinUpdateInput";

export class BinControllerBase {
  constructor(protected readonly service: BinService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bin })
  async createBin(@common.Body() data: BinCreateInput): Promise<Bin> {
    return await this.service.createBin({
      data: data,
      select: {
        actualQty: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        indentedQty: true,
        itemCode: true,
        modified: true,
        modifiedBy: true,
        orderedQty: true,
        owner: true,
        plannedQty: true,
        projectedQty: true,
        reservedQty: true,
        reservedQtyForProduction: true,
        reservedQtyForProductionPlan: true,
        reservedQtyForSubContract: true,
        reservedStock: true,
        stockUom: true,
        stockValue: true,
        updatedAt: true,
        valuationRate: true,
        warehouse: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bin] })
  @ApiNestedQuery(BinFindManyArgs)
  async bins(@common.Req() request: Request): Promise<Bin[]> {
    const args = plainToClass(BinFindManyArgs, request.query);
    return this.service.bins({
      ...args,
      select: {
        actualQty: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        indentedQty: true,
        itemCode: true,
        modified: true,
        modifiedBy: true,
        orderedQty: true,
        owner: true,
        plannedQty: true,
        projectedQty: true,
        reservedQty: true,
        reservedQtyForProduction: true,
        reservedQtyForProductionPlan: true,
        reservedQtyForSubContract: true,
        reservedStock: true,
        stockUom: true,
        stockValue: true,
        updatedAt: true,
        valuationRate: true,
        warehouse: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bin(@common.Param() params: BinWhereUniqueInput): Promise<Bin | null> {
    const result = await this.service.bin({
      where: params,
      select: {
        actualQty: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        indentedQty: true,
        itemCode: true,
        modified: true,
        modifiedBy: true,
        orderedQty: true,
        owner: true,
        plannedQty: true,
        projectedQty: true,
        reservedQty: true,
        reservedQtyForProduction: true,
        reservedQtyForProductionPlan: true,
        reservedQtyForSubContract: true,
        reservedStock: true,
        stockUom: true,
        stockValue: true,
        updatedAt: true,
        valuationRate: true,
        warehouse: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBin(
    @common.Param() params: BinWhereUniqueInput,
    @common.Body() data: BinUpdateInput
  ): Promise<Bin | null> {
    try {
      return await this.service.updateBin({
        where: params,
        data: data,
        select: {
          actualQty: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          indentedQty: true,
          itemCode: true,
          modified: true,
          modifiedBy: true,
          orderedQty: true,
          owner: true,
          plannedQty: true,
          projectedQty: true,
          reservedQty: true,
          reservedQtyForProduction: true,
          reservedQtyForProductionPlan: true,
          reservedQtyForSubContract: true,
          reservedStock: true,
          stockUom: true,
          stockValue: true,
          updatedAt: true,
          valuationRate: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bin })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBin(
    @common.Param() params: BinWhereUniqueInput
  ): Promise<Bin | null> {
    try {
      return await this.service.deleteBin({
        where: params,
        select: {
          actualQty: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          indentedQty: true,
          itemCode: true,
          modified: true,
          modifiedBy: true,
          orderedQty: true,
          owner: true,
          plannedQty: true,
          projectedQty: true,
          reservedQty: true,
          reservedQtyForProduction: true,
          reservedQtyForProductionPlan: true,
          reservedQtyForSubContract: true,
          reservedStock: true,
          stockUom: true,
          stockValue: true,
          updatedAt: true,
          valuationRate: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
