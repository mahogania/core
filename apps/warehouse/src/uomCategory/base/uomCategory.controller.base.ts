/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UomCategoryService } from "../uomCategory.service";
import { UomCategoryCreateInput } from "./UomCategoryCreateInput";
import { UomCategory } from "./UomCategory";
import { UomCategoryFindManyArgs } from "./UomCategoryFindManyArgs";
import { UomCategoryWhereUniqueInput } from "./UomCategoryWhereUniqueInput";
import { UomCategoryUpdateInput } from "./UomCategoryUpdateInput";

export class UomCategoryControllerBase {
  constructor(protected readonly service: UomCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UomCategory })
  async createUomCategory(
    @common.Body() data: UomCategoryCreateInput
  ): Promise<UomCategory> {
    return await this.service.createUomCategory({
      data: data,
      select: {
        categoryName: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UomCategory] })
  @ApiNestedQuery(UomCategoryFindManyArgs)
  async uomCategories(@common.Req() request: Request): Promise<UomCategory[]> {
    const args = plainToClass(UomCategoryFindManyArgs, request.query);
    return this.service.uomCategories({
      ...args,
      select: {
        categoryName: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UomCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uomCategory(
    @common.Param() params: UomCategoryWhereUniqueInput
  ): Promise<UomCategory | null> {
    const result = await this.service.uomCategory({
      where: params,
      select: {
        categoryName: true,
        createdAt: true,
        docstatus: true,
        id: true,
        idx: true,
        modifiedBy: true,
        name: true,
        owner: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UomCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUomCategory(
    @common.Param() params: UomCategoryWhereUniqueInput,
    @common.Body() data: UomCategoryUpdateInput
  ): Promise<UomCategory | null> {
    try {
      return await this.service.updateUomCategory({
        where: params,
        data: data,
        select: {
          categoryName: true,
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UomCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUomCategory(
    @common.Param() params: UomCategoryWhereUniqueInput
  ): Promise<UomCategory | null> {
    try {
      return await this.service.deleteUomCategory({
        where: params,
        select: {
          categoryName: true,
          createdAt: true,
          docstatus: true,
          id: true,
          idx: true,
          modifiedBy: true,
          name: true,
          owner: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
