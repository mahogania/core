/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UomCategory } from "./UomCategory";
import { UomCategoryCountArgs } from "./UomCategoryCountArgs";
import { UomCategoryFindManyArgs } from "./UomCategoryFindManyArgs";
import { UomCategoryFindUniqueArgs } from "./UomCategoryFindUniqueArgs";
import { CreateUomCategoryArgs } from "./CreateUomCategoryArgs";
import { UpdateUomCategoryArgs } from "./UpdateUomCategoryArgs";
import { DeleteUomCategoryArgs } from "./DeleteUomCategoryArgs";
import { UomCategoryService } from "../uomCategory.service";
@graphql.Resolver(() => UomCategory)
export class UomCategoryResolverBase {
  constructor(protected readonly service: UomCategoryService) {}

  async _uomCategoriesMeta(
    @graphql.Args() args: UomCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UomCategory])
  async uomCategories(
    @graphql.Args() args: UomCategoryFindManyArgs
  ): Promise<UomCategory[]> {
    return this.service.uomCategories(args);
  }

  @graphql.Query(() => UomCategory, { nullable: true })
  async uomCategory(
    @graphql.Args() args: UomCategoryFindUniqueArgs
  ): Promise<UomCategory | null> {
    const result = await this.service.uomCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UomCategory)
  async createUomCategory(
    @graphql.Args() args: CreateUomCategoryArgs
  ): Promise<UomCategory> {
    return await this.service.createUomCategory({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UomCategory)
  async updateUomCategory(
    @graphql.Args() args: UpdateUomCategoryArgs
  ): Promise<UomCategory | null> {
    try {
      return await this.service.updateUomCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UomCategory)
  async deleteUomCategory(
    @graphql.Args() args: DeleteUomCategoryArgs
  ): Promise<UomCategory | null> {
    try {
      return await this.service.deleteUomCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
