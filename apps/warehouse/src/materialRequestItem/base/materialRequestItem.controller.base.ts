/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaterialRequestItemService } from "../materialRequestItem.service";
import { MaterialRequestItemCreateInput } from "./MaterialRequestItemCreateInput";
import { MaterialRequestItem } from "./MaterialRequestItem";
import { MaterialRequestItemFindManyArgs } from "./MaterialRequestItemFindManyArgs";
import { MaterialRequestItemWhereUniqueInput } from "./MaterialRequestItemWhereUniqueInput";
import { MaterialRequestItemUpdateInput } from "./MaterialRequestItemUpdateInput";

export class MaterialRequestItemControllerBase {
  constructor(protected readonly service: MaterialRequestItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaterialRequestItem })
  async createMaterialRequestItem(
    @common.Body() data: MaterialRequestItemCreateInput
  ): Promise<MaterialRequestItem> {
    return await this.service.createMaterialRequestItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaterialRequestItem] })
  @ApiNestedQuery(MaterialRequestItemFindManyArgs)
  async materialRequestItems(
    @common.Req() request: Request
  ): Promise<MaterialRequestItem[]> {
    const args = plainToClass(MaterialRequestItemFindManyArgs, request.query);
    return this.service.materialRequestItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaterialRequestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async materialRequestItem(
    @common.Param() params: MaterialRequestItemWhereUniqueInput
  ): Promise<MaterialRequestItem | null> {
    const result = await this.service.materialRequestItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaterialRequestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaterialRequestItem(
    @common.Param() params: MaterialRequestItemWhereUniqueInput,
    @common.Body() data: MaterialRequestItemUpdateInput
  ): Promise<MaterialRequestItem | null> {
    try {
      return await this.service.updateMaterialRequestItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaterialRequestItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaterialRequestItem(
    @common.Param() params: MaterialRequestItemWhereUniqueInput
  ): Promise<MaterialRequestItem | null> {
    try {
      return await this.service.deleteMaterialRequestItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
