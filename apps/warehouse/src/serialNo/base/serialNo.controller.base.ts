/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SerialNoService } from "../serialNo.service";
import { SerialNoCreateInput } from "./SerialNoCreateInput";
import { SerialNo } from "./SerialNo";
import { SerialNoFindManyArgs } from "./SerialNoFindManyArgs";
import { SerialNoWhereUniqueInput } from "./SerialNoWhereUniqueInput";
import { SerialNoUpdateInput } from "./SerialNoUpdateInput";

export class SerialNoControllerBase {
  constructor(protected readonly service: SerialNoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SerialNo })
  async createSerialNo(
    @common.Body() data: SerialNoCreateInput
  ): Promise<SerialNo> {
    return await this.service.createSerialNo({
      data: data,
      select: {
        amcExpiryDate: true,
        asset: true,
        assetStatus: true,
        batchNo: true,
        brand: true,
        company: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        employee: true,
        id: true,
        idx: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        location: true,
        maintenanceStatus: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        purchaseDocumentNo: true,
        purchaseRate: true,
        serialNo: true,
        status: true,
        updatedAt: true,
        warehouse: true,
        warrantyExpiryDate: true,
        warrantyPeriod: true,
        workOrder: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SerialNo] })
  @ApiNestedQuery(SerialNoFindManyArgs)
  async serialNos(@common.Req() request: Request): Promise<SerialNo[]> {
    const args = plainToClass(SerialNoFindManyArgs, request.query);
    return this.service.serialNos({
      ...args,
      select: {
        amcExpiryDate: true,
        asset: true,
        assetStatus: true,
        batchNo: true,
        brand: true,
        company: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        employee: true,
        id: true,
        idx: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        location: true,
        maintenanceStatus: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        purchaseDocumentNo: true,
        purchaseRate: true,
        serialNo: true,
        status: true,
        updatedAt: true,
        warehouse: true,
        warrantyExpiryDate: true,
        warrantyPeriod: true,
        workOrder: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SerialNo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serialNo(
    @common.Param() params: SerialNoWhereUniqueInput
  ): Promise<SerialNo | null> {
    const result = await this.service.serialNo({
      where: params,
      select: {
        amcExpiryDate: true,
        asset: true,
        assetStatus: true,
        batchNo: true,
        brand: true,
        company: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        employee: true,
        id: true,
        idx: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        location: true,
        maintenanceStatus: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        purchaseDocumentNo: true,
        purchaseRate: true,
        serialNo: true,
        status: true,
        updatedAt: true,
        warehouse: true,
        warrantyExpiryDate: true,
        warrantyPeriod: true,
        workOrder: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SerialNo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSerialNo(
    @common.Param() params: SerialNoWhereUniqueInput,
    @common.Body() data: SerialNoUpdateInput
  ): Promise<SerialNo | null> {
    try {
      return await this.service.updateSerialNo({
        where: params,
        data: data,
        select: {
          amcExpiryDate: true,
          asset: true,
          assetStatus: true,
          batchNo: true,
          brand: true,
          company: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          employee: true,
          id: true,
          idx: true,
          itemCode: true,
          itemGroup: true,
          itemName: true,
          location: true,
          maintenanceStatus: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          purchaseDocumentNo: true,
          purchaseRate: true,
          serialNo: true,
          status: true,
          updatedAt: true,
          warehouse: true,
          warrantyExpiryDate: true,
          warrantyPeriod: true,
          workOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SerialNo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSerialNo(
    @common.Param() params: SerialNoWhereUniqueInput
  ): Promise<SerialNo | null> {
    try {
      return await this.service.deleteSerialNo({
        where: params,
        select: {
          amcExpiryDate: true,
          asset: true,
          assetStatus: true,
          batchNo: true,
          brand: true,
          company: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          employee: true,
          id: true,
          idx: true,
          itemCode: true,
          itemGroup: true,
          itemName: true,
          location: true,
          maintenanceStatus: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          purchaseDocumentNo: true,
          purchaseRate: true,
          serialNo: true,
          status: true,
          updatedAt: true,
          warehouse: true,
          warrantyExpiryDate: true,
          warrantyPeriod: true,
          workOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
