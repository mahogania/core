/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SerialNo } from "./SerialNo";
import { SerialNoCountArgs } from "./SerialNoCountArgs";
import { SerialNoFindManyArgs } from "./SerialNoFindManyArgs";
import { SerialNoFindUniqueArgs } from "./SerialNoFindUniqueArgs";
import { CreateSerialNoArgs } from "./CreateSerialNoArgs";
import { UpdateSerialNoArgs } from "./UpdateSerialNoArgs";
import { DeleteSerialNoArgs } from "./DeleteSerialNoArgs";
import { SerialNoService } from "../serialNo.service";
@graphql.Resolver(() => SerialNo)
export class SerialNoResolverBase {
  constructor(protected readonly service: SerialNoService) {}

  async _serialNosMeta(
    @graphql.Args() args: SerialNoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SerialNo])
  async serialNos(
    @graphql.Args() args: SerialNoFindManyArgs
  ): Promise<SerialNo[]> {
    return this.service.serialNos(args);
  }

  @graphql.Query(() => SerialNo, { nullable: true })
  async serialNo(
    @graphql.Args() args: SerialNoFindUniqueArgs
  ): Promise<SerialNo | null> {
    const result = await this.service.serialNo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SerialNo)
  async createSerialNo(
    @graphql.Args() args: CreateSerialNoArgs
  ): Promise<SerialNo> {
    return await this.service.createSerialNo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SerialNo)
  async updateSerialNo(
    @graphql.Args() args: UpdateSerialNoArgs
  ): Promise<SerialNo | null> {
    try {
      return await this.service.updateSerialNo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SerialNo)
  async deleteSerialNo(
    @graphql.Args() args: DeleteSerialNoArgs
  ): Promise<SerialNo | null> {
    try {
      return await this.service.deleteSerialNo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
