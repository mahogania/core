/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PackingSlipService } from "../packingSlip.service";
import { PackingSlipCreateInput } from "./PackingSlipCreateInput";
import { PackingSlip } from "./PackingSlip";
import { PackingSlipFindManyArgs } from "./PackingSlipFindManyArgs";
import { PackingSlipWhereUniqueInput } from "./PackingSlipWhereUniqueInput";
import { PackingSlipUpdateInput } from "./PackingSlipUpdateInput";

export class PackingSlipControllerBase {
  constructor(protected readonly service: PackingSlipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PackingSlip })
  async createPackingSlip(
    @common.Body() data: PackingSlipCreateInput
  ): Promise<PackingSlip> {
    return await this.service.createPackingSlip({
      data: data,
      select: {
        amendedFrom: true,
        createdAt: true,
        creation: true,
        deliveryNote: true,
        docstatus: true,
        fromCaseNo: true,
        grossWeightPkg: true,
        grossWeightUom: true,
        id: true,
        idx: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        netWeightPkg: true,
        netWeightUom: true,
        owner: true,
        toCaseNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PackingSlip] })
  @ApiNestedQuery(PackingSlipFindManyArgs)
  async packingSlips(@common.Req() request: Request): Promise<PackingSlip[]> {
    const args = plainToClass(PackingSlipFindManyArgs, request.query);
    return this.service.packingSlips({
      ...args,
      select: {
        amendedFrom: true,
        createdAt: true,
        creation: true,
        deliveryNote: true,
        docstatus: true,
        fromCaseNo: true,
        grossWeightPkg: true,
        grossWeightUom: true,
        id: true,
        idx: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        netWeightPkg: true,
        netWeightUom: true,
        owner: true,
        toCaseNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PackingSlip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async packingSlip(
    @common.Param() params: PackingSlipWhereUniqueInput
  ): Promise<PackingSlip | null> {
    const result = await this.service.packingSlip({
      where: params,
      select: {
        amendedFrom: true,
        createdAt: true,
        creation: true,
        deliveryNote: true,
        docstatus: true,
        fromCaseNo: true,
        grossWeightPkg: true,
        grossWeightUom: true,
        id: true,
        idx: true,
        letterHead: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        netWeightPkg: true,
        netWeightUom: true,
        owner: true,
        toCaseNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PackingSlip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePackingSlip(
    @common.Param() params: PackingSlipWhereUniqueInput,
    @common.Body() data: PackingSlipUpdateInput
  ): Promise<PackingSlip | null> {
    try {
      return await this.service.updatePackingSlip({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          createdAt: true,
          creation: true,
          deliveryNote: true,
          docstatus: true,
          fromCaseNo: true,
          grossWeightPkg: true,
          grossWeightUom: true,
          id: true,
          idx: true,
          letterHead: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          netWeightPkg: true,
          netWeightUom: true,
          owner: true,
          toCaseNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PackingSlip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePackingSlip(
    @common.Param() params: PackingSlipWhereUniqueInput
  ): Promise<PackingSlip | null> {
    try {
      return await this.service.deletePackingSlip({
        where: params,
        select: {
          amendedFrom: true,
          createdAt: true,
          creation: true,
          deliveryNote: true,
          docstatus: true,
          fromCaseNo: true,
          grossWeightPkg: true,
          grossWeightUom: true,
          id: true,
          idx: true,
          letterHead: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          netWeightPkg: true,
          netWeightUom: true,
          owner: true,
          toCaseNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
