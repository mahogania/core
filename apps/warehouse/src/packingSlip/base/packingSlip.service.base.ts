/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PackingSlip as PrismaPackingSlip } from "@prisma/client";

export class PackingSlipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PackingSlipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.packingSlip.count(args);
  }

  async packingSlips(
    args: Prisma.PackingSlipFindManyArgs
  ): Promise<PrismaPackingSlip[]> {
    return this.prisma.packingSlip.findMany(args);
  }
  async packingSlip(
    args: Prisma.PackingSlipFindUniqueArgs
  ): Promise<PrismaPackingSlip | null> {
    return this.prisma.packingSlip.findUnique(args);
  }
  async createPackingSlip(
    args: Prisma.PackingSlipCreateArgs
  ): Promise<PrismaPackingSlip> {
    return this.prisma.packingSlip.create(args);
  }
  async updatePackingSlip(
    args: Prisma.PackingSlipUpdateArgs
  ): Promise<PrismaPackingSlip> {
    return this.prisma.packingSlip.update(args);
  }
  async deletePackingSlip(
    args: Prisma.PackingSlipDeleteArgs
  ): Promise<PrismaPackingSlip> {
    return this.prisma.packingSlip.delete(args);
  }
}
