/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PackingSlip } from "./PackingSlip";
import { PackingSlipCountArgs } from "./PackingSlipCountArgs";
import { PackingSlipFindManyArgs } from "./PackingSlipFindManyArgs";
import { PackingSlipFindUniqueArgs } from "./PackingSlipFindUniqueArgs";
import { CreatePackingSlipArgs } from "./CreatePackingSlipArgs";
import { UpdatePackingSlipArgs } from "./UpdatePackingSlipArgs";
import { DeletePackingSlipArgs } from "./DeletePackingSlipArgs";
import { PackingSlipService } from "../packingSlip.service";
@graphql.Resolver(() => PackingSlip)
export class PackingSlipResolverBase {
  constructor(protected readonly service: PackingSlipService) {}

  async _packingSlipsMeta(
    @graphql.Args() args: PackingSlipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PackingSlip])
  async packingSlips(
    @graphql.Args() args: PackingSlipFindManyArgs
  ): Promise<PackingSlip[]> {
    return this.service.packingSlips(args);
  }

  @graphql.Query(() => PackingSlip, { nullable: true })
  async packingSlip(
    @graphql.Args() args: PackingSlipFindUniqueArgs
  ): Promise<PackingSlip | null> {
    const result = await this.service.packingSlip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PackingSlip)
  async createPackingSlip(
    @graphql.Args() args: CreatePackingSlipArgs
  ): Promise<PackingSlip> {
    return await this.service.createPackingSlip({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PackingSlip)
  async updatePackingSlip(
    @graphql.Args() args: UpdatePackingSlipArgs
  ): Promise<PackingSlip | null> {
    try {
      return await this.service.updatePackingSlip({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PackingSlip)
  async deletePackingSlip(
    @graphql.Args() args: DeletePackingSlipArgs
  ): Promise<PackingSlip | null> {
    try {
      return await this.service.deletePackingSlip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
