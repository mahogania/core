/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UomService } from "../uom.service";
import { UomCreateInput } from "./UomCreateInput";
import { Uom } from "./Uom";
import { UomFindManyArgs } from "./UomFindManyArgs";
import { UomWhereUniqueInput } from "./UomWhereUniqueInput";
import { UomUpdateInput } from "./UomUpdateInput";

export class UomControllerBase {
  constructor(protected readonly service: UomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Uom })
  async createUom(@common.Body() data: UomCreateInput): Promise<Uom> {
    return await this.service.createUom({
      data: data,
      select: {
        createdAt: true,
        docstatus: true,
        enabled: true,
        id: true,
        idx: true,
        modifiedBy: true,
        mustBeWholeNumber: true,
        name: true,
        owner: true,
        uomName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Uom] })
  @ApiNestedQuery(UomFindManyArgs)
  async uoms(@common.Req() request: Request): Promise<Uom[]> {
    const args = plainToClass(UomFindManyArgs, request.query);
    return this.service.uoms({
      ...args,
      select: {
        createdAt: true,
        docstatus: true,
        enabled: true,
        id: true,
        idx: true,
        modifiedBy: true,
        mustBeWholeNumber: true,
        name: true,
        owner: true,
        uomName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Uom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uom(@common.Param() params: UomWhereUniqueInput): Promise<Uom | null> {
    const result = await this.service.uom({
      where: params,
      select: {
        createdAt: true,
        docstatus: true,
        enabled: true,
        id: true,
        idx: true,
        modifiedBy: true,
        mustBeWholeNumber: true,
        name: true,
        owner: true,
        uomName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Uom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUom(
    @common.Param() params: UomWhereUniqueInput,
    @common.Body() data: UomUpdateInput
  ): Promise<Uom | null> {
    try {
      return await this.service.updateUom({
        where: params,
        data: data,
        select: {
          createdAt: true,
          docstatus: true,
          enabled: true,
          id: true,
          idx: true,
          modifiedBy: true,
          mustBeWholeNumber: true,
          name: true,
          owner: true,
          uomName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Uom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUom(
    @common.Param() params: UomWhereUniqueInput
  ): Promise<Uom | null> {
    try {
      return await this.service.deleteUom({
        where: params,
        select: {
          createdAt: true,
          docstatus: true,
          enabled: true,
          id: true,
          idx: true,
          modifiedBy: true,
          mustBeWholeNumber: true,
          name: true,
          owner: true,
          uomName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
