/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InstallationNoteItem } from "./InstallationNoteItem";
import { InstallationNoteItemCountArgs } from "./InstallationNoteItemCountArgs";
import { InstallationNoteItemFindManyArgs } from "./InstallationNoteItemFindManyArgs";
import { InstallationNoteItemFindUniqueArgs } from "./InstallationNoteItemFindUniqueArgs";
import { CreateInstallationNoteItemArgs } from "./CreateInstallationNoteItemArgs";
import { UpdateInstallationNoteItemArgs } from "./UpdateInstallationNoteItemArgs";
import { DeleteInstallationNoteItemArgs } from "./DeleteInstallationNoteItemArgs";
import { InstallationNoteItemService } from "../installationNoteItem.service";
@graphql.Resolver(() => InstallationNoteItem)
export class InstallationNoteItemResolverBase {
  constructor(protected readonly service: InstallationNoteItemService) {}

  async _installationNoteItemsMeta(
    @graphql.Args() args: InstallationNoteItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InstallationNoteItem])
  async installationNoteItems(
    @graphql.Args() args: InstallationNoteItemFindManyArgs
  ): Promise<InstallationNoteItem[]> {
    return this.service.installationNoteItems(args);
  }

  @graphql.Query(() => InstallationNoteItem, { nullable: true })
  async installationNoteItem(
    @graphql.Args() args: InstallationNoteItemFindUniqueArgs
  ): Promise<InstallationNoteItem | null> {
    const result = await this.service.installationNoteItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InstallationNoteItem)
  async createInstallationNoteItem(
    @graphql.Args() args: CreateInstallationNoteItemArgs
  ): Promise<InstallationNoteItem> {
    return await this.service.createInstallationNoteItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InstallationNoteItem)
  async updateInstallationNoteItem(
    @graphql.Args() args: UpdateInstallationNoteItemArgs
  ): Promise<InstallationNoteItem | null> {
    try {
      return await this.service.updateInstallationNoteItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InstallationNoteItem)
  async deleteInstallationNoteItem(
    @graphql.Args() args: DeleteInstallationNoteItemArgs
  ): Promise<InstallationNoteItem | null> {
    try {
      return await this.service.deleteInstallationNoteItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
