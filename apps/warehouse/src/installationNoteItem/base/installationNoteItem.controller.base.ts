/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InstallationNoteItemService } from "../installationNoteItem.service";
import { InstallationNoteItemCreateInput } from "./InstallationNoteItemCreateInput";
import { InstallationNoteItem } from "./InstallationNoteItem";
import { InstallationNoteItemFindManyArgs } from "./InstallationNoteItemFindManyArgs";
import { InstallationNoteItemWhereUniqueInput } from "./InstallationNoteItemWhereUniqueInput";
import { InstallationNoteItemUpdateInput } from "./InstallationNoteItemUpdateInput";

export class InstallationNoteItemControllerBase {
  constructor(protected readonly service: InstallationNoteItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InstallationNoteItem })
  async createInstallationNoteItem(
    @common.Body() data: InstallationNoteItemCreateInput
  ): Promise<InstallationNoteItem> {
    return await this.service.createInstallationNoteItem({
      data: data,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        prevdocDetailDocname: true,
        prevdocDocname: true,
        prevdocDoctype: true,
        qty: true,
        serialAndBatchBundle: true,
        serialNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InstallationNoteItem] })
  @ApiNestedQuery(InstallationNoteItemFindManyArgs)
  async installationNoteItems(
    @common.Req() request: Request
  ): Promise<InstallationNoteItem[]> {
    const args = plainToClass(InstallationNoteItemFindManyArgs, request.query);
    return this.service.installationNoteItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        prevdocDetailDocname: true,
        prevdocDocname: true,
        prevdocDoctype: true,
        qty: true,
        serialAndBatchBundle: true,
        serialNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InstallationNoteItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async installationNoteItem(
    @common.Param() params: InstallationNoteItemWhereUniqueInput
  ): Promise<InstallationNoteItem | null> {
    const result = await this.service.installationNoteItem({
      where: params,
      select: {
        createdAt: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        prevdocDetailDocname: true,
        prevdocDocname: true,
        prevdocDoctype: true,
        qty: true,
        serialAndBatchBundle: true,
        serialNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InstallationNoteItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInstallationNoteItem(
    @common.Param() params: InstallationNoteItemWhereUniqueInput,
    @common.Body() data: InstallationNoteItemUpdateInput
  ): Promise<InstallationNoteItem | null> {
    try {
      return await this.service.updateInstallationNoteItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          prevdocDetailDocname: true,
          prevdocDocname: true,
          prevdocDoctype: true,
          qty: true,
          serialAndBatchBundle: true,
          serialNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InstallationNoteItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInstallationNoteItem(
    @common.Param() params: InstallationNoteItemWhereUniqueInput
  ): Promise<InstallationNoteItem | null> {
    try {
      return await this.service.deleteInstallationNoteItem({
        where: params,
        select: {
          createdAt: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          prevdocDetailDocname: true,
          prevdocDocname: true,
          prevdocDoctype: true,
          qty: true,
          serialAndBatchBundle: true,
          serialNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
