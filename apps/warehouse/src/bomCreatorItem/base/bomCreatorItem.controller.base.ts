/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomCreatorItemService } from "../bomCreatorItem.service";
import { BomCreatorItemCreateInput } from "./BomCreatorItemCreateInput";
import { BomCreatorItem } from "./BomCreatorItem";
import { BomCreatorItemFindManyArgs } from "./BomCreatorItemFindManyArgs";
import { BomCreatorItemWhereUniqueInput } from "./BomCreatorItemWhereUniqueInput";
import { BomCreatorItemUpdateInput } from "./BomCreatorItemUpdateInput";

export class BomCreatorItemControllerBase {
  constructor(protected readonly service: BomCreatorItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomCreatorItem })
  async createBomCreatorItem(
    @common.Body() data: BomCreatorItemCreateInput
  ): Promise<BomCreatorItem> {
    return await this.service.createBomCreatorItem({
      data: data,
      select: {
        amount: true,
        baseAmount: true,
        baseRate: true,
        bomCreated: true,
        conversionFactor: true,
        createdAt: true,
        creation: true,
        description: true,
        doNotExplode: true,
        docstatus: true,
        fgItem: true,
        fgReferenceId: true,
        id: true,
        idx: true,
        instruction: true,
        isExpandable: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentRowNo: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        rate: true,
        sourceWarehouse: true,
        sourcedBySupplier: true,
        stockQty: true,
        stockUom: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomCreatorItem] })
  @ApiNestedQuery(BomCreatorItemFindManyArgs)
  async bomCreatorItems(
    @common.Req() request: Request
  ): Promise<BomCreatorItem[]> {
    const args = plainToClass(BomCreatorItemFindManyArgs, request.query);
    return this.service.bomCreatorItems({
      ...args,
      select: {
        amount: true,
        baseAmount: true,
        baseRate: true,
        bomCreated: true,
        conversionFactor: true,
        createdAt: true,
        creation: true,
        description: true,
        doNotExplode: true,
        docstatus: true,
        fgItem: true,
        fgReferenceId: true,
        id: true,
        idx: true,
        instruction: true,
        isExpandable: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentRowNo: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        rate: true,
        sourceWarehouse: true,
        sourcedBySupplier: true,
        stockQty: true,
        stockUom: true,
        uom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomCreatorItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomCreatorItem(
    @common.Param() params: BomCreatorItemWhereUniqueInput
  ): Promise<BomCreatorItem | null> {
    const result = await this.service.bomCreatorItem({
      where: params,
      select: {
        amount: true,
        baseAmount: true,
        baseRate: true,
        bomCreated: true,
        conversionFactor: true,
        createdAt: true,
        creation: true,
        description: true,
        doNotExplode: true,
        docstatus: true,
        fgItem: true,
        fgReferenceId: true,
        id: true,
        idx: true,
        instruction: true,
        isExpandable: true,
        itemCode: true,
        itemGroup: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentRowNo: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        rate: true,
        sourceWarehouse: true,
        sourcedBySupplier: true,
        stockQty: true,
        stockUom: true,
        uom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomCreatorItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomCreatorItem(
    @common.Param() params: BomCreatorItemWhereUniqueInput,
    @common.Body() data: BomCreatorItemUpdateInput
  ): Promise<BomCreatorItem | null> {
    try {
      return await this.service.updateBomCreatorItem({
        where: params,
        data: data,
        select: {
          amount: true,
          baseAmount: true,
          baseRate: true,
          bomCreated: true,
          conversionFactor: true,
          createdAt: true,
          creation: true,
          description: true,
          doNotExplode: true,
          docstatus: true,
          fgItem: true,
          fgReferenceId: true,
          id: true,
          idx: true,
          instruction: true,
          isExpandable: true,
          itemCode: true,
          itemGroup: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentRowNo: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          rate: true,
          sourceWarehouse: true,
          sourcedBySupplier: true,
          stockQty: true,
          stockUom: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomCreatorItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomCreatorItem(
    @common.Param() params: BomCreatorItemWhereUniqueInput
  ): Promise<BomCreatorItem | null> {
    try {
      return await this.service.deleteBomCreatorItem({
        where: params,
        select: {
          amount: true,
          baseAmount: true,
          baseRate: true,
          bomCreated: true,
          conversionFactor: true,
          createdAt: true,
          creation: true,
          description: true,
          doNotExplode: true,
          docstatus: true,
          fgItem: true,
          fgReferenceId: true,
          id: true,
          idx: true,
          instruction: true,
          isExpandable: true,
          itemCode: true,
          itemGroup: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentRowNo: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          rate: true,
          sourceWarehouse: true,
          sourcedBySupplier: true,
          stockQty: true,
          stockUom: true,
          uom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
