/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomCreatorItem } from "./BomCreatorItem";
import { BomCreatorItemCountArgs } from "./BomCreatorItemCountArgs";
import { BomCreatorItemFindManyArgs } from "./BomCreatorItemFindManyArgs";
import { BomCreatorItemFindUniqueArgs } from "./BomCreatorItemFindUniqueArgs";
import { CreateBomCreatorItemArgs } from "./CreateBomCreatorItemArgs";
import { UpdateBomCreatorItemArgs } from "./UpdateBomCreatorItemArgs";
import { DeleteBomCreatorItemArgs } from "./DeleteBomCreatorItemArgs";
import { BomCreatorItemService } from "../bomCreatorItem.service";
@graphql.Resolver(() => BomCreatorItem)
export class BomCreatorItemResolverBase {
  constructor(protected readonly service: BomCreatorItemService) {}

  async _bomCreatorItemsMeta(
    @graphql.Args() args: BomCreatorItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomCreatorItem])
  async bomCreatorItems(
    @graphql.Args() args: BomCreatorItemFindManyArgs
  ): Promise<BomCreatorItem[]> {
    return this.service.bomCreatorItems(args);
  }

  @graphql.Query(() => BomCreatorItem, { nullable: true })
  async bomCreatorItem(
    @graphql.Args() args: BomCreatorItemFindUniqueArgs
  ): Promise<BomCreatorItem | null> {
    const result = await this.service.bomCreatorItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomCreatorItem)
  async createBomCreatorItem(
    @graphql.Args() args: CreateBomCreatorItemArgs
  ): Promise<BomCreatorItem> {
    return await this.service.createBomCreatorItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomCreatorItem)
  async updateBomCreatorItem(
    @graphql.Args() args: UpdateBomCreatorItemArgs
  ): Promise<BomCreatorItem | null> {
    try {
      return await this.service.updateBomCreatorItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomCreatorItem)
  async deleteBomCreatorItem(
    @graphql.Args() args: DeleteBomCreatorItemArgs
  ): Promise<BomCreatorItem | null> {
    try {
      return await this.service.deleteBomCreatorItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
