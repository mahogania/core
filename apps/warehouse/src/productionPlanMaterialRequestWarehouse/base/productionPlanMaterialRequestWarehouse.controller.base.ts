/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionPlanMaterialRequestWarehouseService } from "../productionPlanMaterialRequestWarehouse.service";
import { ProductionPlanMaterialRequestWarehouseCreateInput } from "./ProductionPlanMaterialRequestWarehouseCreateInput";
import { ProductionPlanMaterialRequestWarehouse } from "./ProductionPlanMaterialRequestWarehouse";
import { ProductionPlanMaterialRequestWarehouseFindManyArgs } from "./ProductionPlanMaterialRequestWarehouseFindManyArgs";
import { ProductionPlanMaterialRequestWarehouseWhereUniqueInput } from "./ProductionPlanMaterialRequestWarehouseWhereUniqueInput";
import { ProductionPlanMaterialRequestWarehouseUpdateInput } from "./ProductionPlanMaterialRequestWarehouseUpdateInput";

export class ProductionPlanMaterialRequestWarehouseControllerBase {
  constructor(
    protected readonly service: ProductionPlanMaterialRequestWarehouseService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionPlanMaterialRequestWarehouse })
  async createProductionPlanMaterialRequestWarehouse(
    @common.Body() data: ProductionPlanMaterialRequestWarehouseCreateInput
  ): Promise<ProductionPlanMaterialRequestWarehouse> {
    return await this.service.createProductionPlanMaterialRequestWarehouse({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        warehouse: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionPlanMaterialRequestWarehouse] })
  @ApiNestedQuery(ProductionPlanMaterialRequestWarehouseFindManyArgs)
  async productionPlanMaterialRequestWarehouses(
    @common.Req() request: Request
  ): Promise<ProductionPlanMaterialRequestWarehouse[]> {
    const args = plainToClass(
      ProductionPlanMaterialRequestWarehouseFindManyArgs,
      request.query
    );
    return this.service.productionPlanMaterialRequestWarehouses({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        warehouse: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanMaterialRequestWarehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionPlanMaterialRequestWarehouse(
    @common.Param()
    params: ProductionPlanMaterialRequestWarehouseWhereUniqueInput
  ): Promise<ProductionPlanMaterialRequestWarehouse | null> {
    const result = await this.service.productionPlanMaterialRequestWarehouse({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
        warehouse: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanMaterialRequestWarehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionPlanMaterialRequestWarehouse(
    @common.Param()
    params: ProductionPlanMaterialRequestWarehouseWhereUniqueInput,
    @common.Body() data: ProductionPlanMaterialRequestWarehouseUpdateInput
  ): Promise<ProductionPlanMaterialRequestWarehouse | null> {
    try {
      return await this.service.updateProductionPlanMaterialRequestWarehouse({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanMaterialRequestWarehouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionPlanMaterialRequestWarehouse(
    @common.Param()
    params: ProductionPlanMaterialRequestWarehouseWhereUniqueInput
  ): Promise<ProductionPlanMaterialRequestWarehouse | null> {
    try {
      return await this.service.deleteProductionPlanMaterialRequestWarehouse({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
