/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionPlanItem } from "./ProductionPlanItem";
import { ProductionPlanItemCountArgs } from "./ProductionPlanItemCountArgs";
import { ProductionPlanItemFindManyArgs } from "./ProductionPlanItemFindManyArgs";
import { ProductionPlanItemFindUniqueArgs } from "./ProductionPlanItemFindUniqueArgs";
import { CreateProductionPlanItemArgs } from "./CreateProductionPlanItemArgs";
import { UpdateProductionPlanItemArgs } from "./UpdateProductionPlanItemArgs";
import { DeleteProductionPlanItemArgs } from "./DeleteProductionPlanItemArgs";
import { ProductionPlanItemService } from "../productionPlanItem.service";
@graphql.Resolver(() => ProductionPlanItem)
export class ProductionPlanItemResolverBase {
  constructor(protected readonly service: ProductionPlanItemService) {}

  async _productionPlanItemsMeta(
    @graphql.Args() args: ProductionPlanItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionPlanItem])
  async productionPlanItems(
    @graphql.Args() args: ProductionPlanItemFindManyArgs
  ): Promise<ProductionPlanItem[]> {
    return this.service.productionPlanItems(args);
  }

  @graphql.Query(() => ProductionPlanItem, { nullable: true })
  async productionPlanItem(
    @graphql.Args() args: ProductionPlanItemFindUniqueArgs
  ): Promise<ProductionPlanItem | null> {
    const result = await this.service.productionPlanItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionPlanItem)
  async createProductionPlanItem(
    @graphql.Args() args: CreateProductionPlanItemArgs
  ): Promise<ProductionPlanItem> {
    return await this.service.createProductionPlanItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductionPlanItem)
  async updateProductionPlanItem(
    @graphql.Args() args: UpdateProductionPlanItemArgs
  ): Promise<ProductionPlanItem | null> {
    try {
      return await this.service.updateProductionPlanItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionPlanItem)
  async deleteProductionPlanItem(
    @graphql.Args() args: DeleteProductionPlanItemArgs
  ): Promise<ProductionPlanItem | null> {
    try {
      return await this.service.deleteProductionPlanItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
