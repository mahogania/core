/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaterialRequestService } from "../materialRequest.service";
import { MaterialRequestCreateInput } from "./MaterialRequestCreateInput";
import { MaterialRequest } from "./MaterialRequest";
import { MaterialRequestFindManyArgs } from "./MaterialRequestFindManyArgs";
import { MaterialRequestWhereUniqueInput } from "./MaterialRequestWhereUniqueInput";
import { MaterialRequestUpdateInput } from "./MaterialRequestUpdateInput";

export class MaterialRequestControllerBase {
  constructor(protected readonly service: MaterialRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaterialRequest })
  async createMaterialRequest(
    @common.Body() data: MaterialRequestCreateInput
  ): Promise<MaterialRequest> {
    return await this.service.createMaterialRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaterialRequest] })
  @ApiNestedQuery(MaterialRequestFindManyArgs)
  async materialRequests(
    @common.Req() request: Request
  ): Promise<MaterialRequest[]> {
    const args = plainToClass(MaterialRequestFindManyArgs, request.query);
    return this.service.materialRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaterialRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async materialRequest(
    @common.Param() params: MaterialRequestWhereUniqueInput
  ): Promise<MaterialRequest | null> {
    const result = await this.service.materialRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaterialRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaterialRequest(
    @common.Param() params: MaterialRequestWhereUniqueInput,
    @common.Body() data: MaterialRequestUpdateInput
  ): Promise<MaterialRequest | null> {
    try {
      return await this.service.updateMaterialRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaterialRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaterialRequest(
    @common.Param() params: MaterialRequestWhereUniqueInput
  ): Promise<MaterialRequest | null> {
    try {
      return await this.service.deleteMaterialRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
