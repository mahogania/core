/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MaterialRequest as PrismaMaterialRequest,
} from "@prisma/client";

export class MaterialRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MaterialRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.materialRequest.count(args);
  }

  async materialRequests(
    args: Prisma.MaterialRequestFindManyArgs
  ): Promise<PrismaMaterialRequest[]> {
    return this.prisma.materialRequest.findMany(args);
  }
  async materialRequest(
    args: Prisma.MaterialRequestFindUniqueArgs
  ): Promise<PrismaMaterialRequest | null> {
    return this.prisma.materialRequest.findUnique(args);
  }
  async createMaterialRequest(
    args: Prisma.MaterialRequestCreateArgs
  ): Promise<PrismaMaterialRequest> {
    return this.prisma.materialRequest.create(args);
  }
  async updateMaterialRequest(
    args: Prisma.MaterialRequestUpdateArgs
  ): Promise<PrismaMaterialRequest> {
    return this.prisma.materialRequest.update(args);
  }
  async deleteMaterialRequest(
    args: Prisma.MaterialRequestDeleteArgs
  ): Promise<PrismaMaterialRequest> {
    return this.prisma.materialRequest.delete(args);
  }
}
