/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MaterialRequest } from "./MaterialRequest";
import { MaterialRequestCountArgs } from "./MaterialRequestCountArgs";
import { MaterialRequestFindManyArgs } from "./MaterialRequestFindManyArgs";
import { MaterialRequestFindUniqueArgs } from "./MaterialRequestFindUniqueArgs";
import { DeleteMaterialRequestArgs } from "./DeleteMaterialRequestArgs";
import { MaterialRequestService } from "../materialRequest.service";
@graphql.Resolver(() => MaterialRequest)
export class MaterialRequestResolverBase {
  constructor(protected readonly service: MaterialRequestService) {}

  async _materialRequestsMeta(
    @graphql.Args() args: MaterialRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MaterialRequest])
  async materialRequests(
    @graphql.Args() args: MaterialRequestFindManyArgs
  ): Promise<MaterialRequest[]> {
    return this.service.materialRequests(args);
  }

  @graphql.Query(() => MaterialRequest, { nullable: true })
  async materialRequest(
    @graphql.Args() args: MaterialRequestFindUniqueArgs
  ): Promise<MaterialRequest | null> {
    const result = await this.service.materialRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MaterialRequest)
  async deleteMaterialRequest(
    @graphql.Args() args: DeleteMaterialRequestArgs
  ): Promise<MaterialRequest | null> {
    try {
      return await this.service.deleteMaterialRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
