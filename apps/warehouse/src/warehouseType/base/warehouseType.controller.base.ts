/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WarehouseTypeService } from "../warehouseType.service";
import { WarehouseTypeCreateInput } from "./WarehouseTypeCreateInput";
import { WarehouseType } from "./WarehouseType";
import { WarehouseTypeFindManyArgs } from "./WarehouseTypeFindManyArgs";
import { WarehouseTypeWhereUniqueInput } from "./WarehouseTypeWhereUniqueInput";
import { WarehouseTypeUpdateInput } from "./WarehouseTypeUpdateInput";

export class WarehouseTypeControllerBase {
  constructor(protected readonly service: WarehouseTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WarehouseType })
  async createWarehouseType(
    @common.Body() data: WarehouseTypeCreateInput
  ): Promise<WarehouseType> {
    return await this.service.createWarehouseType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WarehouseType] })
  @ApiNestedQuery(WarehouseTypeFindManyArgs)
  async warehouseTypes(
    @common.Req() request: Request
  ): Promise<WarehouseType[]> {
    const args = plainToClass(WarehouseTypeFindManyArgs, request.query);
    return this.service.warehouseTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WarehouseType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async warehouseType(
    @common.Param() params: WarehouseTypeWhereUniqueInput
  ): Promise<WarehouseType | null> {
    const result = await this.service.warehouseType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WarehouseType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWarehouseType(
    @common.Param() params: WarehouseTypeWhereUniqueInput,
    @common.Body() data: WarehouseTypeUpdateInput
  ): Promise<WarehouseType | null> {
    try {
      return await this.service.updateWarehouseType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WarehouseType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWarehouseType(
    @common.Param() params: WarehouseTypeWhereUniqueInput
  ): Promise<WarehouseType | null> {
    try {
      return await this.service.deleteWarehouseType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
