/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomExplosionItem } from "./BomExplosionItem";
import { BomExplosionItemCountArgs } from "./BomExplosionItemCountArgs";
import { BomExplosionItemFindManyArgs } from "./BomExplosionItemFindManyArgs";
import { BomExplosionItemFindUniqueArgs } from "./BomExplosionItemFindUniqueArgs";
import { CreateBomExplosionItemArgs } from "./CreateBomExplosionItemArgs";
import { UpdateBomExplosionItemArgs } from "./UpdateBomExplosionItemArgs";
import { DeleteBomExplosionItemArgs } from "./DeleteBomExplosionItemArgs";
import { BomExplosionItemService } from "../bomExplosionItem.service";
@graphql.Resolver(() => BomExplosionItem)
export class BomExplosionItemResolverBase {
  constructor(protected readonly service: BomExplosionItemService) {}

  async _bomExplosionItemsMeta(
    @graphql.Args() args: BomExplosionItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomExplosionItem])
  async bomExplosionItems(
    @graphql.Args() args: BomExplosionItemFindManyArgs
  ): Promise<BomExplosionItem[]> {
    return this.service.bomExplosionItems(args);
  }

  @graphql.Query(() => BomExplosionItem, { nullable: true })
  async bomExplosionItem(
    @graphql.Args() args: BomExplosionItemFindUniqueArgs
  ): Promise<BomExplosionItem | null> {
    const result = await this.service.bomExplosionItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomExplosionItem)
  async createBomExplosionItem(
    @graphql.Args() args: CreateBomExplosionItemArgs
  ): Promise<BomExplosionItem> {
    return await this.service.createBomExplosionItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomExplosionItem)
  async updateBomExplosionItem(
    @graphql.Args() args: UpdateBomExplosionItemArgs
  ): Promise<BomExplosionItem | null> {
    try {
      return await this.service.updateBomExplosionItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomExplosionItem)
  async deleteBomExplosionItem(
    @graphql.Args() args: DeleteBomExplosionItemArgs
  ): Promise<BomExplosionItem | null> {
    try {
      return await this.service.deleteBomExplosionItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
