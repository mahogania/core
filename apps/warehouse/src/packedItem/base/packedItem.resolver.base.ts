/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PackedItem } from "./PackedItem";
import { PackedItemCountArgs } from "./PackedItemCountArgs";
import { PackedItemFindManyArgs } from "./PackedItemFindManyArgs";
import { PackedItemFindUniqueArgs } from "./PackedItemFindUniqueArgs";
import { CreatePackedItemArgs } from "./CreatePackedItemArgs";
import { UpdatePackedItemArgs } from "./UpdatePackedItemArgs";
import { DeletePackedItemArgs } from "./DeletePackedItemArgs";
import { PackedItemService } from "../packedItem.service";
@graphql.Resolver(() => PackedItem)
export class PackedItemResolverBase {
  constructor(protected readonly service: PackedItemService) {}

  async _packedItemsMeta(
    @graphql.Args() args: PackedItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PackedItem])
  async packedItems(
    @graphql.Args() args: PackedItemFindManyArgs
  ): Promise<PackedItem[]> {
    return this.service.packedItems(args);
  }

  @graphql.Query(() => PackedItem, { nullable: true })
  async packedItem(
    @graphql.Args() args: PackedItemFindUniqueArgs
  ): Promise<PackedItem | null> {
    const result = await this.service.packedItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PackedItem)
  async createPackedItem(
    @graphql.Args() args: CreatePackedItemArgs
  ): Promise<PackedItem> {
    return await this.service.createPackedItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PackedItem)
  async updatePackedItem(
    @graphql.Args() args: UpdatePackedItemArgs
  ): Promise<PackedItem | null> {
    try {
      return await this.service.updatePackedItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PackedItem)
  async deletePackedItem(
    @graphql.Args() args: DeletePackedItemArgs
  ): Promise<PackedItem | null> {
    try {
      return await this.service.deletePackedItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
