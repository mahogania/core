/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PackedItemService } from "../packedItem.service";
import { PackedItemCreateInput } from "./PackedItemCreateInput";
import { PackedItem } from "./PackedItem";
import { PackedItemFindManyArgs } from "./PackedItemFindManyArgs";
import { PackedItemWhereUniqueInput } from "./PackedItemWhereUniqueInput";
import { PackedItemUpdateInput } from "./PackedItemUpdateInput";

export class PackedItemControllerBase {
  constructor(protected readonly service: PackedItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PackedItem })
  async createPackedItem(
    @common.Body() data: PackedItemCreateInput
  ): Promise<PackedItem> {
    return await this.service.createPackedItem({
      data: data,
      select: {
        actualBatchQty: true,
        actualQty: true,
        batchNo: true,
        conversionFactor: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        incomingRate: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        orderedQty: true,
        owner: true,
        packedQty: true,
        pageBreak: true,
        parent: true,
        parentDetailDocname: true,
        parentItem: true,
        parentfield: true,
        parenttype: true,
        pickedQty: true,
        prevdocDoctype: true,
        projectedQty: true,
        qty: true,
        rate: true,
        serialAndBatchBundle: true,
        serialNo: true,
        targetWarehouse: true,
        uom: true,
        updatedAt: true,
        useSerialBatchFields: true,
        warehouse: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PackedItem] })
  @ApiNestedQuery(PackedItemFindManyArgs)
  async packedItems(@common.Req() request: Request): Promise<PackedItem[]> {
    const args = plainToClass(PackedItemFindManyArgs, request.query);
    return this.service.packedItems({
      ...args,
      select: {
        actualBatchQty: true,
        actualQty: true,
        batchNo: true,
        conversionFactor: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        incomingRate: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        orderedQty: true,
        owner: true,
        packedQty: true,
        pageBreak: true,
        parent: true,
        parentDetailDocname: true,
        parentItem: true,
        parentfield: true,
        parenttype: true,
        pickedQty: true,
        prevdocDoctype: true,
        projectedQty: true,
        qty: true,
        rate: true,
        serialAndBatchBundle: true,
        serialNo: true,
        targetWarehouse: true,
        uom: true,
        updatedAt: true,
        useSerialBatchFields: true,
        warehouse: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PackedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async packedItem(
    @common.Param() params: PackedItemWhereUniqueInput
  ): Promise<PackedItem | null> {
    const result = await this.service.packedItem({
      where: params,
      select: {
        actualBatchQty: true,
        actualQty: true,
        batchNo: true,
        conversionFactor: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        incomingRate: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        orderedQty: true,
        owner: true,
        packedQty: true,
        pageBreak: true,
        parent: true,
        parentDetailDocname: true,
        parentItem: true,
        parentfield: true,
        parenttype: true,
        pickedQty: true,
        prevdocDoctype: true,
        projectedQty: true,
        qty: true,
        rate: true,
        serialAndBatchBundle: true,
        serialNo: true,
        targetWarehouse: true,
        uom: true,
        updatedAt: true,
        useSerialBatchFields: true,
        warehouse: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PackedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePackedItem(
    @common.Param() params: PackedItemWhereUniqueInput,
    @common.Body() data: PackedItemUpdateInput
  ): Promise<PackedItem | null> {
    try {
      return await this.service.updatePackedItem({
        where: params,
        data: data,
        select: {
          actualBatchQty: true,
          actualQty: true,
          batchNo: true,
          conversionFactor: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          incomingRate: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          orderedQty: true,
          owner: true,
          packedQty: true,
          pageBreak: true,
          parent: true,
          parentDetailDocname: true,
          parentItem: true,
          parentfield: true,
          parenttype: true,
          pickedQty: true,
          prevdocDoctype: true,
          projectedQty: true,
          qty: true,
          rate: true,
          serialAndBatchBundle: true,
          serialNo: true,
          targetWarehouse: true,
          uom: true,
          updatedAt: true,
          useSerialBatchFields: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PackedItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePackedItem(
    @common.Param() params: PackedItemWhereUniqueInput
  ): Promise<PackedItem | null> {
    try {
      return await this.service.deletePackedItem({
        where: params,
        select: {
          actualBatchQty: true,
          actualQty: true,
          batchNo: true,
          conversionFactor: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          incomingRate: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          orderedQty: true,
          owner: true,
          packedQty: true,
          pageBreak: true,
          parent: true,
          parentDetailDocname: true,
          parentItem: true,
          parentfield: true,
          parenttype: true,
          pickedQty: true,
          prevdocDoctype: true,
          projectedQty: true,
          qty: true,
          rate: true,
          serialAndBatchBundle: true,
          serialNo: true,
          targetWarehouse: true,
          uom: true,
          updatedAt: true,
          useSerialBatchFields: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
