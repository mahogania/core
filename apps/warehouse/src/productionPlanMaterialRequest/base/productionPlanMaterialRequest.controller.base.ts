/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionPlanMaterialRequestService } from "../productionPlanMaterialRequest.service";
import { ProductionPlanMaterialRequestCreateInput } from "./ProductionPlanMaterialRequestCreateInput";
import { ProductionPlanMaterialRequest } from "./ProductionPlanMaterialRequest";
import { ProductionPlanMaterialRequestFindManyArgs } from "./ProductionPlanMaterialRequestFindManyArgs";
import { ProductionPlanMaterialRequestWhereUniqueInput } from "./ProductionPlanMaterialRequestWhereUniqueInput";
import { ProductionPlanMaterialRequestUpdateInput } from "./ProductionPlanMaterialRequestUpdateInput";

export class ProductionPlanMaterialRequestControllerBase {
  constructor(
    protected readonly service: ProductionPlanMaterialRequestService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionPlanMaterialRequest })
  async createProductionPlanMaterialRequest(
    @common.Body() data: ProductionPlanMaterialRequestCreateInput
  ): Promise<ProductionPlanMaterialRequest> {
    return await this.service.createProductionPlanMaterialRequest({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        materialRequest: true,
        materialRequestDate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionPlanMaterialRequest] })
  @ApiNestedQuery(ProductionPlanMaterialRequestFindManyArgs)
  async productionPlanMaterialRequests(
    @common.Req() request: Request
  ): Promise<ProductionPlanMaterialRequest[]> {
    const args = plainToClass(
      ProductionPlanMaterialRequestFindManyArgs,
      request.query
    );
    return this.service.productionPlanMaterialRequests({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        materialRequest: true,
        materialRequestDate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanMaterialRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionPlanMaterialRequest(
    @common.Param() params: ProductionPlanMaterialRequestWhereUniqueInput
  ): Promise<ProductionPlanMaterialRequest | null> {
    const result = await this.service.productionPlanMaterialRequest({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        materialRequest: true,
        materialRequestDate: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanMaterialRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionPlanMaterialRequest(
    @common.Param() params: ProductionPlanMaterialRequestWhereUniqueInput,
    @common.Body() data: ProductionPlanMaterialRequestUpdateInput
  ): Promise<ProductionPlanMaterialRequest | null> {
    try {
      return await this.service.updateProductionPlanMaterialRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          materialRequest: true,
          materialRequestDate: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlanMaterialRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionPlanMaterialRequest(
    @common.Param() params: ProductionPlanMaterialRequestWhereUniqueInput
  ): Promise<ProductionPlanMaterialRequest | null> {
    try {
      return await this.service.deleteProductionPlanMaterialRequest({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          materialRequest: true,
          materialRequestDate: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
