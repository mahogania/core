/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionPlanMaterialRequest } from "./ProductionPlanMaterialRequest";
import { ProductionPlanMaterialRequestCountArgs } from "./ProductionPlanMaterialRequestCountArgs";
import { ProductionPlanMaterialRequestFindManyArgs } from "./ProductionPlanMaterialRequestFindManyArgs";
import { ProductionPlanMaterialRequestFindUniqueArgs } from "./ProductionPlanMaterialRequestFindUniqueArgs";
import { CreateProductionPlanMaterialRequestArgs } from "./CreateProductionPlanMaterialRequestArgs";
import { UpdateProductionPlanMaterialRequestArgs } from "./UpdateProductionPlanMaterialRequestArgs";
import { DeleteProductionPlanMaterialRequestArgs } from "./DeleteProductionPlanMaterialRequestArgs";
import { ProductionPlanMaterialRequestService } from "../productionPlanMaterialRequest.service";
@graphql.Resolver(() => ProductionPlanMaterialRequest)
export class ProductionPlanMaterialRequestResolverBase {
  constructor(
    protected readonly service: ProductionPlanMaterialRequestService
  ) {}

  async _productionPlanMaterialRequestsMeta(
    @graphql.Args() args: ProductionPlanMaterialRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionPlanMaterialRequest])
  async productionPlanMaterialRequests(
    @graphql.Args() args: ProductionPlanMaterialRequestFindManyArgs
  ): Promise<ProductionPlanMaterialRequest[]> {
    return this.service.productionPlanMaterialRequests(args);
  }

  @graphql.Query(() => ProductionPlanMaterialRequest, { nullable: true })
  async productionPlanMaterialRequest(
    @graphql.Args() args: ProductionPlanMaterialRequestFindUniqueArgs
  ): Promise<ProductionPlanMaterialRequest | null> {
    const result = await this.service.productionPlanMaterialRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionPlanMaterialRequest)
  async createProductionPlanMaterialRequest(
    @graphql.Args() args: CreateProductionPlanMaterialRequestArgs
  ): Promise<ProductionPlanMaterialRequest> {
    return await this.service.createProductionPlanMaterialRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductionPlanMaterialRequest)
  async updateProductionPlanMaterialRequest(
    @graphql.Args() args: UpdateProductionPlanMaterialRequestArgs
  ): Promise<ProductionPlanMaterialRequest | null> {
    try {
      return await this.service.updateProductionPlanMaterialRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionPlanMaterialRequest)
  async deleteProductionPlanMaterialRequest(
    @graphql.Args() args: DeleteProductionPlanMaterialRequestArgs
  ): Promise<ProductionPlanMaterialRequest | null> {
    try {
      return await this.service.deleteProductionPlanMaterialRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
