/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomWebsiteItemService } from "../bomWebsiteItem.service";
import { BomWebsiteItemCreateInput } from "./BomWebsiteItemCreateInput";
import { BomWebsiteItem } from "./BomWebsiteItem";
import { BomWebsiteItemFindManyArgs } from "./BomWebsiteItemFindManyArgs";
import { BomWebsiteItemWhereUniqueInput } from "./BomWebsiteItemWhereUniqueInput";
import { BomWebsiteItemUpdateInput } from "./BomWebsiteItemUpdateInput";

export class BomWebsiteItemControllerBase {
  constructor(protected readonly service: BomWebsiteItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomWebsiteItem })
  async createBomWebsiteItem(
    @common.Body() data: BomWebsiteItemCreateInput
  ): Promise<BomWebsiteItem> {
    return await this.service.createBomWebsiteItem({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        updatedAt: true,
        websiteImage: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomWebsiteItem] })
  @ApiNestedQuery(BomWebsiteItemFindManyArgs)
  async bomWebsiteItems(
    @common.Req() request: Request
  ): Promise<BomWebsiteItem[]> {
    const args = plainToClass(BomWebsiteItemFindManyArgs, request.query);
    return this.service.bomWebsiteItems({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        updatedAt: true,
        websiteImage: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomWebsiteItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomWebsiteItem(
    @common.Param() params: BomWebsiteItemWhereUniqueInput
  ): Promise<BomWebsiteItem | null> {
    const result = await this.service.bomWebsiteItem({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        id: true,
        idx: true,
        itemCode: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        updatedAt: true,
        websiteImage: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomWebsiteItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomWebsiteItem(
    @common.Param() params: BomWebsiteItemWhereUniqueInput,
    @common.Body() data: BomWebsiteItemUpdateInput
  ): Promise<BomWebsiteItem | null> {
    try {
      return await this.service.updateBomWebsiteItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          updatedAt: true,
          websiteImage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomWebsiteItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomWebsiteItem(
    @common.Param() params: BomWebsiteItemWhereUniqueInput
  ): Promise<BomWebsiteItem | null> {
    try {
      return await this.service.deleteBomWebsiteItem({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          id: true,
          idx: true,
          itemCode: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          updatedAt: true,
          websiteImage: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
