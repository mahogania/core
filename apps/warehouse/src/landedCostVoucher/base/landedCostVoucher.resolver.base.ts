/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LandedCostVoucher } from "./LandedCostVoucher";
import { LandedCostVoucherCountArgs } from "./LandedCostVoucherCountArgs";
import { LandedCostVoucherFindManyArgs } from "./LandedCostVoucherFindManyArgs";
import { LandedCostVoucherFindUniqueArgs } from "./LandedCostVoucherFindUniqueArgs";
import { CreateLandedCostVoucherArgs } from "./CreateLandedCostVoucherArgs";
import { UpdateLandedCostVoucherArgs } from "./UpdateLandedCostVoucherArgs";
import { DeleteLandedCostVoucherArgs } from "./DeleteLandedCostVoucherArgs";
import { LandedCostVoucherService } from "../landedCostVoucher.service";
@graphql.Resolver(() => LandedCostVoucher)
export class LandedCostVoucherResolverBase {
  constructor(protected readonly service: LandedCostVoucherService) {}

  async _landedCostVouchersMeta(
    @graphql.Args() args: LandedCostVoucherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LandedCostVoucher])
  async landedCostVouchers(
    @graphql.Args() args: LandedCostVoucherFindManyArgs
  ): Promise<LandedCostVoucher[]> {
    return this.service.landedCostVouchers(args);
  }

  @graphql.Query(() => LandedCostVoucher, { nullable: true })
  async landedCostVoucher(
    @graphql.Args() args: LandedCostVoucherFindUniqueArgs
  ): Promise<LandedCostVoucher | null> {
    const result = await this.service.landedCostVoucher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LandedCostVoucher)
  async createLandedCostVoucher(
    @graphql.Args() args: CreateLandedCostVoucherArgs
  ): Promise<LandedCostVoucher> {
    return await this.service.createLandedCostVoucher({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LandedCostVoucher)
  async updateLandedCostVoucher(
    @graphql.Args() args: UpdateLandedCostVoucherArgs
  ): Promise<LandedCostVoucher | null> {
    try {
      return await this.service.updateLandedCostVoucher({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LandedCostVoucher)
  async deleteLandedCostVoucher(
    @graphql.Args() args: DeleteLandedCostVoucherArgs
  ): Promise<LandedCostVoucher | null> {
    try {
      return await this.service.deleteLandedCostVoucher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
