/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LandedCostVoucherService } from "../landedCostVoucher.service";
import { LandedCostVoucherCreateInput } from "./LandedCostVoucherCreateInput";
import { LandedCostVoucher } from "./LandedCostVoucher";
import { LandedCostVoucherFindManyArgs } from "./LandedCostVoucherFindManyArgs";
import { LandedCostVoucherWhereUniqueInput } from "./LandedCostVoucherWhereUniqueInput";
import { LandedCostVoucherUpdateInput } from "./LandedCostVoucherUpdateInput";

export class LandedCostVoucherControllerBase {
  constructor(protected readonly service: LandedCostVoucherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LandedCostVoucher })
  async createLandedCostVoucher(
    @common.Body() data: LandedCostVoucherCreateInput
  ): Promise<LandedCostVoucher> {
    return await this.service.createLandedCostVoucher({
      data: data,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        distributeChargesBasedOn: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        totalTaxesAndCharges: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LandedCostVoucher] })
  @ApiNestedQuery(LandedCostVoucherFindManyArgs)
  async landedCostVouchers(
    @common.Req() request: Request
  ): Promise<LandedCostVoucher[]> {
    const args = plainToClass(LandedCostVoucherFindManyArgs, request.query);
    return this.service.landedCostVouchers({
      ...args,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        distributeChargesBasedOn: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        totalTaxesAndCharges: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LandedCostVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async landedCostVoucher(
    @common.Param() params: LandedCostVoucherWhereUniqueInput
  ): Promise<LandedCostVoucher | null> {
    const result = await this.service.landedCostVoucher({
      where: params,
      select: {
        amendedFrom: true,
        company: true,
        createdAt: true,
        creation: true,
        distributeChargesBasedOn: true,
        docstatus: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        totalTaxesAndCharges: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LandedCostVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLandedCostVoucher(
    @common.Param() params: LandedCostVoucherWhereUniqueInput,
    @common.Body() data: LandedCostVoucherUpdateInput
  ): Promise<LandedCostVoucher | null> {
    try {
      return await this.service.updateLandedCostVoucher({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          distributeChargesBasedOn: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          totalTaxesAndCharges: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LandedCostVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLandedCostVoucher(
    @common.Param() params: LandedCostVoucherWhereUniqueInput
  ): Promise<LandedCostVoucher | null> {
    try {
      return await this.service.deleteLandedCostVoucher({
        where: params,
        select: {
          amendedFrom: true,
          company: true,
          createdAt: true,
          creation: true,
          distributeChargesBasedOn: true,
          docstatus: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          totalTaxesAndCharges: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
