/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LandedCostPurchaseReceiptService } from "../landedCostPurchaseReceipt.service";
import { LandedCostPurchaseReceiptCreateInput } from "./LandedCostPurchaseReceiptCreateInput";
import { LandedCostPurchaseReceipt } from "./LandedCostPurchaseReceipt";
import { LandedCostPurchaseReceiptFindManyArgs } from "./LandedCostPurchaseReceiptFindManyArgs";
import { LandedCostPurchaseReceiptWhereUniqueInput } from "./LandedCostPurchaseReceiptWhereUniqueInput";
import { LandedCostPurchaseReceiptUpdateInput } from "./LandedCostPurchaseReceiptUpdateInput";

export class LandedCostPurchaseReceiptControllerBase {
  constructor(protected readonly service: LandedCostPurchaseReceiptService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LandedCostPurchaseReceipt })
  async createLandedCostPurchaseReceipt(
    @common.Body() data: LandedCostPurchaseReceiptCreateInput
  ): Promise<LandedCostPurchaseReceipt> {
    return await this.service.createLandedCostPurchaseReceipt({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        postingDate: true,
        receiptDocument: true,
        receiptDocumentType: true,
        supplier: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LandedCostPurchaseReceipt] })
  @ApiNestedQuery(LandedCostPurchaseReceiptFindManyArgs)
  async landedCostPurchaseReceipts(
    @common.Req() request: Request
  ): Promise<LandedCostPurchaseReceipt[]> {
    const args = plainToClass(
      LandedCostPurchaseReceiptFindManyArgs,
      request.query
    );
    return this.service.landedCostPurchaseReceipts({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        postingDate: true,
        receiptDocument: true,
        receiptDocumentType: true,
        supplier: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LandedCostPurchaseReceipt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async landedCostPurchaseReceipt(
    @common.Param() params: LandedCostPurchaseReceiptWhereUniqueInput
  ): Promise<LandedCostPurchaseReceipt | null> {
    const result = await this.service.landedCostPurchaseReceipt({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        grandTotal: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        postingDate: true,
        receiptDocument: true,
        receiptDocumentType: true,
        supplier: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LandedCostPurchaseReceipt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLandedCostPurchaseReceipt(
    @common.Param() params: LandedCostPurchaseReceiptWhereUniqueInput,
    @common.Body() data: LandedCostPurchaseReceiptUpdateInput
  ): Promise<LandedCostPurchaseReceipt | null> {
    try {
      return await this.service.updateLandedCostPurchaseReceipt({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          grandTotal: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          postingDate: true,
          receiptDocument: true,
          receiptDocumentType: true,
          supplier: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LandedCostPurchaseReceipt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLandedCostPurchaseReceipt(
    @common.Param() params: LandedCostPurchaseReceiptWhereUniqueInput
  ): Promise<LandedCostPurchaseReceipt | null> {
    try {
      return await this.service.deleteLandedCostPurchaseReceipt({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          grandTotal: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          postingDate: true,
          receiptDocument: true,
          receiptDocumentType: true,
          supplier: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
