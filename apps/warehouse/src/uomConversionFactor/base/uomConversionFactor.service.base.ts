/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UomConversionFactor as PrismaUomConversionFactor,
} from "@prisma/client";

export class UomConversionFactorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UomConversionFactorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uomConversionFactor.count(args);
  }

  async uomConversionFactors(
    args: Prisma.UomConversionFactorFindManyArgs
  ): Promise<PrismaUomConversionFactor[]> {
    return this.prisma.uomConversionFactor.findMany(args);
  }
  async uomConversionFactor(
    args: Prisma.UomConversionFactorFindUniqueArgs
  ): Promise<PrismaUomConversionFactor | null> {
    return this.prisma.uomConversionFactor.findUnique(args);
  }
  async createUomConversionFactor(
    args: Prisma.UomConversionFactorCreateArgs
  ): Promise<PrismaUomConversionFactor> {
    return this.prisma.uomConversionFactor.create(args);
  }
  async updateUomConversionFactor(
    args: Prisma.UomConversionFactorUpdateArgs
  ): Promise<PrismaUomConversionFactor> {
    return this.prisma.uomConversionFactor.update(args);
  }
  async deleteUomConversionFactor(
    args: Prisma.UomConversionFactorDeleteArgs
  ): Promise<PrismaUomConversionFactor> {
    return this.prisma.uomConversionFactor.delete(args);
  }
}
