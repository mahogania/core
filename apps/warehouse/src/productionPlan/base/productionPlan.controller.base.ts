/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductionPlanService } from "../productionPlan.service";
import { ProductionPlanCreateInput } from "./ProductionPlanCreateInput";
import { ProductionPlan } from "./ProductionPlan";
import { ProductionPlanFindManyArgs } from "./ProductionPlanFindManyArgs";
import { ProductionPlanWhereUniqueInput } from "./ProductionPlanWhereUniqueInput";
import { ProductionPlanUpdateInput } from "./ProductionPlanUpdateInput";

export class ProductionPlanControllerBase {
  constructor(protected readonly service: ProductionPlanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductionPlan })
  async createProductionPlan(
    @common.Body() data: ProductionPlanCreateInput
  ): Promise<ProductionPlan> {
    return await this.service.createProductionPlan({
      data: data,
      select: {
        amendedFrom: true,
        combineItems: true,
        combineSubItems: true,
        company: true,
        considerMinimumOrderQty: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        forWarehouse: true,
        fromDate: true,
        fromDeliveryDate: true,
        getItemsFrom: true,
        id: true,
        idx: true,
        ignoreExistingOrderedQty: true,
        includeNonStockItems: true,
        includeSafetyStock: true,
        includeSubcontractedItems: true,
        itemCode: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        project: true,
        salesOrderStatus: true,
        skipAvailableSubAssemblyItem: true,
        status: true,
        subAssemblyWarehouse: true,
        toDate: true,
        toDeliveryDate: true,
        totalPlannedQty: true,
        totalProducedQty: true,
        updatedAt: true,
        warehouse: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductionPlan] })
  @ApiNestedQuery(ProductionPlanFindManyArgs)
  async productionPlans(
    @common.Req() request: Request
  ): Promise<ProductionPlan[]> {
    const args = plainToClass(ProductionPlanFindManyArgs, request.query);
    return this.service.productionPlans({
      ...args,
      select: {
        amendedFrom: true,
        combineItems: true,
        combineSubItems: true,
        company: true,
        considerMinimumOrderQty: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        forWarehouse: true,
        fromDate: true,
        fromDeliveryDate: true,
        getItemsFrom: true,
        id: true,
        idx: true,
        ignoreExistingOrderedQty: true,
        includeNonStockItems: true,
        includeSafetyStock: true,
        includeSubcontractedItems: true,
        itemCode: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        project: true,
        salesOrderStatus: true,
        skipAvailableSubAssemblyItem: true,
        status: true,
        subAssemblyWarehouse: true,
        toDate: true,
        toDeliveryDate: true,
        totalPlannedQty: true,
        totalProducedQty: true,
        updatedAt: true,
        warehouse: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productionPlan(
    @common.Param() params: ProductionPlanWhereUniqueInput
  ): Promise<ProductionPlan | null> {
    const result = await this.service.productionPlan({
      where: params,
      select: {
        amendedFrom: true,
        combineItems: true,
        combineSubItems: true,
        company: true,
        considerMinimumOrderQty: true,
        createdAt: true,
        creation: true,
        customer: true,
        docstatus: true,
        forWarehouse: true,
        fromDate: true,
        fromDeliveryDate: true,
        getItemsFrom: true,
        id: true,
        idx: true,
        ignoreExistingOrderedQty: true,
        includeNonStockItems: true,
        includeSafetyStock: true,
        includeSubcontractedItems: true,
        itemCode: true,
        modified: true,
        modifiedBy: true,
        name: true,
        namingSeries: true,
        owner: true,
        postingDate: true,
        project: true,
        salesOrderStatus: true,
        skipAvailableSubAssemblyItem: true,
        status: true,
        subAssemblyWarehouse: true,
        toDate: true,
        toDeliveryDate: true,
        totalPlannedQty: true,
        totalProducedQty: true,
        updatedAt: true,
        warehouse: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductionPlan(
    @common.Param() params: ProductionPlanWhereUniqueInput,
    @common.Body() data: ProductionPlanUpdateInput
  ): Promise<ProductionPlan | null> {
    try {
      return await this.service.updateProductionPlan({
        where: params,
        data: data,
        select: {
          amendedFrom: true,
          combineItems: true,
          combineSubItems: true,
          company: true,
          considerMinimumOrderQty: true,
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          forWarehouse: true,
          fromDate: true,
          fromDeliveryDate: true,
          getItemsFrom: true,
          id: true,
          idx: true,
          ignoreExistingOrderedQty: true,
          includeNonStockItems: true,
          includeSafetyStock: true,
          includeSubcontractedItems: true,
          itemCode: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          project: true,
          salesOrderStatus: true,
          skipAvailableSubAssemblyItem: true,
          status: true,
          subAssemblyWarehouse: true,
          toDate: true,
          toDeliveryDate: true,
          totalPlannedQty: true,
          totalProducedQty: true,
          updatedAt: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductionPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductionPlan(
    @common.Param() params: ProductionPlanWhereUniqueInput
  ): Promise<ProductionPlan | null> {
    try {
      return await this.service.deleteProductionPlan({
        where: params,
        select: {
          amendedFrom: true,
          combineItems: true,
          combineSubItems: true,
          company: true,
          considerMinimumOrderQty: true,
          createdAt: true,
          creation: true,
          customer: true,
          docstatus: true,
          forWarehouse: true,
          fromDate: true,
          fromDeliveryDate: true,
          getItemsFrom: true,
          id: true,
          idx: true,
          ignoreExistingOrderedQty: true,
          includeNonStockItems: true,
          includeSafetyStock: true,
          includeSubcontractedItems: true,
          itemCode: true,
          modified: true,
          modifiedBy: true,
          name: true,
          namingSeries: true,
          owner: true,
          postingDate: true,
          project: true,
          salesOrderStatus: true,
          skipAvailableSubAssemblyItem: true,
          status: true,
          subAssemblyWarehouse: true,
          toDate: true,
          toDeliveryDate: true,
          totalPlannedQty: true,
          totalProducedQty: true,
          updatedAt: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
