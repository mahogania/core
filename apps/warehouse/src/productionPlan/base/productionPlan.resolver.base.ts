/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProductionPlan } from "./ProductionPlan";
import { ProductionPlanCountArgs } from "./ProductionPlanCountArgs";
import { ProductionPlanFindManyArgs } from "./ProductionPlanFindManyArgs";
import { ProductionPlanFindUniqueArgs } from "./ProductionPlanFindUniqueArgs";
import { CreateProductionPlanArgs } from "./CreateProductionPlanArgs";
import { UpdateProductionPlanArgs } from "./UpdateProductionPlanArgs";
import { DeleteProductionPlanArgs } from "./DeleteProductionPlanArgs";
import { ProductionPlanService } from "../productionPlan.service";
@graphql.Resolver(() => ProductionPlan)
export class ProductionPlanResolverBase {
  constructor(protected readonly service: ProductionPlanService) {}

  async _productionPlansMeta(
    @graphql.Args() args: ProductionPlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProductionPlan])
  async productionPlans(
    @graphql.Args() args: ProductionPlanFindManyArgs
  ): Promise<ProductionPlan[]> {
    return this.service.productionPlans(args);
  }

  @graphql.Query(() => ProductionPlan, { nullable: true })
  async productionPlan(
    @graphql.Args() args: ProductionPlanFindUniqueArgs
  ): Promise<ProductionPlan | null> {
    const result = await this.service.productionPlan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProductionPlan)
  async createProductionPlan(
    @graphql.Args() args: CreateProductionPlanArgs
  ): Promise<ProductionPlan> {
    return await this.service.createProductionPlan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProductionPlan)
  async updateProductionPlan(
    @graphql.Args() args: UpdateProductionPlanArgs
  ): Promise<ProductionPlan | null> {
    try {
      return await this.service.updateProductionPlan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionPlan)
  async deleteProductionPlan(
    @graphql.Args() args: DeleteProductionPlanArgs
  ): Promise<ProductionPlan | null> {
    try {
      return await this.service.deleteProductionPlan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
