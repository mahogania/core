/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SerialAndBatchEntryService } from "../serialAndBatchEntry.service";
import { SerialAndBatchEntryCreateInput } from "./SerialAndBatchEntryCreateInput";
import { SerialAndBatchEntry } from "./SerialAndBatchEntry";
import { SerialAndBatchEntryFindManyArgs } from "./SerialAndBatchEntryFindManyArgs";
import { SerialAndBatchEntryWhereUniqueInput } from "./SerialAndBatchEntryWhereUniqueInput";
import { SerialAndBatchEntryUpdateInput } from "./SerialAndBatchEntryUpdateInput";

export class SerialAndBatchEntryControllerBase {
  constructor(protected readonly service: SerialAndBatchEntryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SerialAndBatchEntry })
  async createSerialAndBatchEntry(
    @common.Body() data: SerialAndBatchEntryCreateInput
  ): Promise<SerialAndBatchEntry> {
    return await this.service.createSerialAndBatchEntry({
      data: data,
      select: {
        batchNo: true,
        createdAt: true,
        creation: true,
        deliveredQty: true,
        docstatus: true,
        id: true,
        idx: true,
        incomingRate: true,
        isOutward: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outgoingRate: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        serialNo: true,
        stockQueue: true,
        stockValueDifference: true,
        updatedAt: true,
        warehouse: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SerialAndBatchEntry] })
  @ApiNestedQuery(SerialAndBatchEntryFindManyArgs)
  async serialAndBatchEntries(
    @common.Req() request: Request
  ): Promise<SerialAndBatchEntry[]> {
    const args = plainToClass(SerialAndBatchEntryFindManyArgs, request.query);
    return this.service.serialAndBatchEntries({
      ...args,
      select: {
        batchNo: true,
        createdAt: true,
        creation: true,
        deliveredQty: true,
        docstatus: true,
        id: true,
        idx: true,
        incomingRate: true,
        isOutward: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outgoingRate: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        serialNo: true,
        stockQueue: true,
        stockValueDifference: true,
        updatedAt: true,
        warehouse: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SerialAndBatchEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serialAndBatchEntry(
    @common.Param() params: SerialAndBatchEntryWhereUniqueInput
  ): Promise<SerialAndBatchEntry | null> {
    const result = await this.service.serialAndBatchEntry({
      where: params,
      select: {
        batchNo: true,
        createdAt: true,
        creation: true,
        deliveredQty: true,
        docstatus: true,
        id: true,
        idx: true,
        incomingRate: true,
        isOutward: true,
        modified: true,
        modifiedBy: true,
        name: true,
        outgoingRate: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        qty: true,
        serialNo: true,
        stockQueue: true,
        stockValueDifference: true,
        updatedAt: true,
        warehouse: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SerialAndBatchEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSerialAndBatchEntry(
    @common.Param() params: SerialAndBatchEntryWhereUniqueInput,
    @common.Body() data: SerialAndBatchEntryUpdateInput
  ): Promise<SerialAndBatchEntry | null> {
    try {
      return await this.service.updateSerialAndBatchEntry({
        where: params,
        data: data,
        select: {
          batchNo: true,
          createdAt: true,
          creation: true,
          deliveredQty: true,
          docstatus: true,
          id: true,
          idx: true,
          incomingRate: true,
          isOutward: true,
          modified: true,
          modifiedBy: true,
          name: true,
          outgoingRate: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          serialNo: true,
          stockQueue: true,
          stockValueDifference: true,
          updatedAt: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SerialAndBatchEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSerialAndBatchEntry(
    @common.Param() params: SerialAndBatchEntryWhereUniqueInput
  ): Promise<SerialAndBatchEntry | null> {
    try {
      return await this.service.deleteSerialAndBatchEntry({
        where: params,
        select: {
          batchNo: true,
          createdAt: true,
          creation: true,
          deliveredQty: true,
          docstatus: true,
          id: true,
          idx: true,
          incomingRate: true,
          isOutward: true,
          modified: true,
          modifiedBy: true,
          name: true,
          outgoingRate: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          qty: true,
          serialNo: true,
          stockQueue: true,
          stockValueDifference: true,
          updatedAt: true,
          warehouse: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
