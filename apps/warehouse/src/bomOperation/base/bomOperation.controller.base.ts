/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomOperationService } from "../bomOperation.service";
import { BomOperationCreateInput } from "./BomOperationCreateInput";
import { BomOperation } from "./BomOperation";
import { BomOperationFindManyArgs } from "./BomOperationFindManyArgs";
import { BomOperationWhereUniqueInput } from "./BomOperationWhereUniqueInput";
import { BomOperationUpdateInput } from "./BomOperationUpdateInput";

export class BomOperationControllerBase {
  constructor(protected readonly service: BomOperationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BomOperation })
  async createBomOperation(
    @common.Body() data: BomOperationCreateInput
  ): Promise<BomOperation> {
    return await this.service.createBomOperation({
      data: data,
      select: {
        baseCostPerUnit: true,
        baseHourRate: true,
        baseOperatingCost: true,
        batchSize: true,
        costPerUnit: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        fixedTime: true,
        hourRate: true,
        id: true,
        idx: true,
        image: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operatingCost: true,
        operation: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sequenceId: true,
        setCostBasedOnBomQty: true,
        timeInMins: true,
        updatedAt: true,
        workstation: true,
        workstationType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BomOperation] })
  @ApiNestedQuery(BomOperationFindManyArgs)
  async bomOperations(@common.Req() request: Request): Promise<BomOperation[]> {
    const args = plainToClass(BomOperationFindManyArgs, request.query);
    return this.service.bomOperations({
      ...args,
      select: {
        baseCostPerUnit: true,
        baseHourRate: true,
        baseOperatingCost: true,
        batchSize: true,
        costPerUnit: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        fixedTime: true,
        hourRate: true,
        id: true,
        idx: true,
        image: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operatingCost: true,
        operation: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sequenceId: true,
        setCostBasedOnBomQty: true,
        timeInMins: true,
        updatedAt: true,
        workstation: true,
        workstationType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BomOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bomOperation(
    @common.Param() params: BomOperationWhereUniqueInput
  ): Promise<BomOperation | null> {
    const result = await this.service.bomOperation({
      where: params,
      select: {
        baseCostPerUnit: true,
        baseHourRate: true,
        baseOperatingCost: true,
        batchSize: true,
        costPerUnit: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        fixedTime: true,
        hourRate: true,
        id: true,
        idx: true,
        image: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operatingCost: true,
        operation: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        sequenceId: true,
        setCostBasedOnBomQty: true,
        timeInMins: true,
        updatedAt: true,
        workstation: true,
        workstationType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BomOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBomOperation(
    @common.Param() params: BomOperationWhereUniqueInput,
    @common.Body() data: BomOperationUpdateInput
  ): Promise<BomOperation | null> {
    try {
      return await this.service.updateBomOperation({
        where: params,
        data: data,
        select: {
          baseCostPerUnit: true,
          baseHourRate: true,
          baseOperatingCost: true,
          batchSize: true,
          costPerUnit: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          fixedTime: true,
          hourRate: true,
          id: true,
          idx: true,
          image: true,
          modified: true,
          modifiedBy: true,
          name: true,
          operatingCost: true,
          operation: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          sequenceId: true,
          setCostBasedOnBomQty: true,
          timeInMins: true,
          updatedAt: true,
          workstation: true,
          workstationType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BomOperation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBomOperation(
    @common.Param() params: BomOperationWhereUniqueInput
  ): Promise<BomOperation | null> {
    try {
      return await this.service.deleteBomOperation({
        where: params,
        select: {
          baseCostPerUnit: true,
          baseHourRate: true,
          baseOperatingCost: true,
          batchSize: true,
          costPerUnit: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          fixedTime: true,
          hourRate: true,
          id: true,
          idx: true,
          image: true,
          modified: true,
          modifiedBy: true,
          name: true,
          operatingCost: true,
          operation: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          sequenceId: true,
          setCostBasedOnBomQty: true,
          timeInMins: true,
          updatedAt: true,
          workstation: true,
          workstationType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
