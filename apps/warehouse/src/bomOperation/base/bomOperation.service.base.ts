/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BomOperation as PrismaBomOperation } from "@prisma/client";

export class BomOperationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BomOperationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bomOperation.count(args);
  }

  async bomOperations(
    args: Prisma.BomOperationFindManyArgs
  ): Promise<PrismaBomOperation[]> {
    return this.prisma.bomOperation.findMany(args);
  }
  async bomOperation(
    args: Prisma.BomOperationFindUniqueArgs
  ): Promise<PrismaBomOperation | null> {
    return this.prisma.bomOperation.findUnique(args);
  }
  async createBomOperation(
    args: Prisma.BomOperationCreateArgs
  ): Promise<PrismaBomOperation> {
    return this.prisma.bomOperation.create(args);
  }
  async updateBomOperation(
    args: Prisma.BomOperationUpdateArgs
  ): Promise<PrismaBomOperation> {
    return this.prisma.bomOperation.update(args);
  }
  async deleteBomOperation(
    args: Prisma.BomOperationDeleteArgs
  ): Promise<PrismaBomOperation> {
    return this.prisma.bomOperation.delete(args);
  }
}
