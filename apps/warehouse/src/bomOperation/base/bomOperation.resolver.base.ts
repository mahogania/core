/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BomOperation } from "./BomOperation";
import { BomOperationCountArgs } from "./BomOperationCountArgs";
import { BomOperationFindManyArgs } from "./BomOperationFindManyArgs";
import { BomOperationFindUniqueArgs } from "./BomOperationFindUniqueArgs";
import { CreateBomOperationArgs } from "./CreateBomOperationArgs";
import { UpdateBomOperationArgs } from "./UpdateBomOperationArgs";
import { DeleteBomOperationArgs } from "./DeleteBomOperationArgs";
import { BomOperationService } from "../bomOperation.service";
@graphql.Resolver(() => BomOperation)
export class BomOperationResolverBase {
  constructor(protected readonly service: BomOperationService) {}

  async _bomOperationsMeta(
    @graphql.Args() args: BomOperationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BomOperation])
  async bomOperations(
    @graphql.Args() args: BomOperationFindManyArgs
  ): Promise<BomOperation[]> {
    return this.service.bomOperations(args);
  }

  @graphql.Query(() => BomOperation, { nullable: true })
  async bomOperation(
    @graphql.Args() args: BomOperationFindUniqueArgs
  ): Promise<BomOperation | null> {
    const result = await this.service.bomOperation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BomOperation)
  async createBomOperation(
    @graphql.Args() args: CreateBomOperationArgs
  ): Promise<BomOperation> {
    return await this.service.createBomOperation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BomOperation)
  async updateBomOperation(
    @graphql.Args() args: UpdateBomOperationArgs
  ): Promise<BomOperation | null> {
    try {
      return await this.service.updateBomOperation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BomOperation)
  async deleteBomOperation(
    @graphql.Args() args: DeleteBomOperationArgs
  ): Promise<BomOperation | null> {
    try {
      return await this.service.deleteBomOperation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
