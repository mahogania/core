/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceTeamMemberService } from "../maintenanceTeamMember.service";
import { MaintenanceTeamMemberCreateInput } from "./MaintenanceTeamMemberCreateInput";
import { MaintenanceTeamMember } from "./MaintenanceTeamMember";
import { MaintenanceTeamMemberFindManyArgs } from "./MaintenanceTeamMemberFindManyArgs";
import { MaintenanceTeamMemberWhereUniqueInput } from "./MaintenanceTeamMemberWhereUniqueInput";
import { MaintenanceTeamMemberUpdateInput } from "./MaintenanceTeamMemberUpdateInput";

export class MaintenanceTeamMemberControllerBase {
  constructor(protected readonly service: MaintenanceTeamMemberService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceTeamMember })
  async createMaintenanceTeamMember(
    @common.Body() data: MaintenanceTeamMemberCreateInput
  ): Promise<MaintenanceTeamMember> {
    return await this.service.createMaintenanceTeamMember({
      data: data,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fullName: true,
        id: true,
        idx: true,
        maintenanceRole: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        teamMember: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceTeamMember] })
  @ApiNestedQuery(MaintenanceTeamMemberFindManyArgs)
  async maintenanceTeamMembers(
    @common.Req() request: Request
  ): Promise<MaintenanceTeamMember[]> {
    const args = plainToClass(MaintenanceTeamMemberFindManyArgs, request.query);
    return this.service.maintenanceTeamMembers({
      ...args,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fullName: true,
        id: true,
        idx: true,
        maintenanceRole: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        teamMember: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceTeamMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceTeamMember(
    @common.Param() params: MaintenanceTeamMemberWhereUniqueInput
  ): Promise<MaintenanceTeamMember | null> {
    const result = await this.service.maintenanceTeamMember({
      where: params,
      select: {
        createdAt: true,
        creation: true,
        docstatus: true,
        fullName: true,
        id: true,
        idx: true,
        maintenanceRole: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        teamMember: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceTeamMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceTeamMember(
    @common.Param() params: MaintenanceTeamMemberWhereUniqueInput,
    @common.Body() data: MaintenanceTeamMemberUpdateInput
  ): Promise<MaintenanceTeamMember | null> {
    try {
      return await this.service.updateMaintenanceTeamMember({
        where: params,
        data: data,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          fullName: true,
          id: true,
          idx: true,
          maintenanceRole: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          teamMember: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceTeamMember })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceTeamMember(
    @common.Param() params: MaintenanceTeamMemberWhereUniqueInput
  ): Promise<MaintenanceTeamMember | null> {
    try {
      return await this.service.deleteMaintenanceTeamMember({
        where: params,
        select: {
          createdAt: true,
          creation: true,
          docstatus: true,
          fullName: true,
          id: true,
          idx: true,
          maintenanceRole: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          teamMember: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
