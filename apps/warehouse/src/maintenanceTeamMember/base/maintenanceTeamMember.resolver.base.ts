/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MaintenanceTeamMember } from "./MaintenanceTeamMember";
import { MaintenanceTeamMemberCountArgs } from "./MaintenanceTeamMemberCountArgs";
import { MaintenanceTeamMemberFindManyArgs } from "./MaintenanceTeamMemberFindManyArgs";
import { MaintenanceTeamMemberFindUniqueArgs } from "./MaintenanceTeamMemberFindUniqueArgs";
import { CreateMaintenanceTeamMemberArgs } from "./CreateMaintenanceTeamMemberArgs";
import { UpdateMaintenanceTeamMemberArgs } from "./UpdateMaintenanceTeamMemberArgs";
import { DeleteMaintenanceTeamMemberArgs } from "./DeleteMaintenanceTeamMemberArgs";
import { MaintenanceTeamMemberService } from "../maintenanceTeamMember.service";
@graphql.Resolver(() => MaintenanceTeamMember)
export class MaintenanceTeamMemberResolverBase {
  constructor(protected readonly service: MaintenanceTeamMemberService) {}

  async _maintenanceTeamMembersMeta(
    @graphql.Args() args: MaintenanceTeamMemberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MaintenanceTeamMember])
  async maintenanceTeamMembers(
    @graphql.Args() args: MaintenanceTeamMemberFindManyArgs
  ): Promise<MaintenanceTeamMember[]> {
    return this.service.maintenanceTeamMembers(args);
  }

  @graphql.Query(() => MaintenanceTeamMember, { nullable: true })
  async maintenanceTeamMember(
    @graphql.Args() args: MaintenanceTeamMemberFindUniqueArgs
  ): Promise<MaintenanceTeamMember | null> {
    const result = await this.service.maintenanceTeamMember(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MaintenanceTeamMember)
  async createMaintenanceTeamMember(
    @graphql.Args() args: CreateMaintenanceTeamMemberArgs
  ): Promise<MaintenanceTeamMember> {
    return await this.service.createMaintenanceTeamMember({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MaintenanceTeamMember)
  async updateMaintenanceTeamMember(
    @graphql.Args() args: UpdateMaintenanceTeamMemberArgs
  ): Promise<MaintenanceTeamMember | null> {
    try {
      return await this.service.updateMaintenanceTeamMember({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceTeamMember)
  async deleteMaintenanceTeamMember(
    @graphql.Args() args: DeleteMaintenanceTeamMemberArgs
  ): Promise<MaintenanceTeamMember | null> {
    try {
      return await this.service.deleteMaintenanceTeamMember(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
