/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bom } from "./Bom";
import { BomCountArgs } from "./BomCountArgs";
import { BomFindManyArgs } from "./BomFindManyArgs";
import { BomFindUniqueArgs } from "./BomFindUniqueArgs";
import { CreateBomArgs } from "./CreateBomArgs";
import { UpdateBomArgs } from "./UpdateBomArgs";
import { DeleteBomArgs } from "./DeleteBomArgs";
import { BomService } from "../bom.service";
@graphql.Resolver(() => Bom)
export class BomResolverBase {
  constructor(protected readonly service: BomService) {}

  async _bomsMeta(
    @graphql.Args() args: BomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bom])
  async boms(@graphql.Args() args: BomFindManyArgs): Promise<Bom[]> {
    return this.service.boms(args);
  }

  @graphql.Query(() => Bom, { nullable: true })
  async bom(@graphql.Args() args: BomFindUniqueArgs): Promise<Bom | null> {
    const result = await this.service.bom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bom)
  async createBom(@graphql.Args() args: CreateBomArgs): Promise<Bom> {
    return await this.service.createBom({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Bom)
  async updateBom(@graphql.Args() args: UpdateBomArgs): Promise<Bom | null> {
    try {
      return await this.service.updateBom({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bom)
  async deleteBom(@graphql.Args() args: DeleteBomArgs): Promise<Bom | null> {
    try {
      return await this.service.deleteBom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
