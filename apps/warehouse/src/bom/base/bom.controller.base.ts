/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BomService } from "../bom.service";
import { BomCreateInput } from "./BomCreateInput";
import { Bom } from "./Bom";
import { BomFindManyArgs } from "./BomFindManyArgs";
import { BomWhereUniqueInput } from "./BomWhereUniqueInput";
import { BomUpdateInput } from "./BomUpdateInput";

export class BomControllerBase {
  constructor(protected readonly service: BomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bom })
  async createBom(@common.Body() data: BomCreateInput): Promise<Bom> {
    return await this.service.createBom({
      data: data,
      select: {
        allowAlternativeItem: true,
        amendedFrom: true,
        baseOperatingCost: true,
        baseRawMaterialCost: true,
        baseScrapMaterialCost: true,
        baseTotalCost: true,
        bomCreator: true,
        bomCreatorItem: true,
        buyingPriceList: true,
        company: true,
        conversionRate: true,
        createdAt: true,
        creation: true,
        currency: true,
        description: true,
        docstatus: true,
        fgBasedOperatingCost: true,
        hasVariants: true,
        id: true,
        idx: true,
        image: true,
        inspectionRequired: true,
        isActive: true,
        isDefault: true,
        item: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operatingCost: true,
        operatingCostPerBomQuantity: true,
        owner: true,
        plcConversionRate: true,
        priceListCurrency: true,
        processLossPercentage: true,
        processLossQty: true,
        project: true,
        qualityInspectionTemplate: true,
        quantity: true,
        rawMaterialCost: true,
        rmCostAsPer: true,
        route: true,
        routing: true,
        scrapMaterialCost: true,
        setRateOfSubAssemblyItemBasedOnBom: true,
        showInWebsite: true,
        showItems: true,
        showOperations: true,
        thumbnail: true,
        totalCost: true,
        transferMaterialAgainst: true,
        uom: true,
        updatedAt: true,
        webLongDescription: true,
        websiteImage: true,
        withOperations: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bom] })
  @ApiNestedQuery(BomFindManyArgs)
  async boms(@common.Req() request: Request): Promise<Bom[]> {
    const args = plainToClass(BomFindManyArgs, request.query);
    return this.service.boms({
      ...args,
      select: {
        allowAlternativeItem: true,
        amendedFrom: true,
        baseOperatingCost: true,
        baseRawMaterialCost: true,
        baseScrapMaterialCost: true,
        baseTotalCost: true,
        bomCreator: true,
        bomCreatorItem: true,
        buyingPriceList: true,
        company: true,
        conversionRate: true,
        createdAt: true,
        creation: true,
        currency: true,
        description: true,
        docstatus: true,
        fgBasedOperatingCost: true,
        hasVariants: true,
        id: true,
        idx: true,
        image: true,
        inspectionRequired: true,
        isActive: true,
        isDefault: true,
        item: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operatingCost: true,
        operatingCostPerBomQuantity: true,
        owner: true,
        plcConversionRate: true,
        priceListCurrency: true,
        processLossPercentage: true,
        processLossQty: true,
        project: true,
        qualityInspectionTemplate: true,
        quantity: true,
        rawMaterialCost: true,
        rmCostAsPer: true,
        route: true,
        routing: true,
        scrapMaterialCost: true,
        setRateOfSubAssemblyItemBasedOnBom: true,
        showInWebsite: true,
        showItems: true,
        showOperations: true,
        thumbnail: true,
        totalCost: true,
        transferMaterialAgainst: true,
        uom: true,
        updatedAt: true,
        webLongDescription: true,
        websiteImage: true,
        withOperations: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bom(@common.Param() params: BomWhereUniqueInput): Promise<Bom | null> {
    const result = await this.service.bom({
      where: params,
      select: {
        allowAlternativeItem: true,
        amendedFrom: true,
        baseOperatingCost: true,
        baseRawMaterialCost: true,
        baseScrapMaterialCost: true,
        baseTotalCost: true,
        bomCreator: true,
        bomCreatorItem: true,
        buyingPriceList: true,
        company: true,
        conversionRate: true,
        createdAt: true,
        creation: true,
        currency: true,
        description: true,
        docstatus: true,
        fgBasedOperatingCost: true,
        hasVariants: true,
        id: true,
        idx: true,
        image: true,
        inspectionRequired: true,
        isActive: true,
        isDefault: true,
        item: true,
        itemName: true,
        modified: true,
        modifiedBy: true,
        name: true,
        operatingCost: true,
        operatingCostPerBomQuantity: true,
        owner: true,
        plcConversionRate: true,
        priceListCurrency: true,
        processLossPercentage: true,
        processLossQty: true,
        project: true,
        qualityInspectionTemplate: true,
        quantity: true,
        rawMaterialCost: true,
        rmCostAsPer: true,
        route: true,
        routing: true,
        scrapMaterialCost: true,
        setRateOfSubAssemblyItemBasedOnBom: true,
        showInWebsite: true,
        showItems: true,
        showOperations: true,
        thumbnail: true,
        totalCost: true,
        transferMaterialAgainst: true,
        uom: true,
        updatedAt: true,
        webLongDescription: true,
        websiteImage: true,
        withOperations: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBom(
    @common.Param() params: BomWhereUniqueInput,
    @common.Body() data: BomUpdateInput
  ): Promise<Bom | null> {
    try {
      return await this.service.updateBom({
        where: params,
        data: data,
        select: {
          allowAlternativeItem: true,
          amendedFrom: true,
          baseOperatingCost: true,
          baseRawMaterialCost: true,
          baseScrapMaterialCost: true,
          baseTotalCost: true,
          bomCreator: true,
          bomCreatorItem: true,
          buyingPriceList: true,
          company: true,
          conversionRate: true,
          createdAt: true,
          creation: true,
          currency: true,
          description: true,
          docstatus: true,
          fgBasedOperatingCost: true,
          hasVariants: true,
          id: true,
          idx: true,
          image: true,
          inspectionRequired: true,
          isActive: true,
          isDefault: true,
          item: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          operatingCost: true,
          operatingCostPerBomQuantity: true,
          owner: true,
          plcConversionRate: true,
          priceListCurrency: true,
          processLossPercentage: true,
          processLossQty: true,
          project: true,
          qualityInspectionTemplate: true,
          quantity: true,
          rawMaterialCost: true,
          rmCostAsPer: true,
          route: true,
          routing: true,
          scrapMaterialCost: true,
          setRateOfSubAssemblyItemBasedOnBom: true,
          showInWebsite: true,
          showItems: true,
          showOperations: true,
          thumbnail: true,
          totalCost: true,
          transferMaterialAgainst: true,
          uom: true,
          updatedAt: true,
          webLongDescription: true,
          websiteImage: true,
          withOperations: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBom(
    @common.Param() params: BomWhereUniqueInput
  ): Promise<Bom | null> {
    try {
      return await this.service.deleteBom({
        where: params,
        select: {
          allowAlternativeItem: true,
          amendedFrom: true,
          baseOperatingCost: true,
          baseRawMaterialCost: true,
          baseScrapMaterialCost: true,
          baseTotalCost: true,
          bomCreator: true,
          bomCreatorItem: true,
          buyingPriceList: true,
          company: true,
          conversionRate: true,
          createdAt: true,
          creation: true,
          currency: true,
          description: true,
          docstatus: true,
          fgBasedOperatingCost: true,
          hasVariants: true,
          id: true,
          idx: true,
          image: true,
          inspectionRequired: true,
          isActive: true,
          isDefault: true,
          item: true,
          itemName: true,
          modified: true,
          modifiedBy: true,
          name: true,
          operatingCost: true,
          operatingCostPerBomQuantity: true,
          owner: true,
          plcConversionRate: true,
          priceListCurrency: true,
          processLossPercentage: true,
          processLossQty: true,
          project: true,
          qualityInspectionTemplate: true,
          quantity: true,
          rawMaterialCost: true,
          rmCostAsPer: true,
          route: true,
          routing: true,
          scrapMaterialCost: true,
          setRateOfSubAssemblyItemBasedOnBom: true,
          showInWebsite: true,
          showItems: true,
          showOperations: true,
          thumbnail: true,
          totalCost: true,
          transferMaterialAgainst: true,
          uom: true,
          updatedAt: true,
          webLongDescription: true,
          websiteImage: true,
          withOperations: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
