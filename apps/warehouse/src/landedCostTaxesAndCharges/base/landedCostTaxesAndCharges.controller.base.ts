/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LandedCostTaxesAndChargesService } from "../landedCostTaxesAndCharges.service";
import { LandedCostTaxesAndChargesCreateInput } from "./LandedCostTaxesAndChargesCreateInput";
import { LandedCostTaxesAndCharges } from "./LandedCostTaxesAndCharges";
import { LandedCostTaxesAndChargesFindManyArgs } from "./LandedCostTaxesAndChargesFindManyArgs";
import { LandedCostTaxesAndChargesWhereUniqueInput } from "./LandedCostTaxesAndChargesWhereUniqueInput";
import { LandedCostTaxesAndChargesUpdateInput } from "./LandedCostTaxesAndChargesUpdateInput";

export class LandedCostTaxesAndChargesControllerBase {
  constructor(protected readonly service: LandedCostTaxesAndChargesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LandedCostTaxesAndCharges })
  async createLandedCostTaxesAndCharges(
    @common.Body() data: LandedCostTaxesAndChargesCreateInput
  ): Promise<LandedCostTaxesAndCharges> {
    return await this.service.createLandedCostTaxesAndCharges({
      data: data,
      select: {
        accountCurrency: true,
        amount: true,
        baseAmount: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        exchangeRate: true,
        expenseAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LandedCostTaxesAndCharges] })
  @ApiNestedQuery(LandedCostTaxesAndChargesFindManyArgs)
  async landedCostTaxesAndChargesItems(
    @common.Req() request: Request
  ): Promise<LandedCostTaxesAndCharges[]> {
    const args = plainToClass(
      LandedCostTaxesAndChargesFindManyArgs,
      request.query
    );
    return this.service.landedCostTaxesAndChargesItems({
      ...args,
      select: {
        accountCurrency: true,
        amount: true,
        baseAmount: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        exchangeRate: true,
        expenseAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LandedCostTaxesAndCharges })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async landedCostTaxesAndCharges(
    @common.Param() params: LandedCostTaxesAndChargesWhereUniqueInput
  ): Promise<LandedCostTaxesAndCharges | null> {
    const result = await this.service.landedCostTaxesAndCharges({
      where: params,
      select: {
        accountCurrency: true,
        amount: true,
        baseAmount: true,
        createdAt: true,
        creation: true,
        description: true,
        docstatus: true,
        exchangeRate: true,
        expenseAccount: true,
        id: true,
        idx: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        parent: true,
        parentfield: true,
        parenttype: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LandedCostTaxesAndCharges })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLandedCostTaxesAndCharges(
    @common.Param() params: LandedCostTaxesAndChargesWhereUniqueInput,
    @common.Body() data: LandedCostTaxesAndChargesUpdateInput
  ): Promise<LandedCostTaxesAndCharges | null> {
    try {
      return await this.service.updateLandedCostTaxesAndCharges({
        where: params,
        data: data,
        select: {
          accountCurrency: true,
          amount: true,
          baseAmount: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          exchangeRate: true,
          expenseAccount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LandedCostTaxesAndCharges })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLandedCostTaxesAndCharges(
    @common.Param() params: LandedCostTaxesAndChargesWhereUniqueInput
  ): Promise<LandedCostTaxesAndCharges | null> {
    try {
      return await this.service.deleteLandedCostTaxesAndCharges({
        where: params,
        select: {
          accountCurrency: true,
          amount: true,
          baseAmount: true,
          createdAt: true,
          creation: true,
          description: true,
          docstatus: true,
          exchangeRate: true,
          expenseAccount: true,
          id: true,
          idx: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          parent: true,
          parentfield: true,
          parenttype: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
