/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LandedCostTaxesAndCharges as PrismaLandedCostTaxesAndCharges,
} from "@prisma/client";

export class LandedCostTaxesAndChargesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LandedCostTaxesAndChargesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.landedCostTaxesAndCharges.count(args);
  }

  async landedCostTaxesAndChargesItems(
    args: Prisma.LandedCostTaxesAndChargesFindManyArgs
  ): Promise<PrismaLandedCostTaxesAndCharges[]> {
    return this.prisma.landedCostTaxesAndCharges.findMany(args);
  }
  async landedCostTaxesAndCharges(
    args: Prisma.LandedCostTaxesAndChargesFindUniqueArgs
  ): Promise<PrismaLandedCostTaxesAndCharges | null> {
    return this.prisma.landedCostTaxesAndCharges.findUnique(args);
  }
  async createLandedCostTaxesAndCharges(
    args: Prisma.LandedCostTaxesAndChargesCreateArgs
  ): Promise<PrismaLandedCostTaxesAndCharges> {
    return this.prisma.landedCostTaxesAndCharges.create(args);
  }
  async updateLandedCostTaxesAndCharges(
    args: Prisma.LandedCostTaxesAndChargesUpdateArgs
  ): Promise<PrismaLandedCostTaxesAndCharges> {
    return this.prisma.landedCostTaxesAndCharges.update(args);
  }
  async deleteLandedCostTaxesAndCharges(
    args: Prisma.LandedCostTaxesAndChargesDeleteArgs
  ): Promise<PrismaLandedCostTaxesAndCharges> {
    return this.prisma.landedCostTaxesAndCharges.delete(args);
  }
}
