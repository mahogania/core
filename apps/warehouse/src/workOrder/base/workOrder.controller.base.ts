/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkOrderService } from "../workOrder.service";
import { WorkOrderCreateInput } from "./WorkOrderCreateInput";
import { WorkOrder } from "./WorkOrder";
import { WorkOrderFindManyArgs } from "./WorkOrderFindManyArgs";
import { WorkOrderWhereUniqueInput } from "./WorkOrderWhereUniqueInput";
import { WorkOrderUpdateInput } from "./WorkOrderUpdateInput";

export class WorkOrderControllerBase {
  constructor(protected readonly service: WorkOrderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkOrder })
  async createWorkOrder(
    @common.Body() data: WorkOrderCreateInput
  ): Promise<WorkOrder> {
    return await this.service.createWorkOrder({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkOrder] })
  @ApiNestedQuery(WorkOrderFindManyArgs)
  async workOrders(@common.Req() request: Request): Promise<WorkOrder[]> {
    const args = plainToClass(WorkOrderFindManyArgs, request.query);
    return this.service.workOrders({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workOrder(
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrder | null> {
    const result = await this.service.workOrder({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkOrder(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() data: WorkOrderUpdateInput
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.updateWorkOrder({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkOrder(
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.deleteWorkOrder({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
