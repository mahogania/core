/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WorkOrder } from "./WorkOrder";
import { WorkOrderCountArgs } from "./WorkOrderCountArgs";
import { WorkOrderFindManyArgs } from "./WorkOrderFindManyArgs";
import { WorkOrderFindUniqueArgs } from "./WorkOrderFindUniqueArgs";
import { DeleteWorkOrderArgs } from "./DeleteWorkOrderArgs";
import { WorkOrderService } from "../workOrder.service";
@graphql.Resolver(() => WorkOrder)
export class WorkOrderResolverBase {
  constructor(protected readonly service: WorkOrderService) {}

  async _workOrdersMeta(
    @graphql.Args() args: WorkOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WorkOrder])
  async workOrders(
    @graphql.Args() args: WorkOrderFindManyArgs
  ): Promise<WorkOrder[]> {
    return this.service.workOrders(args);
  }

  @graphql.Query(() => WorkOrder, { nullable: true })
  async workOrder(
    @graphql.Args() args: WorkOrderFindUniqueArgs
  ): Promise<WorkOrder | null> {
    const result = await this.service.workOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WorkOrder)
  async deleteWorkOrder(
    @graphql.Args() args: DeleteWorkOrderArgs
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.deleteWorkOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
