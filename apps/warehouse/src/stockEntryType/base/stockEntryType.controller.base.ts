/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StockEntryTypeService } from "../stockEntryType.service";
import { StockEntryTypeCreateInput } from "./StockEntryTypeCreateInput";
import { StockEntryType } from "./StockEntryType";
import { StockEntryTypeFindManyArgs } from "./StockEntryTypeFindManyArgs";
import { StockEntryTypeWhereUniqueInput } from "./StockEntryTypeWhereUniqueInput";
import { StockEntryTypeUpdateInput } from "./StockEntryTypeUpdateInput";

export class StockEntryTypeControllerBase {
  constructor(protected readonly service: StockEntryTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StockEntryType })
  async createStockEntryType(
    @common.Body() data: StockEntryTypeCreateInput
  ): Promise<StockEntryType> {
    return await this.service.createStockEntryType({
      data: data,
      select: {
        addToTransit: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isStandard: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        purpose: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StockEntryType] })
  @ApiNestedQuery(StockEntryTypeFindManyArgs)
  async stockEntryTypes(
    @common.Req() request: Request
  ): Promise<StockEntryType[]> {
    const args = plainToClass(StockEntryTypeFindManyArgs, request.query);
    return this.service.stockEntryTypes({
      ...args,
      select: {
        addToTransit: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isStandard: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        purpose: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StockEntryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stockEntryType(
    @common.Param() params: StockEntryTypeWhereUniqueInput
  ): Promise<StockEntryType | null> {
    const result = await this.service.stockEntryType({
      where: params,
      select: {
        addToTransit: true,
        createdAt: true,
        creation: true,
        docstatus: true,
        id: true,
        idx: true,
        isStandard: true,
        modified: true,
        modifiedBy: true,
        name: true,
        owner: true,
        purpose: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StockEntryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStockEntryType(
    @common.Param() params: StockEntryTypeWhereUniqueInput,
    @common.Body() data: StockEntryTypeUpdateInput
  ): Promise<StockEntryType | null> {
    try {
      return await this.service.updateStockEntryType({
        where: params,
        data: data,
        select: {
          addToTransit: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isStandard: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          purpose: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StockEntryType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStockEntryType(
    @common.Param() params: StockEntryTypeWhereUniqueInput
  ): Promise<StockEntryType | null> {
    try {
      return await this.service.deleteStockEntryType({
        where: params,
        select: {
          addToTransit: true,
          createdAt: true,
          creation: true,
          docstatus: true,
          id: true,
          idx: true,
          isStandard: true,
          modified: true,
          modifiedBy: true,
          name: true,
          owner: true,
          purpose: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
