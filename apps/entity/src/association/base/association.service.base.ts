/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Association as PrismaAssociation,
  Entity as PrismaEntity,
} from "@prisma/client";

export class AssociationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssociationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.association.count(args);
  }

  async associations(
    args: Prisma.AssociationFindManyArgs
  ): Promise<PrismaAssociation[]> {
    return this.prisma.association.findMany(args);
  }
  async association(
    args: Prisma.AssociationFindUniqueArgs
  ): Promise<PrismaAssociation | null> {
    return this.prisma.association.findUnique(args);
  }
  async createAssociation(
    args: Prisma.AssociationCreateArgs
  ): Promise<PrismaAssociation> {
    return this.prisma.association.create(args);
  }
  async updateAssociation(
    args: Prisma.AssociationUpdateArgs
  ): Promise<PrismaAssociation> {
    return this.prisma.association.update(args);
  }
  async deleteAssociation(
    args: Prisma.AssociationDeleteArgs
  ): Promise<PrismaAssociation> {
    return this.prisma.association.delete(args);
  }

  async getAscendant(parentId: string): Promise<PrismaEntity | null> {
    return this.prisma.association
      .findUnique({
        where: { id: parentId },
      })
      .ascendant();
  }

  async getDescendant(parentId: string): Promise<PrismaEntity | null> {
    return this.prisma.association
      .findUnique({
        where: { id: parentId },
      })
      .descendant();
  }
}
