/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Representation } from "./Representation";
import { RepresentationCountArgs } from "./RepresentationCountArgs";
import { RepresentationFindManyArgs } from "./RepresentationFindManyArgs";
import { RepresentationFindUniqueArgs } from "./RepresentationFindUniqueArgs";
import { CreateRepresentationArgs } from "./CreateRepresentationArgs";
import { UpdateRepresentationArgs } from "./UpdateRepresentationArgs";
import { DeleteRepresentationArgs } from "./DeleteRepresentationArgs";
import { EntityFindManyArgs } from "../../entity/base/EntityFindManyArgs";
import { Entity } from "../../entity/base/Entity";
import { RepresentationService } from "../representation.service";
@graphql.Resolver(() => Representation)
export class RepresentationResolverBase {
  constructor(protected readonly service: RepresentationService) {}

  async _representationsMeta(
    @graphql.Args() args: RepresentationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Representation])
  async representations(
    @graphql.Args() args: RepresentationFindManyArgs
  ): Promise<Representation[]> {
    return this.service.representations(args);
  }

  @graphql.Query(() => Representation, { nullable: true })
  async representation(
    @graphql.Args() args: RepresentationFindUniqueArgs
  ): Promise<Representation | null> {
    const result = await this.service.representation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Representation)
  async createRepresentation(
    @graphql.Args() args: CreateRepresentationArgs
  ): Promise<Representation> {
    return await this.service.createRepresentation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Representation)
  async updateRepresentation(
    @graphql.Args() args: UpdateRepresentationArgs
  ): Promise<Representation | null> {
    try {
      return await this.service.updateRepresentation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Representation)
  async deleteRepresentation(
    @graphql.Args() args: DeleteRepresentationArgs
  ): Promise<Representation | null> {
    try {
      return await this.service.deleteRepresentation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Entity], { name: "entities" })
  async findEntities(
    @graphql.Parent() parent: Representation,
    @graphql.Args() args: EntityFindManyArgs
  ): Promise<Entity[]> {
    const results = await this.service.findEntities(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
