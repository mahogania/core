/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Representation as PrismaRepresentation,
  Entity as PrismaEntity,
} from "@prisma/client";

export class RepresentationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RepresentationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.representation.count(args);
  }

  async representations(
    args: Prisma.RepresentationFindManyArgs
  ): Promise<PrismaRepresentation[]> {
    return this.prisma.representation.findMany(args);
  }
  async representation(
    args: Prisma.RepresentationFindUniqueArgs
  ): Promise<PrismaRepresentation | null> {
    return this.prisma.representation.findUnique(args);
  }
  async createRepresentation(
    args: Prisma.RepresentationCreateArgs
  ): Promise<PrismaRepresentation> {
    return this.prisma.representation.create(args);
  }
  async updateRepresentation(
    args: Prisma.RepresentationUpdateArgs
  ): Promise<PrismaRepresentation> {
    return this.prisma.representation.update(args);
  }
  async deleteRepresentation(
    args: Prisma.RepresentationDeleteArgs
  ): Promise<PrismaRepresentation> {
    return this.prisma.representation.delete(args);
  }

  async findEntities(
    parentId: string,
    args: Prisma.EntityFindManyArgs
  ): Promise<PrismaEntity[]> {
    return this.prisma.representation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .entities(args);
  }
}
