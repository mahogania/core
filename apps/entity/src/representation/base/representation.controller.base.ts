/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RepresentationService } from "../representation.service";
import { RepresentationCreateInput } from "./RepresentationCreateInput";
import { Representation } from "./Representation";
import { RepresentationFindManyArgs } from "./RepresentationFindManyArgs";
import { RepresentationWhereUniqueInput } from "./RepresentationWhereUniqueInput";
import { RepresentationUpdateInput } from "./RepresentationUpdateInput";
import { EntityFindManyArgs } from "../../entity/base/EntityFindManyArgs";
import { Entity } from "../../entity/base/Entity";
import { EntityWhereUniqueInput } from "../../entity/base/EntityWhereUniqueInput";

export class RepresentationControllerBase {
  constructor(protected readonly service: RepresentationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Representation })
  @swagger.ApiBody({
    type: RepresentationCreateInput,
  })
  async createRepresentation(
    @common.Body() data: RepresentationCreateInput
  ): Promise<Representation> {
    return await this.service.createRepresentation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Representation] })
  @ApiNestedQuery(RepresentationFindManyArgs)
  async representations(
    @common.Req() request: Request
  ): Promise<Representation[]> {
    const args = plainToClass(RepresentationFindManyArgs, request.query);
    return this.service.representations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Representation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async representation(
    @common.Param() params: RepresentationWhereUniqueInput
  ): Promise<Representation | null> {
    const result = await this.service.representation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Representation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: RepresentationUpdateInput,
  })
  async updateRepresentation(
    @common.Param() params: RepresentationWhereUniqueInput,
    @common.Body() data: RepresentationUpdateInput
  ): Promise<Representation | null> {
    try {
      return await this.service.updateRepresentation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Representation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRepresentation(
    @common.Param() params: RepresentationWhereUniqueInput
  ): Promise<Representation | null> {
    try {
      return await this.service.deleteRepresentation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/entities")
  @ApiNestedQuery(EntityFindManyArgs)
  async findEntities(
    @common.Req() request: Request,
    @common.Param() params: RepresentationWhereUniqueInput
  ): Promise<Entity[]> {
    const query = plainToClass(EntityFindManyArgs, request.query);
    const results = await this.service.findEntities(params.id, {
      ...query,
      select: {
        agent: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        representation: {
          select: {
            id: true,
          },
        },

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/entities")
  async connectEntities(
    @common.Param() params: RepresentationWhereUniqueInput,
    @common.Body() body: EntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      entities: {
        connect: body,
      },
    };
    await this.service.updateRepresentation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/entities")
  async updateEntities(
    @common.Param() params: RepresentationWhereUniqueInput,
    @common.Body() body: EntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      entities: {
        set: body,
      },
    };
    await this.service.updateRepresentation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/entities")
  async disconnectEntities(
    @common.Param() params: RepresentationWhereUniqueInput,
    @common.Body() body: EntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      entities: {
        disconnect: body,
      },
    };
    await this.service.updateRepresentation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
