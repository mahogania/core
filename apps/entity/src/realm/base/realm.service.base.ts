/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Realm as PrismaRealm,
  User as PrismaUser,
  World as PrismaWorld,
} from "@prisma/client";

export class RealmServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RealmCountArgs, "select">): Promise<number> {
    return this.prisma.realm.count(args);
  }

  async realms(args: Prisma.RealmFindManyArgs): Promise<PrismaRealm[]> {
    return this.prisma.realm.findMany(args);
  }
  async realm(args: Prisma.RealmFindUniqueArgs): Promise<PrismaRealm | null> {
    return this.prisma.realm.findUnique(args);
  }
  async createRealm(args: Prisma.RealmCreateArgs): Promise<PrismaRealm> {
    return this.prisma.realm.create(args);
  }
  async updateRealm(args: Prisma.RealmUpdateArgs): Promise<PrismaRealm> {
    return this.prisma.realm.update(args);
  }
  async deleteRealm(args: Prisma.RealmDeleteArgs): Promise<PrismaRealm> {
    return this.prisma.realm.delete(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.realm
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async getWorld(parentId: string): Promise<PrismaWorld | null> {
    return this.prisma.realm
      .findUnique({
        where: { id: parentId },
      })
      .world();
  }
}
