/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Realm } from "./Realm";
import { RealmCountArgs } from "./RealmCountArgs";
import { RealmFindManyArgs } from "./RealmFindManyArgs";
import { RealmFindUniqueArgs } from "./RealmFindUniqueArgs";
import { CreateRealmArgs } from "./CreateRealmArgs";
import { UpdateRealmArgs } from "./UpdateRealmArgs";
import { DeleteRealmArgs } from "./DeleteRealmArgs";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { World } from "../../world/base/World";
import { RealmService } from "../realm.service";
@graphql.Resolver(() => Realm)
export class RealmResolverBase {
  constructor(protected readonly service: RealmService) {}

  async _realmsMeta(
    @graphql.Args() args: RealmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Realm])
  async realms(@graphql.Args() args: RealmFindManyArgs): Promise<Realm[]> {
    return this.service.realms(args);
  }

  @graphql.Query(() => Realm, { nullable: true })
  async realm(
    @graphql.Args() args: RealmFindUniqueArgs
  ): Promise<Realm | null> {
    const result = await this.service.realm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Realm)
  async createRealm(@graphql.Args() args: CreateRealmArgs): Promise<Realm> {
    return await this.service.createRealm({
      ...args,
      data: {
        ...args.data,

        world: args.data.world
          ? {
              connect: args.data.world,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Realm)
  async updateRealm(
    @graphql.Args() args: UpdateRealmArgs
  ): Promise<Realm | null> {
    try {
      return await this.service.updateRealm({
        ...args,
        data: {
          ...args.data,

          world: args.data.world
            ? {
                connect: args.data.world,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Realm)
  async deleteRealm(
    @graphql.Args() args: DeleteRealmArgs
  ): Promise<Realm | null> {
    try {
      return await this.service.deleteRealm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [User], { name: "users" })
  async findUsers(
    @graphql.Parent() parent: Realm,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => World, {
    nullable: true,
    name: "world",
  })
  async getWorld(@graphql.Parent() parent: Realm): Promise<World | null> {
    const result = await this.service.getWorld(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
