/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  View as PrismaView,
  Fragment as PrismaFragment,
  Processor as PrismaProcessor,
} from "@prisma/client";

export class ViewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ViewCountArgs, "select">): Promise<number> {
    return this.prisma.view.count(args);
  }

  async views(args: Prisma.ViewFindManyArgs): Promise<PrismaView[]> {
    return this.prisma.view.findMany(args);
  }
  async view(args: Prisma.ViewFindUniqueArgs): Promise<PrismaView | null> {
    return this.prisma.view.findUnique(args);
  }
  async createView(args: Prisma.ViewCreateArgs): Promise<PrismaView> {
    return this.prisma.view.create(args);
  }
  async updateView(args: Prisma.ViewUpdateArgs): Promise<PrismaView> {
    return this.prisma.view.update(args);
  }
  async deleteView(args: Prisma.ViewDeleteArgs): Promise<PrismaView> {
    return this.prisma.view.delete(args);
  }

  async getFragment(parentId: string): Promise<PrismaFragment | null> {
    return this.prisma.view
      .findUnique({
        where: { id: parentId },
      })
      .fragment();
  }

  async getProcessor(parentId: string): Promise<PrismaProcessor | null> {
    return this.prisma.view
      .findUnique({
        where: { id: parentId },
      })
      .processor();
  }
}
