/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ViewService } from "../view.service";
import { ViewCreateInput } from "./ViewCreateInput";
import { View } from "./View";
import { ViewFindManyArgs } from "./ViewFindManyArgs";
import { ViewWhereUniqueInput } from "./ViewWhereUniqueInput";
import { ViewUpdateInput } from "./ViewUpdateInput";

export class ViewControllerBase {
  constructor(protected readonly service: ViewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: View })
  @swagger.ApiBody({
    type: ViewCreateInput,
  })
  async createView(@common.Body() data: ViewCreateInput): Promise<View> {
    return await this.service.createView({
      data: {
        ...data,

        fragment: data.fragment
          ? {
              connect: data.fragment,
            }
          : undefined,

        processor: data.processor
          ? {
              connect: data.processor,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,

        processor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [View] })
  @ApiNestedQuery(ViewFindManyArgs)
  async views(@common.Req() request: Request): Promise<View[]> {
    const args = plainToClass(ViewFindManyArgs, request.query);
    return this.service.views({
      ...args,
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,

        processor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: View })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async view(
    @common.Param() params: ViewWhereUniqueInput
  ): Promise<View | null> {
    const result = await this.service.view({
      where: params,
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,

        processor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: View })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ViewUpdateInput,
  })
  async updateView(
    @common.Param() params: ViewWhereUniqueInput,
    @common.Body() data: ViewUpdateInput
  ): Promise<View | null> {
    try {
      return await this.service.updateView({
        where: params,
        data: {
          ...data,

          fragment: data.fragment
            ? {
                connect: data.fragment,
              }
            : undefined,

          processor: data.processor
            ? {
                connect: data.processor,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          fragment: {
            select: {
              id: true,
            },
          },

          id: true,

          processor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: View })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteView(
    @common.Param() params: ViewWhereUniqueInput
  ): Promise<View | null> {
    try {
      return await this.service.deleteView({
        where: params,
        select: {
          createdAt: true,

          fragment: {
            select: {
              id: true,
            },
          },

          id: true,

          processor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
