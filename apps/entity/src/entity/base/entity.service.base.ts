/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Entity as PrismaEntity,
  Association as PrismaAssociation,
  Agent as PrismaAgent,
  User as PrismaUser,
  Representation as PrismaRepresentation,
  Template as PrismaTemplate,
} from "@prisma/client";

export class EntityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EntityCountArgs, "select">): Promise<number> {
    return this.prisma.entity.count(args);
  }

  async entities(args: Prisma.EntityFindManyArgs): Promise<PrismaEntity[]> {
    return this.prisma.entity.findMany(args);
  }
  async entity(
    args: Prisma.EntityFindUniqueArgs
  ): Promise<PrismaEntity | null> {
    return this.prisma.entity.findUnique(args);
  }
  async createEntity(args: Prisma.EntityCreateArgs): Promise<PrismaEntity> {
    return this.prisma.entity.create(args);
  }
  async updateEntity(args: Prisma.EntityUpdateArgs): Promise<PrismaEntity> {
    return this.prisma.entity.update(args);
  }
  async deleteEntity(args: Prisma.EntityDeleteArgs): Promise<PrismaEntity> {
    return this.prisma.entity.delete(args);
  }

  async findPredecessorAssociations(
    parentId: string,
    args: Prisma.AssociationFindManyArgs
  ): Promise<PrismaAssociation[]> {
    return this.prisma.entity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .PredecessorAssociations(args);
  }

  async findSuccessorAssociations(
    parentId: string,
    args: Prisma.AssociationFindManyArgs
  ): Promise<PrismaAssociation[]> {
    return this.prisma.entity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .successorAssociations(args);
  }

  async getAgent(parentId: string): Promise<PrismaAgent | null> {
    return this.prisma.entity
      .findUnique({
        where: { id: parentId },
      })
      .agent();
  }

  async getOwner(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.entity
      .findUnique({
        where: { id: parentId },
      })
      .owner();
  }

  async getRepresentation(
    parentId: string
  ): Promise<PrismaRepresentation | null> {
    return this.prisma.entity
      .findUnique({
        where: { id: parentId },
      })
      .representation();
  }

  async getTemplate(parentId: string): Promise<PrismaTemplate | null> {
    return this.prisma.entity
      .findUnique({
        where: { id: parentId },
      })
      .template();
  }
}
