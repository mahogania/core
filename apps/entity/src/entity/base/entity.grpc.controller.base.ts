/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { EntityService } from "../entity.service";
import { EntityCreateInput } from "./EntityCreateInput";
import { EntityWhereInput } from "./EntityWhereInput";
import { EntityWhereUniqueInput } from "./EntityWhereUniqueInput";
import { EntityFindManyArgs } from "./EntityFindManyArgs";
import { EntityUpdateInput } from "./EntityUpdateInput";
import { Entity } from "./Entity";
import { AssociationFindManyArgs } from "../../association/base/AssociationFindManyArgs";
import { Association } from "../../association/base/Association";
import { AssociationWhereUniqueInput } from "../../association/base/AssociationWhereUniqueInput";

export class EntityGrpcControllerBase {
  constructor(protected readonly service: EntityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Entity })
  @GrpcMethod("EntityService", "createEntity")
  async createEntity(@common.Body() data: EntityCreateInput): Promise<Entity> {
    return await this.service.createEntity({
      data: {
        ...data,

        owner: data.owner
          ? {
              connect: data.owner,
            }
          : undefined,

        template: data.template
          ? {
              connect: data.template,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Entity] })
  @ApiNestedQuery(EntityFindManyArgs)
  @GrpcMethod("EntityService", "entities")
  async entities(@common.Req() request: Request): Promise<Entity[]> {
    const args = plainToClass(EntityFindManyArgs, request.query);
    return this.service.entities({
      ...args,
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Entity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EntityService", "entity")
  async entity(
    @common.Param() params: EntityWhereUniqueInput
  ): Promise<Entity | null> {
    const result = await this.service.entity({
      where: params,
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Entity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EntityService", "updateEntity")
  async updateEntity(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() data: EntityUpdateInput
  ): Promise<Entity | null> {
    try {
      return await this.service.updateEntity({
        where: params,
        data: {
          ...data,

          owner: data.owner
            ? {
                connect: data.owner,
              }
            : undefined,

          template: data.template
            ? {
                connect: data.template,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          displayName: true,
          id: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          template: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Entity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("EntityService", "deleteEntity")
  async deleteEntity(
    @common.Param() params: EntityWhereUniqueInput
  ): Promise<Entity | null> {
    try {
      return await this.service.deleteEntity({
        where: params,
        select: {
          createdAt: true,
          description: true,
          displayName: true,
          id: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          template: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/incomingAssociations")
  @ApiNestedQuery(AssociationFindManyArgs)
  @GrpcMethod("EntityService", "findManyIncomingAssociations")
  async findManyIncomingAssociations(
    @common.Req() request: Request,
    @common.Param() params: EntityWhereUniqueInput
  ): Promise<Association[]> {
    const query = plainToClass(AssociationFindManyArgs, request.query);
    const results = await this.service.findIncomingAssociations(params.id, {
      ...query,
      select: {
        ascendant: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        descendant: {
          select: {
            id: true,
          },
        },

        description: true,
        displayName: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/incomingAssociations")
  @GrpcMethod("EntityService", "connectIncomingAssociations")
  async connectIncomingAssociations(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      incomingAssociations: {
        connect: body,
      },
    };
    await this.service.updateEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/incomingAssociations")
  @GrpcMethod("EntityService", "updateIncomingAssociations")
  async updateIncomingAssociations(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      incomingAssociations: {
        set: body,
      },
    };
    await this.service.updateEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/incomingAssociations")
  @GrpcMethod("EntityService", "disconnectIncomingAssociations")
  async disconnectIncomingAssociations(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      incomingAssociations: {
        disconnect: body,
      },
    };
    await this.service.updateEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/outgoingAssociations")
  @ApiNestedQuery(AssociationFindManyArgs)
  @GrpcMethod("EntityService", "findManyOutgoingAssociations")
  async findManyOutgoingAssociations(
    @common.Req() request: Request,
    @common.Param() params: EntityWhereUniqueInput
  ): Promise<Association[]> {
    const query = plainToClass(AssociationFindManyArgs, request.query);
    const results = await this.service.findOutgoingAssociations(params.id, {
      ...query,
      select: {
        ascendant: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        descendant: {
          select: {
            id: true,
          },
        },

        description: true,
        displayName: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/outgoingAssociations")
  @GrpcMethod("EntityService", "connectOutgoingAssociations")
  async connectOutgoingAssociations(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outgoingAssociations: {
        connect: body,
      },
    };
    await this.service.updateEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/outgoingAssociations")
  @GrpcMethod("EntityService", "updateOutgoingAssociations")
  async updateOutgoingAssociations(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outgoingAssociations: {
        set: body,
      },
    };
    await this.service.updateEntity({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/outgoingAssociations")
  @GrpcMethod("EntityService", "disconnectOutgoingAssociations")
  async disconnectOutgoingAssociations(
    @common.Param() params: EntityWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      outgoingAssociations: {
        disconnect: body,
      },
    };
    await this.service.updateEntity({
      where: params,
      data,
      select: { id: true },
    });
  }
}
