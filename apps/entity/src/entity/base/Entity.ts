/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Association } from "../../association/base/Association";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { Agent } from "../../agent/base/Agent";
import { User } from "../../user/base/User";
import { Representation } from "../../representation/base/Representation";
import { Template } from "../../template/base/Template";

@ObjectType()
class Entity {
  @ApiProperty({
    required: false,
    type: () => [Association],
  })
  @ValidateNested()
  @Type(() => Association)
  @IsOptional()
  PredecessorAssociations?: Array<Association>;

  @ApiProperty({
    required: false,
    type: () => Agent,
  })
  @ValidateNested()
  @Type(() => Agent)
  @IsOptional()
  agent?: Agent | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  displayName!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  owner?: User | null;

  @ApiProperty({
    required: false,
    type: () => Representation,
  })
  @ValidateNested()
  @Type(() => Representation)
  @IsOptional()
  representation?: Representation | null;

  @ApiProperty({
    required: false,
    type: () => [Association],
  })
  @ValidateNested()
  @Type(() => Association)
  @IsOptional()
  successorAssociations?: Array<Association>;

  @ApiProperty({
    required: false,
    type: () => Template,
  })
  @ValidateNested()
  @Type(() => Template)
  @IsOptional()
  template?: Template | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  version!: string | null;
}

export { Entity as Entity };
