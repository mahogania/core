/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Command } from "./Command";
import { CommandCountArgs } from "./CommandCountArgs";
import { CommandFindManyArgs } from "./CommandFindManyArgs";
import { CommandFindUniqueArgs } from "./CommandFindUniqueArgs";
import { CreateCommandArgs } from "./CreateCommandArgs";
import { UpdateCommandArgs } from "./UpdateCommandArgs";
import { DeleteCommandArgs } from "./DeleteCommandArgs";
import { Processor } from "../../processor/base/Processor";
import { Trait } from "../../trait/base/Trait";
import { CommandService } from "../command.service";
@graphql.Resolver(() => Command)
export class CommandResolverBase {
  constructor(protected readonly service: CommandService) {}

  async _commandsMeta(
    @graphql.Args() args: CommandCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Command])
  async commands(
    @graphql.Args() args: CommandFindManyArgs
  ): Promise<Command[]> {
    return this.service.commands(args);
  }

  @graphql.Query(() => Command, { nullable: true })
  async command(
    @graphql.Args() args: CommandFindUniqueArgs
  ): Promise<Command | null> {
    const result = await this.service.command(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Command)
  async createCommand(
    @graphql.Args() args: CreateCommandArgs
  ): Promise<Command> {
    return await this.service.createCommand({
      ...args,
      data: {
        ...args.data,

        processor: args.data.processor
          ? {
              connect: args.data.processor,
            }
          : undefined,

        trait: args.data.trait
          ? {
              connect: args.data.trait,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Command)
  async updateCommand(
    @graphql.Args() args: UpdateCommandArgs
  ): Promise<Command | null> {
    try {
      return await this.service.updateCommand({
        ...args,
        data: {
          ...args.data,

          processor: args.data.processor
            ? {
                connect: args.data.processor,
              }
            : undefined,

          trait: args.data.trait
            ? {
                connect: args.data.trait,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Command)
  async deleteCommand(
    @graphql.Args() args: DeleteCommandArgs
  ): Promise<Command | null> {
    try {
      return await this.service.deleteCommand(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Processor, {
    nullable: true,
    name: "processor",
  })
  async getProcessor(
    @graphql.Parent() parent: Command
  ): Promise<Processor | null> {
    const result = await this.service.getProcessor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Trait, {
    nullable: true,
    name: "trait",
  })
  async getTrait(@graphql.Parent() parent: Command): Promise<Trait | null> {
    const result = await this.service.getTrait(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
