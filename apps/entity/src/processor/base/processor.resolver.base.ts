/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Processor } from "./Processor";
import { ProcessorCountArgs } from "./ProcessorCountArgs";
import { ProcessorFindManyArgs } from "./ProcessorFindManyArgs";
import { ProcessorFindUniqueArgs } from "./ProcessorFindUniqueArgs";
import { CreateProcessorArgs } from "./CreateProcessorArgs";
import { UpdateProcessorArgs } from "./UpdateProcessorArgs";
import { DeleteProcessorArgs } from "./DeleteProcessorArgs";
import { CommandFindManyArgs } from "../../command/base/CommandFindManyArgs";
import { Command } from "../../command/base/Command";
import { ViewFindManyArgs } from "../../view/base/ViewFindManyArgs";
import { View } from "../../view/base/View";
import { ProcessorService } from "../processor.service";
@graphql.Resolver(() => Processor)
export class ProcessorResolverBase {
  constructor(protected readonly service: ProcessorService) {}

  async _processorsMeta(
    @graphql.Args() args: ProcessorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Processor])
  async processors(
    @graphql.Args() args: ProcessorFindManyArgs
  ): Promise<Processor[]> {
    return this.service.processors(args);
  }

  @graphql.Query(() => Processor, { nullable: true })
  async processor(
    @graphql.Args() args: ProcessorFindUniqueArgs
  ): Promise<Processor | null> {
    const result = await this.service.processor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Processor)
  async createProcessor(
    @graphql.Args() args: CreateProcessorArgs
  ): Promise<Processor> {
    return await this.service.createProcessor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Processor)
  async updateProcessor(
    @graphql.Args() args: UpdateProcessorArgs
  ): Promise<Processor | null> {
    try {
      return await this.service.updateProcessor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Processor)
  async deleteProcessor(
    @graphql.Args() args: DeleteProcessorArgs
  ): Promise<Processor | null> {
    try {
      return await this.service.deleteProcessor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Command], { name: "commands" })
  async findCommands(
    @graphql.Parent() parent: Processor,
    @graphql.Args() args: CommandFindManyArgs
  ): Promise<Command[]> {
    const results = await this.service.findCommands(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [View], { name: "views" })
  async findViews(
    @graphql.Parent() parent: Processor,
    @graphql.Args() args: ViewFindManyArgs
  ): Promise<View[]> {
    const results = await this.service.findViews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
