/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AttributeService } from "../attribute.service";
import { AttributeCreateInput } from "./AttributeCreateInput";
import { Attribute } from "./Attribute";
import { AttributeFindManyArgs } from "./AttributeFindManyArgs";
import { AttributeWhereUniqueInput } from "./AttributeWhereUniqueInput";
import { AttributeUpdateInput } from "./AttributeUpdateInput";

export class AttributeControllerBase {
  constructor(protected readonly service: AttributeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Attribute })
  @swagger.ApiBody({
    type: AttributeCreateInput,
  })
  async createAttribute(
    @common.Body() data: AttributeCreateInput
  ): Promise<Attribute> {
    return await this.service.createAttribute({
      data: {
        ...data,

        fragment: data.fragment
          ? {
              connect: data.fragment,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Attribute] })
  @ApiNestedQuery(AttributeFindManyArgs)
  async attributes(@common.Req() request: Request): Promise<Attribute[]> {
    const args = plainToClass(AttributeFindManyArgs, request.query);
    return this.service.attributes({
      ...args,
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Attribute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async attribute(
    @common.Param() params: AttributeWhereUniqueInput
  ): Promise<Attribute | null> {
    const result = await this.service.attribute({
      where: params,
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Attribute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: AttributeUpdateInput,
  })
  async updateAttribute(
    @common.Param() params: AttributeWhereUniqueInput,
    @common.Body() data: AttributeUpdateInput
  ): Promise<Attribute | null> {
    try {
      return await this.service.updateAttribute({
        where: params,
        data: {
          ...data,

          fragment: data.fragment
            ? {
                connect: data.fragment,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          fragment: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Attribute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAttribute(
    @common.Param() params: AttributeWhereUniqueInput
  ): Promise<Attribute | null> {
    try {
      return await this.service.deleteAttribute({
        where: params,
        select: {
          createdAt: true,

          fragment: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
