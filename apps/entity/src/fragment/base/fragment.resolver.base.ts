/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Fragment } from "./Fragment";
import { FragmentCountArgs } from "./FragmentCountArgs";
import { FragmentFindManyArgs } from "./FragmentFindManyArgs";
import { FragmentFindUniqueArgs } from "./FragmentFindUniqueArgs";
import { CreateFragmentArgs } from "./CreateFragmentArgs";
import { UpdateFragmentArgs } from "./UpdateFragmentArgs";
import { DeleteFragmentArgs } from "./DeleteFragmentArgs";
import { AttributeFindManyArgs } from "../../attribute/base/AttributeFindManyArgs";
import { Attribute } from "../../attribute/base/Attribute";
import { ViewFindManyArgs } from "../../view/base/ViewFindManyArgs";
import { View } from "../../view/base/View";
import { Trait } from "../../trait/base/Trait";
import { FragmentService } from "../fragment.service";
@graphql.Resolver(() => Fragment)
export class FragmentResolverBase {
  constructor(protected readonly service: FragmentService) {}

  async _fragmentsMeta(
    @graphql.Args() args: FragmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Fragment])
  async fragments(
    @graphql.Args() args: FragmentFindManyArgs
  ): Promise<Fragment[]> {
    return this.service.fragments(args);
  }

  @graphql.Query(() => Fragment, { nullable: true })
  async fragment(
    @graphql.Args() args: FragmentFindUniqueArgs
  ): Promise<Fragment | null> {
    const result = await this.service.fragment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Fragment)
  async createFragment(
    @graphql.Args() args: CreateFragmentArgs
  ): Promise<Fragment> {
    return await this.service.createFragment({
      ...args,
      data: {
        ...args.data,

        trait: args.data.trait
          ? {
              connect: args.data.trait,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Fragment)
  async updateFragment(
    @graphql.Args() args: UpdateFragmentArgs
  ): Promise<Fragment | null> {
    try {
      return await this.service.updateFragment({
        ...args,
        data: {
          ...args.data,

          trait: args.data.trait
            ? {
                connect: args.data.trait,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fragment)
  async deleteFragment(
    @graphql.Args() args: DeleteFragmentArgs
  ): Promise<Fragment | null> {
    try {
      return await this.service.deleteFragment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Attribute], { name: "attributes" })
  async findAttributes(
    @graphql.Parent() parent: Fragment,
    @graphql.Args() args: AttributeFindManyArgs
  ): Promise<Attribute[]> {
    const results = await this.service.findAttributes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [View], { name: "views" })
  async findViews(
    @graphql.Parent() parent: Fragment,
    @graphql.Args() args: ViewFindManyArgs
  ): Promise<View[]> {
    const results = await this.service.findViews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Trait, {
    nullable: true,
    name: "trait",
  })
  async getTrait(@graphql.Parent() parent: Fragment): Promise<Trait | null> {
    const result = await this.service.getTrait(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
