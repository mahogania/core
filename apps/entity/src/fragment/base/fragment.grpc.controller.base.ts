/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { FragmentService } from "../fragment.service";
import { FragmentCreateInput } from "./FragmentCreateInput";
import { FragmentWhereInput } from "./FragmentWhereInput";
import { FragmentWhereUniqueInput } from "./FragmentWhereUniqueInput";
import { FragmentFindManyArgs } from "./FragmentFindManyArgs";
import { FragmentUpdateInput } from "./FragmentUpdateInput";
import { Fragment } from "./Fragment";
import { AttributeFindManyArgs } from "../../attribute/base/AttributeFindManyArgs";
import { Attribute } from "../../attribute/base/Attribute";
import { AttributeWhereUniqueInput } from "../../attribute/base/AttributeWhereUniqueInput";
import { ViewFindManyArgs } from "../../view/base/ViewFindManyArgs";
import { View } from "../../view/base/View";
import { ViewWhereUniqueInput } from "../../view/base/ViewWhereUniqueInput";

export class FragmentGrpcControllerBase {
  constructor(protected readonly service: FragmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fragment })
  @GrpcMethod("FragmentService", "createFragment")
  async createFragment(
    @common.Body() data: FragmentCreateInput
  ): Promise<Fragment> {
    return await this.service.createFragment({
      data: {
        ...data,

        trait: data.trait
          ? {
              connect: data.trait,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        trait: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fragment] })
  @ApiNestedQuery(FragmentFindManyArgs)
  @GrpcMethod("FragmentService", "fragments")
  async fragments(@common.Req() request: Request): Promise<Fragment[]> {
    const args = plainToClass(FragmentFindManyArgs, request.query);
    return this.service.fragments({
      ...args,
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        trait: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fragment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FragmentService", "fragment")
  async fragment(
    @common.Param() params: FragmentWhereUniqueInput
  ): Promise<Fragment | null> {
    const result = await this.service.fragment({
      where: params,
      select: {
        createdAt: true,
        description: true,
        displayName: true,
        id: true,
        name: true,

        trait: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fragment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FragmentService", "updateFragment")
  async updateFragment(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() data: FragmentUpdateInput
  ): Promise<Fragment | null> {
    try {
      return await this.service.updateFragment({
        where: params,
        data: {
          ...data,

          trait: data.trait
            ? {
                connect: data.trait,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          displayName: true,
          id: true,
          name: true,

          trait: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fragment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FragmentService", "deleteFragment")
  async deleteFragment(
    @common.Param() params: FragmentWhereUniqueInput
  ): Promise<Fragment | null> {
    try {
      return await this.service.deleteFragment({
        where: params,
        select: {
          createdAt: true,
          description: true,
          displayName: true,
          id: true,
          name: true,

          trait: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/attributes")
  @ApiNestedQuery(AttributeFindManyArgs)
  @GrpcMethod("FragmentService", "findManyAttributes")
  async findManyAttributes(
    @common.Req() request: Request,
    @common.Param() params: FragmentWhereUniqueInput
  ): Promise<Attribute[]> {
    const query = plainToClass(AttributeFindManyArgs, request.query);
    const results = await this.service.findAttributes(params.id, {
      ...query,
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attributes")
  @GrpcMethod("FragmentService", "connectAttributes")
  async connectAttributes(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        connect: body,
      },
    };
    await this.service.updateFragment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attributes")
  @GrpcMethod("FragmentService", "updateAttributes")
  async updateAttributes(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        set: body,
      },
    };
    await this.service.updateFragment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attributes")
  @GrpcMethod("FragmentService", "disconnectAttributes")
  async disconnectAttributes(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        disconnect: body,
      },
    };
    await this.service.updateFragment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/views")
  @ApiNestedQuery(ViewFindManyArgs)
  @GrpcMethod("FragmentService", "findManyViews")
  async findManyViews(
    @common.Req() request: Request,
    @common.Param() params: FragmentWhereUniqueInput
  ): Promise<View[]> {
    const query = plainToClass(ViewFindManyArgs, request.query);
    const results = await this.service.findViews(params.id, {
      ...query,
      select: {
        createdAt: true,

        fragment: {
          select: {
            id: true,
          },
        },

        id: true,

        processor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/views")
  @GrpcMethod("FragmentService", "connectViews")
  async connectViews(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() body: ViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      views: {
        connect: body,
      },
    };
    await this.service.updateFragment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/views")
  @GrpcMethod("FragmentService", "updateViews")
  async updateViews(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() body: ViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      views: {
        set: body,
      },
    };
    await this.service.updateFragment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/views")
  @GrpcMethod("FragmentService", "disconnectViews")
  async disconnectViews(
    @common.Param() params: FragmentWhereUniqueInput,
    @common.Body() body: ViewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      views: {
        disconnect: body,
      },
    };
    await this.service.updateFragment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
