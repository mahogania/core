/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  World as PrismaWorld,
  Realm as PrismaRealm,
} from "@prisma/client";

export class WorldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WorldCountArgs, "select">): Promise<number> {
    return this.prisma.world.count(args);
  }

  async worlds(args: Prisma.WorldFindManyArgs): Promise<PrismaWorld[]> {
    return this.prisma.world.findMany(args);
  }
  async world(args: Prisma.WorldFindUniqueArgs): Promise<PrismaWorld | null> {
    return this.prisma.world.findUnique(args);
  }
  async createWorld(args: Prisma.WorldCreateArgs): Promise<PrismaWorld> {
    return this.prisma.world.create(args);
  }
  async updateWorld(args: Prisma.WorldUpdateArgs): Promise<PrismaWorld> {
    return this.prisma.world.update(args);
  }
  async deleteWorld(args: Prisma.WorldDeleteArgs): Promise<PrismaWorld> {
    return this.prisma.world.delete(args);
  }

  async findRealms(
    parentId: string,
    args: Prisma.RealmFindManyArgs
  ): Promise<PrismaRealm[]> {
    return this.prisma.world
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .realms(args);
  }
}
