/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { World } from "./World";
import { WorldCountArgs } from "./WorldCountArgs";
import { WorldFindManyArgs } from "./WorldFindManyArgs";
import { WorldFindUniqueArgs } from "./WorldFindUniqueArgs";
import { CreateWorldArgs } from "./CreateWorldArgs";
import { UpdateWorldArgs } from "./UpdateWorldArgs";
import { DeleteWorldArgs } from "./DeleteWorldArgs";
import { RealmFindManyArgs } from "../../realm/base/RealmFindManyArgs";
import { Realm } from "../../realm/base/Realm";
import { WorldService } from "../world.service";
@graphql.Resolver(() => World)
export class WorldResolverBase {
  constructor(protected readonly service: WorldService) {}

  async _worldsMeta(
    @graphql.Args() args: WorldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [World])
  async worlds(@graphql.Args() args: WorldFindManyArgs): Promise<World[]> {
    return this.service.worlds(args);
  }

  @graphql.Query(() => World, { nullable: true })
  async world(
    @graphql.Args() args: WorldFindUniqueArgs
  ): Promise<World | null> {
    const result = await this.service.world(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => World)
  async createWorld(@graphql.Args() args: CreateWorldArgs): Promise<World> {
    return await this.service.createWorld({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => World)
  async updateWorld(
    @graphql.Args() args: UpdateWorldArgs
  ): Promise<World | null> {
    try {
      return await this.service.updateWorld({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => World)
  async deleteWorld(
    @graphql.Args() args: DeleteWorldArgs
  ): Promise<World | null> {
    try {
      return await this.service.deleteWorld(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Realm], { name: "realms" })
  async findRealms(
    @graphql.Parent() parent: World,
    @graphql.Args() args: RealmFindManyArgs
  ): Promise<Realm[]> {
    const results = await this.service.findRealms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
