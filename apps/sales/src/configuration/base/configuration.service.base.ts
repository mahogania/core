/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Configuration as PrismaConfiguration,
  Item as PrismaItem,
  Bundle as PrismaBundle,
  Catalog as PrismaCatalog,
  Pipeline as PrismaPipeline,
} from "@prisma/client";

export class ConfigurationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConfigurationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.configuration.count(args);
  }

  async configurations(
    args: Prisma.ConfigurationFindManyArgs
  ): Promise<PrismaConfiguration[]> {
    return this.prisma.configuration.findMany(args);
  }
  async configuration(
    args: Prisma.ConfigurationFindUniqueArgs
  ): Promise<PrismaConfiguration | null> {
    return this.prisma.configuration.findUnique(args);
  }
  async createConfiguration(
    args: Prisma.ConfigurationCreateArgs
  ): Promise<PrismaConfiguration> {
    return this.prisma.configuration.create(args);
  }
  async updateConfiguration(
    args: Prisma.ConfigurationUpdateArgs
  ): Promise<PrismaConfiguration> {
    return this.prisma.configuration.update(args);
  }
  async deleteConfiguration(
    args: Prisma.ConfigurationDeleteArgs
  ): Promise<PrismaConfiguration> {
    return this.prisma.configuration.delete(args);
  }

  async findLineItems(
    parentId: string,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.configuration
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .lineItems(args);
  }

  async getBundle(parentId: string): Promise<PrismaBundle | null> {
    return this.prisma.configuration
      .findUnique({
        where: { id: parentId },
      })
      .bundle();
  }

  async getCatalog(parentId: string): Promise<PrismaCatalog | null> {
    return this.prisma.configuration
      .findUnique({
        where: { id: parentId },
      })
      .catalog();
  }

  async getPipeline(parentId: string): Promise<PrismaPipeline | null> {
    return this.prisma.configuration
      .findUnique({
        where: { id: parentId },
      })
      .pipeline();
  }
}
