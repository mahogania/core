/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { BusinessService } from "../business.service";
import { BusinessCreateInput } from "./BusinessCreateInput";
import { BusinessWhereInput } from "./BusinessWhereInput";
import { BusinessWhereUniqueInput } from "./BusinessWhereUniqueInput";
import { BusinessFindManyArgs } from "./BusinessFindManyArgs";
import { BusinessUpdateInput } from "./BusinessUpdateInput";
import { Business } from "./Business";
import { UnitFindManyArgs } from "../../unit/base/UnitFindManyArgs";
import { Unit } from "../../unit/base/Unit";
import { UnitWhereUniqueInput } from "../../unit/base/UnitWhereUniqueInput";
import { OpportunityFindManyArgs } from "../../opportunity/base/OpportunityFindManyArgs";
import { Opportunity } from "../../opportunity/base/Opportunity";
import { OpportunityWhereUniqueInput } from "../../opportunity/base/OpportunityWhereUniqueInput";
import { StrengthFindManyArgs } from "../../strength/base/StrengthFindManyArgs";
import { Strength } from "../../strength/base/Strength";
import { StrengthWhereUniqueInput } from "../../strength/base/StrengthWhereUniqueInput";
import { ThreatFindManyArgs } from "../../threat/base/ThreatFindManyArgs";
import { Threat } from "../../threat/base/Threat";
import { ThreatWhereUniqueInput } from "../../threat/base/ThreatWhereUniqueInput";
import { WeaknessFindManyArgs } from "../../weakness/base/WeaknessFindManyArgs";
import { Weakness } from "../../weakness/base/Weakness";
import { WeaknessWhereUniqueInput } from "../../weakness/base/WeaknessWhereUniqueInput";

export class BusinessGrpcControllerBase {
  constructor(protected readonly service: BusinessService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Business })
  @GrpcMethod("BusinessService", "createBusiness")
  async createBusiness(
    @common.Body() data: BusinessCreateInput
  ): Promise<Business> {
    return await this.service.createBusiness({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Business] })
  @ApiNestedQuery(BusinessFindManyArgs)
  @GrpcMethod("BusinessService", "businesses")
  async businesses(@common.Req() request: Request): Promise<Business[]> {
    const args = plainToClass(BusinessFindManyArgs, request.query);
    return this.service.businesses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("BusinessService", "business")
  async business(
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Business | null> {
    const result = await this.service.business({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("BusinessService", "updateBusiness")
  async updateBusiness(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() data: BusinessUpdateInput
  ): Promise<Business | null> {
    try {
      return await this.service.updateBusiness({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("BusinessService", "deleteBusiness")
  async deleteBusiness(
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Business | null> {
    try {
      return await this.service.deleteBusiness({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/businessUnits")
  @ApiNestedQuery(UnitFindManyArgs)
  @GrpcMethod("BusinessService", "findManyBusinessUnits")
  async findManyBusinessUnits(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Unit[]> {
    const query = plainToClass(UnitFindManyArgs, request.query);
    const results = await this.service.findBusinessUnits(params.id, {
      ...query,
      select: {
        address: {
          select: {
            id: true,
          },
        },

        competitor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/businessUnits")
  @GrpcMethod("BusinessService", "connectBusinessUnits")
  async connectBusinessUnits(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: UnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessUnits: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/businessUnits")
  @GrpcMethod("BusinessService", "updateBusinessUnits")
  async updateBusinessUnits(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: UnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessUnits: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/businessUnits")
  @GrpcMethod("BusinessService", "disconnectBusinessUnits")
  async disconnectBusinessUnits(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: UnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessUnits: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/opportunities")
  @ApiNestedQuery(OpportunityFindManyArgs)
  @GrpcMethod("BusinessService", "findManyOpportunities")
  async findManyOpportunities(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Opportunity[]> {
    const query = plainToClass(OpportunityFindManyArgs, request.query);
    const results = await this.service.findOpportunities(params.id, {
      ...query,
      select: {
        contact: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/opportunities")
  @GrpcMethod("BusinessService", "connectOpportunities")
  async connectOpportunities(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: OpportunityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      opportunities: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/opportunities")
  @GrpcMethod("BusinessService", "updateOpportunities")
  async updateOpportunities(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: OpportunityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      opportunities: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/opportunities")
  @GrpcMethod("BusinessService", "disconnectOpportunities")
  async disconnectOpportunities(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: OpportunityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      opportunities: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/strengths")
  @ApiNestedQuery(StrengthFindManyArgs)
  @GrpcMethod("BusinessService", "findManyStrengths")
  async findManyStrengths(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Strength[]> {
    const query = plainToClass(StrengthFindManyArgs, request.query);
    const results = await this.service.findStrengths(params.id, {
      ...query,
      select: {
        competitor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/strengths")
  @GrpcMethod("BusinessService", "connectStrengths")
  async connectStrengths(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: StrengthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strengths: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/strengths")
  @GrpcMethod("BusinessService", "updateStrengths")
  async updateStrengths(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: StrengthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strengths: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/strengths")
  @GrpcMethod("BusinessService", "disconnectStrengths")
  async disconnectStrengths(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: StrengthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strengths: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/threats")
  @ApiNestedQuery(ThreatFindManyArgs)
  @GrpcMethod("BusinessService", "findManyThreats")
  async findManyThreats(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Threat[]> {
    const query = plainToClass(ThreatFindManyArgs, request.query);
    const results = await this.service.findThreats(params.id, {
      ...query,
      select: {
        competitor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/threats")
  @GrpcMethod("BusinessService", "connectThreats")
  async connectThreats(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ThreatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threats: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/threats")
  @GrpcMethod("BusinessService", "updateThreats")
  async updateThreats(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ThreatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threats: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/threats")
  @GrpcMethod("BusinessService", "disconnectThreats")
  async disconnectThreats(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: ThreatWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      threats: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/weaknesses")
  @ApiNestedQuery(WeaknessFindManyArgs)
  @GrpcMethod("BusinessService", "findManyWeaknesses")
  async findManyWeaknesses(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Weakness[]> {
    const query = plainToClass(WeaknessFindManyArgs, request.query);
    const results = await this.service.findWeaknesses(params.id, {
      ...query,
      select: {
        competitor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/weaknesses")
  @GrpcMethod("BusinessService", "connectWeaknesses")
  async connectWeaknesses(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: WeaknessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      weaknesses: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/weaknesses")
  @GrpcMethod("BusinessService", "updateWeaknesses")
  async updateWeaknesses(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: WeaknessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      weaknesses: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/weaknesses")
  @GrpcMethod("BusinessService", "disconnectWeaknesses")
  async disconnectWeaknesses(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: WeaknessWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      weaknesses: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }
}
