/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Strength as PrismaStrength,
  Feature as PrismaFeature,
  Business as PrismaBusiness,
} from "@prisma/client";

export class StrengthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StrengthCountArgs, "select">): Promise<number> {
    return this.prisma.strength.count(args);
  }

  async strengths(
    args: Prisma.StrengthFindManyArgs
  ): Promise<PrismaStrength[]> {
    return this.prisma.strength.findMany(args);
  }
  async strength(
    args: Prisma.StrengthFindUniqueArgs
  ): Promise<PrismaStrength | null> {
    return this.prisma.strength.findUnique(args);
  }
  async createStrength(
    args: Prisma.StrengthCreateArgs
  ): Promise<PrismaStrength> {
    return this.prisma.strength.create(args);
  }
  async updateStrength(
    args: Prisma.StrengthUpdateArgs
  ): Promise<PrismaStrength> {
    return this.prisma.strength.update(args);
  }
  async deleteStrength(
    args: Prisma.StrengthDeleteArgs
  ): Promise<PrismaStrength> {
    return this.prisma.strength.delete(args);
  }

  async findFeatures(
    parentId: string,
    args: Prisma.FeatureFindManyArgs
  ): Promise<PrismaFeature[]> {
    return this.prisma.strength
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .features(args);
  }

  async getCompetitor(parentId: string): Promise<PrismaBusiness | null> {
    return this.prisma.strength
      .findUnique({
        where: { id: parentId },
      })
      .competitor();
  }
}
