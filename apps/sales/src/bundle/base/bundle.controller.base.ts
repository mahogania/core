/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BundleService } from "../bundle.service";
import { BundleCreateInput } from "./BundleCreateInput";
import { Configuration } from "../../configuration/base/Configuration";
import { Bundle } from "./Bundle";
import { BundleFindManyArgs } from "./BundleFindManyArgs";
import { BundleWhereUniqueInput } from "./BundleWhereUniqueInput";
import { BundleUpdateInput } from "./BundleUpdateInput";
import { FeatureFindManyArgs } from "../../feature/base/FeatureFindManyArgs";
import { Feature } from "../../feature/base/Feature";
import { FeatureWhereUniqueInput } from "../../feature/base/FeatureWhereUniqueInput";

export class BundleControllerBase {
  constructor(protected readonly service: BundleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bundle })
  @swagger.ApiBody({
    type: BundleCreateInput,
  })
  async createBundle(@common.Body() data: BundleCreateInput): Promise<Bundle> {
    return await this.service.createBundle({
      data: {
        ...data,

        Configuration: {
          connect: data.Configuration,
        },
      },
      select: {
        Configuration: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bundle] })
  @ApiNestedQuery(BundleFindManyArgs)
  async bundles(@common.Req() request: Request): Promise<Bundle[]> {
    const args = plainToClass(BundleFindManyArgs, request.query);
    return this.service.bundles({
      ...args,
      select: {
        Configuration: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bundle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bundle(
    @common.Param() params: BundleWhereUniqueInput
  ): Promise<Bundle | null> {
    const result = await this.service.bundle({
      where: params,
      select: {
        Configuration: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bundle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: BundleUpdateInput,
  })
  async updateBundle(
    @common.Param() params: BundleWhereUniqueInput,
    @common.Body() data: BundleUpdateInput
  ): Promise<Bundle | null> {
    try {
      return await this.service.updateBundle({
        where: params,
        data: {
          ...data,

          Configuration: {
            connect: data.Configuration,
          },
        },
        select: {
          Configuration: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bundle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBundle(
    @common.Param() params: BundleWhereUniqueInput
  ): Promise<Bundle | null> {
    try {
      return await this.service.deleteBundle({
        where: params,
        select: {
          Configuration: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/features")
  @ApiNestedQuery(FeatureFindManyArgs)
  async findFeatures(
    @common.Req() request: Request,
    @common.Param() params: BundleWhereUniqueInput
  ): Promise<Feature[]> {
    const query = plainToClass(FeatureFindManyArgs, request.query);
    const results = await this.service.findFeatures(params.id, {
      ...query,
      select: {
        bundle: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        displayName: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/features")
  async connectFeatures(
    @common.Param() params: BundleWhereUniqueInput,
    @common.Body() body: FeatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      features: {
        connect: body,
      },
    };
    await this.service.updateBundle({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/features")
  async updateFeatures(
    @common.Param() params: BundleWhereUniqueInput,
    @common.Body() body: FeatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      features: {
        set: body,
      },
    };
    await this.service.updateBundle({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/features")
  async disconnectFeatures(
    @common.Param() params: BundleWhereUniqueInput,
    @common.Body() body: FeatureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      features: {
        disconnect: body,
      },
    };
    await this.service.updateBundle({
      where: params,
      data,
      select: { id: true },
    });
  }
}
