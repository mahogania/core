/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bundle } from "./Bundle";
import { BundleCountArgs } from "./BundleCountArgs";
import { BundleFindManyArgs } from "./BundleFindManyArgs";
import { BundleFindUniqueArgs } from "./BundleFindUniqueArgs";
import { CreateBundleArgs } from "./CreateBundleArgs";
import { UpdateBundleArgs } from "./UpdateBundleArgs";
import { DeleteBundleArgs } from "./DeleteBundleArgs";
import { FeatureFindManyArgs } from "../../feature/base/FeatureFindManyArgs";
import { Feature } from "../../feature/base/Feature";
import { Configuration } from "../../configuration/base/Configuration";
import { BundleService } from "../bundle.service";
@graphql.Resolver(() => Bundle)
export class BundleResolverBase {
  constructor(protected readonly service: BundleService) {}

  async _bundlesMeta(
    @graphql.Args() args: BundleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bundle])
  async bundles(@graphql.Args() args: BundleFindManyArgs): Promise<Bundle[]> {
    return this.service.bundles(args);
  }

  @graphql.Query(() => Bundle, { nullable: true })
  async bundle(
    @graphql.Args() args: BundleFindUniqueArgs
  ): Promise<Bundle | null> {
    const result = await this.service.bundle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bundle)
  async createBundle(@graphql.Args() args: CreateBundleArgs): Promise<Bundle> {
    return await this.service.createBundle({
      ...args,
      data: {
        ...args.data,

        lineItemConfiguration: args.data.lineItemConfiguration
          ? {
              connect: args.data.lineItemConfiguration,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Bundle)
  async updateBundle(
    @graphql.Args() args: UpdateBundleArgs
  ): Promise<Bundle | null> {
    try {
      return await this.service.updateBundle({
        ...args,
        data: {
          ...args.data,

          lineItemConfiguration: args.data.lineItemConfiguration
            ? {
                connect: args.data.lineItemConfiguration,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bundle)
  async deleteBundle(
    @graphql.Args() args: DeleteBundleArgs
  ): Promise<Bundle | null> {
    try {
      return await this.service.deleteBundle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Feature], { name: "features" })
  async findFeatures(
    @graphql.Parent() parent: Bundle,
    @graphql.Args() args: FeatureFindManyArgs
  ): Promise<Feature[]> {
    const results = await this.service.findFeatures(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Configuration, {
    nullable: true,
    name: "lineItemConfiguration",
  })
  async getLineItemConfiguration(
    @graphql.Parent() parent: Bundle
  ): Promise<Configuration | null> {
    const result = await this.service.getLineItemConfiguration(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
