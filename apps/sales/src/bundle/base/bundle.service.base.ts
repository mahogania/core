/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Bundle as PrismaBundle,
  Feature as PrismaFeature,
  Configuration as PrismaConfiguration,
} from "@prisma/client";

export class BundleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BundleCountArgs, "select">): Promise<number> {
    return this.prisma.bundle.count(args);
  }

  async bundles(args: Prisma.BundleFindManyArgs): Promise<PrismaBundle[]> {
    return this.prisma.bundle.findMany(args);
  }
  async bundle(
    args: Prisma.BundleFindUniqueArgs
  ): Promise<PrismaBundle | null> {
    return this.prisma.bundle.findUnique(args);
  }
  async createBundle(args: Prisma.BundleCreateArgs): Promise<PrismaBundle> {
    return this.prisma.bundle.create(args);
  }
  async updateBundle(args: Prisma.BundleUpdateArgs): Promise<PrismaBundle> {
    return this.prisma.bundle.update(args);
  }
  async deleteBundle(args: Prisma.BundleDeleteArgs): Promise<PrismaBundle> {
    return this.prisma.bundle.delete(args);
  }

  async findFeatures(
    parentId: string,
    args: Prisma.FeatureFindManyArgs
  ): Promise<PrismaFeature[]> {
    return this.prisma.bundle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .features(args);
  }

  async getLineItemConfiguration(
    parentId: string
  ): Promise<PrismaConfiguration | null> {
    return this.prisma.bundle
      .findUnique({
        where: { id: parentId },
      })
      .lineItemConfiguration();
  }
}
