/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Process as PrismaProcess,
  Form as PrismaForm,
  Threat as PrismaThreat,
  Pipeline as PrismaPipeline,
} from "@prisma/client";

import { Pipeline } from "../../pipeline/base/Pipeline";

export class ProcessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProcessCountArgs, "select">): Promise<number> {
    return this.prisma.process.count(args);
  }

  async processes(args: Prisma.ProcessFindManyArgs): Promise<PrismaProcess[]> {
    return this.prisma.process.findMany(args);
  }
  async process(
    args: Prisma.ProcessFindUniqueArgs
  ): Promise<PrismaProcess | null> {
    return this.prisma.process.findUnique(args);
  }
  async createProcess(args: Prisma.ProcessCreateArgs): Promise<PrismaProcess> {
    return this.prisma.process.create(args);
  }
  async updateProcess(args: Prisma.ProcessUpdateArgs): Promise<PrismaProcess> {
    return this.prisma.process.update(args);
  }
  async deleteProcess(args: Prisma.ProcessDeleteArgs): Promise<PrismaProcess> {
    return this.prisma.process.delete(args);
  }

  async findForms(
    parentId: string,
    args: Prisma.FormFindManyArgs
  ): Promise<PrismaForm[]> {
    return this.prisma.process
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .forms(args);
  }

  async findThreats(
    parentId: string,
    args: Prisma.ThreatFindManyArgs
  ): Promise<PrismaThreat[]> {
    return this.prisma.process
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .threats(args);
  }

  async getPipeline(parentId: string): Promise<PrismaPipeline | null> {
    return this.prisma.process
      .findUnique({
        where: { id: parentId },
      })
      .Pipeline();
  }
}
