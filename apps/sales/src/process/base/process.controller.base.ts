/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessService } from "../process.service";
import { ProcessCreateInput } from "./ProcessCreateInput";
import { Pipeline } from "../../pipeline/base/Pipeline";
import { Process } from "./Process";
import { ProcessFindManyArgs } from "./ProcessFindManyArgs";
import { ProcessWhereUniqueInput } from "./ProcessWhereUniqueInput";
import { ProcessUpdateInput } from "./ProcessUpdateInput";
import { FormFindManyArgs } from "../../form/base/FormFindManyArgs";
import { Form } from "../../form/base/Form";
import { FormWhereUniqueInput } from "../../form/base/FormWhereUniqueInput";

export class ProcessControllerBase {
  constructor(protected readonly service: ProcessService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Process })
  @swagger.ApiBody({
    type: ProcessCreateInput,
  })
  async createProcess(
    @common.Body() data: ProcessCreateInput
  ): Promise<Process> {
    return await this.service.createProcess({
      data: {
        ...data,

        Pipeline: data.Pipeline
          ? {
              connect: data.Pipeline,
            }
          : undefined,
      },
      select: {
        Pipeline: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Process] })
  @ApiNestedQuery(ProcessFindManyArgs)
  async processes(@common.Req() request: Request): Promise<Process[]> {
    const args = plainToClass(ProcessFindManyArgs, request.query);
    return this.service.processes({
      ...args,
      select: {
        Pipeline: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Process })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async process(
    @common.Param() params: ProcessWhereUniqueInput
  ): Promise<Process | null> {
    const result = await this.service.process({
      where: params,
      select: {
        Pipeline: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Process })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ProcessUpdateInput,
  })
  async updateProcess(
    @common.Param() params: ProcessWhereUniqueInput,
    @common.Body() data: ProcessUpdateInput
  ): Promise<Process | null> {
    try {
      return await this.service.updateProcess({
        where: params,
        data: {
          ...data,

          Pipeline: data.Pipeline
            ? {
                connect: data.Pipeline,
              }
            : undefined,
        },
        select: {
          Pipeline: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Process })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcess(
    @common.Param() params: ProcessWhereUniqueInput
  ): Promise<Process | null> {
    try {
      return await this.service.deleteProcess({
        where: params,
        select: {
          Pipeline: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/forms")
  @ApiNestedQuery(FormFindManyArgs)
  async findForms(
    @common.Req() request: Request,
    @common.Param() params: ProcessWhereUniqueInput
  ): Promise<Form[]> {
    const query = plainToClass(FormFindManyArgs, request.query);
    const results = await this.service.findForms(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        process: {
          select: {
            id: true,
          },
        },

        schema: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/forms")
  async connectForms(
    @common.Param() params: ProcessWhereUniqueInput,
    @common.Body() body: FormWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forms: {
        connect: body,
      },
    };
    await this.service.updateProcess({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/forms")
  async updateForms(
    @common.Param() params: ProcessWhereUniqueInput,
    @common.Body() body: FormWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forms: {
        set: body,
      },
    };
    await this.service.updateProcess({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/forms")
  async disconnectForms(
    @common.Param() params: ProcessWhereUniqueInput,
    @common.Body() body: FormWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      forms: {
        disconnect: body,
      },
    };
    await this.service.updateProcess({
      where: params,
      data,
      select: { id: true },
    });
  }
}
