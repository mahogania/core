/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Threat } from "./Threat";
import { ThreatCountArgs } from "./ThreatCountArgs";
import { ThreatFindManyArgs } from "./ThreatFindManyArgs";
import { ThreatFindUniqueArgs } from "./ThreatFindUniqueArgs";
import { CreateThreatArgs } from "./CreateThreatArgs";
import { UpdateThreatArgs } from "./UpdateThreatArgs";
import { DeleteThreatArgs } from "./DeleteThreatArgs";
import { Process } from "../../process/base/Process";
import { Unit } from "../../unit/base/Unit";
import { ThreatService } from "../threat.service";
@graphql.Resolver(() => Threat)
export class ThreatResolverBase {
  constructor(protected readonly service: ThreatService) {}

  async _threatsMeta(
    @graphql.Args() args: ThreatCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Threat])
  async threats(@graphql.Args() args: ThreatFindManyArgs): Promise<Threat[]> {
    return this.service.threats(args);
  }

  @graphql.Query(() => Threat, { nullable: true })
  async threat(
    @graphql.Args() args: ThreatFindUniqueArgs
  ): Promise<Threat | null> {
    const result = await this.service.threat(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Threat)
  async createThreat(@graphql.Args() args: CreateThreatArgs): Promise<Threat> {
    return await this.service.createThreat({
      ...args,
      data: {
        ...args.data,

        process: args.data.process
          ? {
              connect: args.data.process,
            }
          : undefined,

        unit: args.data.unit
          ? {
              connect: args.data.unit,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Threat)
  async updateThreat(
    @graphql.Args() args: UpdateThreatArgs
  ): Promise<Threat | null> {
    try {
      return await this.service.updateThreat({
        ...args,
        data: {
          ...args.data,

          process: args.data.process
            ? {
                connect: args.data.process,
              }
            : undefined,

          unit: args.data.unit
            ? {
                connect: args.data.unit,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Threat)
  async deleteThreat(
    @graphql.Args() args: DeleteThreatArgs
  ): Promise<Threat | null> {
    try {
      return await this.service.deleteThreat(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Process, {
    nullable: true,
    name: "process",
  })
  async getProcess(@graphql.Parent() parent: Threat): Promise<Process | null> {
    const result = await this.service.getProcess(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unit",
  })
  async getUnit(@graphql.Parent() parent: Threat): Promise<Unit | null> {
    const result = await this.service.getUnit(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
