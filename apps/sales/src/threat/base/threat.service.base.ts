/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Threat as PrismaThreat,
  Process as PrismaProcess,
  Unit as PrismaUnit,
} from "@prisma/client";

export class ThreatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ThreatCountArgs, "select">): Promise<number> {
    return this.prisma.threat.count(args);
  }

  async threats(args: Prisma.ThreatFindManyArgs): Promise<PrismaThreat[]> {
    return this.prisma.threat.findMany(args);
  }
  async threat(
    args: Prisma.ThreatFindUniqueArgs
  ): Promise<PrismaThreat | null> {
    return this.prisma.threat.findUnique(args);
  }
  async createThreat(args: Prisma.ThreatCreateArgs): Promise<PrismaThreat> {
    return this.prisma.threat.create(args);
  }
  async updateThreat(args: Prisma.ThreatUpdateArgs): Promise<PrismaThreat> {
    return this.prisma.threat.update(args);
  }
  async deleteThreat(args: Prisma.ThreatDeleteArgs): Promise<PrismaThreat> {
    return this.prisma.threat.delete(args);
  }

  async getProcess(parentId: string): Promise<PrismaProcess | null> {
    return this.prisma.threat
      .findUnique({
        where: { id: parentId },
      })
      .process();
  }

  async getUnit(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.threat
      .findUnique({
        where: { id: parentId },
      })
      .unit();
  }
}
