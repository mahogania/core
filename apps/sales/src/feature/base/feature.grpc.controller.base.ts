/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { FeatureService } from "../feature.service";
import { FeatureCreateInput } from "./FeatureCreateInput";
import { FeatureWhereInput } from "./FeatureWhereInput";
import { FeatureWhereUniqueInput } from "./FeatureWhereUniqueInput";
import { FeatureFindManyArgs } from "./FeatureFindManyArgs";
import { FeatureUpdateInput } from "./FeatureUpdateInput";
import { Feature } from "./Feature";
import { OptionFindManyArgs } from "../../option/base/OptionFindManyArgs";
import { Option } from "../../option/base/Option";
import { OptionWhereUniqueInput } from "../../option/base/OptionWhereUniqueInput";

export class FeatureGrpcControllerBase {
  constructor(protected readonly service: FeatureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Feature })
  @GrpcMethod("FeatureService", "createFeature")
  async createFeature(
    @common.Body() data: FeatureCreateInput
  ): Promise<Feature> {
    return await this.service.createFeature({
      data: {
        ...data,

        bundle: data.bundle
          ? {
              connect: data.bundle,
            }
          : undefined,

        strength: data.strength
          ? {
              connect: data.strength,
            }
          : undefined,

        weakness: data.weakness
          ? {
              connect: data.weakness,
            }
          : undefined,
      },
      select: {
        bundle: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        displayName: true,
        id: true,
        name: true,

        strength: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        weakness: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Feature] })
  @ApiNestedQuery(FeatureFindManyArgs)
  @GrpcMethod("FeatureService", "features")
  async features(@common.Req() request: Request): Promise<Feature[]> {
    const args = plainToClass(FeatureFindManyArgs, request.query);
    return this.service.features({
      ...args,
      select: {
        bundle: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        displayName: true,
        id: true,
        name: true,

        strength: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        weakness: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Feature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FeatureService", "feature")
  async feature(
    @common.Param() params: FeatureWhereUniqueInput
  ): Promise<Feature | null> {
    const result = await this.service.feature({
      where: params,
      select: {
        bundle: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        displayName: true,
        id: true,
        name: true,

        strength: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        weakness: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Feature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FeatureService", "updateFeature")
  async updateFeature(
    @common.Param() params: FeatureWhereUniqueInput,
    @common.Body() data: FeatureUpdateInput
  ): Promise<Feature | null> {
    try {
      return await this.service.updateFeature({
        where: params,
        data: {
          ...data,

          bundle: data.bundle
            ? {
                connect: data.bundle,
              }
            : undefined,

          strength: data.strength
            ? {
                connect: data.strength,
              }
            : undefined,

          weakness: data.weakness
            ? {
                connect: data.weakness,
              }
            : undefined,
        },
        select: {
          bundle: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          displayName: true,
          id: true,
          name: true,

          strength: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          weakness: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Feature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("FeatureService", "deleteFeature")
  async deleteFeature(
    @common.Param() params: FeatureWhereUniqueInput
  ): Promise<Feature | null> {
    try {
      return await this.service.deleteFeature({
        where: params,
        select: {
          bundle: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          displayName: true,
          id: true,
          name: true,

          strength: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          weakness: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/options")
  @ApiNestedQuery(OptionFindManyArgs)
  @GrpcMethod("FeatureService", "findManyOptions")
  async findManyOptions(
    @common.Req() request: Request,
    @common.Param() params: FeatureWhereUniqueInput
  ): Promise<Option[]> {
    const query = plainToClass(OptionFindManyArgs, request.query);
    const results = await this.service.findOptions(params.id, {
      ...query,
      select: {
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        feature: {
          select: {
            id: true,
          },
        },

        id: true,

        price: {
          select: {
            id: true,
          },
        },

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/options")
  @GrpcMethod("FeatureService", "connectOptions")
  async connectOptions(
    @common.Param() params: FeatureWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        connect: body,
      },
    };
    await this.service.updateFeature({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/options")
  @GrpcMethod("FeatureService", "updateOptions")
  async updateOptions(
    @common.Param() params: FeatureWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        set: body,
      },
    };
    await this.service.updateFeature({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/options")
  @GrpcMethod("FeatureService", "disconnectOptions")
  async disconnectOptions(
    @common.Param() params: FeatureWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        disconnect: body,
      },
    };
    await this.service.updateFeature({
      where: params,
      data,
      select: { id: true },
    });
  }
}
