/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Industry } from "./Industry";
import { IndustryCountArgs } from "./IndustryCountArgs";
import { IndustryFindManyArgs } from "./IndustryFindManyArgs";
import { IndustryFindUniqueArgs } from "./IndustryFindUniqueArgs";
import { CreateIndustryArgs } from "./CreateIndustryArgs";
import { UpdateIndustryArgs } from "./UpdateIndustryArgs";
import { DeleteIndustryArgs } from "./DeleteIndustryArgs";
import { BusinessFindManyArgs } from "../../business/base/BusinessFindManyArgs";
import { Business } from "../../business/base/Business";
import { RelationFindManyArgs } from "../../relation/base/RelationFindManyArgs";
import { Relation } from "../../relation/base/Relation";
import { IndustryService } from "../industry.service";
@graphql.Resolver(() => Industry)
export class IndustryResolverBase {
  constructor(protected readonly service: IndustryService) {}

  async _industriesMeta(
    @graphql.Args() args: IndustryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Industry])
  async industries(
    @graphql.Args() args: IndustryFindManyArgs
  ): Promise<Industry[]> {
    return this.service.industries(args);
  }

  @graphql.Query(() => Industry, { nullable: true })
  async industry(
    @graphql.Args() args: IndustryFindUniqueArgs
  ): Promise<Industry | null> {
    const result = await this.service.industry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Industry)
  async createIndustry(
    @graphql.Args() args: CreateIndustryArgs
  ): Promise<Industry> {
    return await this.service.createIndustry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Industry)
  async updateIndustry(
    @graphql.Args() args: UpdateIndustryArgs
  ): Promise<Industry | null> {
    try {
      return await this.service.updateIndustry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Industry)
  async deleteIndustry(
    @graphql.Args() args: DeleteIndustryArgs
  ): Promise<Industry | null> {
    try {
      return await this.service.deleteIndustry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Business], { name: "businesses" })
  async findBusinesses(
    @graphql.Parent() parent: Industry,
    @graphql.Args() args: BusinessFindManyArgs
  ): Promise<Business[]> {
    const results = await this.service.findBusinesses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Relation], { name: "relations" })
  async findRelations(
    @graphql.Parent() parent: Industry,
    @graphql.Args() args: RelationFindManyArgs
  ): Promise<Relation[]> {
    const results = await this.service.findRelations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
