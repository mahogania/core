/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LocationProfileService } from "../locationProfile.service";
import { LocationProfileCreateInput } from "./LocationProfileCreateInput";
import { LocationProfile } from "./LocationProfile";
import { LocationProfileFindManyArgs } from "./LocationProfileFindManyArgs";
import { LocationProfileWhereUniqueInput } from "./LocationProfileWhereUniqueInput";
import { LocationProfileUpdateInput } from "./LocationProfileUpdateInput";

export class LocationProfileControllerBase {
  constructor(protected readonly service: LocationProfileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LocationProfile })
  @swagger.ApiBody({
    type: LocationProfileCreateInput,
  })
  async createLocationProfile(
    @common.Body() data: LocationProfileCreateInput
  ): Promise<LocationProfile> {
    return await this.service.createLocationProfile({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LocationProfile] })
  @ApiNestedQuery(LocationProfileFindManyArgs)
  async locationProfiles(
    @common.Req() request: Request
  ): Promise<LocationProfile[]> {
    const args = plainToClass(LocationProfileFindManyArgs, request.query);
    return this.service.locationProfiles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LocationProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async locationProfile(
    @common.Param() params: LocationProfileWhereUniqueInput
  ): Promise<LocationProfile | null> {
    const result = await this.service.locationProfile({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LocationProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: LocationProfileUpdateInput,
  })
  async updateLocationProfile(
    @common.Param() params: LocationProfileWhereUniqueInput,
    @common.Body() data: LocationProfileUpdateInput
  ): Promise<LocationProfile | null> {
    try {
      return await this.service.updateLocationProfile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LocationProfile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLocationProfile(
    @common.Param() params: LocationProfileWhereUniqueInput
  ): Promise<LocationProfile | null> {
    try {
      return await this.service.deleteLocationProfile({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
