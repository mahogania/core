/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BattlegroundTemplate as PrismaBattlegroundTemplate,
} from "@prisma/client";

export class BattlegroundTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BattlegroundTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.battlegroundTemplate.count(args);
  }

  async battlegroundTemplates(
    args: Prisma.BattlegroundTemplateFindManyArgs
  ): Promise<PrismaBattlegroundTemplate[]> {
    return this.prisma.battlegroundTemplate.findMany(args);
  }
  async battlegroundTemplate(
    args: Prisma.BattlegroundTemplateFindUniqueArgs
  ): Promise<PrismaBattlegroundTemplate | null> {
    return this.prisma.battlegroundTemplate.findUnique(args);
  }
  async createBattlegroundTemplate(
    args: Prisma.BattlegroundTemplateCreateArgs
  ): Promise<PrismaBattlegroundTemplate> {
    return this.prisma.battlegroundTemplate.create(args);
  }
  async updateBattlegroundTemplate(
    args: Prisma.BattlegroundTemplateUpdateArgs
  ): Promise<PrismaBattlegroundTemplate> {
    return this.prisma.battlegroundTemplate.update(args);
  }
  async deleteBattlegroundTemplate(
    args: Prisma.BattlegroundTemplateDeleteArgs
  ): Promise<PrismaBattlegroundTemplate> {
    return this.prisma.battlegroundTemplate.delete(args);
  }
}
