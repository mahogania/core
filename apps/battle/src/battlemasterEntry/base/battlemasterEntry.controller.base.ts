/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BattlemasterEntryService } from "../battlemasterEntry.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BattlemasterEntryCreateInput } from "./BattlemasterEntryCreateInput";
import { BattlemasterEntry } from "./BattlemasterEntry";
import { BattlemasterEntryFindManyArgs } from "./BattlemasterEntryFindManyArgs";
import { BattlemasterEntryWhereUniqueInput } from "./BattlemasterEntryWhereUniqueInput";
import { BattlemasterEntryUpdateInput } from "./BattlemasterEntryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BattlemasterEntryControllerBase {
  constructor(
    protected readonly service: BattlemasterEntryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BattlemasterEntry })
  @nestAccessControl.UseRoles({
    resource: "BattlemasterEntry",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: BattlemasterEntryCreateInput,
  })
  async createBattlemasterEntry(
    @common.Body() data: BattlemasterEntryCreateInput
  ): Promise<BattlemasterEntry> {
    return await this.service.createBattlemasterEntry({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BattlemasterEntry] })
  @ApiNestedQuery(BattlemasterEntryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BattlemasterEntry",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async battlemasterEntries(
    @common.Req() request: Request
  ): Promise<BattlemasterEntry[]> {
    const args = plainToClass(BattlemasterEntryFindManyArgs, request.query);
    return this.service.battlemasterEntries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BattlemasterEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BattlemasterEntry",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async battlemasterEntry(
    @common.Param() params: BattlemasterEntryWhereUniqueInput
  ): Promise<BattlemasterEntry | null> {
    const result = await this.service.battlemasterEntry({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BattlemasterEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BattlemasterEntry",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: BattlemasterEntryUpdateInput,
  })
  async updateBattlemasterEntry(
    @common.Param() params: BattlemasterEntryWhereUniqueInput,
    @common.Body() data: BattlemasterEntryUpdateInput
  ): Promise<BattlemasterEntry | null> {
    try {
      return await this.service.updateBattlemasterEntry({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BattlemasterEntry })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BattlemasterEntry",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBattlemasterEntry(
    @common.Param() params: BattlemasterEntryWhereUniqueInput
  ): Promise<BattlemasterEntry | null> {
    try {
      return await this.service.deleteBattlemasterEntry({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
