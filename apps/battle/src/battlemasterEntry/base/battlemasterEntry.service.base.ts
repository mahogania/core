/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BattlemasterEntry as PrismaBattlemasterEntry,
} from "@prisma/client";

export class BattlemasterEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BattlemasterEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.battlemasterEntry.count(args);
  }

  async battlemasterEntries(
    args: Prisma.BattlemasterEntryFindManyArgs
  ): Promise<PrismaBattlemasterEntry[]> {
    return this.prisma.battlemasterEntry.findMany(args);
  }
  async battlemasterEntry(
    args: Prisma.BattlemasterEntryFindUniqueArgs
  ): Promise<PrismaBattlemasterEntry | null> {
    return this.prisma.battlemasterEntry.findUnique(args);
  }
  async createBattlemasterEntry(
    args: Prisma.BattlemasterEntryCreateArgs
  ): Promise<PrismaBattlemasterEntry> {
    return this.prisma.battlemasterEntry.create(args);
  }
  async updateBattlemasterEntry(
    args: Prisma.BattlemasterEntryUpdateArgs
  ): Promise<PrismaBattlemasterEntry> {
    return this.prisma.battlemasterEntry.update(args);
  }
  async deleteBattlemasterEntry(
    args: Prisma.BattlemasterEntryDeleteArgs
  ): Promise<PrismaBattlemasterEntry> {
    return this.prisma.battlemasterEntry.delete(args);
  }
}
